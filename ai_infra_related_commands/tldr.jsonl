{"command": "2to3", "tasks": [{"task": "Display the changes that would be performed without performing them (dry-run):", "command": "2to3 {{path/to/file.py}}"}, {"task": "Convert a Python 2 file to Python 3:", "command": "2to3 --write {{path/to/file.py}}"}, {"task": "Convert specific Python 2 language features to Python 3:", "command": "2to3 --write {{path/to/file.py}} --fix={{raw_input}} --fix={{print}}"}, {"task": "Convert all Python 2 language features except the specified ones to Python 3:", "command": "2to3 --write {{path/to/file.py}} --nofix={{has_key}} --nofix={{isinstance}}"}, {"task": "Display a list of all available language features that can be converted from Python 2 to Python 3:", "command": "2to3 --list-fixes"}, {"task": "Convert all Python 2 files in a directory to Python 3:", "command": "2to3 --output-dir={{path/to/python3_directory}} --write-unchanged-files --nobackups {{path/to/python2_directory}}"}, {"task": "Run 2to3 with multiple threads:", "command": "2to3 --processes={{4}} --output-dir={{path/to/python3_directory}} --write --nobackups --no-diff {{path/to/python2_directory}}"}]}
{"command": "7z", "tasks": [{"task": "[a]dd a file or directory to a new or existing archive:", "command": "7z a {{path/to/archive.7z}} {{path/to/file_or_directory}}"}, {"task": "Encrypt an existing archive (including filenames):", "command": "7z a {{path/to/encrypted.7z}} -p{{password}} -mhe=on {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive preserving the original directory structure:", "command": "7z x {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive to a specific directory:", "command": "7z x {{path/to/archive.7z}} -o{{path/to/output}}"}, {"task": "E[x]tract an archive to `stdout`:", "command": "7z x {{path/to/archive.7z}} -so"}, {"task": "[a]rchive using a specific archive type:", "command": "7z a -t{{7z|bzip2|gzip|lzip|tar|zip}} {{path/to/archive.7z}} {{path/to/file_or_directory}}"}, {"task": "[l]ist the contents of an archive:", "command": "7z l {{path/to/archive.7z}}"}, {"task": "List available archive types:", "command": "7z i"}]}
{"command": "7za", "tasks": [{"task": "[a]rchive a file or directory:", "command": "7za a {{path/to/archive.7z}} {{path/to/file_or_directory}}"}, {"task": "Encrypt an existing archive (including file names):", "command": "7za a {{path/to/encrypted.7z}} -p{{password}} -mhe={{on}} {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive preserving the original directory structure:", "command": "7za x {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive to a specific directory:", "command": "7za x {{path/to/archive.7z}} -o{{path/to/output}}"}, {"task": "E[x]tract an archive to `stdout`:", "command": "7za x {{path/to/archive.7z}} -so"}, {"task": "[a]rchive using a specific archive type:", "command": "7za a -t{{7z|bzip2|gzip|lzip|tar|...}} {{path/to/archive.7z}} {{path/to/file_or_directory}}"}, {"task": "[l]ist the contents of an archive:", "command": "7za l {{path/to/archive.7z}}"}, {"task": "List available archive types:", "command": "7za i"}]}
{"command": "7zr", "tasks": [{"task": "[a]rchive a file or directory:", "command": "7zr a {{path/to/archive.7z}} {{path/to/file_or_directory}}"}, {"task": "Encrypt an existing archive (including file names):", "command": "7zr a {{path/to/encrypted.7z}} -p{{password}} -mhe={{on}} {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive preserving the original directory structure:", "command": "7zr x {{path/to/archive.7z}}"}, {"task": "E[x]tract an archive to a specific directory:", "command": "7zr x {{path/to/archive.7z}} -o{{path/to/output}}"}, {"task": "E[x]tract an archive to `stdout`:", "command": "7zr x {{path/to/archive.7z}} -so"}, {"task": "[l]ist the contents of an archive:", "command": "7zr l {{path/to/archive.7z}}"}, {"task": "List available archive types:", "command": "7zr i"}]}
{"command": "[", "tasks": [{"task": "Test if a given variable is equal/not equal to the specified string:", "command": "[ \"${{variable}}\" {{==|!=}} \"{{string}}\" ]"}, {"task": "Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number:", "command": "[ \"${{variable}}\" -{{eq|ne|gt|lt|ge|le}} {{integer}} ]"}, {"task": "Test if the specified variable has a [n]on-empty value:", "command": "[ -n \"${{variable}}\" ]"}, {"task": "Test if the specified variable has an empty value:", "command": "[ -z \"${{variable}}\" ]"}, {"task": "Test if the specified [f]ile exists:", "command": "[ -f {{path/to/file}} ]"}, {"task": "Test if the specified [d]irectory exists:", "command": "[ -d {{path/to/directory}} ]"}, {"task": "Test if the specified file or directory [e]xists:", "command": "[ -e {{path/to/file_or_directory}} ]"}]}
{"command": "[[", "tasks": [{"task": "Test if a given variable is equal/not equal to the specified string:", "command": "[[ ${{variable}} {{==|!=}} \"{{string}}\" ]]"}, {"task": "Test if a given string conforms the specified glob/regex:", "command": "[[ ${{variable}} {{==|=~}} {{pattern}} ]]"}, {"task": "Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number:", "command": "[[ ${{variable}} -{{eq|ne|gt|lt|ge|le}} {{integer}} ]]"}, {"task": "Test if the specified variable has a [n]on-empty value:", "command": "[[ -n ${{variable}} ]]"}, {"task": "Test if the specified variable has an empty value:", "command": "[[ -z ${{variable}} ]]"}, {"task": "Test if the specified [f]ile exists:", "command": "[[ -f {{path/to/file}} ]]"}, {"task": "Test if the specified [d]irectory exists:", "command": "[[ -d {{path/to/directory}} ]]"}, {"task": "Test if the specified file or directory [e]xists:", "command": "[[ -e {{path/to/file_or_directory}} ]]"}]}
{"command": "aapt", "tasks": [{"task": "List files contained in an APK archive:", "command": "aapt list {{path/to/app.apk}}"}, {"task": "Display an app's metadata (version, permissions, etc.):", "command": "aapt dump badging {{path/to/app.apk}}"}, {"task": "Create a new APK archive with files from the specified directory:", "command": "aapt package -F {{path/to/app.apk}} {{path/to/directory}}"}]}
{"command": "ab", "tasks": [{"task": "Execute 100 HTTP GET requests to a given URL:", "command": "ab -n {{100}} {{url}}"}, {"task": "Execute 100 HTTP GET requests, in concurrent batches of 10, to a URL:", "command": "ab -n {{100}} -c {{10}} {{url}}"}, {"task": "Execute 100 HTTP POST requests to a URL, using a JSON payload from a file:", "command": "ab -n {{100}} -T {{application/json}} -p {{path/to/file.json}} {{url}}"}, {"task": "Use HTTP [K]eep Alive, i.e. perform multiple requests within one HTTP session:", "command": "ab -k {{url}}"}, {"task": "Set the maximum number of seconds to spend for benchmarking:", "command": "ab -t {{60}} {{url}}"}]}
{"command": "abduco", "tasks": [{"task": "List sessions:", "command": "abduco"}, {"task": "Attach to a session, creating it if it doesn't exist:", "command": "abduco -A {{name}} {{bash}}"}, {"task": "Attach to a session with `dvtm`, creating it if it doesn't exist:", "command": "abduco -A {{name}}"}, {"task": "Detach from a session:", "command": "Ctrl + \\"}, {"task": "Attach to a session in read-only mode:", "command": "abduco -Ar {{name}}"}]}
{"command": "ac", "tasks": [{"task": "Print how long the current user has been connected in hours:", "command": "ac"}, {"task": "Print how long users have been connected in hours:", "command": "ac -p"}, {"task": "Print how long a particular user has been connected in hours:", "command": "ac -p {{username}}"}, {"task": "Print how long a particular user has been connected in hours per day (with total):", "command": "ac -dp {{username}}"}]}
{"command": "ack", "tasks": [{"task": "Search for files containing a string or regular expression in the current directory recursively:", "command": "ack \"{{search_pattern}}\""}, {"task": "Search for a case-insensitive pattern:", "command": "ack --ignore-case \"{{search_pattern}}\""}, {"task": "Search for lines matching a pattern, printing [o]nly the matched text and not the rest of the line:", "command": "ack -o \"{{search_pattern}}\""}, {"task": "Limit search to files of a specific type:", "command": "ack --type={{ruby}} \"{{search_pattern}}\""}, {"task": "Do not search in files of a specific type:", "command": "ack --type=no{{ruby}} \"{{search_pattern}}\""}, {"task": "Count the total number of matches found:", "command": "ack --count --no-filename \"{{search_pattern}}\""}, {"task": "Print the file names and the number of matches for each file only:", "command": "ack --count --files-with-matches \"{{search_pattern}}\""}, {"task": "List all the values that can be used with `--type`:", "command": "ack --help-types"}]}
{"command": "acme.sh --dns", "tasks": [{"task": "Issue a certificate using an automatic DNS API mode:", "command": "acme.sh --issue --dns {{gnd_gd}} --domain {{example.com}}"}, {"task": "Issue a wildcard certificate (denoted by an asterisk) using an automatic DNS API mode:", "command": "acme.sh --issue --dns {{dns_namesilo}} --domain {{example.com}} --domain {{*.example.com}}"}, {"task": "Issue a certificate using a DNS alias mode:", "command": "acme.sh --issue --dns {{dns_cf}} --domain {{example.com}} --challenge-alias {{alias-for-example-validation.com}}"}, {"task": "Issue a certificate while disabling automatic Cloudflare/Google DNS polling after the DNS record is added by specifying a custom wait time in seconds:", "command": "acme.sh --issue --dns {{dns_namecheap}} --domain {{example.com}} --dnssleep {{300}}"}, {"task": "Issue a certificate using a manual DNS mode:", "command": "acme.sh --issue --dns --domain {{example.com}} --yes-I-know-dns-manual-mode-enough-go-ahead-please"}]}
{"command": "acme.sh", "tasks": [{"task": "Issue a certificate using webroot mode:", "command": "acme.sh --issue --domain {{example.com}} --webroot {{/path/to/webroot}}"}, {"task": "Issue a certificate for multiple domains using standalone mode using port 80:", "command": "acme.sh --issue --standalone --domain {{example.com}} --domain {{www.example.com}}"}, {"task": "Issue a certificate using standalone TLS mode using port 443:", "command": "acme.sh --issue --alpn --domain {{example.com}}"}, {"task": "Issue a certificate using a working Nginx configuration:", "command": "acme.sh --issue --nginx --domain {{example.com}}"}, {"task": "Issue a certificate using a working Apache configuration:", "command": "acme.sh --issue --apache --domain {{example.com}}"}, {"task": "Issue a wildcard (\\*) certificate using an automatic DNS API mode:", "command": "acme.sh --issue --dns {{dns_cf}} --domain {{*.example.com}}"}, {"task": "Install certificate files into the specified locations (useful for automatic certificate renewal):", "command": "acme.sh --install-cert -d {{example.com}} --key-file {{/path/to/example.com.key}} --fullchain-file {{/path/to/example.com.cer}} --reloadcmd {{\"systemctl force-reload nginx\"}}"}]}
{"command": "act", "tasks": [{"task": "List the available actions:", "command": "act -l"}, {"task": "Run the default event:", "command": "act"}, {"task": "Run a specific event:", "command": "act {{event_type}}"}, {"task": "Run a specific action:", "command": "act -a {{action_id}}"}, {"task": "Do not actually run the actions (i.e. a dry run):", "command": "act -n"}, {"task": "Show verbose logs:", "command": "act -v"}, {"task": "Run a specific workflow:", "command": "act push -W {{path/to/workflow}}"}]}
{"command": "acyclic", "tasks": [{"task": "Make a directed graph acyclic by reversing some edges:", "command": "acyclic {{path/to/input.gv}} > {{path/to/output.gv}}"}, {"task": "Print if a graph is acyclic, has a cycle, or is undirected, producing no output graph:", "command": "acyclic -v -n {{path/to/input.gv}}"}, {"task": "Display help for `acyclic`:", "command": "acyclic -?"}]}
{"command": "adb install", "tasks": [{"task": "Push an Android application to an emulator/device:", "command": "adb install {{path/to/file.apk}}"}, {"task": "Push an Android application to a specific emulator/device (overrides `$ANDROID_SERIAL`):", "command": "adb -s {{serial_number}} install {{path/to/file.apk}}"}, {"task": "Reinstall an existing app, keeping its data:", "command": "adb install -r {{path/to/file.apk}}"}, {"task": "Push an Android application allowing version code downgrade (debuggable packages only):", "command": "adb install -d {{path/to/file.apk}}"}, {"task": "Grant all permissions listed in the app manifest:", "command": "adb install -g {{path/to/file.apk}}"}, {"task": "Quickly update an installed package by only updating the parts of the APK that changed:", "command": "adb install --fastdeploy {{path/to/file.apk}}"}]}
{"command": "adb logcat", "tasks": [{"task": "Display system logs:", "command": "adb logcat"}, {"task": "Display lines that match a regular expression:", "command": "adb logcat -e {{regular_expression}}"}, {"task": "Display logs for a tag in a specific mode ([V]erbose, [D]ebug, [I]nfo, [W]arning, [E]rror, [F]atal, [S]ilent), filtering other tags:", "command": "adb logcat {{tag}}:{{mode}} *:S"}, {"task": "Display logs for React Native applications in [V]erbose mode [S]ilencing other tags:", "command": "adb logcat ReactNative:V ReactNativeJS:V *:S"}, {"task": "Display logs for all tags with priority level [W]arning and higher:", "command": "adb logcat *:W"}, {"task": "Display logs for a specific PID:", "command": "adb logcat --pid={{pid}}"}, {"task": "Display logs for the process of a specific package:", "command": "adb logcat --pid=$(adb shell pidof -s {{package}})"}, {"task": "Color the log (usually use with filters):", "command": "adb logcat -v color"}]}
{"command": "adb reverse", "tasks": [{"task": "List all reverse socket connections from emulators and devices:", "command": "adb reverse --list"}, {"task": "Reverse a TCP port from an emulator or device to localhost:", "command": "adb reverse tcp:{{remote_port}} tcp:{{local_port}}"}, {"task": "Remove a reverse socket connections from an emulator or device:", "command": "adb reverse --remove tcp:{{remote_port}}"}, {"task": "Remove all reverse socket connections from all emulators and devices:", "command": "adb reverse --remove-all"}]}
{"command": "adb shell", "tasks": [{"task": "Start a remote interactive shell on the emulator or device:", "command": "adb shell"}, {"task": "Get all the properties from emulator or device:", "command": "adb shell getprop"}, {"task": "Revert all runtime permissions to their default:", "command": "adb shell pm reset-permissions"}, {"task": "Revoke a dangerous permission for an application:", "command": "adb shell pm revoke {{package}} {{permission}}"}, {"task": "Trigger a key event:", "command": "adb shell input keyevent {{keycode}}"}, {"task": "Clear the data of an application on an emulator or device:", "command": "adb shell pm clear {{package}}"}, {"task": "Start an activity on emulator or device:", "command": "adb shell am start -n {{package}}/{{activity}}"}, {"task": "Start the home activity on an emulator or device:", "command": "adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN"}]}
{"command": "adb", "tasks": [{"task": "Check whether the adb server process is running and start it:", "command": "adb start-server"}, {"task": "Terminate the adb server process:", "command": "adb kill-server"}, {"task": "Start a remote shell in the target emulator/device instance:", "command": "adb shell"}, {"task": "Push an Android application to an emulator/device:", "command": "adb install -r {{path/to/file.apk}}"}, {"task": "Copy a file/directory from the target device:", "command": "adb pull {{path/to/device_file_or_directory}} {{path/to/local_destination_directory}}"}, {"task": "Copy a file/directory to the target device:", "command": "adb push {{path/to/local_file_or_directory}} {{path/to/device_destination_directory}}"}, {"task": "Get a list of connected devices:", "command": "adb devices"}]}
{"command": "AdGuardHome", "tasks": [{"task": "Run AdGuard Home:", "command": "AdGuardHome"}, {"task": "Run AdGuard Home with a specific config:", "command": "AdGuardHome --config {{path/to/AdGuardHome.yaml}}"}, {"task": "Set the work directory for data to be stored in:", "command": "AdGuardHome --work-dir {{path/to/directory}}"}, {"task": "Install or uninstall AdGuard Home as a service:", "command": "AdGuardHome --service {{install|uninstall}}"}, {"task": "Start the AdGuard Home service:", "command": "AdGuardHome --service start"}, {"task": "Reload the configuration for the AdGuard Home service:", "command": "AdGuardHome --service reload"}, {"task": "Stop or restart the AdGuard Home service:", "command": "AdGuardHome --service {{stop|restart}}"}]}
{"command": "adscript", "tasks": [{"task": "Compile a file to an object file:", "command": "adscript --output {{path/to/file.o}} {{path/to/input_file.adscript}}"}, {"task": "Compile and link a file to a standalone executable:", "command": "adscript --executable --output {{path/to/file}} {{path/to/input_file.adscript}}"}, {"task": "Compile a file to LLVM IR instead of native machine code:", "command": "adscript --llvm-ir --output {{path/to/file.ll}} {{path/to/input_file.adscript}}"}, {"task": "Cross-compile a file to an object file for a foreign CPU architecture or operating system:", "command": "adscript --target-triple {{i386-linux-elf}} --output {{path/to/file.o}} {{path/to/input_file.adscript}}"}]}
{"command": "afconvert", "tasks": [{"task": "Use a specific extension (default: `aff`):", "command": "afconvert -a {{extension}} {{path/to/input_file}} {{path/to/output_file1 path/to/output_file2 ...}}"}, {"task": "Use a specific compression level (default: `7`):", "command": "afconvert -X{{0..7}} {{path/to/input_file}} {{path/to/output_file1 path/to/output_file2 ...}}"}]}
{"command": "ag", "tasks": [{"task": "Find files containing \"foo\", and print the line matches in context:", "command": "ag {{foo}}"}, {"task": "Find files containing \"foo\" in a specific directory:", "command": "ag {{foo}} {{path/to/directory}}"}, {"task": "Find files containing \"foo\", but only list the filenames:", "command": "ag -l {{foo}}"}, {"task": "Find files containing \"FOO\" case-insensitively, and print only the match, rather than the whole line:", "command": "ag -i -o {{FOO}}"}, {"task": "Find \"foo\" in files with a name matching \"bar\":", "command": "ag {{foo}} -G {{bar}}"}, {"task": "Find files whose contents match a regular expression:", "command": "ag '{{^ba(r|z)$}}'"}, {"task": "Find files with a name matching \"foo\":", "command": "ag -g {{foo}}"}]}
{"command": "agate", "tasks": [{"task": "Run and generate a private key and certificate:", "command": "agate --content {{path/to/content/}} --addr {{[::]:1965}} --addr {{0.0.0.0:1965}} --hostname {{example.com}} --lang {{en-US}}"}, {"task": "Run server:", "command": "agate {{path/to/file}}"}, {"task": "Display help:", "command": "agate -h"}]}
{"command": "age-keygen", "tasks": [{"task": "Generate a key pair, save it to an unencrypted file and print the public key to `stdout`:", "command": "age-keygen --output {{path/to/file}}"}, {"task": "Convert an identity to a recipient and print the public key to `stdout`:", "command": "age-keygen -y {{path/to/file}}"}]}
{"command": "age", "tasks": [{"task": "Generate an encrypted file that can be decrypted with a passphrase:", "command": "age --passphrase --output {{path/to/encrypted_file}} {{path/to/unencrypted_file}}"}, {"task": "Encrypt a file with one or more public keys entered as literals (repeat the `--recipient` flag to specify multiple public keys):", "command": "age --recipient {{public_key}} --output {{path/to/encrypted_file}} {{path/to/unencrypted_file}}"}, {"task": "Encrypt a file to one or more recipients with their public keys specified in a file (one per line):", "command": "age --recipients-file {{path/to/recipients_file}} --output {{path/to/encrypted_file}} {{path/to/unencrypted_file}}"}, {"task": "Decrypt a file with a passphrase:", "command": "age --decrypt --output {{path/to/decrypted_file}} {{path/to/encrypted_file}}"}, {"task": "Decrypt a file with a private key file:", "command": "age --decrypt --identity {{path/to/private_key_file}} --output {{path/to/decrypted_file}} {{path/to/encrypted_file}}"}]}
{"command": "aircrack-ng", "tasks": [{"task": "Crack key from capture file using [w]ordlist:", "command": "aircrack-ng -w {{path/to/wordlist.txt}} {{path/to/capture.cap}}"}, {"task": "Crack key from capture file using [w]ordlist and the access point's [e]ssid:", "command": "aircrack-ng -w {{path/to/wordlist.txt}} -e {{essid}} {{path/to/capture.cap}}"}, {"task": "Crack key from capture file using [w]ordlist and the access point's MAC address:", "command": "aircrack-ng -w {{path/to/wordlist.txt}} --bssid {{mac}} {{path/to/capture.cap}}"}]}
{"command": "airdecap-ng", "tasks": [{"task": "Remove wireless headers from an open network capture file and use the access point's MAC address to filter:", "command": "airdecap-ng -b {{ap_mac}} {{path/to/capture.cap}}"}, {"task": "Decrypt a WEP encrypted capture file using the key in hex format:", "command": "airdecap-ng -w {{hex_key}} {{path/to/capture.cap}}"}, {"task": "Decrypt a WPA/WPA2 encrypted capture file using the access point's [e]ssid and [p]assword:", "command": "airdecap-ng -e {{essid}} -p {{password}} {{path/to/capture.cap}}"}, {"task": "Decrypt a WPA/WPA2 encrypted capture file preserving the headers using the access point's [e]ssid and [p]assword:", "command": "airdecap-ng -l -e {{essid}} -p {{password}} {{path/to/capture.cap}}"}, {"task": "Decrypt a WPA/WPA2 encrypted capture file using the access point's [e]ssid and [p]assword and use its MAC address to filter:", "command": "airdecap-ng -b {{ap_mac}} -e {{essid}} -p {{password}} {{path/to/capture.cap}}"}]}
{"command": "aireplay-ng", "tasks": [{"task": "Send a specific number of disassociate packets given an access point's MAC address, a client's MAC address and an interface:", "command": "sudo aireplay-ng --deauth {{count}} --bssid {{ap_mac}} --dmac {{client_mac}} {{interface}}"}]}
{"command": "airmon-ng", "tasks": [{"task": "List wireless devices and their statuses:", "command": "sudo airmon-ng"}, {"task": "Turn on monitor mode for a specific device:", "command": "sudo airmon-ng start {{wlan0}}"}, {"task": "Kill disturbing processes that use wireless devices:", "command": "sudo airmon-ng check kill"}, {"task": "Turn off monitor mode for a specific network interface:", "command": "sudo airmon-ng stop {{wlan0mon}}"}]}
{"command": "airodump-ng", "tasks": [{"task": "Capture packets and display information about a wireless network:", "command": "sudo airodump-ng {{interface}}"}, {"task": "Capture packets and display information about a wireless network given the MAC address and channel, and save the output to a file:", "command": "sudo airodump-ng --channel {{channel}} --write {{path/to/file}} --bssid {{mac}} {{interface}}"}]}
{"command": "airpaste", "tasks": [{"task": "Wait for a message and display it when received:", "command": "airpaste"}, {"task": "Send text:", "command": "echo {{text}} | airpaste"}, {"task": "Send a file:", "command": "airpaste < {{path/to/file}}"}, {"task": "Receive a file:", "command": "airpaste > {{path/to/file}}"}, {"task": "Create or join a channel:", "command": "airpaste {{channel_name}}"}]}
{"command": "airshare", "tasks": [{"task": "Share files or directories:", "command": "airshare {{code}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Receive a file:", "command": "airshare {{code}}"}, {"task": "Host a receiving server (use this to be able to upload files using the web interface):", "command": "airshare --upload {{code}}"}, {"task": "Send files or directories to a receiving server:", "command": "airshare --upload {{code}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Send files whose paths have been copied to the clipboard:", "command": "airshare --file-path {{code}}"}, {"task": "Receive a file and copy it to the clipboard:", "command": "airshare --clip-receive {{code}}"}]}
{"command": "ajson", "tasks": [{"task": "Read JSON from a file and execute a specified JSONPath expression:", "command": "ajson '{{$..json[?(@.path)]}}' {{path/to/file.json}}"}, {"task": "Read JSON from `stdin` and execute a specified JSONPath expression:", "command": "cat {{path/to/file.json}} | ajson '{{$..json[?(@.path)]}}'"}, {"task": "Read JSON from a URL and evaluate a specified JSONPath expression:", "command": "ajson '{{avg($..price)}}' '{{https://example.com/api/}}'"}, {"task": "Read some simple JSON and calculate a value:", "command": "echo '{{3}}' | ajson '{{2 * pi * $}}'"}]}
{"command": "alacritty", "tasks": [{"task": "Open a new Alacritty window:", "command": "alacritty"}, {"task": "Run in a specific directory:", "command": "alacritty --working-directory {{path/to/directory}}"}, {"task": "Run a command in a new Alacritty window:", "command": "alacritty -e {{command}}"}, {"task": "Specify alternative configuration file (defaults to `$XDG_CONFIG_HOME/alacritty/alacritty.yml`):", "command": "alacritty --config-file {{path/to/config.yml}}"}, {"task": "Run with live config reload enabled (can also be enabled by default in `alacritty.yml`):", "command": "alacritty --live-config-reload --config-file {{path/to/config.yml}}"}]}
{"command": "alex", "tasks": [{"task": "Analyze text from `stdin`:", "command": "echo {{His network looks good}} | alex --stdin"}, {"task": "Analyze all files in the current directory:", "command": "alex"}, {"task": "Analyze a specific file:", "command": "alex {{textfile.md}}"}, {"task": "Analyze all Markdown files except `example.md`:", "command": "alex *.md !{{example.md}}"}]}
{"command": "alias", "tasks": [{"task": "List all aliases:", "command": "alias"}, {"task": "Create a generic alias:", "command": "alias {{word}}=\"{{command}}\""}, {"task": "View the command associated to a given alias:", "command": "alias {{word}}"}, {"task": "Remove an aliased command:", "command": "unalias {{word}}"}, {"task": "Turn `rm` into an interactive command:", "command": "alias {{rm}}=\"{{rm --interactive}}\""}, {"task": "Create `la` as a shortcut for `ls --all`:", "command": "alias {{la}}=\"{{ls --all}}\""}]}
{"command": "amass db", "tasks": [{"task": "List all performed enumerations in the database:", "command": "amass db -dir {{path/to/database_directory}} -list"}, {"task": "Show results for a specified enumeration index and domain name:", "command": "amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -show"}, {"task": "List all found subdomains of a domain within an enumeration:", "command": "amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -names"}, {"task": "Show a summary of the found subdomains within an enumeration:", "command": "amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -summary"}]}
{"command": "amass enum", "tasks": [{"task": "Passively find subdomains of a domain:", "command": "amass enum -passive -d {{domain_name}}"}, {"task": "Find subdomains of a domain and actively verify them attempting to resolve the found subdomains:", "command": "amass enum -active -d {{domain_name}} -p {{80,443,8080}}"}, {"task": "Do a brute force search for subdomains:", "command": "amass enum -brute -d {{domain_name}}"}, {"task": "Save the results to a text file:", "command": "amass enum -o {{output_file}} -d {{domain_name}}"}, {"task": "Save the results to a database:", "command": "amass enum -o {{output_file}} -dir {{path/to/database_directory}}"}]}
{"command": "amass intel", "tasks": [{"task": "Find root domains in an IP address range:", "command": "amass intel -addr {{192.168.0.1-254}}"}, {"task": "Use active recon methods:", "command": "amass intel -active -addr {{192.168.0.1-254}}"}, {"task": "Find root domains related to a domain:", "command": "amass intel -whois -d {{domain_name}}"}, {"task": "Find ASNs belonging to an organisation:", "command": "amass intel -org {{organisation_name}}"}, {"task": "Find root domains belonging to a given Autonomous System Number:", "command": "amass intel -asn {{asn}}"}, {"task": "Save results to a text file:", "command": "amass intel -o {{output_file}} -whois -d {{domain_name}}"}]}
{"command": "amass track", "tasks": [{"task": "Show the difference between the last two enumerations of the specified domain:", "command": "amass track -dir {{path/to/database_directory}} -d {{domain_name}} -last 2"}, {"task": "Show the difference between a certain point in time and the last enumeration:", "command": "amass track -dir {{path/to/database_directory}} -d {{domain_name}} -since {{01/02 15:04:05 2006 MST}}"}]}
{"command": "amass viz", "tasks": [{"task": "Generate a D3.js visualization based on database data:", "command": "amass viz -d3 -dir {{path/to/database_directory}}"}, {"task": "Generate a DOT file based on database data:", "command": "amass viz -dot -dir {{path/to/database_directory}}"}, {"task": "Generate a Gephi Graph Exchange XML Format (GEXF) file based on database data:", "command": "amass viz -gexf -dir {{path/to/database_directory}}"}, {"task": "Generate a Graphistry JSON file based on database data:", "command": "amass viz -graphistry -dir {{path/to/database_directory}}"}, {"task": "Generate a Maltego CSV file based on database data:", "command": "amass viz -maltego -dir {{path/to/database_directory}}"}]}
{"command": "amass", "tasks": [{"task": "Execute an Amass subcommand:", "command": "amass {{subcommand}}"}, {"task": "Show general help:", "command": "amass -help"}, {"task": "Show help on an Amass subcommand (like `intel`, `enum`, etc.):", "command": "amass -help {{subcommand}}"}, {"task": "Display version:", "command": "amass -version"}]}
{"command": "androguard", "tasks": [{"task": "Display Android app manifest:", "command": "androguard axml {{path/to/app.apk}}"}, {"task": "Display app metadata (version and app ID):", "command": "androguard apkid {{path/to/app.apk}}"}, {"task": "Decompile Java code from an app:", "command": "androguard decompile {{path/to/app.apk}} --output {{path/to/directory}}"}]}
{"command": "ani-cli", "tasks": [{"task": "Search anime by name:", "command": "ani-cli \"{{anime_name}}\""}, {"task": "Download episode:", "command": "ani-cli -d \"{{anime_name}}\""}, {"task": "Use VLC as the media player:", "command": "ani-cli -v \"{{anime_name}}\""}, {"task": "Specify episode to watch:", "command": "ani-cli -a {{episode_number}} \"{{anime_name}}\""}, {"task": "Continue watching anime from history:", "command": "ani-cli -c"}, {"task": "Update `ani-cli`:", "command": "ani-cli -U"}]}
{"command": "anki", "tasks": [{"task": "Launch `anki`:", "command": "anki"}, {"task": "Launch `anki` with a specific profile:", "command": "anki -p {{profile_name}}"}, {"task": "Launch `anki` in a specific language:", "command": "anki -l {{language}}"}, {"task": "Launch `anki` from a specific directory instead of the default (`~/Anki`):", "command": "anki -b {{path/to/directory}}"}]}
{"command": "ansible-doc", "tasks": [{"task": "List available action plugins (modules):", "command": "ansible-doc --list"}, {"task": "List available plugins of a specific type:", "command": "ansible-doc --type {{become|cache|callback|cliconf|connection|...}} --list"}, {"task": "Show information about a specific action plugin (module):", "command": "ansible-doc {{plugin_name}}"}, {"task": "Show information about a plugin with a specific type:", "command": "ansible-doc --type {{become|cache|callback|cliconf|connection|...}} {{plugin_name}}"}, {"task": "Show the playbook snippet for action plugin (modules):", "command": "ansible-doc --snippet {{plugin_name}}"}, {"task": "Show information about an action plugin (module) as JSON:", "command": "ansible-doc --json {{plugin_name}}"}]}
{"command": "ansible-galaxy", "tasks": [{"task": "Install a role:", "command": "ansible-galaxy install {{username}}.{{role_name}}"}, {"task": "Remove a role:", "command": "ansible-galaxy remove {{username}}.{{role_name}}"}, {"task": "List installed roles:", "command": "ansible-galaxy list"}, {"task": "Search for a given role:", "command": "ansible-galaxy search {{role_name}}"}, {"task": "Create a new role:", "command": "ansible-galaxy init {{role_name}}"}, {"task": "Get information about a user role:", "command": "ansible-galaxy role info {{username}}.{{role_name}}"}, {"task": "Get information about a collection:", "command": "ansible-galaxy collection info {{username}}.{{collection_name}}"}]}
{"command": "ansible-inventory", "tasks": [{"task": "Display the default inventory:", "command": "ansible-inventory --list"}, {"task": "Display a custom inventory:", "command": "ansbile-inventory --list --inventory {{path/to/file_or_script_or_directory}}"}, {"task": "Display the default inventory in YAML:", "command": "ansible-inventory --list --yaml"}, {"task": "Dump the default inventory to a file:", "command": "ansible-inventory --list --output {{path/to/file}}"}]}
{"command": "ansible-playbook", "tasks": [{"task": "Run tasks in playbook:", "command": "ansible-playbook {{playbook}}"}, {"task": "Run tasks in playbook with custom host inventory:", "command": "ansible-playbook {{playbook}} -i {{inventory_file}}"}, {"task": "Run tasks in playbook with extra variables defined via the command-line:", "command": "ansible-playbook {{playbook}} -e \"{{variable1}}={{value1}} {{variable2}}={{value2}}\""}, {"task": "Run tasks in playbook with extra variables defined in a JSON file:", "command": "ansible-playbook {{playbook}} -e \"@{{variables.json}}\""}, {"task": "Run tasks in playbook for the given tags:", "command": "ansible-playbook {{playbook}} --tags {{tag1,tag2}}"}, {"task": "Run tasks in a playbook starting at a specific task:", "command": "ansible-playbook {{playbook}} --start-at {{task_name}}"}]}
{"command": "ansible-pull", "tasks": [{"task": "Pull a playbook from a VCS and execute a default local.yml playbook:", "command": "ansible-pull -U {{repository_url}}"}, {"task": "Pull a playbook from a VCS and execute a specific playbook:", "command": "ansible-pull -U {{repository_url}} {{playbook}}"}, {"task": "Pull a playbook from a VCS at a specific branch and execute a specific playbook:", "command": "ansible-pull -U {{repository_url}} -C {{branch}} {{playbook}}"}, {"task": "Pull a playbook from a VCS, specify hosts file and execute a specific playbook:", "command": "ansible-pull -U {{repository_url}} -i {{hosts_file}} {{playbook}}"}]}
{"command": "ansible-vault", "tasks": [{"task": "Create a new encrypted vault file with a prompt for a password:", "command": "ansible-vault create {{vault_file}}"}, {"task": "Create a new encrypted vault file using a vault key file to encrypt it:", "command": "ansible-vault create --vault-password-file={{password_file}} {{vault_file}}"}, {"task": "Encrypt an existing file using an optional password file:", "command": "ansible-vault encrypt --vault-password-file={{password_file}} {{vault_file}}"}, {"task": "Encrypt a string using Ansible's encrypted string format, displaying interactive prompts:", "command": "ansible-vault encrypt_string"}, {"task": "View an encrypted file, using a password file to decrypt:", "command": "ansible-vault view --vault-password-file={{password_file}} {{vault_file}}"}, {"task": "Re-key already encrypted vault file with a new password file:", "command": "ansible-vault rekey --vault-password-file={{old_password_file}} --new-vault-password-file={{new_password_file}} {{vault_file}}"}]}
{"command": "ansible", "tasks": [{"task": "List hosts belonging to a group:", "command": "ansible {{group}} --list-hosts"}, {"task": "Ping a group of hosts by invoking the ping module:", "command": "ansible {{group}} -m ping"}, {"task": "Display facts about a group of hosts by invoking the setup module:", "command": "ansible {{group}} -m setup"}, {"task": "Execute a command on a group of hosts by invoking command module with arguments:", "command": "ansible {{group}} -m command -a '{{my_command}}'"}, {"task": "Execute a command with administrative privileges:", "command": "ansible {{group}} --become --ask-become-pass -m command -a '{{my_command}}'"}, {"task": "Execute a command using a custom inventory file:", "command": "ansible {{group}} -i {{inventory_file}} -m command -a '{{my_command}}'"}, {"task": "List the groups in an inventory:", "command": "ansible localhost -m debug -a '{{var=groups.keys()}}'"}]}
{"command": "ansiweather", "tasks": [{"task": "Display a forecast using metric units for the next five days for Rzeszow, Poland:", "command": "ansiweather -u {{metric}} -f {{5}} -l {{Rzeszow,PL}}"}, {"task": "Display a forecast showing symbols and daylight data for your current location:", "command": "ansiweather -s {{true}} -d {{true}}"}, {"task": "Display a forecast showing wind and humidity data for your current location:", "command": "ansiweather -w {{true}} -h {{true}}"}]}
{"command": "ant", "tasks": [{"task": "Build a project with default build file `build.xml`:", "command": "ant"}, {"task": "Build a project using build file other than `build.xml`:", "command": "ant -f {{buildfile.xml}}"}, {"task": "Print information on possible targets for this project:", "command": "ant -p"}, {"task": "Print debugging information:", "command": "ant -d"}, {"task": "Execute all targets that do not depend on fail target(s):", "command": "ant -k"}]}
{"command": "antibody", "tasks": [{"task": "Bundle all plugins for static loading:", "command": "antibody bundle < {{~/.zsh_plugins.txt}} > {{~/.zsh_plugins.sh}}"}, {"task": "Update all bundles:", "command": "antibody update"}, {"task": "List all installed plugins:", "command": "antibody list"}]}
{"command": "apg", "tasks": [{"task": "Create random passwords (default password length is 8):", "command": "apg"}, {"task": "Create a password with at least 1 symbol (S), 1 number (N), 1 uppercase (C), 1 lowercase (L):", "command": "apg -M SNCL"}, {"task": "Create a password with 16 characters:", "command": "apg -m {{16}}"}, {"task": "Create a password with maximum length of 16:", "command": "apg -x {{16}}"}, {"task": "Create a password that doesn't appear in a dictionary (the dictionary file has to be provided):", "command": "apg -r {{path/to/dictionary_file}}"}]}
{"command": "apktool", "tasks": [{"task": "Decode an APK file:", "command": "apktool d {{path/to/file.apk}}"}, {"task": "Build an APK file from a directory:", "command": "apktool b {{path/to/directory}}"}, {"task": "Install and store a framework:", "command": "apktool if {{path/to/framework.apk}}"}]}
{"command": "apm", "tasks": [{"task": "Install a package from http://atom.io/packages or a theme from http://atom.io/themes:", "command": "apm install {{package_name}}"}, {"task": "Remove a package/theme:", "command": "apm remove {{package_name}}"}, {"task": "Upgrade a package/theme:", "command": "apm upgrade {{package_name}}"}]}
{"command": "apropos", "tasks": [{"task": "Search for a keyword using a regular expression:", "command": "apropos {{regular_expression}}"}, {"task": "Search without restricting the output to the terminal width:", "command": "apropos -l {{regular_expression}}"}, {"task": "Search for pages that contain all the expressions given:", "command": "apropos {{regular_expression_1}} -a {{regular_expression_2}} -a {{regular_expression_3}}"}]}
{"command": "ar", "tasks": [{"task": "E[x]tract all members from an archive:", "command": "ar x {{path/to/file.a}}"}, {"task": "Lis[t] contents in a specific archive:", "command": "ar t {{path/to/file.ar}}"}, {"task": "[r]eplace or add specific files to an archive:", "command": "ar r {{path/to/file.deb}} {{path/to/debian-binary path/to/control.tar.gz path/to/data.tar.xz ...}}"}, {"task": "In[s]ert an object file index (equivalent to using `ranlib`):", "command": "ar s {{path/to/file.a}}"}, {"task": "Create an archive with specific files and an accompanying object file index:", "command": "ar rs {{path/to/file.a}} {{path/to/file1.o path/to/file2.o ...}}"}]}
{"command": "arc", "tasks": [{"task": "Send the changes to Differential for review:", "command": "arc diff"}, {"task": "Show pending revision information:", "command": "arc list"}, {"task": "Update Git commit messages after review:", "command": "arc amend"}, {"task": "Push Git changes:", "command": "arc land"}]}
{"command": "arch", "tasks": [{"task": "Display the system's architecture:", "command": "arch"}]}
{"command": "arduino-builder", "tasks": [{"task": "Compile a sketch:", "command": "arduino-builder -compile {{path/to/sketch.ino}}"}, {"task": "Specify the debug level (default: 5):", "command": "arduino-builder -debug-level {{1..10}}"}, {"task": "Specify a custom build directory:", "command": "arduino-builder -build-path {{path/to/build_directory}}"}, {"task": "Use a build option file, instead of specifying `--hardware`, `--tools`, etc. manually every time:", "command": "arduino-builder -build-options-file {{path/to/build.options.json}}"}, {"task": "Enable verbose mode:", "command": "arduino-builder -verbose {{true}}"}]}
{"command": "arduino", "tasks": [{"task": "Build a sketch:", "command": "arduino --verify {{path/to/file.ino}}"}, {"task": "Build and upload a sketch:", "command": "arduino --upload {{path/to/file.ino}}"}, {"task": "Build and upload a sketch to an Arduino Nano with an Atmega328p CPU, connected on port `/dev/ttyACM0`:", "command": "arduino --board {{arduino:avr:nano:cpu=atmega328p}} --port {{/dev/ttyACM0}} --upload {{path/to/file.ino}}"}, {"task": "Set the preference `name` to a given `value`:", "command": "arduino --pref {{name}}={{value}}"}, {"task": "Build a sketch, put the build results in the build directory, and reuse any previous build results in that directory:", "command": "arduino --pref build.path={{path/to/build_directory}} --verify {{path/to/file.ino}}"}, {"task": "Save any (changed) preferences to `preferences.txt`:", "command": "arduino --save-prefs"}, {"task": "Install the latest SAM board:", "command": "arduino --install-boards \"{{arduino:sam}}\""}, {"task": "Install Bridge and Servo libraries:", "command": "arduino --install-library \"{{Bridge:1.0.0,Servo:1.2.0}}\""}]}
{"command": "argocd app", "tasks": [{"task": "List applications:", "command": "argocd app list --output {{json|yaml|wide}} "}, {"task": "Get application details:", "command": "argocd app get {{app_name}} --output {{json|yaml|wide}}"}, {"task": "Deploy application internally (to the same cluster that Argo CD is running in):", "command": "argocd app create {{app_name}} --repo {{git_repo_url}} --path {{path/to/repo}} --dest-server https://kubernetes.default.svc --dest-namespace {{ns}}"}, {"task": "Delete an application:", "command": "argocd app delete {{app_name}}"}, {"task": "Enable application auto-sync:", "command": "argocd app set {{app_name}} --sync-policy auto --auto-prune --self-heal"}, {"task": "Preview app synchronization without affecting cluster:", "command": "argocd app sync {{app_name}} --dry-run --prune"}, {"task": "Show application deployment history:", "command": "argocd app history {{app_name}} --output {{wide|id}}"}, {"task": "Rollback application to a previous deployed version by history ID (deleting unexpected resources):", "command": "argocd app rollback {{app_name}} {{history_id}} --prune"}]}
{"command": "argocd", "tasks": [{"task": "Login to Argo CD server:", "command": "argocd login --insecure --username {{user}} --password {{password}} {{argocd_server:port}}"}, {"task": "List applications:", "command": "argocd app list"}]}
{"command": "argon2", "tasks": [{"task": "Calculate a hash with a password and a salt with the default parameters:", "command": "echo \"{{password}}\" | argon2 \"{{salt_text}}\""}, {"task": "Calculate a hash with the specified algorithm:", "command": "echo \"{{password}}\" | argon2 \"{{salt_text}}\" -{{d|i|id}}"}, {"task": "Display the output hash without additional information:", "command": "echo \"{{password}}\" | argon2 \"{{salt_text}}\" -e"}, {"task": "Calculate a hash with given iteration [t]imes, [m]emory usage, and [p]arallelism parameters:", "command": "echo \"{{password}}\" | argon2 \"{{salt_text}}\" -t {{5}} -m {{20}} -p {{7}}"}]}
{"command": "aria2", "tasks": [{"task": "View documentation for the updated command:", "command": "tldr aria2c"}]}
{"command": "aria2c", "tasks": [{"task": "Download a specific URI to a file:", "command": "aria2c \"{{url}}\""}, {"task": "Download a file from a URI with a specific output name:", "command": "aria2c --out={{path/to/file}} \"{{url}}\""}, {"task": "Download multiple different files in parallel:", "command": "aria2c --force-sequential {{false}} \"{{url1 url2 ...}}\""}, {"task": "Download from multiple sources with each URI pointing to the same file:", "command": "aria2c \"{{url1 url2 ...}}\""}, {"task": "Download the URIs listed in a file with a specific number of parallel downloads:", "command": "aria2c --input-file={{path/to/file}} --max-concurrent-downloads={{number_of_downloads}}"}, {"task": "Download with multiple connections:", "command": "aria2c --split={{number_of_connections}} \"{{url}}\""}, {"task": "FTP download with username and password:", "command": "aria2c --ftp-user={{username}} --ftp-passwd={{password}} \"{{url}}\""}, {"task": "Limit download speed in bytes/s:", "command": "aria2c --max-download-limit={{speed}} \"{{url}}\""}]}
{"command": "arp-scan", "tasks": [{"task": "Scan the current local network:", "command": "arp-scan --localnet"}, {"task": "Scan an IP network with a custom bitmask:", "command": "arp-scan {{192.168.1.1}}/{{24}}"}, {"task": "Scan an IP network within a custom range:", "command": "arp-scan {{127.0.0.0}}-{{127.0.0.31}}"}, {"task": "Scan an IP network with a custom net mask:", "command": "arp-scan {{10.0.0.0}}:{{255.255.255.0}}"}]}
{"command": "arp", "tasks": [{"task": "Show the current ARP table:", "command": "arp -a"}, {"task": "Delete a specific entry:", "command": "arp -d {{address}}"}, {"task": "Create an entry in the ARP table:", "command": "arp -s {{address}} {{mac_address}}"}]}
{"command": "arping", "tasks": [{"task": "Ping a host by ARP request packets:", "command": "arping {{host_ip}}"}, {"task": "Ping a host on a specific interface:", "command": "arping -I {{interface}} {{host_ip}}"}, {"task": "Ping a host and stop at the first reply:", "command": "arping -f {{host_ip}}"}, {"task": "Ping a host a specific number of times:", "command": "arping -c {{count}} {{host_ip}}"}, {"task": "Broadcast ARP request packets to update neighbours' ARP caches:", "command": "arping -U {{ip_to_broadcast}}"}, {"task": "Detect duplicated IP addresses in the network by sending ARP requests with a 3 second timeout:", "command": "arping -D -w {{3}} {{ip_to_check}}"}]}
{"command": "asar", "tasks": [{"task": "Archive a file or directory:", "command": "asar pack {{path/to/input_file_or_directory}} {{path/to/output_archive.asar}}"}, {"task": "Extract an archive:", "command": "asar extract {{path/to/archive.asar}}"}, {"task": "Extract a specific file from an archive:", "command": "asar extract-file {{path/to/archive.asar}} {{file}}"}, {"task": "List the contents of an archive file:", "command": "asar list {{path/to/archive.asar}}"}]}
{"command": "asciidoctor", "tasks": [{"task": "Convert a specific `.adoc` file to HTML (the default output format):", "command": "asciidoctor {{path/to/file.adoc}}"}, {"task": "Convert a specific `.adoc` file to HTML and link a CSS stylesheet:", "command": "asciidoctor -a stylesheet={{path/to/stylesheet.css}} {{path/to/file.adoc}}"}, {"task": "Convert a specific `.adoc` file to embeddable HTML, removing everything except the body:", "command": "asciidoctor --embedded {{path/to/file.adoc}}"}, {"task": "Convert a specific `.adoc` file to a PDF using the `asciidoctor-pdf` library:", "command": "asciidoctor --backend={{pdf}} --require={{asciidoctor-pdf}} {{path/to/file.adoc}}"}]}
{"command": "asciinema", "tasks": [{"task": "Associate the local install of `asciinema` with an asciinema.org account:", "command": "asciinema auth"}, {"task": "Make a new recording (once finished, user will be prompted to upload it or save it locally):", "command": "asciinema rec"}, {"task": "Make a new recording and save it to a local file:", "command": "asciinema rec {{path/to/file}}.cast"}, {"task": "Replay a terminal recording from a local file:", "command": "asciinema play {{path/to/file}}.cast"}, {"task": "Replay a terminal recording hosted on asciinema.org:", "command": "asciinema play https://asciinema.org/a/{{cast_id}}"}, {"task": "Make a new recording, limiting any idle time to at most 2.5 seconds:", "command": "asciinema rec -i {{2.5}}"}, {"task": "Print the full output of a locally saved recording:", "command": "asciinema cat {{path/to/file}}.cast"}, {"task": "Upload a locally saved terminal session to asciinema.org:", "command": "asciinema upload {{path/to/file}}.cast"}]}
{"command": "asdf", "tasks": [{"task": "List all available plugins:", "command": "asdf plugin list all"}, {"task": "Install a plugin:", "command": "asdf plugin add {{name}}"}, {"task": "List all available versions for a package:", "command": "asdf list all {{name}}"}, {"task": "Install a specific version of a package:", "command": "asdf install {{name}} {{version}}"}, {"task": "Set global version for a package:", "command": "asdf global {{name}} {{version}}"}, {"task": "Set local version for a package:", "command": "asdf local {{name}} {{version}}"}]}
{"command": "assimp", "tasks": [{"task": "List all supported import formats:", "command": "assimp listext"}, {"task": "List all supported export formats:", "command": "assimp listexport"}, {"task": "Convert a file to one of the supported output formats, using the default parameters:", "command": "assimp export {{input_file.stl}} {{output_file.obj}}"}, {"task": "Convert a file using custom parameters (the dox_cmd.h file in assimp's source code lists available parameters):", "command": "assimp export {{input_file.stl}} {{output_file.obj}} {{parameters}}"}, {"task": "Display a summary of a 3D file's contents:", "command": "assimp info {{path/to/file}}"}, {"task": "List all supported subcommands (\"verbs\"):", "command": "assimp help"}, {"task": "Get help on a specific subcommand (e.g. the parameters specific to it):", "command": "assimp {{subcommand}} --help"}]}
{"command": "astronomer", "tasks": [{"task": "Scan a repository:", "command": "astronomer {{tldr-pages/tldr-node-client}}"}, {"task": "Scan the maximum amount of stars in the repository:", "command": "astronomer {{tldr-pages/tldr-node-client}} --stars {{50}}"}, {"task": "Scan a repository including comparative reports:", "command": "astronomer {{tldr-pages/tldr-node-client}} --verbose"}]}
{"command": "astyle", "tasks": [{"task": "Apply the default style of 4 spaces per indent and no formatting changes:", "command": "astyle {{source_file}}"}, {"task": "Apply the Java style with attached braces:", "command": "astyle --style=java {{path/to/file}}"}, {"task": "Apply the allman style with broken braces:", "command": "astyle --style=allman {{path/to/file}}"}, {"task": "Apply a custom indent using spaces. Choose between 2 and 20 spaces:", "command": "astyle --indent=spaces={{number_of_spaces}} {{path/to/file}}"}, {"task": "Apply a custom indent using tabs. Choose between 2 and 20 tabs:", "command": "astyle --indent=tab={{number_of_tabs}} {{path/to/file}}"}]}
{"command": "at", "tasks": [{"task": "Execute commands from `stdin` in 5 minutes (press `Ctrl + D` when done):", "command": "at now + 5 minutes"}, {"task": "Execute a command from `stdin` at 10:00 AM today:", "command": "echo \"{{./make_db_backup.sh}}\" | at 1000"}, {"task": "Execute commands from a given file next Tuesday:", "command": "at -f {{path/to/file}} 9:30 PM Tue"}]}
{"command": "atom", "tasks": [{"task": "Open a file or directory:", "command": "atom {{path/to/file_or_directory}}"}, {"task": "Open a file or directory in a new window:", "command": "atom -n {{path/to/file_or_directory}}"}, {"task": "Open a file or directory in an existing window:", "command": "atom --add {{path/to/file_or_directory}}"}, {"task": "Open Atom in safe mode (does not load any additional packages):", "command": "atom --safe"}, {"task": "Prevent Atom from forking into the background, keeping Atom attached to the terminal:", "command": "atom --foreground"}, {"task": "Wait for Atom window to close before returning (useful for Git commit editor):", "command": "atom --wait"}]}
{"command": "atoum", "tasks": [{"task": "Initialize a configuration file:", "command": "atoum --init"}, {"task": "Run all tests:", "command": "atoum"}, {"task": "Run tests using the specified configuration file:", "command": "atoum -c {{path/to/file}}"}, {"task": "Run a specific test file:", "command": "atoum -f {{path/to/file}}"}, {"task": "Run a specific directory of tests:", "command": "atoum -d {{path/to/directory}}"}, {"task": "Run all tests under a specific namespace:", "command": "atoum -ns {{namespace}}"}, {"task": "Run all tests with a specific tag:", "command": "atoum -t {{tag}}"}, {"task": "Load a custom bootstrap file before running tests:", "command": "atoum --bootstrap-file {{path/to/file}}"}]}
{"command": "atq", "tasks": [{"task": "Show the current user's scheduled jobs:", "command": "atq"}, {"task": "Show jobs from queue named 'a' (queues have single-character names):", "command": "atq -q {{a}}"}, {"task": "Show jobs of all users (run as superuser):", "command": "sudo atq"}]}
{"command": "atrm", "tasks": [{"task": "Remove job number 10:", "command": "atrm {{10}}"}, {"task": "Remove many jobs, separated by spaces:", "command": "atrm {{15}} {{17}} {{22}}"}]}
{"command": "atuin", "tasks": [{"task": "Install atuin into your shell:", "command": "eval \"$(atuin init {{bash|zsh|fish}})\""}, {"task": "Import history from the shell default history file:", "command": "atuin import auto"}, {"task": "Search shell history for a specific command:", "command": "atuin search {{command}}"}, {"task": "Register an account on the default sync server:", "command": "atuin register -u {{username}} -e {{email}} -p {{password}}"}, {"task": "Login to the default sync server:", "command": "atuin login -u {{username}} -p {{password}}"}, {"task": "Sync history with the sync server:", "command": "atuin sync"}]}
{"command": "audacious", "tasks": [{"task": "Launch the program:", "command": "audacious"}, {"task": "Enqueue a specific directory of audio files:", "command": "audacious --enqueue {{path/to/directory}}"}, {"task": "Start or stop playback:", "command": "audacious --play-pause"}, {"task": "Skip forwards or backwards in the playlist:", "command": "audacious --{{fwd|rew}}"}, {"task": "Stop playback:", "command": "audacious --stop"}, {"task": "Start a headless version:", "command": "audacious --headless"}, {"task": "Exit as soon as playback stops or there is nothing to playback:", "command": "audacious --quit-after-play"}]}
{"command": "auditd", "tasks": [{"task": "Start the daemon:", "command": "auditd"}, {"task": "Start the daemon in debug mode:", "command": "auditd -d"}, {"task": "Start the daemon on-demand from launchd:", "command": "auditd -l"}]}
{"command": "autoconf", "tasks": [{"task": "Generate a configuration script from `configure.ac` (if present) or `configure.in` and save this script to `configure`:", "command": "autoconf"}, {"task": "Generate a configuration script from the specified template; output to `stdout`:", "command": "autoconf {{template-file}}"}, {"task": "Generate a configuration script from the specified template (even if the input file has not changed) and write the output to a file:", "command": "autoconf --force --output={{outfile}} {{template-file}}"}]}
{"command": "autoflake", "tasks": [{"task": "Remove unused variables from a single file and display the diff:", "command": "autoflake --remove-unused-variables {{path/to/file.py}}"}, {"task": "Remove unused imports from multiple files and display the diffs:", "command": "autoflake --remove-all-unused-imports {{path/to/file1.py path/to/file2.py ...}}"}, {"task": "Remove unused variables from a file, overwriting the file:", "command": "autoflake --remove-unused-variables --in-place {{path/to/file.py}}"}, {"task": "Remove unused variables recursively from all files in a directory, overwriting each file:", "command": "autoflake --remove-unused-variables --in-place --recursive {{path/to/directory}}"}]}
{"command": "autojump", "tasks": [{"task": "Jump to a directory that contains the given pattern:", "command": "j {{pattern}}"}, {"task": "Jump to a sub-directory (child) of the current directory that contains the given pattern:", "command": "jc {{pattern}}"}, {"task": "Open a directory that contains the given pattern in the operating system file manager:", "command": "jo {{pattern}}"}, {"task": "Remove non-existing directories from the autojump database:", "command": "j --purge"}, {"task": "Show the entries in the autojump database:", "command": "j -s"}]}
{"command": "autopep8", "tasks": [{"task": "Format a file to `stdout`, with a custom maximum line length:", "command": "autopep8 {{path/to/file.py}} --max-line-length {{length}}"}, {"task": "Format a file, displaying a diff of the changes:", "command": "autopep8 --diff {{path/to/file}}"}, {"task": "Format a file in-place and save the changes:", "command": "autopep8 --in-place {{path/to/file.py}}"}, {"task": "Recursively format all files in a directory in-place and save changes:", "command": "autopep8 --in-place --recursive {{path/to/directory}}"}]}
{"command": "autossh", "tasks": [{"task": "Start an SSH session, restarting when a monitoring port fails to return data:", "command": "autossh -M {{monitor_port}} \"{{ssh_command}}\""}, {"task": "Forward a local port to a remote one, restarting when necessary:", "command": "autossh -M {{monitor_port}} -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}"}, {"task": "Fork `autossh` into the background before executing `ssh` and don't open a remote shell:", "command": "autossh -f -M {{monitor_port}} -N \"{{ssh_command}}\""}, {"task": "Run in the background, with no monitoring port, and instead send SSH keep-alive packets every 10 seconds to detect failure:", "command": "autossh -f -M 0 -N -o \"ServerAliveInterval 10\" -o \"ServerAliveCountMax 3\" \"{{ssh_command}}\""}, {"task": "Run in the background, with no monitoring port and no remote shell, exiting if the port forward fails:", "command": "autossh -f -M 0 -N -o \"ServerAliveInterval 10\" -o \"ServerAliveCountMax 3\" -o ExitOnForwardFailure=yes -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}"}, {"task": "Run in the background, logging `autossh` debug output and `ssh` verbose output to files:", "command": "AUTOSSH_DEBUG=1 AUTOSSH_LOGFILE={{path/to/autossh_log_file.log}} autossh -f -M {{monitor_port}} -v -E {{path/to/ssh_log_file.log}} {{ssh_command}}"}]}
{"command": "avo", "tasks": [{"task": "Initialize a workspace in the current directory:", "command": "avo init"}, {"task": "Log into the Avo platform:", "command": "avo login"}, {"task": "Switch to an existing Avo branch:", "command": "avo checkout {{branch_name}}"}, {"task": "Pull analytics wrappers for the current path:", "command": "avo pull"}, {"task": "Display the status of the Avo implementation:", "command": "avo status"}, {"task": "Resolve Git conflicts in Avo files:", "command": "avo conflict"}, {"task": "Open the current Avo workspace in the default web browser:", "command": "avo edit"}, {"task": "Display help for a subcommand:", "command": "avo {{subcommand}} --help"}]}
{"command": "avrdude", "tasks": [{"task": "Read AVR microcontroller:", "command": "avrdude -p {{AVR_device}} -c {{programmer}} -U flash:r:{{file.hex}}:i"}, {"task": "Write AVR microcontroller:", "command": "avrdude -p {{AVR_device}} -c {{programmer}} -U flash:w:{{file.hex}}"}, {"task": "List available AVR devices:", "command": "avrdude -p \\?"}, {"task": "List available AVR programmers:", "command": "avrdude -c \\?"}]}
{"command": "awk", "tasks": [{"task": "Print the fifth column (a.k.a. field) in a space-separated file:", "command": "awk '{print $5}' {{path/to/file}}"}, {"task": "Print the second column of the lines containing \"foo\" in a space-separated file:", "command": "awk '/{{foo}}/ {print $2}' {{path/to/file}}"}, {"task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator:", "command": "awk -F ',' '{print $NF}' {{path/to/file}}"}, {"task": "Sum the values in the first column of a file and print the total:", "command": "awk '{s+=$1} END {print s}' {{path/to/file}}"}, {"task": "Print every third line starting from the first line:", "command": "awk 'NR%3==1' {{path/to/file}}"}, {"task": "Print different values based on conditions:", "command": "awk '{if ($1 == \"foo\") print \"Exact match foo\"; else if ($1 ~ \"bar\") print \"Partial match bar\"; else print \"Baz\"}' {{path/to/file}}"}, {"task": "Print all lines where the 10th column value equals the specified value:", "command": "awk '($10 == value)'"}, {"task": "Print all the lines which the 10th column value is between a min and a max:", "command": "awk '($10 >= min_value && $10 <= max_value)'"}]}
{"command": "aws backup", "tasks": [{"task": "Return BackupPlan details for a specific BackupPlanId:", "command": "aws backup get-backup-plan --backup-plan-id {{id}}"}, {"task": "Create a backup plan using a specific backup plan name and backup rules:", "command": "aws backup create-backup-plan --backup-plan {{plan}}"}, {"task": "Delete a specific backup plan:", "command": "aws backup delete-backup-plan --backup-plan-id {{id}}"}, {"task": "Return a list of all active backup plans for the current account:", "command": "aws backup list-backup-plans"}, {"task": "Display details about your report jobs:", "command": "aws backup list-report-jobs"}]}
{"command": "aws batch", "tasks": [{"task": "List running batch jobs:", "command": "aws batch list-jobs --job-queue {{queue_name}}"}, {"task": "Create compute environment:", "command": "aws batch create-compute-environment --compute-environment-name {{compute_environment_name}} --type {{type}}"}, {"task": "Create batch job queue:", "command": "aws batch create-job-queue --job-queue-name {{queue_name}} --priority {{priority}} --compute-environment-order {{compute_environment}}"}, {"task": "Submit job:", "command": "aws batch submit-job --job-name {{job_name}} --job-queue {{job_queue}} --job-definition {{job_definition}}"}, {"task": "Describe the list of batch jobs:", "command": "aws batch describe-jobs --jobs {{jobs}}"}, {"task": "Cancel job:", "command": "aws batch cancel-job --job-id {{job_id}} --reason {{reason}}"}]}
{"command": "aws cloudformation", "tasks": [{"task": "Create a stack from a template file:", "command": "aws cloudformation create-stack --stack-name {{stack-name}} --region {{region}} --template-body {{file://path/to/file.yml}} --profile {{profile}}"}, {"task": "Delete a stack:", "command": "aws cloudformation delete-stack --stack-name {{stack-name}} --profile {{profile}}"}, {"task": "List all stacks:", "command": "aws cloudformation list-stacks --profile {{profile}}"}, {"task": "List all running stacks:", "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --profile {{profile}}"}, {"task": "Check the status of a stack:", "command": "aws cloudformation describe-stacks --stack-name {{stack-id}} --profile {{profile}}"}, {"task": "Initiate drift detection for a stack:", "command": "aws cloudformation detect-stack-drift --stack-name {{stack-id}} --profile {{profile}}"}, {"task": "Check the drift status output of a stack using 'StackDriftDetectionId' from the previous command output:", "command": "aws cloudformation describe-stack-resource-drifts --stack-name {{stack-drift-detection-id}} --profile {{profile}}"}]}
{"command": "aws cloudwatch", "tasks": [{"task": "List dashboards for your account:", "command": "aws cloudwatch list-dashboards"}, {"task": "Display details for the specified dashboard:", "command": "aws cloudwatch get-dashboard --dashboard-name {{dashboard_name}}"}, {"task": "List metrics:", "command": "aws cloudwatch list-metrics"}, {"task": "List alarms:", "command": "aws cloudwatch describe-alarms"}, {"task": "Create or update an alarm and associate it with a metric:", "command": "aws cloudwatch put-metric-alarm --alarm-name {{alarm_name}} --evaluation-periods {{evaluation_periods}} --comparison-operator {{comparison_operator}}"}, {"task": "Delete the specified alarms:", "command": "aws cloudwatch delete-alarms --alarm_names {{alarm_names}}"}, {"task": "Delete the specified dashboards:", "command": "aws cloudwatch delete-dashboards --dashboard-names {{dashboard_names}}"}]}
{"command": "aws codecommit", "tasks": [{"task": "Display help for a specific command:", "command": "aws codecommit {{command}} help"}, {"task": "Display help:", "command": "aws codecommit help"}]}
{"command": "aws cognito-idp", "tasks": [{"task": "Create a new Cognito user pool:", "command": "aws cognito-idp create-user-pool --pool-name {{name}}"}, {"task": "List all user pools:", "command": "aws cognito-idp list-user-pools --max-results {{10}}"}, {"task": "Delete a specific user pool:", "command": "aws cognito-idp delete-user-pool --user-pool-id {{user_pool_id}}"}, {"task": "Create a user in a specific pool:", "command": "aws cognito-idp admin-create-user --username {{username}} --user-pool-id {{user_pool_id}}"}, {"task": "List the users of a specific pool:", "command": "aws cognito-idp list-users --user-pool-id {{user_pool_id}}"}, {"task": "Delete a user from a specific pool:", "command": "aws cognito-idp admin-delete-user --username {{username}} --user-pool-id {{user_pool_id}}"}]}
{"command": "aws configure", "tasks": [{"task": "Configure AWS CLI interactively (creates a new configuration or updates the default):", "command": "aws configure"}, {"task": "Configure a named profile for AWS CLI interactively (creates a new profile or updates an existing one):", "command": "aws configure --profile {{profile_name}}"}, {"task": "Display the value from a specific configuration variable:", "command": "aws configure get {{name}}"}, {"task": "Display the value for a configuration variable in a specific profile:", "command": "aws configure get {{name}} --profile {{profile_name}}"}, {"task": "Set the value of a specific configuration variable:", "command": "aws configure set {{name}} {{value}}"}, {"task": "Set the value of a configuration variable in a specific profile:", "command": "aws configure set {{name}} {{value}} --profile {{profile_name}}"}, {"task": "List the configuration entries:", "command": "aws configure list"}, {"task": "List the configuration entries for a specific profile:", "command": "aws configure list --profile {{profile_name}}"}]}
{"command": "aws cur", "tasks": [{"task": "Create an AWS cost and usage report definition from a JSON file:", "command": "aws cur put-report-definition --report-definition file://{{path/to/report_definition.json}}"}, {"task": "List usage report definitions defined for the logged in account:", "command": "aws cur describe-report-definitions"}, {"task": "Delete a usage report definition:", "command": "aws cur --region {{aws_region}} delete-report-definition --report-name {{report}}"}]}
{"command": "aws ec2", "tasks": [{"task": "Display information about a specific instance:", "command": "aws ec2 describe-instances --instance-ids {{instance_id}}"}, {"task": "Display information about all instances:", "command": "aws ec2 describe-instances"}, {"task": "Display information about all EC2 volumes:", "command": "aws ec2 describe-volumes"}, {"task": "Delete an EC2 volume:", "command": "aws ec2 delete-volume --volume-id {{volume_id}}"}, {"task": "Create a snapshot from an EC2 volume:", "command": "aws ec2 create-snapshot --volume-id {{volume_id}}"}, {"task": "List available AMIs (Amazon Machine Images):", "command": "aws ec2 describe-images"}, {"task": "Show list of all available EC2 commands:", "command": "aws ec2 help"}, {"task": "Show help for specific EC2 subcommand:", "command": "aws ec2 {{subcommand}} help"}]}
{"command": "aws ecr", "tasks": [{"task": "Authenticate Docker with the default registry (username is AWS):", "command": "aws ecr get-login-password --region {{region}} | {{docker login}} --username AWS --password-stdin {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com"}, {"task": "Create a repository:", "command": "aws ecr create-repository --repository-name {{repository}} --image-scanning-configuration scanOnPush={{true|false}} --region {{region}}"}, {"task": "Tag a local image for ECR:", "command": "docker tag {{container_name}}:{{tag}} {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}"}, {"task": "Push an image to a repository:", "command": "docker push {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}"}, {"task": "Pull an image from a repository:", "command": "docker pull {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}"}, {"task": "Delete an image from a repository:", "command": "aws ecr batch-delete-image --repository-name {{repository}} --image-ids imageTag={{latest}}"}, {"task": "Delete a repository:", "command": "aws ecr delete-repository --repository-name {{repository}} --force"}, {"task": "List images within a repository:", "command": "aws ecr list-images --repository-name {{repository}}"}]}
{"command": "aws glue", "tasks": [{"task": "List jobs:", "command": "aws glue list-jobs"}, {"task": "Start a job:", "command": "aws glue start-job-run --job-name {{job_name}}"}, {"task": "Start running a workflow:", "command": "aws glue start-workflow-run --name {{workflow_name}}"}, {"task": "List triggers:", "command": "aws glue list-triggers"}, {"task": "Start a trigger:", "command": "aws glue start-trigger --name {{trigger_name}}"}, {"task": "Create a dev endpoint:", "command": "aws glue create-dev-endpoint --endpoint-name {{name}} --role-arn {{role_arn_used_by_endpoint}}"}]}
{"command": "aws-google-auth", "tasks": [{"task": "Log in with Google SSO using the IDP and SP identifiers and set the credentials duration to one hour:", "command": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}}"}, {"task": "Log in [a]sking which role to use (in case of several available SAML roles):", "command": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a"}, {"task": "Resolve aliases for AWS accounts:", "command": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a --resolve-aliases"}, {"task": "Show help information:", "command": "aws-google-auth -h"}]}
{"command": "aws help", "tasks": [{"task": "Display help:", "command": "aws help"}, {"task": "List all available topics:", "command": "aws help topics"}, {"task": "Display help about a specific topic:", "command": "aws help {{topic_name}}"}]}
{"command": "aws history", "tasks": [{"task": "List commands history with command IDs:", "command": "aws history list"}, {"task": "Display events related to a specific command given a command ID:", "command": "aws history show {{command_id}}"}]}
{"command": "aws iam", "tasks": [{"task": "Show `aws iam` help page (including all available iam commands):", "command": "aws iam help"}, {"task": "List users:", "command": "aws iam list-users"}, {"task": "List policies:", "command": "aws iam list-policies"}, {"task": "List groups:", "command": "aws iam list-groups"}, {"task": "Get users in a group:", "command": "aws iam get-group --group-name {{group_name}}"}, {"task": "Describe an IAM policy:", "command": "aws iam get-policy --policy-arn arn:aws:iam::aws:policy/{{policy_name}}"}, {"task": "List access keys:", "command": "aws iam list-access-keys"}, {"task": "List access keys for a specific user:", "command": "aws iam list-access-keys --user-name {{user_name}}"}]}
{"command": "aws kinesis", "tasks": [{"task": "Show all streams in the account:", "command": "aws kinesis list-streams"}, {"task": "Write one record to a Kinesis stream:", "command": "aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data {{base64_encoded_message}}"}, {"task": "Write a record to a Kinesis stream with inline base64 encoding:", "command": "aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data \"$( echo \"{{my raw message}}\" | base64 )\""}, {"task": "List the shards available on a stream:", "command": "aws kinesis list-shards --stream-name {{name}}"}, {"task": "Get a shard iterator for reading from the oldest message in a stream's shard:", "command": "aws kinesis get-shard-iterator --shard-iterator-type TRIM_HORIZON --stream-name {{name}} --shard-id {{id}}"}, {"task": "Read records from a shard, using a shard iterator:", "command": "aws kinesis get-records --shard-iterator {{iterator}}"}]}
{"command": "aws lambda", "tasks": [{"task": "Run a function:", "command": "aws lambda invoke --function-name {{name}} {{path/to/response}}.json"}, {"task": "Run a function with an input payload in JSON format:", "command": "aws lambda invoke --function-name {{name}} --payload {{json}} {{path/to/response}}.json"}, {"task": "List functions:", "command": "aws lambda list-functions"}, {"task": "Display the configuration of a function:", "command": "aws lambda get-function-configuration --function-name {{name}}"}, {"task": "List function aliases:", "command": "aws lambda list-aliases --function-name {{name}}"}, {"task": "Display the reserved concurrency configuration for a function:", "command": "aws lambda get-function-concurrency --function-name {{name}}"}, {"task": "List which AWS services can invoke the function:", "command": "aws lambda get-policy --function-name {{name}}"}]}
{"command": "aws lightsail", "tasks": [{"task": "List all virtual private servers, or instances:", "command": "aws lightsail get-instances"}, {"task": "List all bundles (instance plans):", "command": "aws lightsail list-bundles"}, {"task": "List all available instance images, or blueprints:", "command": "aws lightsail list-blueprints"}, {"task": "Create an instance:", "command": "aws lightsail create-instances --instance-names {{name}} --availability-zone {{region}} --bundle-id {{nano_2_0}} --blueprint-id {{blueprint_id}}"}, {"task": "Print the state of a specific instance:", "command": "aws lightsail get-instance-state --instance-name {{name}}"}, {"task": "Stop a specific instance:", "command": "aws lightsail stop-instance --instance-name {{name}}"}, {"task": "Delete a specific instance:", "command": "aws lightsail delete-instance --instance-name {{name}}"}]}
{"command": "aws pricing", "tasks": [{"task": "List service codes of a specific region:", "command": "aws pricing describe-services --region {{us-east-1}}"}, {"task": "List attributes for a given service code in a specific region:", "command": "aws pricing describe-services --service-code {{AmazonEC2}} --region {{us-east-1}}"}, {"task": "Print pricing information for a service code in a specific region:", "command": "aws pricing get-products --service-code {{AmazonEC2}} --region {{us-east-1}}"}, {"task": "List values for a specific attribute for a service code in a specific region:", "command": "aws pricing get-attribute-values --service-code {{AmazonEC2}} --attribute-name {{instanceType}} --region {{us-east-1}}"}, {"task": "Print pricing information for a service code using filters for instance type and location:", "command": "aws pricing get-products --service-code {{AmazonEC2}} --filters \"{{Type=TERM_MATCH,Field=instanceType,Value=m5.xlarge}}\" \"{{Type=TERM_MATCH,Field=location,Value=US East (N. Virginia)}}\" --region {{us-east-1}}"}]}
{"command": "aws quicksight", "tasks": [{"task": "List datasets:", "command": "aws quicksight list-data-sets --aws-account-id {{aws_account_id}}"}, {"task": "List users:", "command": "aws quicksight list-users --aws-account-id {{aws_account_id}} --namespace default"}, {"task": "List groups:", "command": "aws quicksight list-groups --aws-account-id {{aws_account_id}} --namespace default"}, {"task": "List dashboards:", "command": "aws quicksight list-dashboards --aws-account-id {{aws_account_id}}"}, {"task": "Display detailed information about a dataset:", "command": "aws quicksight describe-data-set --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}"}, {"task": "Display who has access to the dataset and what kind of actions they can perform on the dataset:", "command": "aws quicksight describe-data-set-permissions --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}"}]}
{"command": "aws rds", "tasks": [{"task": "Show help for specific RDS subcommand:", "command": "aws rds {{subcommand}} help"}, {"task": "Stop instance:", "command": "aws rds stop-db-instance --db-instance-identifier {{instance_identifier}}"}, {"task": "Start instance:", "command": "aws rds start-db-instance --db-instance-identifier {{instance_identifier}}"}, {"task": "Modify an RDS instance:", "command": "aws rds modify-db-instance --db-instance-identifier {{instance_identifier}} {{parameters}} --apply-immediately"}, {"task": "Apply updates to an RDS instance:", "command": "aws rds apply-pending-maintenance-action --resource-identifier {{database_arn}} --apply-action {{system-update}} --opt-in-type {{immediate}}"}, {"task": "Change an instance identifier:", "command": "aws rds modify-db-instance --db-instance-identifier {{old_instance_identifier}} --new-db-instance-identifier {{new_instance_identifier}}"}, {"task": "Reboot an instance:", "command": "aws rds reboot-db-instance --db-instance-identifier {{instance_identifier}}"}, {"task": "Delete an instance:", "command": "aws rds delete-db-instance --db-instance-identifier {{instance_identifier}} --final-db-snapshot-identifier {{snapshot_identifier}} --delete-automated-backups"}]}
{"command": "aws route53", "tasks": [{"task": "List all hosted zones, private and public:", "command": "aws route53 list-hosted-zones"}, {"task": "Show all records in a zone:", "command": "aws route53 list-resource-record-sets --hosted-zone-id {{zone_id}}"}, {"task": "Create a new, public zone using a request identifier to retry the operation safely:", "command": "aws route53 create-hosted-zone --name {{name}} --caller-reference {{request_identifier}}"}, {"task": "Delete a zone (if the zone has non-defaults SOA and NS records the command will fail):", "command": "aws route53 delete-hosted-zone --id {{zone_id}}"}, {"task": "Test DNS resolving by Amazon servers of a given zone:", "command": "aws route53 test-dns-answer --hosted-zone-id {{zone_id}} --record-name {{name}} --record-type {{type}}"}]}
{"command": "aws s3 cp", "tasks": [{"task": "Copy a file from local to a specific bucket:", "command": "aws s3 cp {{path/to/file}} s3://{{bucket_name}}/{{path/to/remote_file}}"}, {"task": "Copy a specific S3 object into another bucket:", "command": "aws s3 cp s3://{{bucket_name1}}/{{path/to/file}} s3://{{bucket_name2}}/{{path/to/target}}"}, {"task": "Copy a specific S3 object into another bucket keeping the original name:", "command": "aws s3 cp s3://{{bucket_name1}}/{{path/to/file}} s3://{{bucket_name2}}"}, {"task": "Copy S3 objects to a local directory recursively:", "command": "aws s3 cp s3://{{bucket_name}} . --recursive"}, {"task": "Display help:", "command": "aws s3 cp help"}]}
{"command": "aws s3 ls", "tasks": [{"task": "List all buckets:", "command": "aws s3 ls"}, {"task": "List files and folders in the root of a bucket (`s3://` is optional):", "command": "aws s3 ls s3://{{bucket_name}}"}, {"task": "List files and folders directly inside a directory:", "command": "aws s3 ls {{bucket_name}}/{{path/to/directory}}/"}, {"task": "List all files in a bucket:", "command": "aws s3 ls --recursive {{bucket_name}}"}, {"task": "List all files in a path with a given prefix:", "command": "aws s3 ls --recursive {{bucket_name}}/{{path/to/directory/}}{{prefix}}"}, {"task": "Display help:", "command": "aws s3 ls help"}]}
{"command": "aws s3 mb", "tasks": [{"task": "Create an S3 bucket:", "command": "aws s3 mb s3://{{bucket_name}}"}, {"task": "Create an S3 bucket in a specific region:", "command": "aws s3 mb s3://{{bucket_name}} --region {{region}}"}, {"task": "Display help:", "command": "aws s3 mb help"}]}
{"command": "aws s3 mv", "tasks": [{"task": "Move a file from local to a specified bucket:", "command": "aws s3 mv {{path/to/local_file}} s3://{{bucket_name}}/{{path/to/remote_file}}"}, {"task": "Move a specific S3 object into another bucket:", "command": "aws s3 mv s3://{{bucket_name1}}/{{path/to/file}} s3://{{bucket_name2}}/{{path/to/target}}"}, {"task": "Move a specific S3 object into another bucket keeping the original name:", "command": "aws s3 mv s3://{{bucket_name1}}/{{path/to/file}} s3://{{bucket_name2}}"}, {"task": "Display help:", "command": "aws s3 mv help"}]}
{"command": "aws s3 presign", "tasks": [{"task": "Generate a pre-signed URL for a specific S3 object that is valid for one hour:", "command": "aws s3 presign s3://{{bucket_name}}/{{path/to/file}}"}, {"task": "Generate a pre-signed URL valid for a specific lifetime:", "command": "aws s3 presign s3://{{bucket_name}}/{{path/to/file}} --expires-in {{duration_in_seconds}}"}, {"task": "Display help:", "command": "aws s3 presign help"}]}
{"command": "aws s3 rm", "tasks": [{"task": "Delete a specific S3 object:", "command": "aws s3 rm s3://{{bucket_name}}/{{path/to/file}}"}, {"task": "Preview the deletion of a specific S3 object without deleting it (dry-run):", "command": "aws s3 rm s3://{{bucket_name}}/{{path/to/file}} --dryrun"}, {"task": "Delete an object from a specific S3 access point:", "command": "aws s3 rm s3://arn:aws:s3:{{region}}:{{account_id}}:{{access_point}}/{{access_point_name}}/{{object_key}}"}, {"task": "Display help:", "command": "aws s3 rm help"}]}
{"command": "aws s3", "tasks": [{"task": "Show files in a bucket:", "command": "aws s3 ls {{bucket_name}}"}, {"task": "Sync files and directories from local to bucket:", "command": "aws s3 sync {{path/to/files}} s3://{{bucket_name}}"}, {"task": "Sync files and directories from bucket to local:", "command": "aws s3 sync s3://{{bucket_name}} {{path/to/target}}"}, {"task": "Sync files and directories with exclusions:", "command": "aws s3 sync {{path/to/files}} s3://{{bucket_name}} --exclude {{path/to/file}} --exclude {{path/to/directory}}/*"}, {"task": "Remove file from bucket:", "command": "aws s3 rm s3://{{bucket}}/{{path/to/file}}"}, {"task": "Preview changes only:", "command": "aws s3 {{any_command}} --dryrun"}]}
{"command": "aws s3api", "tasks": [{"task": "Create bucket in a specific region:", "command": "aws s3api create-bucket --bucket {{bucket_name}} --region {{region}} --create-bucket-configuration LocationConstraint={{region}}"}, {"task": "Delete a bucket:", "command": "aws s3api delete-bucket --bucket {{bucket_name}}"}, {"task": "List buckets:", "command": "aws s3api list-buckets"}, {"task": "List the objects inside of a bucket and only show each object's key and size:", "command": "aws s3api list-objects --bucket {{bucket_name}} --query '{{Contents[].{Key: Key, Size: Size}}}'"}, {"task": "Add an object to a bucket:", "command": "aws s3api put-object --bucket {{bucket_name}} --key {{object_key}} --body {{path/to/file}}"}, {"task": "Download object from a bucket (The output file is always the last argument):", "command": "aws s3api get-object --bucket {{bucket_name}} --key {{object_key}} {{path/to/output_file}}"}, {"task": "Apply an Amazon S3 bucket policy to a specified bucket:", "command": "aws s3api put-bucket-policy --bucket {{bucket_name}} --policy file://{{path/to/bucket_policy.json}}"}, {"task": "Download the Amazon S3 bucket policy from a specified bucket:", "command": "aws s3api get-bucket-policy --bucket {{bucket_name}} --query Policy --output {{json|table|text|yaml|yaml-stream}} > {{path/to/bucket_policy}}"}]}
{"command": "aws secretsmanager", "tasks": [{"task": "Show secrets stored by the secrets manager in the current account:", "command": "aws secretsmanager list-secrets"}, {"task": "Create a secret:", "command": "aws secretsmanager create-secret --name {{name}} --description \"{{secret_description}}\" --secret-string {{secret}}"}, {"task": "Delete a secret:", "command": "aws secretsmanager delete-secret --secret-id {{name_or_arn}}"}, {"task": "View details of a secret except for secret text:", "command": "aws secretsmanager describe-secret --secret-id {{name_or_arn}}"}, {"task": "Retrieve the value of a secret (to get the latest version of the secret omit `--version-stage`):", "command": "aws secretsmanager get-secret-value --secret-id {{name_or_arn}} --version-stage {{version_of_secret}}"}, {"task": "Rotate the secret immediately using a Lambda function:", "command": "aws secretsmanager rotate-secret --secret-id {{name_or_arn}} --rotation-lambda-arn {{arn_of_lambda_function}}"}, {"task": "Rotate the secret automatically every 30 days using a Lambda function:", "command": "aws secretsmanager rotate-secret --secret-id {{name_or_arn}} --rotation-lambda-arn {{arn_of_lambda_function}} --rotation-rules AutomaticallyAfterDays={{30}}"}]}
{"command": "aws ses", "tasks": [{"task": "Create a new receipt rule set:", "command": "aws ses create-receipt-rule-set --rule-set-name {{rule_set_name}} --generate-cli-skeleton"}, {"task": "Describe the active receipt rule set:", "command": "aws ses describe-active-receipt-rule-set --generate-cli-skeletion"}, {"task": "Describe a specific receipt rule:", "command": "aws ses describe-receipt-rule --rule-set-name {{rule_set_name}} --rule-name {{rule_name}} --generate-cli-skeleton"}, {"task": "List all receipt rule sets:", "command": "aws ses list-receipt-rule-sets --starting-token {{token_string}} --max-items {{integer}} --generate-cli-skeleton"}, {"task": "Delete a specific receipt rule set (the currently active rule set cannot be deleted):", "command": "aws ses delete-receipt-rule-set --rule-set-name {{rule_set_name}} --generate-cli-skeleton"}, {"task": "Delete a specific receipt rule:", "command": "aws ses delete-receipt-rule --rule-set-name {{rule_set_name}} --rule-name {{rule_name}} --generate-cli-skeleton"}, {"task": "Send an email:", "command": "aws ses send-email --from {{from_address}} --destination \"ToAddresses={{addresses}}\" --message \"Subject={Data={{subject_text}},Charset=utf8},Body={Text={Data={{body_text}},Charset=utf8},Html={Data={{message_body_containing_html}},Charset=utf8}}\""}, {"task": "Show help for a specific SES subcommand:", "command": "aws ses {{subcommand}} help"}]}
{"command": "aws sqs", "tasks": [{"task": "List all availables queues:", "command": "aws sqs list-queues"}, {"task": "Display the URL of a specific queue:", "command": "aws sqs get-queue-url --queue-name {{queue_name}}"}, {"task": "Create a queue with specific attributes from a file in JSON format:", "command": "aws sqs create-queue --queue-name {{queue_name}} --attributes {{file://path/to/attributes_file.json}}"}, {"task": "Send a specific message to a queue:", "command": "aws sqs send-message --queue-url https://sqs.{{region}}.amazonaws.com/{{queue_name}} --message-body \"{{message_body}}\" --delay-seconds {{delay}} --message-attributes {{file://path/to/attributes_file.json}}"}, {"task": "Delete the specified message from a queue:", "command": "aws sqs delete-message --queue-url {{https://queue_url}} --receipt-handle {{receipt_handle}}"}, {"task": "Delete a specific queue:", "command": "aws sqs delete-queue --queue-url https://sqs.{{region}}.amazonaws.com/{{queue_name}}"}, {"task": "Delete all messages from the specified queue:", "command": "aws sqs purge-queue --queue-url https://sqs.{{region}}.amazonaws.com/{{queue_name}}"}, {"task": "Enable a specific AWS account to send messages to queue:", "command": "aws sqs add-permission --queue-url https://sqs.{{region}}.amazonaws.com/{{queue_name}} --label {{permission_name}} --aws-account-ids {{account_id}} --actions SendMessage"}]}
{"command": "aws sts", "tasks": [{"task": "Get temporary security credentials to access specific AWS resources:", "command": "aws sts assume-role --role-arn {{aws_role_arn}}"}, {"task": "Get an IAM user or role whose credentials are used to call the operation:", "command": "aws sts get-caller-identity"}]}
{"command": "aws-vault", "tasks": [{"task": "Add credentials to the secure keystore:", "command": "aws-vault add {{profile}}"}, {"task": "Execute a command with AWS credentials in the environment:", "command": "aws-vault exec {{profile}} -- {{aws s3 ls}}"}, {"task": "Open a browser window and login to the AWS Console:", "command": "aws-vault login {{profile}}"}, {"task": "List profiles, along with their credentials and sessions:", "command": "aws-vault list"}, {"task": "Rotate AWS credentials:", "command": "aws-vault rotate {{profile}}"}, {"task": "Remove credentials from the secure keystore:", "command": "aws-vault remove {{profile}}"}]}
{"command": "aws workmail", "tasks": [{"task": "List all WorkMail organizations:", "command": "aws workmail list-organizations"}, {"task": "List all users of a specific organization:", "command": "aws workmail list-users --organization-id {{organization_id}}"}, {"task": "Create a WorkMail user in a specific organization:", "command": "aws workmail create-user --name {{username}} --display-name {{name}} --password {{password}} --organization-id {{organization_id}}"}, {"task": "Register and enable a group/user to WorkMail:", "command": "aws workmail register-to-work-mail --entity-id {{entity_id}} --email {{email}} --organization-id {{organization_id}}"}, {"task": "Create a WorkMail group in a specific organization:", "command": "aws workmail create-group --name {{group_name}} --organization-id {{organization_id}}"}, {"task": "Associate a member to a specific group:", "command": "aws workmail associate-member-to-group --group-id {{group_id}} --member-id {{member_id}} --organization-id {{organization_id}}"}, {"task": "Deregister and disable a user/group from WorkMail:", "command": "aws workmail deregister-from-work-mail --entity-id {{entity_id}} --organization-id {{organization_id}}"}, {"task": "Delete a user from an organization:", "command": "aws workmail delete-user --user-id {{user_id}} --organization-id {{organization_id}}"}]}
{"command": "aws", "tasks": [{"task": "Configure the AWS Command-line:", "command": "aws configure wizard"}, {"task": "Configure the AWS Command-line using SSO:", "command": "aws configure sso"}, {"task": "See help text for the AWS command:", "command": "aws {{command}} help"}, {"task": "Get the caller identity (used to troubleshoot permissions):", "command": "aws sts get-caller-identity"}, {"task": "List AWS resources in a region and output in YAML:", "command": "aws dynamodb list-tables --region {{us-east-1}} --output yaml"}, {"task": "Use auto prompt to help with a command:", "command": "aws iam create-user --cli-auto-prompt"}, {"task": "Get an interactive wizard for an AWS resource:", "command": "aws dynamodb wizard {{new_table}}"}, {"task": "Generate a JSON CLI Skeleton (useful for infrastructure as code):", "command": "aws dynamodb update-table --generate-cli-skeleton"}]}
{"command": "awslogs", "tasks": [{"task": "List log groups:", "command": "awslogs groups"}, {"task": "List existing streams for the specified group:", "command": "awslogs streams {{/var/log/syslog}}"}, {"task": "Get logs for any streams in the specified group between 1 and 2 hours ago:", "command": "awslogs get {{/var/log/syslog}} --start='{{2h ago}}' --end='{{1h ago}}'"}, {"task": "Get logs that match a specific CloudWatch Logs Filter pattern:", "command": "awslogs get {{/aws/lambda/my_lambda_group}} --filter-pattern='{{ERROR}}'"}, {"task": "Watch logs for any streams in the specified group:", "command": "awslogs get {{/var/log/syslog}} ALL --watch"}]}
{"command": "axel", "tasks": [{"task": "Download a URL to a file:", "command": "axel {{url}}"}, {"task": "Download and specify filename:", "command": "axel {{url}} -o {{path/to/file}}"}, {"task": "Download with multiple connections:", "command": "axel -n {{connections_num}} {{url}}"}, {"task": "Search for mirrors:", "command": "axel -S {{mirrors_num}} {{url}}"}, {"task": "Limit download speed (bytes per second):", "command": "axel -s {{speed}} {{url}}"}]}
{"command": "az account", "tasks": [{"task": "Print a list of subscriptions for the logged in account:", "command": "az account list"}, {"task": "Set a `subscription` to be the currently active subscription:", "command": "az account set --subscription {{subscription_id}}"}, {"task": "List supported regions for the currently active subscription:", "command": "az account list-locations"}, {"task": "Print an access token to be used with `MS Graph API`:", "command": "az account get-access-token --resource-type {{ms-graph}}"}, {"task": "Print details of the currently active subscription in a specific format:", "command": "az account show --output {{json|tsv|table|yaml}}"}]}
{"command": "az appconfig", "tasks": [{"task": "Create an App Configuration:", "command": "az appconfig create --name {{name}} --resource-group {{group_name}} --location {{location}}"}, {"task": "Delete a specific App Configuration:", "command": "az appconfig delete --resource-group {{rg_name}} --name {{appconfig_name}}"}, {"task": "List all App Configurations under the current subscription:", "command": "az appconfig list"}, {"task": "List all App Configurations under a specific resource group:", "command": "az appconfig list --resource-group {{rg_name}}"}, {"task": "Show properties of an App Configuration:", "command": "az appconfig show --name {{appconfig_name}}"}, {"task": "Update a specific App Configuration:", "command": "az appconfig update --resource-group {{rg_name}} --name {{appconfig_name}}"}]}
{"command": "az bicep", "tasks": [{"task": "Install Bicep CLI:", "command": "az bicep install"}, {"task": "Build a Bicep file:", "command": "az bicep build --file {{path/to/file.bicep}}"}, {"task": "Attempt to decompile an ARM template file to a Bicep file:", "command": "az bicep decompile --file {{path/to/template_file.json}}"}, {"task": "Upgrade Bicep CLI to the latest version:", "command": "az bicep upgrade"}, {"task": "Display the installed version of Bicep CLI:", "command": "az bicep version"}, {"task": "List all available versions of Bicep CLI:", "command": "az bicep list-versions"}, {"task": "Uninstall Bicep CLI:", "command": "az bicep uninstall"}]}
{"command": "az config", "tasks": [{"task": "Print all configurations:", "command": "az config get"}, {"task": "Print configurations for a specific section:", "command": "az config get {{section_name}}"}, {"task": "Set a configuration:", "command": "az config set {{configuration_name}}={{value}}"}, {"task": "Unset a configuration:", "command": "az config unset {{configuration_name}}"}]}
{"command": "az devops", "tasks": [{"task": "Set the Personal Access Token (PAT) to login to a particular organization:", "command": "az devops login --organization {{organization_url}}"}, {"task": "Open a project in the browser:", "command": "az devops project show --project {{project_name}} --open"}, {"task": "List members of a specific team working on a particular project:", "command": "az devops team list-member --project {{project_name}} --team {{team_name}}"}, {"task": "Check the Azure DevOps CLI current configuration:", "command": "az devops configure --list"}, {"task": "Configure the Azure DevOps CLI behavior by setting a default project and a default organization:", "command": "az devops configure --defaults project={{project_name}} organization={{organization_url}}"}]}
{"command": "az feedback", "tasks": [{"task": "Send feedback to the Azure CLI Team:", "command": "az feedback"}]}
{"command": "az group", "tasks": [{"task": "Create a new resource group:", "command": "az group create --name {{name}} --location {{location}}"}, {"task": "Check if a resource group exists:", "command": "az group exists --name {{name}}"}, {"task": "Delete a resource group:", "command": "az group delete --name {{name}}"}, {"task": "Wait until a condition of the resource group is met:", "command": "az group wait --name {{name}} --{{created|deleted|exists|updated}}"}]}
{"command": "az lock", "tasks": [{"task": "Create a read-only subscription level lock:", "command": "az lock create --name {{lock_name}} --lock-type ReadOnly"}, {"task": "Create a read-only resource group level lock:", "command": "az lock create --name {{lock_name}} --resource-group {{group_name}} --lock-type ReadOnly"}, {"task": "Delete a subscription level lock:", "command": "az lock delete --name {{lock_name}}"}, {"task": "Delete a resource group level lock:", "command": "az lock delete --name {{lock_name}} --resource-group {{group_name}}"}, {"task": "List out all locks on the subscription level:", "command": "az lock list"}, {"task": "Show a subscription level lock:", "command": "az lock show -n {{lock_name}}"}]}
{"command": "az login", "tasks": [{"task": "Log in interactively:", "command": "az login"}, {"task": "Log in with a service principal using a client secret:", "command": "az login --service-principal --username {{http://azure-cli-service-principal}} --password {{secret}} --tenant {{someone.onmicrosoft.com}}"}, {"task": "Log in with a service principal using a client certificate:", "command": "az login --service-principal --username {{http://azure-cli-service-principal}} --password {{path/to/cert.pem}} --tenant {{someone.onmicrosoft.com}}"}, {"task": "Log in using a VM's system assigned identity:", "command": "az login --identity"}, {"task": "Log in using a VM's user assigned identity:", "command": "az login --identity --username /subscriptions/{{subscription_id}}/resourcegroups/{{my_rg}}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{{my_id}}"}]}
{"command": "az logout", "tasks": [{"task": "Log out from the active account:", "command": "az logout"}, {"task": "Log out a specific username:", "command": "az logout --username {{alias@somedomain.com}}"}]}
{"command": "az network", "tasks": [{"task": "List network resources in a region that are used against a subscription quota:", "command": "az network list-usages"}, {"task": "List all virtual networks in a subscription:", "command": "az network vnet list"}, {"task": "Create a virtual network:", "command": "az network vnet create --address-prefixes {{10.0.0.0/16}} --name {{vnet}} --resource_group {{group_name}} --submet-name {{subnet}} --subnet-prefixes {{10.0.0.0/24}}"}, {"task": "Enable accelerated networking for a network interface card:", "command": "az network nic update --accelerated-networking true --name {{nic}} --resource-group {{resource_group}}"}]}
{"command": "az pipelines", "tasks": [{"task": "Create a new Azure Pipeline (YAML based):", "command": "az pipelines create --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}} --description {{description}} --repository {{repository_name}} --branch {{branch_name}}"}, {"task": "Delete a specific pipeline:", "command": "az pipelines delete --org {{organization_url}} --project {{project_name}} --id {{pipeline_id}}"}, {"task": "List pipelines:", "command": "az pipelines list --org {{organization_url}} --project {{project_name}}"}, {"task": "Enqueue a specific pipeline to run:", "command": "az pipelines run --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}}"}, {"task": "Get the details of a specific pipeline:", "command": "az pipelines show --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}}"}, {"task": "Update a specific pipeline:", "command": "az pipelines update --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}} --new-name {{pipeline_new_name}} --new-folder-path {{user1/production_pipelines}}"}, {"task": "Get a list of agents in a pool:", "command": "az pipelines agent list --org {{organization_url}} --pool-id {{agent_pool}}"}]}
{"command": "az provider", "tasks": [{"task": "Register a provider:", "command": "az provider register --namespace {{Microsoft.PolicyInsights}}"}, {"task": "Unregister a provider:", "command": "az provider unregister --namespace {{Microsoft.Automation}}"}, {"task": "List all providers for a subscription:", "command": "az provider list"}, {"task": "Show information about a specific provider:", "command": "az provider show --namespace {{Microsoft.Storage}}"}, {"task": "List all resource types for a specific provider:", "command": "az provider list --query \"[?namespace=='{{Microsoft.Network}}'].resourceTypes[].resourceType\""}]}
{"command": "az redis", "tasks": [{"task": "Create a new Redis cache instance:", "command": "az redis create --location {{location}} --name {{name}} --resource-group {{resource_group}} --sku {{Basic|Premium|Standard}} --vm-size {{c0|c1|c2|c3|c4|c5|c6|p1|p2|p3|p4|p5}}"}, {"task": "Update a Redis cache:", "command": "az redis update --name {{name}} --resource-group {{resource_group}} --sku {{Basic|Premium|Standard}} --vm-size {{c0|c1|c2|c3|c4|c5|c6|p1|p2|p3|p4|p5}}"}, {"task": "Export data stored in a Redis cache:", "command": "az redis export --container {{container}} --file-format {{file-format}} --name {{name}} --prefix {{prefix}} --resource-group {{resource_group}}"}, {"task": "Delete a Redis cache:", "command": "az redis delete --name {{name}} --resource-group {{resource_group}} --yes"}]}
{"command": "az repos", "tasks": [{"task": "List all repos in a specific project:", "command": "az repos list --project {{project_name}}"}, {"task": "Add policy on a specific branch of a specific repository to restrict basic merge:", "command": "az repos policy merge-strategy create --repository-id {{repository_id_in_repos_list}} --branch {{branch_name}} --blocking --enabled --allow-no-fast-forward false --allow-rebase true --allow-rebase-merge true --allow-squash true"}, {"task": "Add build validation on a specific repository, using an existing build pipeline, to be triggered automatically on source update:", "command": "az repos policy build create --repository-id {{repository_id}} --build-definition-id {{build_pipeline_id}} --branch main --blocking --enabled --queue-on-source-update-only true --display-name {{name}} --valid-duration {{minutes}}"}, {"task": "List all active Pull Requests on a specific repository within a specific project:", "command": "az repos pr list --project {{project_name}} --repository {{repository_name}} --status active"}]}
{"command": "az sshkey", "tasks": [{"task": "Create a new SSH key:", "command": "az sshkey create --name {{name}} --resource-group {{resource_group}}"}, {"task": "Upload an existing SSH key:", "command": "az sshkey create --name {{name}} --resource-group {{resource_group}} --public-key \"{{@path/to/key.pub}}\""}, {"task": "List all SSH public keys:", "command": "az sshkey list"}, {"task": "Show information about an SSH public key:", "command": "az sshkey show --name {{name}} --resource-group {{resource_group}}"}]}
{"command": "az storage account", "tasks": [{"task": "Create an storage account:", "command": "az storage account create --name {{storage_account_name}} --resource-group {{azure_resource_group}} --location {{azure_location}} --sku {{storage_account_sku}}"}, {"task": "Generate a shared access signature for a specific storage account:", "command": "az storage account generate-sas --account-name {{storage_account_name}} --name {{account_name}} --permissions {{sas_permissions}} --expiry {{expiry_date}} --services {{storage_services}} --resource-types {{resource_types}}"}, {"task": "List storage accounts:", "command": "az storage account list --resource-group {{azure_resource_group}}"}, {"task": "Delete a specific storage account:", "command": "az storage account delete --name {{storage_account_name}} --resource-group {{azure_resource_group}}"}]}
{"command": "az storage blob", "tasks": [{"task": "Download a blob to a file path:", "command": "az storage blob download --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} -f {{path/to/local_file}}"}, {"task": "Download blobs from a blob container recursively:", "command": "az storage blob download-batch --account-name {{storage_account_name}} --account-key {{storage_account_key}} -s {{container_name}} -d {{path/to/remote}} --pattern {{filename_regex}} --destination {{path/to/destination}}"}, {"task": "Upload a local file to blob storage:", "command": "az storage blob upload --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} -f {{path/to/local_file}}"}, {"task": "Delete a blob object:", "command": "az storage blob delete --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}}"}, {"task": "Generate a shared access signature for a blob:", "command": "az storage blob generate-sas --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} --permissions {{permission_set}} --expiry {{Y-m-d'T'H:M'Z'}} --https-only"}]}
{"command": "az storage container", "tasks": [{"task": "Create a container in a storage account:", "command": "az storage container create --account-name {{storage_account_name}} --name {{container_name}} --public-access {{access_level}} --fail-on-exist"}, {"task": "Generate a shared access signature for the container:", "command": "az storage container generate-sas --account-name {{storage_account_name}} --name {{container_name}} --permissions {{sas_permissions}} --expiry {{expiry_date}} --https-only"}, {"task": "List containers in a storage account:", "command": "az storage container list --account-name {{storage_account_name}} --prefix {{filter_prefix}}"}, {"task": "Mark the specified container for deletion:", "command": "az storage container delete --account-name {{storage_account_name}} --name {{container_name}} --fail-not-exist"}]}
{"command": "az storage entity", "tasks": [{"task": "Insert an entity into a table:", "command": "az storage entity insert --entity {{space_separated_key_value_pairs}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}"}, {"task": "Delete an existing entity from a table:", "command": "az storage entity delete --partition-key {{partition_key}} --row-key {{row_key}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}"}, {"task": "Update an existing entity by merging its properties:", "command": "az storage entity merge --entity {{space_separated_key_value_pairs}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}"}, {"task": "List entities which satisfy a query:", "command": "az storage entity query --filter {{query_filter}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}"}, {"task": "Get an entity from the specified table:", "command": "az storage entity show --partition-key {{partition_key}} --row-key {{row_key}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}"}]}
{"command": "az storage queue", "tasks": [{"task": "Create a queue:", "command": "az storage queue create --account-name {{storage_account_name}} --name {{queue_name}} --metadata {{queue_metadata}}"}, {"task": "Generate a shared access signature for the queue:", "command": "az storage queue generate-sas --account-name {{storage_account_name}} --name {{queue_name}} --permissions {{queue_permissions}} --expiry {{expiry_date}} --https-only"}, {"task": "List queues in a storage account:", "command": "az storage queue list --prefix {{filter_prefix}} --account-name {{storage_account_name}}"}, {"task": "Delete the specified queue and any messages it contains:", "command": "az storage queue delete --account-name {{storage_account_name}} --name {{queue_name}} --fail-not-exist"}]}
{"command": "az storage table", "tasks": [{"task": "Create a new table in the storage account:", "command": "az storage table create --account-name {{storage_account_name}} --name {{table_name}} --fail-on-exist"}, {"task": "Generate a shared access signature for the table:", "command": "az storage table generate-sas --account-name {{storage_account_name}} --name {{table_name}} --permissions {{sas_permissions}} --expiry {{expiry_date}} --https-only"}, {"task": "List tables in a storage account:", "command": "az storage table list --account-name {{storage_account_name}}"}, {"task": "Delete the specified table and any data it contains:", "command": "az storage table delete --account-name {{storage_account_name}} --name {{table_name}} --fail-not-exist"}]}
{"command": "az storage", "tasks": [{"task": "Create a storage account:", "command": "az storage account create -g {{group_name}} -n {{account_name}} -l {{location}} --sku {{account_sku}}"}, {"task": "List all storage accounts in a resource group:", "command": "az storage account list -g {{group_name}}"}, {"task": "List the access keys for a storage account:", "command": "az storage account keys list -g {{group_name}} -n {{account_name}}"}, {"task": "Delete a storage account:", "command": "az storage account delete -g {{group_name}} -n {{account_name}}"}, {"task": "Update the minimum tls version setting for a storage account:", "command": "az storage account update --min-tls-version TLS1_2 -g {{group_name}} -n {{account_name}}"}]}
{"command": "az tag", "tasks": [{"task": "Create a tag value:", "command": "az tag add-value --name {{tag_name}} --value {{tag_value}}"}, {"task": "Create a tag in the subscription:", "command": "az tag create --name {{tag_name}}"}, {"task": "Delete a tag from the subscription:", "command": "az tag delete --name {{tag_name}}"}, {"task": "List all tags on a subscription:", "command": "az tag list --resource-id /subscriptions/{{subscription_id}}"}, {"task": "Delete a tag value for a specific tag name:", "command": "az tag remove-value --name {{tag_name}} --value {{tag_value}}"}]}
{"command": "az term", "tasks": [{"task": "Print marketplace terms:", "command": "az term show --product \"{{product_identifier}}\" --plan \"{{plan_identifier}}\" --publisher \"{{publisher_identifier}}\""}, {"task": "Accept marketplace terms:", "command": "az term accept --product \"{{product_identifier}}\" --plan \"{{plan_identifier}}\" --publisher \"{{publisher_identifier}}\""}]}
{"command": "az upgrade", "tasks": [{"task": "Upgrade Azure CLI:", "command": "az upgrade"}, {"task": "Upgrade Azure CLI and Extensions:", "command": "az upgrade --all"}, {"task": "Upgrade Azure CLI and Extensions without prompting for confirmation:", "command": "az version --all --yes"}]}
{"command": "az version", "tasks": [{"task": "Show the current version of Azure CLI modules and extensions in JSON format:", "command": "az version"}, {"task": "Show the current version of Azure CLI modules and extensions in a given format:", "command": "az version --output {{json|table|tsv}}"}]}
{"command": "az vm", "tasks": [{"task": "List details of available Virtual Machines:", "command": "az vm list"}, {"task": "Create a virtual machine using the default Ubuntu image and generate ssh keys:", "command": "az vm create --resource-group {{rg}} --name {{vm_name}} --image {{UbuntuLTS}} --admin-user {{azureuser}} --generate-ssh-keys"}, {"task": "Stop a Virtual Machine:", "command": "az vm stop --resource-group {{rg}} --name {{vm_name}}"}, {"task": "Deallocate a Virtual Machine:", "command": "az vm deallocate --resource-group {{rg}} --name {{vm_name}}"}, {"task": "Start a Virtual Machine:", "command": "az vm start --resource-group {{rg}} --name {{vm_name}}"}, {"task": "Restart a Virtual Machine:", "command": "az vm restart --resource-group {{rg}} --name {{vm_name}}"}, {"task": "List VM images available in the Azure Marketplace:", "command": "az vm image list"}]}
{"command": "az webapp", "tasks": [{"task": "List available runtimes for a web application:", "command": "az webapp list-runtimes --os-type {{windows|linux}}"}, {"task": "Create a web application:", "command": "az webapp up --name {{name}} --location {{location}} --runtime {{runtime}}"}, {"task": "List all web applications:", "command": "az webapp list"}, {"task": "Delete a specific web application:", "command": "az webapp delete --name {{name}} --resource-group {{resource_group}}"}]}
{"command": "az", "tasks": [{"task": "Log in to Azure:", "command": "az login"}, {"task": "Manage azure subscription information:", "command": "az account"}, {"task": "List all Azure Managed Disks:", "command": "az disk list"}, {"task": "List all Azure virtual machines:", "command": "az vm list"}, {"task": "Manage Azure Kubernetes Services:", "command": "az aks"}, {"task": "Manage Azure Network resources:", "command": "az network"}]}
{"command": "azurite", "tasks": [{"task": "Use an existing [l]ocation as workspace path:", "command": "azurite {{-l|--location}} {{path/to/directory}}"}, {"task": "Disable access log displayed in console:", "command": "azurite {{-s|--silent}}"}, {"task": "Enable [d]ebug log by providing a file path as log destination:", "command": "azurite {{-d|--debug}} {{path/to/debug.log}}"}, {"task": "Customize the listening address of Blob/Queue/Table service:", "command": "azurite {{--blobHost|--queueHost|--tableHost}} {{0.0.0.0}}"}, {"task": "Customize the listening port of Blob/Queue/Table service:", "command": "azurite {{--blobPort|--queuePort|--tablePort}} {{8888}}"}]}
{"command": "b2sum", "tasks": [{"task": "Calculate the BLAKE2 checksum for one or more files:", "command": "b2sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of BLAKE2 checksums to a file:", "command": "b2sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.b2}}"}, {"task": "Calculate a BLAKE2 checksum from `stdin`:", "command": "{{command}} | b2sum"}, {"task": "Read a file of BLAKE2 sums and filenames and verify all files have matching checksums:", "command": "b2sum --check {{path/to/file.b2}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "b2sum --check --quiet {{path/to/file.b2}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "b2sum --ignore-missing --check --quiet {{path/to/file.b2}}"}]}
{"command": "b3sum", "tasks": [{"task": "Calculate the BLAKE3 checksum for one or more files:", "command": "b3sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of BLAKE3 checksums to a file:", "command": "b3sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.b3}}"}, {"task": "Calculate a BLAKE3 checksum from `stdin`:", "command": "{{command}} | b3sum"}, {"task": "Read a file of BLAKE3 sums and filenames and verify all files have matching checksums:", "command": "b3sum --check {{path/to/file.b3}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "b3sum --check --quiet {{path/to/file.b3}}"}]}
{"command": "babel", "tasks": [{"task": "Transpile a specified input file and output to `stdout`:", "command": "babel {{path/to/file}}"}, {"task": "Transpile a specified input file and output to a specific file:", "command": "babel {{path/to/input_file}} --out-file {{path/to/output_file}}"}, {"task": "Transpile the input file every time it is changed:", "command": "babel {{path/to/input_file}} --watch"}, {"task": "Transpile a whole directory of files:", "command": "babel {{path/to/input_directory}}"}, {"task": "Ignore specified comma-separated files in a directory:", "command": "babel {{path/to/input_directory}} --ignore {{ignored_files}}"}, {"task": "Transpile and output as minified JavaScript:", "command": "babel {{path/to/input_file}} --minified"}, {"task": "Choose a set of presets for output formatting:", "command": "babel {{path/to/input_file}} --presets {{presets}}"}, {"task": "Output all available options:", "command": "babel --help"}]}
{"command": "babeld", "tasks": [{"task": "Start `babeld` with a specific configuration file:", "command": "babeld -c {{path/to/babeld.conf}}"}, {"task": "Start `babeld` with multiple configuration files (read in order):", "command": "babeld -c {{path/to/ports.conf}} -c {{path/to/filters.conf}} -c {{path/to/interfaces.conf}}"}, {"task": "Start `babeld` and daemonise afterwards:", "command": "babeld -D"}, {"task": "Start `babeld` and pass a configuration command:", "command": "babeld -C {{'redistribute metric 256'}}"}, {"task": "Start `babeld` and specify on which interfaces to operate:", "command": "babeld {{eth0}} {{eth1}} {{wlan0}}"}]}
{"command": "badblocks", "tasks": [{"task": "Search a disk for bad blocks by using a non-destructive read-only test:", "command": "sudo badblocks {{/dev/sdX}}"}, {"task": "Search an unmounted disk for bad blocks with a non-destructive read-write test:", "command": "sudo badblocks -n {{/dev/sdX}}"}, {"task": "Search an unmounted disk for bad blocks with a destructive write test:", "command": "sudo badblocks -w {{/dev/sdX}}"}, {"task": "Search an unmounted disk for bad blocks with a destructive write test and show verbose status:", "command": "sudo badblocks -svw {{/dev/sdX}}"}, {"task": "Search an unmounted disk in destructive mode and output found blocks to a file:", "command": "sudo badblocks -o {{path/to/file}} -w {{/dev/sdX}}"}, {"task": "Search an unmounted disk in destructive mode with improved speed using 4K block size and 64K block count:", "command": "sudo badblocks -w -b {{4096}} -c {{65536}} {{/dev/sdX}}"}]}
{"command": "balena", "tasks": [{"task": "Log in to the balenaCloud account:", "command": "balena login"}, {"task": "Create a balenaCloud or openBalena application:", "command": "balena app create {{app_name}}"}, {"task": "List all balenaCloud or openBalena applications within the account:", "command": "balena apps"}, {"task": "List all devices associated with the balenaCloud or openBalena account:", "command": "balena devices"}, {"task": "Flash a balenaOS image to a local drive:", "command": "balena local flash {{path/to/balenaos.img}} --drive {{drive_location}}"}]}
{"command": "bandwhich", "tasks": [{"task": "Show the remote addresses table only:", "command": "bandwhich --addresses"}, {"task": "Show DNS queries:", "command": "bandwhich --show-dns"}, {"task": "Show total (cumulative) usage:", "command": "bandwhich --total-utilization"}, {"task": "Show the network utilization for a specific network interface:", "command": "bandwhich --interface {{eth0}}"}, {"task": "Show DNS queries with a given DNS server:", "command": "bandwhich --show-dns --dns-server {{dns_server_ip}}"}]}
{"command": "banner", "tasks": [{"task": "Print the text message as a large banner (quotes are optional):", "command": "banner \"{{Hello World}}\""}, {"task": "Print the text message as a banner with a width of 50 characters:", "command": "banner -w {{50}} \"{{Hello World}}\""}, {"task": "Read text from `stdin`:", "command": "banner"}]}
{"command": "base32", "tasks": [{"task": "Encode a file:", "command": "base32 {{path/to/file}}"}, {"task": "Decode a file:", "command": "base32 --decode {{path/to/file}}"}, {"task": "Encode from `stdin`:", "command": "{{somecommand}} | base32"}, {"task": "Decode from `stdin`:", "command": "{{somecommand}} | base32 --decode"}]}
{"command": "base64", "tasks": [{"task": "Encode the contents of a file as base64 and write the result to `stdout`:", "command": "base64 {{path/to/file}}"}, {"task": "Decode the base64 contents of a file and write the result to `stdout`:", "command": "base64 --decode {{path/to/file}}"}, {"task": "Encode from `stdin`:", "command": "{{somecommand}} | base64"}, {"task": "Decode from `stdin`:", "command": "{{somecommand}} | base64 --decode"}]}
{"command": "basename", "tasks": [{"task": "Show only the file name from a path:", "command": "basename {{path/to/file}}"}, {"task": "Show only the rightmost directory name from a path:", "command": "basename {{path/to/directory/}}"}, {"task": "Show only the file name from a path, with a suffix removed:", "command": "basename {{path/to/file}} {{suffix}}"}]}
{"command": "basenc", "tasks": [{"task": "Encode a file with base64 encoding:", "command": "basenc --base64 {{path/to/file}}"}, {"task": "Decode a file with base64 encoding:", "command": "basenc --decode --base64 {{path/to/file}}"}, {"task": "Encode from `stdin` with base32 encoding with 42 columns:", "command": "{{command}} | basenc --base32 -w42"}, {"task": "Encode from `stdin` with base32 encoding:", "command": "{{command}} | basenc --base32"}]}
{"command": "bash-it", "tasks": [{"task": "Update Bash-it to the latest stable/development version:", "command": "bash-it update {{stable|dev}}"}, {"task": "Reload Bash profile (set `BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE` to non-empty value for an automatic reload):", "command": "bash-it reload"}, {"task": "Restart Bash:", "command": "bash-it restart"}, {"task": "Reload Bash profile with enabled error and warning logging:", "command": "bash-it doctor"}, {"task": "Reload Bash profile with enabled error/warning/entire logging:", "command": "bash-it doctor {{errors|warnings|all}}"}, {"task": "Search for Bash-it aliases/plugins/completions:", "command": "bash-it search {{alias|plugin|completion}}"}, {"task": "Search for Bash-it aliases/plugins/completions and enable/disable all found items:", "command": "bash-it search --{{enable|disable}} {{alias|plugin|completion}}"}]}
{"command": "bash", "tasks": [{"task": "Start an interactive shell session:", "command": "bash"}, {"task": "Start an interactive shell session without loading startup configs:", "command": "bash --norc"}, {"task": "Execute specific [c]ommands:", "command": "bash -c \"{{echo 'bash is executed'}}\""}, {"task": "Execute a specific script:", "command": "bash {{path/to/script.sh}}"}, {"task": "Execute a specific script while printing each command before executing it:", "command": "bash -x {{path/to/script.sh}}"}, {"task": "Execute a specific script and stop at the first [e]rror:", "command": "bash -e {{path/to/script.sh}}"}, {"task": "Execute specific commands from `stdin`:", "command": "{{echo \"echo 'bash is executed'\"}} | bash"}, {"task": "Start a [r]estricted shell session:", "command": "bash -r"}]}
{"command": "bashmarks", "tasks": [{"task": "List available bookmarks:", "command": "l"}, {"task": "Save the current directory as \"bookmark_name\":", "command": "s {{bookmark_name}}"}, {"task": "Go to a bookmarked directory:", "command": "g {{bookmark_name}}"}, {"task": "Print a bookmarked directory's contents:", "command": "p {{bookmark_name}}"}, {"task": "Delete a bookmark:", "command": "d {{bookmark_name}}"}]}
{"command": "bastet", "tasks": [{"task": "Start a Tetris game:", "command": "bastet"}, {"task": "Navigate the piece horizontally:", "command": "{{Left|Right}} arrow key"}, {"task": "Rotate the piece clockwise or counterclockwise:", "command": "{{Spacebar|Up arrow key}}"}, {"task": "Soft drop the piece:", "command": "Down arrow key"}, {"task": "Hard drop the piece:", "command": "Enter"}, {"task": "Pause the game:", "command": "p"}, {"task": "Quit the game:", "command": "Ctrl + C"}]}
{"command": "bat", "tasks": [{"task": "Print the contents of a file to `stdout`:", "command": "bat {{path/to/file}}"}, {"task": "Concatenate several files into the target file:", "command": "bat {{file1}} {{file2}} > {{target_file}}"}, {"task": "Append several files into the target file:", "command": "bat {{file1}} {{file2}} >> {{target_file}}"}, {"task": "Number all output lines:", "command": "bat --number {{path/to/file}}"}, {"task": "Syntax highlight a JSON file:", "command": "bat --language json {{file.json}}"}, {"task": "Display all supported languages:", "command": "bat --list-languages"}]}
{"command": "batch", "tasks": [{"task": "Execute commands from `stdin` (press `Ctrl + D` when done):", "command": "batch"}, {"task": "Execute a command from `stdin`:", "command": "echo \"{{./make_db_backup.sh}}\" | batch"}, {"task": "Execute commands from a given file:", "command": "batch -f {{path/to/file}}"}]}
{"command": "bazel", "tasks": [{"task": "Build the specified target in the workspace:", "command": "bazel build {{target}}"}, {"task": "Remove output files and stop the server if running:", "command": "bazel clean"}, {"task": "Stop the bazel server:", "command": "bazel shutdown"}, {"task": "Display runtime info about the bazel server:", "command": "bazel info"}, {"task": "Display help:", "command": "bazel help"}, {"task": "Display version:", "command": "bazel version"}]}
{"command": "bb", "tasks": [{"task": "[e]valuate an expression:", "command": "bb -e \"(+ 1 2 3)\""}, {"task": "Evaluate a script [f]ile:", "command": "bb -f {{path/to/script.clj}}"}, {"task": "Bind input to a sequence of lines from `stdin`:", "command": "printf \"first\\nsecond\" | bb -i \"(map clojure.string/capitalize *input*)\""}, {"task": "Bind input to a sequence of EDN(Extensible Data Notation) values from `stdin`:", "command": "echo \"{:key 'val}\" | bb -I \"(:key (first *input*))\""}]}
{"command": "bc", "tasks": [{"task": "Start an interactive session:", "command": "bc"}, {"task": "Start an interactive session with the standard math library enabled:", "command": "bc --mathlib"}, {"task": "Calculate an expression:", "command": "echo '{{5 / 3}}' | bc"}, {"task": "Execute a script:", "command": "bc {{path/to/script.bc}}"}, {"task": "Calculate an expression with the specified scale:", "command": "echo 'scale = {{10}}; {{5 / 3}}' | bc"}, {"task": "Calculate a sine/cosine/arctangent/natural logarithm/exponential function using `mathlib`:", "command": "echo '{{s|c|a|l|e}}({{1}})' | bc --mathlib"}]}
{"command": "bcomps", "tasks": [{"task": "Decompose one or more graphs into their biconnected components:", "command": "bcomps {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Print the number of blocks and cutvertices in one or more graphs:", "command": "bcomps -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Write each block and block-cutvertex tree to multiple numbered filenames based on `output.gv`:", "command": "bcomps -x -o {{path/to/output.gv}} {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Display help for `bcomps`:", "command": "bcomps -?"}]}
{"command": "beanstalkd", "tasks": [{"task": "Start Beanstalk, listening on port 11300:", "command": "beanstalkd"}, {"task": "Start Beanstalk listening on a custom port and address:", "command": "beanstalkd -l {{ip_address}} -p {{port_number}}"}, {"task": "Persist work queues by saving them to disk:", "command": "beanstalkd -b {{path/to/persistence_directory}}"}, {"task": "Sync to the persistence directory every 500 milliseconds:", "command": "beanstalkd -b {{path/to/persistence_directory}} -f {{500}}"}]}
{"command": "bedtools", "tasks": [{"task": "Intersect two files regarding the sequences' strand and save the result to the specified file:", "command": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -s > {{path/to/output_file}}"}, {"task": "Intersect two files with a left outer join, i.e. report each feature from {{file_1}} and NULL if no overlap with {{file_2}}:", "command": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -lof > {{path/to/output_file}}"}, {"task": "Using more efficient algorithm to intersect two pre-sorted files:", "command": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -sorted > {{path/to/output_file}}"}, {"task": "Group file {{`path/to/file`}} based on the first three and the fifth column and summarize the sixth column by summing it up:", "command": "bedtools groupby -i {{path/to/file}} -c 1-3,5 -g 6 -o sum"}, {"task": "Convert bam-formatted file to a bed-formatted one:", "command": "bedtools bamtobed -i {{path/to/file}}.bam > {{path/to/file}}.bed"}, {"task": "Find for all features in {{file_1}}.bed the closest one in {{file_2}}.bed and write their distance in an extra column (input files must be sorted):", "command": "bedtools closest -a {{path/to/file_1}}.bed -b {{path/to/file_2}}.bed -d"}]}
{"command": "behat", "tasks": [{"task": "Initialize a new Behat project:", "command": "behat --init"}, {"task": "Run all tests:", "command": "behat"}, {"task": "Run all tests from the specified suite:", "command": "behat --suite={{suite_name}}"}, {"task": "Run tests with a specific output formatter:", "command": "behat --format {{pretty|progress}}"}, {"task": "Run tests and output results to a file:", "command": "behat --out {{path/to/file}}"}, {"task": "Display a list of definitions in your test suites:", "command": "behat --definitions"}]}
{"command": "berks", "tasks": [{"task": "Install cookbook dependencies into a local repo:", "command": "berks install"}, {"task": "Update a specific cookbook and its dependencies:", "command": "berks update {{cookbook}}"}, {"task": "Upload a cookbook to the Chef server:", "command": "berks upload {{cookbook}}"}, {"task": "View the dependencies of a cookbook:", "command": "berks contingent {{cookbook}}"}]}
{"command": "betty", "tasks": [{"task": "Ask Betty something:", "command": "betty {{what time is it}}"}, {"task": "Download a file:", "command": "betty download {{https://example.com/file.ext}} to {{path/to/output_file.ext}}"}, {"task": "Compress a file or directory to one of the support archive formats:", "command": "betty {{zip}} {{path/to/file_or_directory}}"}, {"task": "Extract an archive into the current directory:", "command": "betty {{unzip}} {{archive.tar.gz}}"}, {"task": "Extract an archive into a specific directory:", "command": "betty unarchive {{archive.tar.gz}} to {{path/to/directory}}"}, {"task": "Play Spotify:", "command": "betty play {{Spotify}}"}, {"task": "Drive Betty to madness:", "command": "betty go crazy"}, {"task": "Display version:", "command": "betty version"}]}
{"command": "bfg", "tasks": [{"task": "Remove a file with sensitive data but leave the latest commit untouched:", "command": "bfg --delete-files {{file_with_sensitive_data}}"}, {"task": "Remove all text mentioned in the specified file wherever it can be found in the repository's history:", "command": "bfg --replace-text {{path/to/file.txt}}"}]}
{"command": "bg", "tasks": [{"task": "Resume the most recently suspended job and run it in the background:", "command": "bg"}, {"task": "Resume a specific job (use `jobs -l` to get its ID) and run it in the background:", "command": "bg %{{job_id}}"}]}
{"command": "bgpgrep", "tasks": [{"task": "Output all routes:", "command": "bgpgrep {{master6.mrt}}"}, {"task": "Output all routes received from a specific peer, determined by the peer's AS number:", "command": "bgpgrep {{master4.mrt}} -peer {{64498}}"}, {"task": "Output all routes received from a specific peer, determined by the peer's IP address:", "command": "bgpgrep {{master4.mrt.bz2}} -peer {{2001:db8:dead:cafe:acd::19e}}"}, {"task": "Output all routes which have certain ASNs in their AS path:", "command": "bgpgrep {{master6.mrt.bz2}} -aspath '{{64498 64510}}'"}, {"task": "Output all routes that lead to a specific address:", "command": "bgpgrep {{master6.mrt.bz2}} -supernet '{{2001:db8:dead:cafe:aef::5}}'"}, {"task": "Output all routes that have communities from a specific AS:", "command": "bgpgrep {{master4.mrt}} -communities \\( '{{64497}}:*' \\)"}]}
{"command": "bindkey", "tasks": [{"task": "Bind a hotkey to a specific command:", "command": "bindkey \"{{^k}}\" {{kill-line}}"}, {"task": "Bind a hotkey to a specific key sequence:", "command": "bindkey -s '^o' 'cd ..\\n'"}, {"task": "View keymaps:", "command": "bindkey -l"}, {"task": "View the hotkey in a keymap:", "command": "bindkey -M main"}]}
{"command": "binwalk", "tasks": [{"task": "Scan a binary file:", "command": "binwalk {{path/to/binary}}"}, {"task": "Extract files from a binary, specifying the output directory:", "command": "binwalk --extract --directory {{output_directory}} {{path/to/binary}}"}, {"task": "Recursively extract files from a binary limiting the recursion depth to 2:", "command": "binwalk --extract --matryoshka --depth {{2}} {{path/to/binary}}"}, {"task": "Extract files from a binary with the specified file signature:", "command": "binwalk --dd '{{png image:png}}' {{path/to/binary}}"}, {"task": "Analyze the entropy of a binary, saving the plot with the same name as the binary and `.png` extension appended:", "command": "binwalk --entropy --save {{path/to/binary}}"}, {"task": "Combine entropy, signature and opcodes analysis in a single command:", "command": "binwalk --entropy --signature --opcodes {{path/to/binary}}"}]}
{"command": "bird", "tasks": [{"task": "Start Bird with a specific configuration file:", "command": "bird -c {{path/to/bird.conf}}"}, {"task": "Start Bird as a specific user and group:", "command": "bird -u {{username}} -g {{group}}"}]}
{"command": "birdc", "tasks": [{"task": "Open the remote control console:", "command": "birdc"}, {"task": "Reload the configuration without restarting Bird:", "command": "birdc configure"}, {"task": "Show the current status of Bird:", "command": "birdc show status"}, {"task": "Show all configured protocols:", "command": "birdc show protocols"}, {"task": "Show all details about a protocol:", "command": "birdc show protocols {{upstream1}} all"}, {"task": "Show all routes that contain a specific AS number:", "command": "birdc \"show route where bgp_path ~ [{{4242120045}}]\""}, {"task": "Show all best routes:", "command": "birdc show route primary"}, {"task": "Show all details of all routes from a given prefix:", "command": "birdc show route for {{fd00:/8}} all"}]}
{"command": "bison", "tasks": [{"task": "Compile a bison definition file:", "command": "bison {{path/to/file.y}}"}, {"task": "Compile in debug mode, which causes the resulting parser to write additional information to `stdout`:", "command": "bison --debug {{path/to/file.y}}"}, {"task": "Specify the output filename:", "command": "bison --output {{path/to/output.c}} {{path/to/file.y}}"}, {"task": "Be verbose when compiling:", "command": "bison --verbose"}]}
{"command": "bitcoin-cli", "tasks": [{"task": "Send a transaction to a given address:", "command": "bitcoin-cli sendtoaddress \"{{address}}\" {{amount}}"}, {"task": "Generate one or more blocks:", "command": "bitcoin-cli generate {{num_blocks}}"}, {"task": "Print high-level information about the wallet:", "command": "bitcoin-cli getwalletinfo"}, {"task": "List all outputs from previous transactions available to fund outgoing transactions:", "command": "bitcoin-cli listunspent"}, {"task": "Export the wallet information to a text file:", "command": "bitcoin-cli dumpwallet \"{{path/to/file}}\""}]}
{"command": "black", "tasks": [{"task": "Auto-format a file or entire directory:", "command": "black {{path/to/file_or_directory}}"}, {"task": "Format the code passed in as a string:", "command": "black -c \"{{code}}\""}, {"task": "Output whether a file or a directory would have changes made to them if they were to be formatted:", "command": "black --check {{path/to/file_or_directory}}"}, {"task": "Output changes that would be made to a file or a directory without performing them (dry-run):", "command": "black --diff {{path/to/file_or_directory}}"}, {"task": "Auto-format a file or directory, emitting exclusively error messages to `stderr`:", "command": "black --quiet {{path/to/file_or_directory}}"}, {"task": "Auto-format a file or directory without replacing single quotes with double quotes (adoption helper, avoid using this for new projects):", "command": "black --skip-string-normalization {{path/to/file_or_directory}}"}]}
{"command": "blackfire", "tasks": [{"task": "Initialize and configure the Blackfire client:", "command": "blackfire config"}, {"task": "Launch the Blackfire agent:", "command": "blackfire agent"}, {"task": "Launch the Blackfire agent on a specific socket:", "command": "blackfire agent --socket=\"{{tcp://127.0.0.1:8307}}\""}, {"task": "Run the profiler on a specific program:", "command": "blackfire run {{php path/to/file.php}}"}, {"task": "Run the profiler and collect 10 samples:", "command": "blackfire --samples={{10}} run {{php path/to/file.php}}"}, {"task": "Run the profiler and output results as JSON:", "command": "blackfire --json run {{php path/to/file.php}}"}, {"task": "Upload a profiler file to the Blackfire web service:", "command": "blackfire upload {{path/to/file}}"}, {"task": "View the status of profiles on the Blackfire web service:", "command": "blackfire status"}]}
{"command": "blender", "tasks": [{"task": "Render all frames of an animation in the background, without loading the UI (output is saved to `/tmp`):", "command": "blender --background {{path/to/file}}.blend --render-anim"}, {"task": "Render an animation using a specific image naming pattern, in a path relative (`//`) to the .blend file:", "command": "blender --background {{path/to/file}}.blend --render-output //{{render/frame_###.png}} --render-anim"}, {"task": "Render the 10th frame of an animation as a single image, saved to an existing directory (absolute path):", "command": "blender --background {{path/to/file}}.blend --render-output {{/path/to/output_directory}} --render-frame {{10}}"}, {"task": "Render the second last frame in an animation as a JPEG image, saved to an existing directory (relative path):", "command": "blender --background {{path/to/file}}.blend --render-output //{{output_directory}} --render-frame {{JPEG}} --render-frame {{-2}}"}, {"task": "Render the animation of a specific scene, starting at frame 10 and ending at frame 500:", "command": "blender --background {{path/to/file}}.blend --scene {{scene_name}} --frame-start {{10}} -e {{500}} --render-anim"}, {"task": "Render an animation at a specific resolution, by passing a Python expression:", "command": "blender --background {{path/to/file}}.blend --python-expr '{{import bpy; bpy.data.scenes[0].render.resolution_percentage = 25}}' --render-anim"}, {"task": "Start an interactive Blender session in the terminal with a python console (do `import bpy` after starting):", "command": "blender --background --python-console"}]}
{"command": "blockout2", "tasks": [{"task": "Start a new game:", "command": "blockout2"}, {"task": "Navigate the current piece on a 2D plane:", "command": "{{Up|Down|Left|Right}} arrow key"}, {"task": "Rotate the piece on its axis:", "command": "{{Q|W|E|A|S|D}}"}, {"task": "Hard drop the current piece:", "command": "Spacebar"}, {"task": "Pause/unpause the game:", "command": "p"}]}
{"command": "bmaptool", "tasks": [{"task": "Create a blockmap from image file:", "command": "bmaptool create -o {{blockmap.bmap}} {{source.img}}"}, {"task": "Copy an image file into sdb:", "command": "bmaptool copy --bmap {{blockmap.bmap}} {{source.img}} {{/dev/sdb}}"}, {"task": "Copy a compressed image file into sdb:", "command": "bmaptool copy --bmap {{blockmap.bmap}} {{source.img.gz}} {{/dev/sdb}}"}, {"task": "Copy an image file into sdb without using a blockmap:", "command": "bmaptool copy --nobmap {{source.img}} {{/dev/sdb}}"}]}
{"command": "bob", "tasks": [{"task": "Install and switch to the specified version of Neovim:", "command": "bob use {{nightly|stable|latest|version_string|commit_hash}}"}, {"task": "List installed and currently used versions of Neovim:", "command": "bob list"}, {"task": "Uninstall the specified version of Neovim:", "command": "bob uninstall {{nightly|stable|latest|version_string|commit_hash}}"}, {"task": "Uninstall Neovim and erase any changes `bob` has made:", "command": "bob erase"}, {"task": "Roll back to a previous nightly version:", "command": "bob rollback"}]}
{"command": "boot", "tasks": [{"task": "Start a REPL session either with the project or standalone:", "command": "boot repl"}, {"task": "Build a single `uberjar`:", "command": "boot jar"}, {"task": "Learn about a command:", "command": "boot cljs --help"}, {"task": "Generate scaffolding for a new project based on a template:", "command": "boot --dependencies boot/new new --template {{template_name}} --name {{project_name}}"}, {"task": "Build for development (if using the boot/new template):", "command": "boot dev"}, {"task": "Build for production (if using the boot/new template):", "command": "boot prod"}]}
{"command": "borg", "tasks": [{"task": "Initialize a (local) repository:", "command": "borg init {{path/to/repo_directory}}"}, {"task": "Backup a directory into the repository, creating an archive called \"Monday\":", "command": "borg create --progress {{path/to/repo_directory}}::{{Monday}} {{path/to/source_directory}}"}, {"task": "List all archives in a repository:", "command": "borg list {{path/to/repo_directory}}"}, {"task": "Extract a specific directory from the \"Monday\" archive in a remote repository, excluding all `*.ext` files:", "command": "borg extract {{user}}@{{host}}:{{path/to/repo_directory}}::{{Monday}} {{path/to/target_directory}} --exclude '{{*.ext}}'"}, {"task": "Prune a repository by deleting all archives older than 7 days, listing changes:", "command": "borg prune --keep-within {{7d}} --list {{path/to/repo_directory}}"}, {"task": "Mount a repository as a FUSE filesystem:", "command": "borg mount {{path/to/repo_directory}}::{{Monday}} {{path/to/mountpoint}}"}, {"task": "Display help on creating archives:", "command": "borg create --help"}]}
{"command": "bosh", "tasks": [{"task": "Create local alias for director:", "command": "bosh alias-env {{environment_name}} -e {{ip_address|url}} --ca-cert {{ca_certificate}}"}, {"task": "List environments:", "command": "bosh environments"}, {"task": "Log in to the director:", "command": "bosh login -e {{environment}} "}, {"task": "List deployments:", "command": "bosh -e {{environment}} deployments"}, {"task": "List environment virtual machines:", "command": "bosh -e {{environment}} vms -d {{deployment}}"}, {"task": "Ssh into virtual machine:", "command": "bosh -e {{environment}} ssh {{virtual_machine}} -d {{deployment}}"}, {"task": "Upload stemcell:", "command": "bosh -e {{environment}} upload-stemcell {{stemcell_file|url}}"}, {"task": "Show current cloud config:", "command": "bosh -e {{environment}} cloud-config"}]}
{"command": "bower", "tasks": [{"task": "Install a project's dependencies, listed in its bower.json:", "command": "bower install"}, {"task": "Install one or more packages to the bower_components directory:", "command": "bower install {{package}} {{package}}"}, {"task": "Uninstall packages locally from the bower_components directory:", "command": "bower uninstall {{package}} {{package}}"}, {"task": "List local packages and possible updates:", "command": "bower list"}, {"task": "Display help information about a bower command:", "command": "bower help {{command}}"}, {"task": "Create a `bower.json` file for your package:", "command": "bower init"}, {"task": "Install a specific dependency version, and add it to `bower.json`:", "command": "bower install {{local_name}}={{package}}#{{version}} --save"}]}
{"command": "box", "tasks": [{"task": "Compile a new Phar file:", "command": "box compile"}, {"task": "Compile a new Phar file using a specific config file:", "command": "box compile -c {{path/to/config}}"}, {"task": "Display information about the PHAR PHP extension:", "command": "box info"}, {"task": "Display information about a specific Phar file:", "command": "box info {{path/to/phar_file}}"}, {"task": "Validate the first found config file in the working directory:", "command": "box validate"}, {"task": "Verify the signature of a specific Phar file:", "command": "box verify {{path/to/phar_file}}"}, {"task": "Display all available commands and options:", "command": "box help"}]}
{"command": "boxes", "tasks": [{"task": "Draw a box around a string:", "command": "echo \"{{string}}\" | boxes"}, {"task": "Remove a box from a string:", "command": "echo \"{{string}}\" | boxes -r"}, {"task": "Draw a box with a specific design around a string:", "command": "echo \"{{string}}\" | boxes -d {{parchment}}"}, {"task": "Draw a box with a width of 10 and a height of 5:", "command": "echo \"{{string}}\" | boxes -s {{10}}x{{5}}"}, {"task": "Draw a box with centered text:", "command": "echo \"{{string}}\" | boxes -a c"}]}
{"command": "bpytop", "tasks": [{"task": "Start `bpytop`:", "command": "bpytop"}, {"task": "Start in minimal mode without memory and networking boxes:", "command": "bpytop -m"}, {"task": "Show version:", "command": "bpytop -v"}, {"task": "Toggle minimal mode:", "command": "m"}, {"task": "Search for running programs or processes:", "command": "f"}, {"task": "Change settings:", "command": "M"}]}
{"command": "bq", "tasks": [{"task": "Run query against a BigQuery table using standard SQL, add `--dry_run` flag to estimate the number of bytes read by the query:", "command": "bq query --nouse_legacy_sql 'SELECT COUNT(*) FROM {{DATASET_NAME}}.{{TABLE_NAME}}'"}, {"task": "Run a parameterized query:", "command": "bq query --use_legacy_sql=false --parameter='ts_value:TIMESTAMP:2016-12-07 08:00:00' 'SELECT TIMESTAMP_ADD(@ts_value, INTERVAL 1 HOUR)'"}, {"task": "Create a new dataset or table in the US location:", "command": "bq mk --location=US {{dataset_name}}.{{table_name}}"}, {"task": "List all datasets in a project:", "command": "bq ls --filter labels.{{key}}:{{value}} --max_results {{integer}} --format=prettyjson --project_id {{project_id}}"}, {"task": "Batch load data from a specific file in formats such as CSV, JSON, Parquet, and Avro to a table:", "command": "bq load --location={{location}} --source_format={{CSV|JSON|PARQUET|AVRO}} {{dataset}}.{{table}} {{path_to_source}}"}, {"task": "Copy one table to another:", "command": "bq cp {{dataset}}.{{OLD_TABLE}} {{dataset}}.{{new_table}}"}, {"task": "Print help:", "command": "bq help"}]}
{"command": "brew bundle", "tasks": [{"task": "Install packages from a Brewfile at the current path:", "command": "brew bundle"}, {"task": "Install packages from a specific Brewfile at a specific path:", "command": "brew bundle --file={{path/to/file}}"}, {"task": "Create a Brewfile from all installed packages:", "command": "brew bundle dump"}, {"task": "Uninstall all formulae not listed in the Brewfile:", "command": "brew bundle cleanup --force"}, {"task": "Check if there is anything to install or upgrade in the Brewfile:", "command": "brew bundle check"}, {"task": "Output a list of all entries in the Brewfile:", "command": "brew bundle list --all"}]}
{"command": "brew --cask", "tasks": [{"task": "Search for formulas and casks:", "command": "brew search {{text}}"}, {"task": "Install a cask:", "command": "brew install --cask {{cask_name}}"}, {"task": "List all installed casks:", "command": "brew list --cask"}, {"task": "List installed casks that have newer versions available:", "command": "brew outdated --cask"}, {"task": "Upgrade an installed cask (if no cask name is given, all installed casks are upgraded):", "command": "brew upgrade --cask {{cask_name}}"}, {"task": "Uninstall a cask:", "command": "brew uninstall --cask {{cask_name}}"}, {"task": "Uninstall a cask and remove related settings and files:", "command": "brew zap --cask {{cask_name}}"}, {"task": "Display information about a given cask:", "command": "brew info --cask {{cask_name}}"}]}
{"command": "brew", "tasks": [{"task": "Install the latest stable version of a formula or cask (use `--devel` for development versions):", "command": "brew install {{formula}}"}, {"task": "List all installed formulae and casks:", "command": "brew list"}, {"task": "Upgrade an installed formula or cask (if none is given, all installed formulae/casks are upgraded):", "command": "brew upgrade {{formula}}"}, {"task": "Fetch the newest version of Homebrew and of all formulae and casks from the Homebrew source repository:", "command": "brew update"}, {"task": "Show formulae and casks that have a more recent version available:", "command": "brew outdated"}, {"task": "Search for available formulae (i.e. packages) and casks (i.e. native packages):", "command": "brew search {{text}}"}, {"task": "Display information about a formula or a cask (version, installation path, dependencies, etc.):", "command": "brew info {{formula}}"}, {"task": "Check the local Homebrew installation for potential problems:", "command": "brew doctor"}]}
{"command": "brittany", "tasks": [{"task": "Format a Haskell source file and print the result to `stdout`:", "command": "brittany {{path/to/file.hs}}"}, {"task": "Format all Haskell source files in the current directory in-place:", "command": "brittany --write-mode=inplace {{*.hs}}"}, {"task": "Check whether a Haskell source file needs changes and indicate the result through the programme's exit code:", "command": "brittany --check-mode {{path/to/file.hs}}"}, {"task": "Format a Haskell source file using the specified amount of spaces per indentation level and line length:", "command": "brittany --indent {{4}} --columns {{100}} {{path/to/file.hs}}"}, {"task": "Format a Haskell source file according to the style defined in the specified config file:", "command": "brittany --config-file {{path/to/config.yaml}} {{path/to/file.hs}}"}]}
{"command": "brotli", "tasks": [{"task": "Compress a file, creating a compressed version next to the file:", "command": "brotli {{path/to/file}}"}, {"task": "Decompress a file, creating an uncompressed version next to the file:", "command": "brotli -d {{path/to/file.br}}"}, {"task": "Compress a file specifying the output filename:", "command": "brotli {{path/to/file}} -o {{path/to/compressed_output_file.br}}"}, {"task": "Decompress a Brotli file specifying the output filename:", "command": "brotli -d {{path/to/compressed_file.br}} -o {{path/to/output_file}}"}, {"task": "Specify the compression level [1=Fastest (Worst), 11=Slowest (Best)]:", "command": "brotli -q {{11}} {{path/to/file}} -o {{path/to/compressed_output_file.br}}"}]}
{"command": "browser-sync", "tasks": [{"task": "Start a server from a specific directory:", "command": "browser-sync start --server {{path/to/directory}} --files {{path/to/directory}}"}, {"task": "Start a server from local directory, watching all CSS files in a directory:", "command": "browser-sync start --server --files '{{path/to/directory/*.css}}'"}, {"task": "Create configuration file:", "command": "browser-sync init"}, {"task": "Start Browsersync from config file:", "command": "browser-sync start --config {{config_file}}"}]}
{"command": "bshell", "tasks": [{"task": "Browse for both SSH and VNC servers:", "command": "bshell"}, {"task": "Browse for SSH servers only:", "command": "bshell --ssh"}, {"task": "Browse for VNC servers only:", "command": "bshell --vnc"}, {"task": "Browse for both SSH and VNC servers in a specified domain:", "command": "bshell --domain={{domain}}"}]}
{"command": "bssh", "tasks": [{"task": "Browse for SSH servers:", "command": "bssh"}, {"task": "Browse for VNC servers:", "command": "bssh --vnc"}, {"task": "Browse for both SSH and VNC servers:", "command": "bssh --shell"}, {"task": "Browse for SSH servers in a specified domain:", "command": "bssh --domain={{domain}}"}]}
{"command": "btm", "tasks": [{"task": "Show the default layout (CPU, memory, temperatures, disk, network, and processes):", "command": "btm"}, {"task": "Enable basic mode, removing charts and condensing data (similar to `top`):", "command": "btm --basic"}, {"task": "Use big dots instead of small ones in charts:", "command": "btm --dot_marker"}, {"task": "Show also battery charge and health status:", "command": "btm --battery"}, {"task": "Refresh every 250 milliseconds and show the last 30 seconds in the charts:", "command": "btm --rate 250 --default_time_value 30000"}]}
{"command": "btop", "tasks": [{"task": "Start `btop`:", "command": "btop"}, {"task": "Start `btop` with the specified settings preset:", "command": "btop --preset {{0..9}}"}]}
{"command": "buku", "tasks": [{"task": "Display all bookmarks matching \"keyword\" and with \"privacy\" tag:", "command": "buku {{keyword}} --stag {{privacy}}"}, {"task": "Add bookmark with tags \"search engine\" and \"privacy\":", "command": "buku --add {{https://example.com}} {{search engine}}, {{privacy}}"}, {"task": "Delete a bookmark:", "command": "buku --delete {{bookmark_id}}"}, {"task": "Open editor to edit a bookmark:", "command": "buku --write {{bookmark_id}}"}, {"task": "Remove \"search engine\" tag from a bookmark:", "command": "buku --update {{bookmark_id}} --tag {{-}} {{search engine}}"}]}
{"command": "bundle", "tasks": [{"task": "Install all gems defined in the `Gemfile` expected in the working directory:", "command": "bundle install"}, {"task": "Execute a command in the context of the current bundle:", "command": "bundle exec {{command}} {{arguments}}"}, {"task": "Update all gems by the rules defined in the `Gemfile` and regenerate `Gemfile.lock`:", "command": "bundle update"}, {"task": "Update one or more specific gem(s) defined in the `Gemfile`:", "command": "bundle update {{gem_name}} {{gem_name}}"}, {"task": "Update one or more specific gems(s) defined in the `Gemfile` but only to the next patch version:", "command": "bundle update --patch {{gem_name}} {{gem_name}}"}, {"task": "Update all gems within the given group in the `Gemfile`:", "command": "bundle update --group {{development}}"}, {"task": "List installed gems in the `Gemfile` with newer versions available:", "command": "bundle outdated"}, {"task": "Create a new gem skeleton:", "command": "bundle gem {{gem_name}}"}]}
{"command": "bundler", "tasks": [{"task": "View documentation for the original command:", "command": "tldr bundle"}]}
{"command": "bundletool dump", "tasks": [{"task": "Display the `AndroidManifest.xml` of the base module:", "command": "bundletool dump manifest --bundle={{path/to/bundle.aab}}"}, {"task": "Display a specific value from the `AndroidManifest.xml` using XPath:", "command": "bundletool dump manifest --bundle={{path/to/bundle.aab}} --xpath={{/manifest/@android:versionCode}}"}, {"task": "Display the `AndroidManifest.xml` of a specific module:", "command": "bundletool dump manifest --bundle={{path/to/bundle.aab}} --module={{name}}"}, {"task": "Display all the resources in the application bundle:", "command": "bundletool dump resources --bundle={{path/to/bundle.aab}}"}, {"task": "Display the configuration for a specific resource:", "command": "bundletool dump resources --bundle={{path/to/bundle.aab}} --resource={{type/name}}"}, {"task": "Display the configuration and values for a specific resource using the ID:", "command": "bundletool dump resources --bundle={{path/to/bundle.aab}} --resource={{0x7f0e013a}} --values"}, {"task": "Display the contents of the bundle configuration file:", "command": "bundletool dump config --bundle={{path/to/bundle.aab}}"}]}
{"command": "bundletool validate", "tasks": [{"task": "Verify a bundle and display detailed information about it:", "command": "bundletool validate --bundle={{path/to/bundle.aab}}"}]}
{"command": "bundletool", "tasks": [{"task": "Display help for a subcommand:", "command": "bundletool help {{subcommand}}"}, {"task": "Generate APKs from an application bundle (prompts for keystore password):", "command": "bundletool build-apks --bundle={{path/to/bundle.aab}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} --output={{path/to/file.apks}}"}, {"task": "Generate APKs from an application bundle giving the keystore password:", "command": "bundletool build-apks --bundle={{path/to/bundle.aab}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} –ks-pass={{pass:the_password}} --output={{path/to/file.apks}}"}, {"task": "Generate APKs including only one single APK for universal usage:", "command": "bundletool build-apks --bundle={{path/to/bundle.aab}} --mode={{universal}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} --output={{path/to/file.apks}}"}, {"task": "Install the right combination of APKs to an emulator or device:", "command": "bundletool install-apks --apks={{path/to/file.apks}}"}, {"task": "Estimate the download size of an application:", "command": "bundletool get-size total --apks={{path/to/file.apks}}"}, {"task": "Generate a device specification JSON file for an emulator or device:", "command": "bundletool get-device-spec --output={{path/to/file.json}}"}, {"task": "Verify a bundle and display detailed information about it:", "command": "bundletool validate --bundle={{path/to/bundle.aab}}"}]}
{"command": "bup", "tasks": [{"task": "Initialize a backup repository in the specified local directory:", "command": "bup -d {{path/to/repository}} init"}, {"task": "Prepare a given directory before taking a backup:", "command": "bup -d {{path/to/repository}} index {{path/to/directory}}"}, {"task": "Backup a directory to the repository:", "command": "bup -d {{path/to/repository}} save -n {{backup_name}} {{path/to/directory}}"}, {"task": "Show the backup snapshots currently stored in the repository:", "command": "bup -d {{path/to/repository}} ls"}, {"task": "Restore a specific backup snapshot to a target directory:", "command": "bup -d {{path/to/repository}} restore -C {{path/to/target_directory}} {{backup_name}}"}]}
{"command": "buzzphrase", "tasks": [{"task": "Generate a string of three random phrases containing an adjective, a past tense verb and a plural noun:", "command": "buzzphrase"}, {"task": "Output a phrase formatted as [i]mperative verb + past tense [v]erb + [a]djective + plural [N]oun:", "command": "buzzphrase {{'{i} {v} {a} {N}'}}"}, {"task": "Output 4 phrases formatted as present participle [V]erb + [a]djective + singular [n]oun + [f]inal:", "command": "buzzphrase {{4 '{V} {a} {n} {f}'}}"}]}
{"command": "bvnc", "tasks": [{"task": "Browse for VNC servers:", "command": "bvnc"}, {"task": "Browse for SSH servers:", "command": "bvnc --ssh"}, {"task": "Browse for both VNC and SSH servers:", "command": "bvnc --shell"}, {"task": "Browse for VNC servers in a specified domain:", "command": "bvnc --domain={{domain}}"}]}
{"command": "bw", "tasks": [{"task": "Log in to a Bitwarden user account:", "command": "bw login"}, {"task": "Log out of a Bitwarden user account:", "command": "bw logout"}, {"task": "Search and display items from Bitwarden vault:", "command": "bw list items --search {{github}}"}, {"task": "Display a particular item from Bitwarden vault:", "command": "bw get item {{github}}"}, {"task": "Create a folder in Bitwarden vault:", "command": "{{echo -n '{\"name\":\"My Folder1\"}' | base64}} | bw create folder"}]}
{"command": "bzegrep", "tasks": [{"task": "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-sensitive):", "command": "bzegrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-insensitive):", "command": "bzegrep --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines that do not match a pattern:", "command": "bzegrep --invert-match \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match:", "command": "bzegrep --with-filename --line-number \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "bzegrep --only-matching \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Recursively search files in a bzip2 compressed tar archive for a pattern:", "command": "bzegrep --recursive \"{{search_pattern}}\" {{path/to/file}}"}]}
{"command": "bzfgrep", "tasks": [{"task": "Search for lines matching the list of search strings separated by new lines in a compressed file (case-sensitive):", "command": "bzfgrep \"{{search_string}}\" {{path/to/file}}"}, {"task": "Search for lines matching the list of search strings separated by new lines in a compressed file (case-insensitive):", "command": "bzfgrep --ignore-case \"{{search_string}}\" {{path/to/file}}"}, {"task": "Search for lines that do not match the list of search strings separated by new lines in a compressed file:", "command": "bzfgrep --invert-match \"{{search_string}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match:", "command": "bzfgrep --with-filename --line-number \"{{search_string}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "bzfgrep --only-matching \"{{search_string}}\" {{path/to/file}}"}, {"task": "Recursively search files in a bzip2 compressed tar archive for the given list of strings:", "command": "bzfgrep --recursive \"{{search_string}}\" {{path/to/file}}"}]}
{"command": "bzgrep", "tasks": [{"task": "Search for a pattern within a compressed file:", "command": "bzgrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode:", "command": "bzgrep --extended-regexp --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print 3 lines of context around, before, or after each match:", "command": "bzgrep --{{context|before-context|after-context}}={{3}} \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match:", "command": "bzgrep --with-filename --line-number \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "bzgrep --only-matching \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Recursively search files in a bzip2 compressed tar archive for a pattern:", "command": "bzgrep --recursive \"{{search_pattern}}\" {{path/to/tar/file}}"}, {"task": "Search `stdin` for lines that do not match a pattern:", "command": "cat {{/path/to/bz/compressed/file}} | bzgrep --invert-match \"{{search_pattern}}\""}]}
{"command": "bzip2", "tasks": [{"task": "Compress a file:", "command": "bzip2 {{path/to/file_to_compress}}"}, {"task": "Decompress a file:", "command": "bzip2 -d {{path/to/compressed_file.bz2}}"}, {"task": "Decompress a file to `stdout`:", "command": "bzip2 -dc {{path/to/compressed_file.bz2}}"}, {"task": "Test the integrity of each file inside the archive file:", "command": "bzip2 --test {{path/to/compressed_file.bz2}}"}, {"task": "Show the compression ratio for each file processed with detailed information:", "command": "bzip2 --verbose {{path/to/compressed_files.bz2}}"}, {"task": "Decompress a file overwriting existing files:", "command": "bzip2 --force {{path/to/compressed_file.bz2}}"}, {"task": "Display help:", "command": "bzip2 -h"}]}
{"command": "bzip3", "tasks": [{"task": "Compress a file:", "command": "bzip3 {{path/to/file_to_compress}}"}, {"task": "Decompress a file:", "command": "bzip3 -d {{path/to/compressed_file.bz3}}"}, {"task": "Decompress a file to `stdout`:", "command": "bzip3 -dc {{path/to/compressed_file.bz3}}"}, {"task": "Test the integrity of each file inside the archive file:", "command": "bzip3 --test {{path/to/compressed_file.bz3}}"}, {"task": "Show the compression ratio for each file processed with detailed information:", "command": "bzip3 --verbose {{path/to/compressed_files.bz3}}"}, {"task": "Decompress a file overwriting existing files:", "command": "bzip3 --force {{path/to/compressed_file.bz3}}"}, {"task": "Display help:", "command": "bzip3 -h"}]}
{"command": "c99", "tasks": [{"task": "Compile source file(s) and create an executable:", "command": "c99 {{file.c}}"}, {"task": "Compile source file(s) and create an executable with a custom name:", "command": "c99 -o {{executable_name}} {{file.c}}"}, {"task": "Compile source file(s) and create object file(s):", "command": "c99 -c {{file.c}}"}, {"task": "Compile source file(s), link with object file(s), and create an executable:", "command": "c99 {{file.c}} {{file.o}}"}]}
{"command": "cabal", "tasks": [{"task": "Search and list packages from Hackage:", "command": "cabal list {{search_string}}"}, {"task": "Show information about a package:", "command": "cabal info {{package_name}}"}, {"task": "Download and install a package:", "command": "cabal install {{package_name}}"}, {"task": "Create a new Haskell project in the current directory:", "command": "cabal init"}, {"task": "Build the project in the current directory:", "command": "cabal build"}, {"task": "Run tests of the project in the current directory:", "command": "cabal test"}]}
{"command": "caddy", "tasks": [{"task": "Start Caddy in the foreground:", "command": "caddy run"}, {"task": "Start Caddy with the specified Caddyfile:", "command": "caddy run --config {{path/to/Caddyfile}}"}, {"task": "Start Caddy in the background:", "command": "caddy start"}, {"task": "Stop a background Caddy process:", "command": "caddy stop"}, {"task": "Run a simple file server on the specified port with a browsable interface:", "command": "caddy file-server --listen :{{8000}} --browse"}, {"task": "Run a reverse proxy server:", "command": "caddy reverse-proxy --from :{{80}} --to localhost:{{8000}}"}]}
{"command": "cake", "tasks": [{"task": "Display basic information about the current app and available commands:", "command": "cake"}, {"task": "Display a list of available routes:", "command": "cake routes"}, {"task": "Clear configuration caches:", "command": "cake cache clear_all"}, {"task": "Build the metadata cache:", "command": "cake schema_cache build --connection {{connection}}"}, {"task": "Clear the metadata cache:", "command": "cake schema_cache clear"}, {"task": "Clear a single cache table:", "command": "cake schema_cache clear {{table_name}}"}, {"task": "Start a development web server (defaults to port 8765):", "command": "cake server"}, {"task": "Start a REPL (interactive shell):", "command": "cake console"}]}
{"command": "calc", "tasks": [{"task": "Start `calc` in interactive mode:", "command": "calc"}, {"task": "Perform a calculation in non-interactive mode:", "command": "calc '{{85 * (36 / 4)}}'"}, {"task": "Perform a calculation without any output formatting (for use with pipes):", "command": "calc -p '{{4/3 * pi() * 5^3}}'"}, {"task": "Perform a calculation and then switch to [i]nteractive mode:", "command": "calc -i '{{sqrt(2)}}'"}, {"task": "Start `calc` in a specific permission [m]ode (0 to 7, defaults to 7):", "command": "calc -m {{mode}}"}, {"task": "View an introduction to `calc`:", "command": "calc help intro"}, {"task": "View an overview of `calc`:", "command": "calc help overview"}, {"task": "Open the `calc` manual:", "command": "calc help"}]}
{"command": "calendar", "tasks": [{"task": "Show events for today and tomorrow (or the weekend on Friday) from the default calendar:", "command": "calendar"}, {"task": "Look [A]head, showing events for the next 30 days:", "command": "calendar -A {{30}}"}, {"task": "Look [B]ack, showing events for the previous 7 days:", "command": "calendar -B {{7}}"}, {"task": "Show events from a custom calendar [f]ile:", "command": "calendar -f {{path/to/file}}"}]}
{"command": "calibre-server", "tasks": [{"task": "Start a server to distribute e-books. Access at http://localhost:8080:", "command": "calibre-server"}, {"task": "Start server on different port. Access at http://localhost:port:", "command": "calibre-server --port {{port}}"}, {"task": "Password protect the server:", "command": "calibre-server --username {{username}} --password {{password}}"}]}
{"command": "calibredb", "tasks": [{"task": "List e-books in the library with additional information:", "command": "calibredb list"}, {"task": "Search for e-books displaying additional information:", "command": "calibredb list --search {{search_term}}"}, {"task": "Search for just ids of e-books:", "command": "calibredb search {{search_term}}"}, {"task": "Add one or more e-books to the library:", "command": "calibredb add {{file1 file2 …}}"}, {"task": "Recursively add all e-books under a directory to the library:", "command": "calibredb add -r {{path/to/directory}}"}, {"task": "Remove one or more e-books from the library. You need the e-book IDs (see above):", "command": "calibredb remove {{id1 id2 …}}"}]}
{"command": "calligraflow", "tasks": [{"task": "Launch the flowchart and diagram application:", "command": "calligraflow"}, {"task": "Open a specific file:", "command": "calligraflow {{path/to/file}}"}, {"task": "Display help or version:", "command": "calligraflow --{{help|version}}"}]}
{"command": "calligrasheets", "tasks": [{"task": "Launch the spreadsheet application:", "command": "calligrasheets"}, {"task": "Open a specific spreadsheet:", "command": "calligrasheets {{path/to/spreadsheet}}"}, {"task": "Display help or version:", "command": "calligrasheets --{{help|version}}"}]}
{"command": "calligrastage", "tasks": [{"task": "Launch the presentation application:", "command": "calligrastage"}, {"task": "Open a specific presentation:", "command": "calligrastage {{path/to/presentation}}"}, {"task": "Display help or version:", "command": "calligrastage --{{help|version}}"}]}
{"command": "calligrawords", "tasks": [{"task": "Launch the word processor application:", "command": "calligrawords"}, {"task": "Open a specific document:", "command": "calligrawords {{path/to/document}}"}, {"task": "Display help or version:", "command": "calligrawords --{{help|version}}"}]}
{"command": "carbon-now", "tasks": [{"task": "Create an image from a file using default settings:", "command": "carbon-now {{path/to/file}}"}, {"task": "Create an image from a text in clipboard using default settings:", "command": "carbon-now --from-clipboard"}, {"task": "Create an image from `stdin` using default settings:", "command": "{{input}} | carbon-now"}, {"task": "Create images interactively for custom settings and optionally save a preset:", "command": "carbon-now -i {{path/to/file}}"}, {"task": "Create images from previously saved preset:", "command": "carbon-now -p {{preset}} {{path/to/file}}"}, {"task": "Start at a specified line of text:", "command": "carbon-now -s {{line}} {{path/to/file}}"}, {"task": "End at a specific line of text:", "command": "carbon-now -e {{line}} {{path/to/file}}"}, {"task": "Open image in a browser instead of saving:", "command": "carbon-now --open {{path/to/file}}"}]}
{"command": "cargo add", "tasks": [{"task": "Add the latest version of a dependency to the current project:", "command": "cargo add {{dependency}}"}, {"task": "Add a specific version of a dependency:", "command": "cargo add {{dependency}}@{{version}}"}, {"task": "Add a dependency and enable one or more specific features:", "command": "cargo add {{dependency}} --features {{feature_1}},{{feature_2}}"}, {"task": "Add an optional dependency, which then gets exposed as a feature of the crate:", "command": "cargo add {{dependency}} --optional"}, {"task": "Add a local crate as a dependency:", "command": "cargo add --path {{path/to/crate}}"}, {"task": "Add a development or build dependency:", "command": "cargo add {{dependency}} --{{dev|build}}"}, {"task": "Add a dependency with all default features disabled:", "command": "cargo add {{dependency}} --no-default-features"}]}
{"command": "cargo build", "tasks": [{"task": "Build the package or packages defined by the `Cargo.toml` manifest file in the local path:", "command": "cargo build"}, {"task": "Build artifacts in release mode, with optimizations:", "command": "cargo build --release"}, {"task": "Require that `Cargo.lock` is up to date:", "command": "cargo build --locked"}, {"task": "Build all packages in the workspace:", "command": "cargo build --workspace"}, {"task": "Build a specific package:", "command": "cargo build --package {{package}}"}, {"task": "Build only the specified binary:", "command": "cargo build --bin {{name}}"}, {"task": "Build only the specified test target:", "command": "cargo build --test {{testname}}"}]}
{"command": "cargo clippy", "tasks": [{"task": "Run checks over the code in the current directory:", "command": "cargo clippy"}, {"task": "Require that `Cargo.lock` is up to date:", "command": "cargo clippy --locked"}, {"task": "Run checks on all packages in the workspace:", "command": "cargo clippy --workspace"}, {"task": "Run checks for a package:", "command": "cargo clippy --package {{package}}"}, {"task": "Treat warnings as errors:", "command": "cargo clippy -- --deny warnings"}, {"task": "Run checks and ignore warnings:", "command": "cargo clippy -- --allow warnings"}, {"task": "Apply Clippy suggestions automatically:", "command": "cargo clippy --fix"}]}
{"command": "cargo doc", "tasks": [{"task": "Build and view the default package documentation in the browser:", "command": "cargo doc --open"}, {"task": "Build documentation without accessing the network:", "command": "cargo doc --offline"}, {"task": "View a particular package's documentation:", "command": "cargo doc --open --package {{package}}"}, {"task": "View a particular package's documentation offline:", "command": "cargo doc --open --offline --package {{package}}"}]}
{"command": "cargo rustc", "tasks": [{"task": "Build the package or packages defined by the `Cargo.toml` manifest file in the current working directory:", "command": "cargo rustc"}, {"task": "Build artifacts in release mode, with optimizations:", "command": "cargo rustc --release"}, {"task": "Compile with architecture-specific optimizations for the current CPU:", "command": "cargo rustc --release -- -C target-cpu=native"}, {"task": "Compile with speed optimization:", "command": "cargo rustc -- -C opt-level {{1|2|3}}"}, {"task": "Compile with [s]ize optimization (`z` also turns off loop vectorization):", "command": "cargo rustc -- -C opt-level {{s|z}}"}, {"task": "Check if your package uses unsafe code:", "command": "cargo rustc --lib -- -D unsafe-code"}, {"task": "Build a specific package:", "command": "cargo rustc --package {{package}}"}, {"task": "Build only the specified binary:", "command": "cargo --bin {{name}}"}]}
{"command": "cargo test", "tasks": [{"task": "Only run tests containing a specific string in their names:", "command": "cargo test {{testname}}"}, {"task": "Set the number of simultaneous running test cases:", "command": "cargo test -- --test-threads={{count}}"}, {"task": "Require that `Cargo.lock` is up to date:", "command": "cargo test --locked"}, {"task": "Test artifacts in release mode, with optimizations:", "command": "cargo test --release"}, {"task": "Test all packages in the workspace:", "command": "cargo test --workspace"}, {"task": "Run tests for a package:", "command": "cargo test --package {{package}}"}, {"task": "Run tests without hiding output from test executions:", "command": "cargo test -- --nocapture"}]}
{"command": "cargo", "tasks": [{"task": "Search for crates:", "command": "cargo search {{search_string}}"}, {"task": "Install a crate:", "command": "cargo install {{crate_name}}"}, {"task": "List installed crates:", "command": "cargo install --list"}, {"task": "Create a new binary or library Rust project in the current directory:", "command": "cargo init --{{bin|lib}}"}, {"task": "Create a new binary or library Rust project in the specified directory:", "command": "cargo new {{path/to/directory}} --{{bin|lib}}"}, {"task": "Build the Rust project in the current directory:", "command": "cargo build"}, {"task": "Build the rust project in the current directory using the nightly compiler:", "command": "cargo +nightly build"}, {"task": "Build using a specific number of threads (default is the number of CPU cores):", "command": "cargo build --jobs {{number_of_threads}}"}]}
{"command": "carp", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "carp"}, {"task": "Start a REPL with a custom prompt:", "command": "carp --prompt \"{{> }}\""}, {"task": "Build a `carp` file:", "command": "carp -b {{path/to/file.carp}}"}, {"task": "Build and run a file:", "command": "carp -x {{path/to/file.carp}}"}, {"task": "Build a file with optimizations enabled:", "command": "carp -b --optimize {{path/to/file.carp}}"}, {"task": "Transpile a file to C code:", "command": "carp --generate-only {{path/to/file.carp}}"}]}
{"command": "case", "tasks": [{"task": "Match a variable against string literals to decide which command to run:", "command": "case {{$tocount}} in {{words}}) {{wc -w README}}; ;; {{lines}}) {{wc -l README}}; ;; esac"}, {"task": "Combine patterns with |, use * as a fallback pattern:", "command": "case {{$tocount}} in {{[wW]|words}}) {{wc -w README}}; ;; {{[lL]|lines}}) {{wc -l README}}; ;; *) {{echo \"what?\"}}; ;; esac"}]}
{"command": "cat", "tasks": [{"task": "Print the contents of a file to `stdout`:", "command": "cat {{path/to/file}}"}, {"task": "Concatenate several files into an output file:", "command": "cat {{path/to/file1 path/to/file2 ...}} > {{path/to/output_file}}"}, {"task": "Append several files to an output file:", "command": "cat {{path/to/file1 path/to/file2 ...}} >> {{path/to/output_file}}"}, {"task": "Copy the contents of a file into an output file without buffering:", "command": "cat -u {{/dev/tty12}} > {{/dev/tty13}}"}, {"task": "Write `stdin` to a file:", "command": "cat - > {{path/to/file}}"}]}
{"command": "catimg", "tasks": [{"task": "Print a JPEG, PNG, or GIF to the terminal:", "command": "catimg {{path/to/file}}"}, {"task": "Double the [r]esolution of an image:", "command": "catimg -r 2 {{path/to/file}}"}, {"task": "Disable 24-bit color for better [t]erminal support:", "command": "catimg -t {{path/to/file}}"}, {"task": "Specify a custom [w]idth or [H]eight:", "command": "catimg {{-w|-H}} {{40}} {{path/to/file}}"}]}
{"command": "cavif", "tasks": [{"task": "Convert a JPEG file to AVIF:", "command": "cavif {{path/to/file.jpg}}"}, {"task": "Adjust the image quality (1-100) and convert a PNG file to AVIF:", "command": "cavif --quality {{60}} {{path/to/file.png}}"}, {"task": "Set the output location explicitly:", "command": "cavif {{path/to/file.jpg}} --output {{path/to/file.avif}}"}, {"task": "Overwrite the destination file if it already exists:", "command": "cavif --overwrite {{path/to/file.jpg}}"}]}
{"command": "cb", "tasks": [{"task": "Show all clipboards:", "command": "cb"}, {"task": "Copy a file to the clipboard:", "command": "cb copy {{path/to/file}}"}, {"task": "Copy some text to the clipboard:", "command": "cb copy \"{{Some example text}}\""}, {"task": "Copy piped data to the clipboard:", "command": "echo \"{{Some example text}}\" | cb"}, {"task": "Paste clipboard content:", "command": "cb paste"}, {"task": "Pipe out clipboard content:", "command": "cb | cat"}, {"task": "Show clipboard history:", "command": "cb history"}, {"task": "Show clipboard information:", "command": "cb info"}]}
{"command": "cbonsai", "tasks": [{"task": "Generate a bonsai in live mode:", "command": "cbonsai -l"}, {"task": "Generate a bonsai in infinite mode:", "command": "cbonsai -i"}, {"task": "Append a message to the bonsai:", "command": "cbonsai -m \"{{message}}\""}, {"task": "Display extra information about the bonsai:", "command": "cbonsai -v"}, {"task": "Display cbonsai help:", "command": "cbonsai -h"}]}
{"command": "cbt", "tasks": [{"task": "List tables in the current project:", "command": "cbt ls"}, {"task": "Print count of rows in a specific table in the current project:", "command": "cbt count \"{{table_name}}\""}, {"task": "Display a single row from a specific table with only 1 (most recent) cell revision per column in the current project:", "command": "cbt lookup \"{{table_name}}\" \"{{row_key}}\" cells-per-column={{1}}"}, {"task": "Display a single row with only specific column(s) (omit qualifier to return entire family) in the current project:", "command": "cbt lookup \"{{table_name}}\" \"{{row_key}}\" columns=\"{{family1:qualifier1,family2:qualifier2,...}}\""}, {"task": "Search up to 5 rows in the current project by a specific regex pattern and print them:", "command": "cbt read \"{{table_name}}\" regex=\"{{row_key_pattern}}\" count={{5}}"}, {"task": "Read a specific range of rows and print only returned row keys in the current project:", "command": "cbt read {{table_name}} start={{start_row_key}} end={{end_row_key}} keys-only=true"}]}
{"command": "ccomps", "tasks": [{"task": "Decompose one or more graphs into their connected components:", "command": "ccomps {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Print the number of nodes, edges, and connected components in one or more graphs:", "command": "ccomps -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Write each connected component to numbered filenames based on `output.gv`:", "command": "ccomps -x -o {{path/to/output.gv}} {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Display help for `ccomps`:", "command": "ccomps -?"}]}
{"command": "cd", "tasks": [{"task": "Go to the specified directory:", "command": "cd {{path/to/directory}}"}, {"task": "Go up to the parent of the current directory:", "command": "cd .."}, {"task": "Go to the home directory of the current user:", "command": "cd"}, {"task": "Go to the home directory of the specified user:", "command": "cd ~{{username}}"}, {"task": "Go to the previously chosen directory:", "command": "cd -"}, {"task": "Go to the root directory:", "command": "cd /"}]}
{"command": "cdk", "tasks": [{"task": "List the stacks in the app:", "command": "cdk ls"}, {"task": "Synthesize and print the CloudFormation template for the specified stack(s):", "command": "cdk synth {{stack_name}}"}, {"task": "Deploy a space-separated list of stacks:", "command": "cdk deploy {{stack_name}}"}, {"task": "Destroy a space-separated list of stacks:", "command": "cdk destroy {{stack_name}}"}, {"task": "Compare the specified stack with the deployed stack or a local CloudFormation template:", "command": "cdk diff {{stack_name}}"}, {"task": "Create a new CDK project in the current directory for a specified language:", "command": "cdk init -l {{language_name}}"}, {"task": "Open the CDK API reference in your browser:", "command": "cdk docs"}]}
{"command": "certutil", "tasks": [{"task": "Create a new certificate database:", "command": "certutil -N -d ."}, {"task": "List all certificates in a database:", "command": "certutil -L -d ."}, {"task": "List all private keys in a database:", "command": "certutil -K -d . -f {{path/to/password_file.txt}}"}, {"task": "Import the signed certificate into the requesters database:", "command": "certutil -A -n \"{{server_certificate}}\" -t \",,\" -i {{path/to/file.crt}} -d ."}, {"task": "Add subject alternative names to a given certificate:", "command": "certutil -S -f {{path/to/password_file.txt}} -d . -t \",,\" -c \"{{server_certificate}}\" -n \"{{server_name}}\" -g {{2048}} -s \"CN={{common_name}},O={{organization}}\""}]}
{"command": "cf", "tasks": [{"task": "Log in to the Cloud Foundry API:", "command": "cf login -a {{api_url}}"}, {"task": "Push an app using the default settings:", "command": "cf push {{app_name}}"}, {"task": "View the services available from your organization:", "command": "cf marketplace"}, {"task": "Create a service instance:", "command": "cf create-service {{service}} {{plan}} {{service_name}}"}, {"task": "Connect an application to a service:", "command": "cf bind-service {{app_name}} {{service_name}}"}, {"task": "Run a script whose code is included in the app, but runs independently:", "command": "cf run-task {{app_name}} \"{{script_command}}\" --name {{task_name}}"}, {"task": "Start an interactive SSH session with a VM hosting an app:", "command": "cf ssh {{app_name}}"}, {"task": "View a dump of recent app logs:", "command": "cf logs {{app_name}} --recent"}]}
{"command": "chafa", "tasks": [{"task": "Render an image directly in the terminal:", "command": "chafa {{path/to/file}}"}, {"task": "Render an image with 24-bit [c]olor:", "command": "chafa -c full {{path/to/file}}"}, {"task": "Improve image rendering with small color palettes using dithering:", "command": "chafa -c 16 --dither ordered {{path/to/file}}"}, {"task": "Render an image, making it appear pixelated:", "command": "chafa --symbols vhalf {{path/to/file}}"}, {"task": "Render a monochrome image with only braille characters:", "command": "chafa -c none --symbols braille {{path/to/file}}"}]}
{"command": "charm", "tasks": [{"task": "Backup your Charm account keys:", "command": "charm backup-keys"}, {"task": "Backup Charm account keys to a specific location:", "command": "charm backup-keys -o {{path/to/output_file.tar}}"}, {"task": "Import previously backed up Charm account keys:", "command": "charm import-keys \"{{charm-keys-backup.tar}}\""}, {"task": "Find where your `cloud.charm.sh` folder resides on your machine:", "command": "charm where"}, {"task": "Start your Charm server:", "command": "charm serve"}, {"task": "Print linked SSH keys:", "command": "charm keys"}, {"task": "Print your Charm ID:", "command": "charm id"}]}
{"command": "chars", "tasks": [{"task": "Look up a character by its value:", "command": "chars '{{ß}}'"}, {"task": "Look up a character by its Unicode code point:", "command": "chars {{U+1F63C}}"}, {"task": "Look up possible characters given an ambiguous code point:", "command": "chars {{10}}"}, {"task": "Look up a control character:", "command": "chars \"{{^C}}\""}]}
{"command": "cheat", "tasks": [{"task": "Show example usage of a command:", "command": "cheat {{command}}"}, {"task": "Edit the cheat sheet for a command:", "command": "cheat -e {{command}}"}, {"task": "List the available cheat sheets:", "command": "cheat -l"}, {"task": "Search available the cheat sheets for a specified command name:", "command": "cheat -s {{command}}"}, {"task": "Get the current cheat version:", "command": "cheat -v"}]}
{"command": "Chezmoi", "tasks": [{"task": "Initialize chezmoi on your machine:", "command": "chezmoi init"}, {"task": "Tell chezmoi to manage a dotfile:", "command": "chezmoi add {{path/to/file}}"}, {"task": "Edit the source state of a tracked dotfile:", "command": "chezmoi edit {{path/to/file}}"}, {"task": "See changes chezmoi would make:", "command": "chezmoi diff"}, {"task": "Apply the changes:", "command": "chezmoi -v apply"}, {"task": "Set chezmoi up on another machine by downloading existing dotfiles from a Git repository:", "command": "chezmoi init {{https://example.com/path/to/repository.git}}"}, {"task": "Fetch the latest changes from a remote repository:", "command": "chezmoi update"}]}
{"command": "chgrp", "tasks": [{"task": "Change the owner group of a file/directory:", "command": "chgrp {{group}} {{path/to/file_or_directory}}"}, {"task": "Recursively change the owner group of a directory and its contents:", "command": "chgrp -R {{group}} {{path/to/directory}}"}, {"task": "Change the owner group of a symbolic link:", "command": "chgrp -h {{group}} {{path/to/symlink}}"}, {"task": "Change the owner group of a file/directory to match a reference file:", "command": "chgrp --reference={{path/to/reference_file}} {{path/to/file_or_directory}}"}]}
{"command": "chisel", "tasks": [{"task": "Run a Chisel server:", "command": "chisel server"}, {"task": "Run a Chisel server listening to a specific port:", "command": "chisel server -p {{server_port}}"}, {"task": "Run a chisel server that accepts authenticated connections using username and password:", "command": "chisel server --auth {{username}}:{{password}}"}, {"task": "Connect to a Chisel server and tunnel a specific port to a remote server and port:", "command": "chisel client {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}"}, {"task": "Connect to a Chisel server and tunnel a specific host and port to a remote server and port:", "command": "chisel client {{server_ip}}:{{server_port}} {{local_host}}:{{local_port}}:{{remote_server}}:{{remote_port}}"}, {"task": "Connect to a Chisel server using username and password authentication:", "command": "chisel client --auth {{username}}:{{password}} {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}"}]}
{"command": "chmod", "tasks": [{"task": "Give the [u]ser who owns a file the right to e[x]ecute it:", "command": "chmod u+x {{path/to/file}}"}, {"task": "Give the [u]ser rights to [r]ead and [w]rite to a file/directory:", "command": "chmod u+rw {{path/to/file_or_directory}}"}, {"task": "Remove e[x]ecutable rights from the [g]roup:", "command": "chmod g-x {{path/to/file}}"}, {"task": "Give [a]ll users rights to [r]ead and e[x]ecute:", "command": "chmod a+rx {{path/to/file}}"}, {"task": "Give [o]thers (not in the file owner's group) the same rights as the [g]roup:", "command": "chmod o=g {{path/to/file}}"}, {"task": "Remove all rights from [o]thers:", "command": "chmod o= {{path/to/file}}"}, {"task": "Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite:", "command": "chmod -R g+w,o+w {{path/to/directory}}"}, {"task": "Recursively give [a]ll users [r]ead permissions to files and e[X]ecute permissions to sub-directories within a directory:", "command": "chmod -R a+rX {{path/to/directory}}"}]}
{"command": "choose", "tasks": [{"task": "Print the 5th item from a line (starting from 0):", "command": "choose {{4}}"}, {"task": "Print the first, 3rd, and 5th item from a line, where items are separated by ':' instead of whitespace:", "command": "choose --field-separator '{{:}}' {{0}} {{2}} {{4}}"}, {"task": "Print everything from the 2nd to 5th item on the line, including the 5th:", "command": "choose {{1}}:{{4}}"}, {"task": "Print everything from the 2nd to 5th item on the line, excluding the 5th:", "command": "choose --exclusive {{1}}:{{4}}"}, {"task": "Print the beginning of the line to the 3rd item:", "command": "choose :{{2}}"}, {"task": "Print all items from the beginning of the line until the 3rd item (exclusive):", "command": "choose --exclusive :{{2}}"}, {"task": "Print all items from the 3rd to the end of the line:", "command": "choose {{2}}:"}, {"task": "Print the last item from a line:", "command": "choose {{-1}}"}]}
{"command": "chown", "tasks": [{"task": "Change the owner user of a file/directory:", "command": "chown {{user}} {{path/to/file_or_directory}}"}, {"task": "Change the owner user and group of a file/directory:", "command": "chown {{user}}:{{group}} {{path/to/file_or_directory}}"}, {"task": "Recursively change the owner of a directory and its contents:", "command": "chown -R {{user}} {{path/to/directory}}"}, {"task": "Change the owner of a symbolic link:", "command": "chown -h {{user}} {{path/to/symlink}}"}, {"task": "Change the owner of a file/directory to match a reference file:", "command": "chown --reference={{path/to/reference_file}} {{path/to/file_or_directory}}"}]}
{"command": "chroma", "tasks": [{"task": "Highlight source code from a file with the Python lexer and output to `stdout`:", "command": "chroma --lexer {{python}} {{path/to/source_file.py}}"}, {"task": "Highlight source code from a file with the Go lexer and output to an HTML file:", "command": "chroma --lexer {{go}} --formatter {{html}} {{path/to/source_file.go}} > {{path/to/target_file.html}}"}, {"task": "Highlight source code from `stdin` with the C++ lexer and output to an SVG file, using the Monokai style:", "command": "{{command}} | chroma --lexer {{c++}} --formatter {{svg}} --style {{monokai}} > {{path/to/target_file.svg}}"}, {"task": "List available lexers, styles and formatters:", "command": "chroma --list"}]}
{"command": "chromium", "tasks": [{"task": "Open a specific URL or file:", "command": "chromium {{https://example.com|path/to/file.html}}"}, {"task": "Open in incognito mode:", "command": "chromium --incognito {{example.com}}"}, {"task": "Open in a new window:", "command": "chromium --new-window {{example.com}}"}, {"task": "Open in application mode (without toolbars, URL bar, buttons, etc.):", "command": "chromium --app={{https://example.com}}"}, {"task": "Use a proxy server:", "command": "chromium --proxy-server=\"{{socks5://hostname:66}}\" {{example.com}}"}, {"task": "Open with a custom profile directory:", "command": "chromium --user-data-dir={{path/to/directory}}"}, {"task": "Open without CORS validation (useful to test an API):", "command": "chromium --user-data-dir={{path/to/directory}} --disable-web-security"}, {"task": "Open with a DevTools window for each tab opened:", "command": "chromium --auto-open-devtools-for-tabs"}]}
{"command": "chroot", "tasks": [{"task": "Run command as new root directory:", "command": "chroot {{path/to/new/root}} {{command}}"}, {"task": "Specify user and group (ID or name) to use:", "command": "chroot --userspec={{user:group}}"}]}
{"command": "chsh", "tasks": [{"task": "Set a specific login shell for the current user interactively:", "command": "chsh"}, {"task": "Set a specific login [s]hell for the current user:", "command": "chsh -s {{path/to/shell}}"}, {"task": "Set a login [s]hell for a specific user:", "command": "chsh -s {{path/to/shell}} {{username}}"}, {"task": "[l]ist available shells:", "command": "chsh -l"}]}
{"command": "circo", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "circo -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "circo -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "circo -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | circo -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "circo -?"}]}
{"command": "circup", "tasks": [{"task": "Interactively update modules on a device:", "command": "circup update"}, {"task": "Install a new library:", "command": "circup install {{library_name}}"}, {"task": "Search for a library:", "command": "circup show {{partial_name}}"}, {"task": "List all libraries on a connected device in `requirements.txt` format:", "command": "circup freeze"}, {"task": "Save all libraries on a connected device in the current directory:", "command": "circup freeze -r"}]}
{"command": "cksum", "tasks": [{"task": "Display a 32-bit checksum, size in bytes and filename:", "command": "cksum {{path/to/file}}"}]}
{"command": "ClamAV", "tasks": [{"task": "Show the tldr page for scan files using the `clamd` daemon:", "command": "tldr clamdscan"}, {"task": "Show the tldr page for scan files without the `clamd` daemon running:", "command": "tldr clamscan"}, {"task": "Show the tldr page for update the virus definitions:", "command": "tldr freshclam"}]}
{"command": "clamdscan", "tasks": [{"task": "Scan a file or directory for vulnerabilities:", "command": "clamdscan {{path/to/file_or_directory}}"}, {"task": "Scan data from `stdin`:", "command": "{{command}} | clamdscan -"}, {"task": "Scan the current directory and output only infected files:", "command": "clamdscan --infected"}, {"task": "Output the scan report to a log file:", "command": "clamdscan --log {{path/to/log_file}}"}, {"task": "Move infected files to a specific directory:", "command": "clamdscan --move {{path/to/quarantine_directory}}"}, {"task": "Remove infected files:", "command": "clamdscan --remove"}, {"task": "Use multiple threads to scan a directory:", "command": "clamdscan --multiscan"}, {"task": "Pass the file descriptor instead of streaming the file to the daemon:", "command": "clamdscan --fdpass"}]}
{"command": "clamscan", "tasks": [{"task": "Scan a file for vulnerabilities:", "command": "clamscan {{path/to/file}}"}, {"task": "Scan all files recursively in a specific directory:", "command": "clamscan -r {{path/to/directory}}"}, {"task": "Scan data from `stdin`:", "command": "{{command}} | clamscan -"}, {"task": "Specify a virus database file or directory of files:", "command": "clamscan --database {{path/to/database_file_or_directory}}"}, {"task": "Scan the current directory and output only infected files:", "command": "clamscan --infected"}, {"task": "Output the scan report to a log file:", "command": "clamscan --log {{path/to/log_file}}"}, {"task": "Move infected files to a specific directory:", "command": "clamscan --move {{path/to/quarantine_directory}}"}, {"task": "Remove infected files:", "command": "clamscan --remove yes"}]}
{"command": "clang++", "tasks": [{"task": "Compile a source code file into an executable binary:", "command": "clang++ {{path/to/source.cpp}} -o {{path/to/output_executable}}"}, {"task": "Display (almost) all errors and warnings:", "command": "clang++ {{path/to/source.cpp}} -Wall -o {{path/to/output_executable}}"}, {"task": "Choose a language standard to compile with:", "command": "clang++ {{path/to/source.cpp}} -std={{c++20}} -o {{path/to/output_executable}}"}, {"task": "Include libraries located at a different path than the source file:", "command": "clang++ {{path/to/source.cpp}} -o {{path/to/output_executable}} -I{{path/to/header_path}} -L{{path/to/library_path}} -l{{path/to/library_name}}"}, {"task": "Compile source code into LLVM Intermediate Representation (IR):", "command": "clang++ -S -emit-llvm {{path/to/source.cpp}} -o {{path/to/output.ll}}"}]}
{"command": "clang-cpp", "tasks": [{"task": "View documentation for the original command:", "command": "tldr clang++"}]}
{"command": "clang-format", "tasks": [{"task": "Format a file and print the result to `stdout`:", "command": "clang-format {{path/to/file}}"}, {"task": "Format a file in-place:", "command": "clang-format -i {{path/to/file}}"}, {"task": "Format a file using a predefined coding style:", "command": "clang-format --style={{LLVM|GNU|Google|Chromium|Microsoft|Mozilla|WebKit}} {{path/to/file}}"}, {"task": "Format a file using the `.clang-format` file in one of the parent directories of the source file:", "command": "clang-format --style=file {{path/to/file}}"}, {"task": "Generate a custom `.clang-format` file:", "command": "clang-format --style={{LLVM|GNU|Google|Chromium|Microsoft|Mozilla|WebKit}} --dump-config > {{.clang-format}}"}]}
{"command": "clang-tidy", "tasks": [{"task": "Run default checks on a source file:", "command": "clang-tidy {{path/to/file.cpp}}"}, {"task": "Don't run any checks other than the `cppcoreguidelines` checks on a file:", "command": "clang-tidy {{path/to/file.cpp}} -checks={{-*,cppcoreguidelines-*}}"}, {"task": "List all available checks:", "command": "clang-tidy -checks={{*}} -list-checks"}, {"task": "Specify defines and includes as compilation options (after `--`):", "command": "clang-tidy {{path/to/file.cpp}} -- -I{{my_project/include}} -D{{definitions}}"}]}
{"command": "clang", "tasks": [{"task": "Compile a source code file into an executable binary:", "command": "clang {{input_source.c}} -o {{output_executable}}"}, {"task": "Activate output of all errors and warnings:", "command": "clang {{input_source.c}} -Wall -o {{output_executable}}"}, {"task": "Include libraries located at a different path than the source file:", "command": "clang {{input_source.c}} -o {{output_executable}} -I{{header_path}} -L{{library_path}} -l{{library_name}}"}, {"task": "Compile source code into LLVM Intermediate Representation (IR):", "command": "clang -S -emit-llvm {{file.c}} -o {{file.ll}}"}, {"task": "Compile source code without linking:", "command": "clang -c {{input_source.c}}"}]}
{"command": "clangd", "tasks": [{"task": "Display available options:", "command": "clangd --help"}, {"task": "List of available options:", "command": "clangd --help-list"}, {"task": "Display version:", "command": "clangd --version"}]}
{"command": "clash", "tasks": [{"task": "Specify a configuration [d]irectory:", "command": "clash -d {{path/to/directory}}"}, {"task": "Specify a configuration [f]ile:", "command": "clash -f {{path/to/configuration_file}}"}]}
{"command": "clear", "tasks": [{"task": "Clear the screen (equivalent to pressing Control-L in Bash shell):", "command": "clear"}, {"task": "Clear the screen but keep the terminal's scrollback buffer:", "command": "clear -x"}, {"task": "Indicate the type of terminal to clean (defaults to the value of the environment variable `TERM`):", "command": "clear -T {{type_of_terminal}}"}, {"task": "Show the version of `ncurses` used by `clear`:", "command": "clear -V"}]}
{"command": "clementine", "tasks": [{"task": "Open Clementine:", "command": "clementine"}, {"task": "Start playing a music file:", "command": "clementine {{url/or/path/to/file.ext}}"}, {"task": "Toggle between pausing and playing:", "command": "clementine --play-pause"}, {"task": "Stop playback:", "command": "clementine --stop"}, {"task": "Skip to the next track:", "command": "clementine --next"}, {"task": "Skip to the previous track:", "command": "clementine --previous"}, {"task": "Load a playlist file:", "command": "clementine --load {{path/to/playlist.ext}}"}, {"task": "Play the 5th track in the currently loaded playlist:", "command": "clementine --play-track {{5}}"}]}
{"command": "clido", "tasks": [{"task": "Create a list:", "command": "clido --new {{name}}"}, {"task": "Load a list:", "command": "clido --load {{name}}"}, {"task": "Delete a list:", "command": "clido --remove {{name}}"}, {"task": "List all lists:", "command": "clido --lists"}, {"task": "Toggle autowrite:", "command": "clido toggle-autowrite"}, {"task": "Open a list in a text editor:", "command": "clido edit {{text_editor}}"}, {"task": "Display version:", "command": "clido -v"}, {"task": "Display help:", "command": "clido -h"}]}
{"command": "clifm", "tasks": [{"task": "Start CliFM:", "command": "clifm"}, {"task": "Open the file or directory whose ELN (entry list number) is 12:", "command": "12"}, {"task": "Create a new file and a new directory:", "command": "n file dir/"}, {"task": "Search for PDF files in the current directory:", "command": "/*.pdf"}, {"task": "Select all PNG files in the current directory:", "command": "s *.png"}, {"task": "Remove the previously selected files (use `t` to send the files to the recycle bin instead):", "command": "r sel"}, {"task": "Display detailed help:", "command": "?"}, {"task": "Exit CliFM:", "command": "q"}]}
{"command": "clip-view", "tasks": [{"task": "Render specific local pages:", "command": "clip-view {{path/to/page1.clip path/to/page2.clip ...}}"}, {"task": "Render specific remote pages:", "command": "clip-view {{page_name1 page_name2 ...}}"}, {"task": "Render pages by a specific render:", "command": "clip-view --render {{tldr|tldr-colorful|docopt|docopt-colorful}} {{page_name1 page_name2 ...}}"}, {"task": "Render pages with a specific color theme:", "command": "clip-view --theme {{path/to/local_theme.yaml|remote_theme_name}} {{page_name1 page_name2 ...}}"}, {"task": "Clear a page or theme cache:", "command": "clip-view --clear-{{page|theme}}-cache"}, {"task": "Display help:", "command": "clip-view --help"}, {"task": "Display version:", "command": "clip-view --version"}]}
{"command": "clj", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "clj"}, {"task": "Execute a function:", "command": "clj -X {{namespace/function_name}}"}, {"task": "Run the main function of a specified namespace:", "command": "clj -M -m {{namespace}} {{args}}"}, {"task": "Prepare a project by resolving dependencies, downloading libraries, and making/caching classpaths:", "command": "clj -P"}, {"task": "Start an nREPL server with the CIDER middleware:", "command": "clj -Sdeps '{:deps {nrepl {:mvn/version \"0.7.0\"} cider/cider-nrepl {:mvn/version \"0.25.2\"}}}' -m nrepl.cmdline --middleware '[\"cider.nrepl/cider-middleware\"]' --interactive"}, {"task": "Start a REPL for ClojureScript and open a web browser:", "command": "clj -Sdeps '{:deps {org.clojure/clojurescript {:mvn/version \"1.10.758\"}}}' --main cljs.main --repl"}]}
{"command": "cloc", "tasks": [{"task": "Count all the lines of code in a directory:", "command": "cloc {{path/to/directory}}"}, {"task": "Count all the lines of code in a directory, displaying a progress bar during the counting process:", "command": "cloc --progress=1 {{path/to/directory}}"}, {"task": "Compare 2 directory structures and count the differences between them:", "command": "cloc --diff {{path/to/directory/one}} {{path/to/directory/two}}"}, {"task": "Ignore files that are ignored by VCS, such as files specified in `.gitignore`:", "command": "cloc --vcs git {{path/to/directory}}"}, {"task": "Count all the lines of code in a directory, displaying the results for each file instead of each language:", "command": "cloc --by-file {{path/to/directory}}"}]}
{"command": "clockwork-cli", "tasks": [{"task": "Monitor Clockwork logs for the current project:", "command": "clockwork-cli"}, {"task": "Monitor Clockwork logs for a specific project:", "command": "clockwork-cli {{path/to/directory}}"}, {"task": "Monitor Clockwork logs for multiple projects:", "command": "clockwork-cli {{path/to/directory1 path/to/directory2 …}}"}]}
{"command": "clojure", "tasks": [{"task": "View documentation for the original command:", "command": "tldr clj"}]}
{"command": "cloudflared", "tasks": [{"task": "Authenticate and associate the connection to a domain in the Cloudflare account:", "command": "cloudflared tunnel login"}, {"task": "Establish a tunnel to a host in Cloudflare from the local server:", "command": "cloudflared tunnel --hostname {{hostname}} localhost:{{port_number}}"}, {"task": "Establish a tunnel to a host in Cloudflare from the local server, without verifying the local server's certificate:", "command": "cloudflared tunnel --hostname {{hostname}} localhost:{{port_number}} --no-tls-verify"}, {"task": "Save logs to a file:", "command": "cloudflared tunnel --hostname {{hostname}} http://localhost:{{port_number}} --loglevel {{panic|fatal|error|warn|info|debug}} --logfile {{path/to/file}}"}, {"task": "Install cloudflared as a system service:", "command": "cloudflared service install"}]}
{"command": "cmake", "tasks": [{"task": "Generate a build recipe in the current directory with `CMakeLists.txt` from a project directory:", "command": "cmake {{path/to/project_directory}}"}, {"task": "Generate a build recipe, with build type set to `Release` with CMake variable:", "command": "cmake {{path/to/project_directory}} -D {{CMAKE_BUILD_TYPE=Release}}"}, {"task": "Generate a build recipe using `generator_name` as the underlying build system:", "command": "cmake -G {{generator_name}} {{path/to/project_directory}}"}, {"task": "Use a generated recipe in a given directory to build artifacts:", "command": "cmake --build {{path/to/build_directory}}"}, {"task": "Install the build artifacts into `/usr/local/` and strip debugging symbols:", "command": "cmake --install {{path/to/build_directory}} --strip"}, {"task": "Install the build artifacts using the custom prefix for paths:", "command": "cmake --install {{path/to/build_directory}} --strip --prefix {{path/to/directory}}"}, {"task": "Run a custom build target:", "command": "cmake --build {{path/to/build_directory}} --target {{target_name}}"}, {"task": "Display help, obtain a list of generators:", "command": "cmake --help"}]}
{"command": "cmark", "tasks": [{"task": "Render a CommonMark Markdown file to HTML:", "command": "cmark --to html {{filename.md}}"}, {"task": "Convert data from `stdin` to LaTeX:", "command": "cmark --to latex"}, {"task": "Convert straight quotes to smart quotes:", "command": "cmark --smart --to html {{filename.md}}"}, {"task": "Validate UTF-8 characters:", "command": "cmark --validate-utf8 {{filename.md}}"}]}
{"command": "cmatrix", "tasks": [{"task": "Enable asynchronous scrolling:", "command": "cmatrix -a"}, {"task": "Display red text:", "command": "cmatrix -C {{red}}"}, {"task": "Enable rainbow mode:", "command": "cmatrix -r"}, {"task": "Set screen update delay to 2 centiseconds (20 milliseconds):", "command": "cmatrix -u {{2}}"}]}
{"command": "cmctl", "tasks": [{"task": "Check if the cert-manager API is ready:", "command": "cmctl check api"}, {"task": "Check the status of a certificate:", "command": "cmctl status certificate {{cert_name}}"}, {"task": "Create a new certificate request based on an existing certificate:", "command": "cmctl create certificaterequest my-cr --from-certificate-file {{cert.yaml}}"}, {"task": "Create a new certificate request, fetch the signed certificate, and set a maximum wait time:", "command": "cmctl create certificaterequest my-cr --from-certificate-file {{cert.yaml}} --fetch-certificate --timeout {{20m}}"}]}
{"command": "cmp", "tasks": [{"task": "Output char and line number of the first difference between two files:", "command": "cmp {{path/to/file1}} {{path/to/file2}}"}, {"task": "Output info of the first difference: char, line number, bytes, and values:", "command": "cmp --print-bytes {{path/to/file1}} {{path/to/file2}}"}, {"task": "Output the byte numbers and values of every difference:", "command": "cmp --verbose {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare files but output nothing, yield only the exit status:", "command": "cmp --quiet {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "code", "tasks": [{"task": "Start Visual Studio Code:", "command": "code"}, {"task": "Open specific files/directories:", "command": "code {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Compare two specific files:", "command": "code --diff {{path/to/file1}} {{path/to/file2}}"}, {"task": "Open specific files/directories in a new window:", "command": "code --new-window {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Install/uninstall a specific extension:", "command": "code --{{install|uninstall}}-extension {{publisher.extension}}"}, {"task": "Print installed extensions:", "command": "code --list-extensions"}, {"task": "Print installed extensions with their versions:", "command": "code --list-extensions --show-versions"}, {"task": "Start the editor as a superuser (root) while storing user data in a specific directory:", "command": "sudo code --user-data-dir {{path/to/directory}}"}]}
{"command": "codespell", "tasks": [{"task": "Check for typos in all text files in the current directory, recursively:", "command": "codespell"}, {"task": "Correct all typos found in-place:", "command": "codespell --write-changes"}, {"task": "Skip files with names that match the specified pattern (accepts a comma-separated list of patterns using wildcards):", "command": "codespell --skip \"{{pattern}}\""}, {"task": "Use a custom dictionary file when checking (`--dictionary` can be used multiple times):", "command": "codespell --dictionary {{path/to/file.txt}}"}, {"task": "Do not check words that are listed in the specified file:", "command": "codespell --ignore-words {{path/to/file.txt}}"}, {"task": "Do not check the specified words:", "command": "codespell --ignore-words-list {{words,to,ignore}}"}, {"task": "Print 3 lines of context around, before or after each match:", "command": "codespell --{{context|before-context|after-context}} {{3}}"}, {"task": "Check file names for typos, in addition to file contents:", "command": "codespell --check-filenames"}]}
{"command": "coffee", "tasks": [{"task": "Run a script:", "command": "coffee {{path/to/file.coffee}}"}, {"task": "Compile to JavaScript and save to a file with the same name:", "command": "coffee --compile {{path/to/file.coffee}}"}, {"task": "Compile to JavaScript and save to a given output file:", "command": "coffee --compile {{path/to/file.coffee}} --output {{path/to/file.js}}"}, {"task": "Start a REPL (interactive shell):", "command": "coffee --interactive"}, {"task": "Watch script for changes and re-run script:", "command": "coffee --watch {{path/to/file.coffee}}"}]}
{"command": "cola", "tasks": [{"task": "View documentation for the original command:", "command": "tldr git-cola"}]}
{"command": "colordiff", "tasks": [{"task": "Compare files:", "command": "colordiff {{file1}} {{file2}}"}, {"task": "Output in two columns:", "command": "colordiff -y {{file1}} {{file2}}"}, {"task": "Ignore case differences in file contents:", "command": "colordiff -i {{file1}} {{file2}}"}, {"task": "Report when two files are the same:", "command": "colordiff -s {{file1}} {{file2}}"}, {"task": "Ignore white spaces:", "command": "colordiff -w {{file1}} {{file2}}"}]}
{"command": "colorls", "tasks": [{"task": "List files one per line:", "command": "colorls -1"}, {"task": "List all files, including hidden files:", "command": "colorls --all"}, {"task": "Long format list (permissions, ownership, size, and modification date) of all files:", "command": "colorls --long --all"}, {"task": "Only list directories:", "command": "colorls --dirs"}]}
{"command": "colorpicker", "tasks": [{"task": "Launch colorpicker and print the hexadecimal and RGB value of each clicked pixel to `stdout`:", "command": "colorpicker"}, {"task": "Only print the color of one clicked pixel and then exit:", "command": "colorpicker --one-shot"}, {"task": "Print the color of each clicked pixel and quit when a key is pressed:", "command": "colorpicker --quit-on-keypress"}, {"task": "Only print the RGB value:", "command": "colorpicker --rgb"}, {"task": "Only print the hexadecimal value:", "command": "colorpicker --hex"}]}
{"command": "column", "tasks": [{"task": "Format the output of a command for a 30 characters wide display:", "command": "printf \"header1 header2\\nbar foo\\n\" | column --output-width {{30}}"}, {"task": "Split columns automatically and auto-align them in a tabular format:", "command": "printf \"header1 header2\\nbar foo\\n\" | column --table"}, {"task": "Specify the column delimiter character for the `--table` option (e.g. \",\" for CSV) (defaults to whitespace):", "command": "printf \"header1,header2\\nbar,foo\\n\" | column --table --separator {{,}}"}, {"task": "Fill rows before filling columns:", "command": "printf \"header1\\nbar\\nfoobar\\n\" | column --output-width {{30}} --fillrows"}]}
{"command": "comby", "tasks": [{"task": "Match and rewrite templates, and print changes:", "command": "comby '{{assert_eq!(:[a], :[b])}}' '{{assert_eq!(:[b], :[a])}}' {{.rs}}"}, {"task": "Match and rewrite with rewrite properties:", "command": "comby '{{assert_eq!(:[a], :[b])}}' '{{assert_eq!(:[b].Capitalize, :[a])}}' {{.rs}}"}, {"task": "Match and rewrite in-place:", "command": "comby -in-place '{{match_pattern}}' '{{rewrite_pattern}}'"}, {"task": "Only perform matching and print matches:", "command": "comby -match-only '{{match_pattern}}' \"\""}]}
{"command": "comm", "tasks": [{"task": "Produce three tab-separated columns: lines only in first file, lines only in second file and common lines:", "command": "comm {{file1}} {{file2}}"}, {"task": "Print only lines common to both files:", "command": "comm -12 {{file1}} {{file2}}"}, {"task": "Print only lines common to both files, reading one file from `stdin`:", "command": "cat {{file1}} | comm -12 - {{file2}}"}, {"task": "Get lines only found in first file, saving the result to a third file:", "command": "comm -23 {{file1}} {{file2}} > {{file1_only}}"}, {"task": "Print lines only found in second file, when the files aren't sorted:", "command": "comm -13 <(sort {{file1}}) <(sort {{file2}})"}]}
{"command": "command", "tasks": [{"task": "Execute the `ls` program literally, even if an `ls` alias exists:", "command": "command {{ls}}"}, {"task": "Display the path to the executable or the alias definition of a specific command:", "command": "command -v {{command_name}}"}]}
{"command": "compare", "tasks": [{"task": "Compare 2 images:", "command": "compare {{image1.png}} {{image2.png}} {{diff.png}}"}, {"task": "Compare 2 images using a custom metric:", "command": "compare -verbose -metric {{PSNR}} {{image1.png}} {{image2.png}} {{diff.png}}"}]}
{"command": "compgen", "tasks": [{"task": "List all commands that you could run:", "command": "compgen -c"}, {"task": "List all aliases:", "command": "compgen -a"}, {"task": "List all functions that you could run:", "command": "compgen -A function"}, {"task": "Show shell reserved keywords:", "command": "compgen -k"}, {"task": "See all available commands/aliases starting with 'ls':", "command": "compgen -ac {{ls}}"}]}
{"command": "complete", "tasks": [{"task": "Apply a function that performs autocompletion to a command:", "command": "complete -F {{function}} {{command}}"}, {"task": "Apply a command that performs autocompletion to another command:", "command": "complete -C {{autocomplete_command}} {{command}}"}, {"task": "Apply autocompletion without appending a space to the completed word:", "command": "complete -o nospace -F {{function}} {{command}}"}]}
{"command": "composer-require-checker", "tasks": [{"task": "Analyze a Composer JSON file:", "command": "composer-require-checker check {{path/to/composer.json}}"}, {"task": "Analyze a Composer JSON file with a specific configuration:", "command": "composer-require-checker check --config-file {{path/to/config.json}} {{path/to/composer.json}}"}]}
{"command": "composer", "tasks": [{"task": "Interactively create a `composer.json` file:", "command": "composer init"}, {"task": "Add a package as a dependency for this project, adding it to `composer.json`:", "command": "composer require {{user/package_name}}"}, {"task": "Install all the dependencies in this project's `composer.json` and create `composer.lock`:", "command": "composer install"}, {"task": "Uninstall a package from this project, removing it as a dependency from `composer.json`:", "command": "composer remove {{user/package_name}}"}, {"task": "Update all the dependencies in this project's `composer.json` and note versions in `composer.lock` file:", "command": "composer update"}, {"task": "Update composer lock only after updating `composer.json` manually:", "command": "composer update --lock"}, {"task": "Learn more about why a dependency can't be installed:", "command": "composer why-not {{user/package_name}}"}, {"task": "Update composer to its latest version:", "command": "composer self-update"}]}
{"command": "conan frogarian", "tasks": [{"task": "Display the conan frogarian:", "command": "conan frogarian"}]}
{"command": "conan", "tasks": [{"task": "Install packages based on `conanfile.txt`:", "command": "conan install {{.}}"}, {"task": "Install packages and create configuration files for a specific generator:", "command": "conan install -g {{generator}}"}, {"task": "Install packages, building from source:", "command": "conan install {{.}} --build"}, {"task": "Search for locally installed packages:", "command": "conan search {{package}}"}, {"task": "Search for remote packages:", "command": "conan search {{package}} -r {{remote}}"}, {"task": "List remotes:", "command": "conan remote list"}]}
{"command": "conda create", "tasks": [{"task": "Create a new environment named `py39`, and install Python 3.9 and NumPy v1.11 or above in it:", "command": "conda create --yes --name {{py39}} python={{3.9}} \"{{numpy>=1.11}}\""}, {"task": "Make exact copy of an environment:", "command": "conda create --clone {{py39}} --name {{py39-copy}}"}, {"task": "Create a new environment with a specified name and install a given package:", "command": "conda create --name {{env_name}} {{package_name}}"}]}
{"command": "conda install", "tasks": [{"task": "Install a single package into the currently active conda environment:", "command": "conda install {{package}}"}, {"task": "Install a single package into the currently active conda environment using channel conda-forge:", "command": "conda install -c conda-forge {{package}}"}, {"task": "Install a single package into the currently active conda environment using channel conda-forge and ignoring other channels:", "command": "conda install -c conda-forge --override-channels {{package}}"}, {"task": "Install multiple packages:", "command": "conda install {{package1 package2 ...}}"}, {"task": "Install a specific version of a package:", "command": "conda install {{package}}={{version}}"}, {"task": "Install a package into a specific environment:", "command": "conda install --name {{environment}} {{package}}"}, {"task": "Update a package in the current environment:", "command": "conda install --upgrade {{package}}"}, {"task": "Install a package and agree to the transactions without prompting:", "command": "conda install --yes {{package}}"}]}
{"command": "conda", "tasks": [{"task": "Create a new environment, installing named packages into it:", "command": "conda create --name {{environment_name}} {{python=3.9 matplotlib}}"}, {"task": "List all environments:", "command": "conda info --envs"}, {"task": "Load an environment:", "command": "conda activate {{environment_name}}"}, {"task": "Unload an environment:", "command": "conda deactivate"}, {"task": "Delete an environment (remove all packages):", "command": "conda remove --name {{environment_name}} --all"}, {"task": "Install packages into the current environment:", "command": "conda install {{python=3.4 numpy}}"}, {"task": "List currently installed packages in current environment:", "command": "conda list"}, {"task": "Delete unused packages and caches:", "command": "conda clean --all"}]}
{"command": "consul-kv", "tasks": [{"task": "Read a value from the key-value store:", "command": "consul kv get {{key}}"}, {"task": "Store a new key-value pair:", "command": "consul kv put {{key}} {{value}}"}, {"task": "Delete a key-value pair:", "command": "consul kv delete {{key}}"}]}
{"command": "consul", "tasks": [{"task": "Check the Consul version:", "command": "consul --version"}, {"task": "Show general help:", "command": "consul --help"}, {"task": "Show help for a sub-command:", "command": "consul {{sub-command}} --help"}]}
{"command": "convert", "tasks": [{"task": "Convert an image from JPG to PNG:", "command": "convert {{image.jpg}} {{image.png}}"}, {"task": "Scale an image 50% its original size:", "command": "convert {{image.png}} -resize 50% {{image2.png}}"}, {"task": "Scale an image keeping the original aspect ratio to a maximum dimension of 640x480:", "command": "convert {{image.png}} -resize 640x480 {{image2.png}}"}, {"task": "Horizontally append images:", "command": "convert {{image1.png}} {{image2.png}} {{image3.png}} +append {{image123.png}}"}, {"task": "Vertically append images:", "command": "convert {{image1.png}} {{image2.png}} {{image3.png}} -append {{image123.png}}"}, {"task": "Create a GIF from a series of images with 100ms delay between them:", "command": "convert {{image1.png}} {{image2.png}} {{image3.png}} -delay {{10}} {{animation.gif}}"}, {"task": "Create an image with nothing but a solid background:", "command": "convert -size {{800x600}} \"xc:{{#ff0000}}\" {{image.png}}"}, {"task": "Create a favicon from several images of different sizes:", "command": "convert {{image1.png}} {{image2.png}} {{image3.png}} {{image.ico}}"}]}
{"command": "convmv", "tasks": [{"task": "Test filename encoding conversion (don't actually change the filename):", "command": "convmv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}"}, {"task": "Convert filename encoding and rename the file to the new encoding:", "command": "convmv -f {{from_encoding}} -t {{to_encoding}} --notest {{input_file}}"}]}
{"command": "coproc", "tasks": [{"task": "Run a subshell asynchronously:", "command": "coproc { {{command1; command2; ...}}; }"}, {"task": "Create a coprocess with a specific name:", "command": "coproc {{name}} { {{command1; command2; ...}}; }"}, {"task": "Write to a specific coprocess `stdin`:", "command": "echo \"{{input}}\" >&\"${{{name}}[1]}\""}, {"task": "Read from a specific coprocess `stdout`:", "command": "read {{variable}} <&\"${{{name}}[0]}\""}, {"task": "Create a coprocess which repeatedly reads `stdin` and runs some commands on the input:", "command": "coproc {{name}} { while read line; do {{command1; command2; ...}}; done }"}, {"task": "Create and use a coprocess running `bc`:", "command": "coproc BC { bc --mathlib; }; echo \"1/3\" >&\"${BC[1]}\"; read output <&\"${BC[0]}\"; echo \"$output\""}]}
{"command": "copyq", "tasks": [{"task": "Launch CopyQ to store clipboard history:", "command": "copyq"}, {"task": "Show current clipboard content:", "command": "copyq clipboard"}, {"task": "Insert raw text into the clipboard history:", "command": "copyq add -- {{text1}} {{text2}} {{text3}}"}, {"task": "Insert text containing escape sequences ('\\n', '\\t') into the clipboard history:", "command": "copyq add {{firstline\\nsecondline}}"}, {"task": "Print the content of the first 3 items in the clipboard history:", "command": "copyq read 0 1 2"}, {"task": "Copy a file's contents into the clipboard:", "command": "copyq copy < {{file.txt}}"}, {"task": "Copy a JPEG image into the clipboard:", "command": "copyq copy image/jpeg < {{image.jpg}}"}]}
{"command": "cordova", "tasks": [{"task": "Create a Cordova project:", "command": "cordova create {{path}} {{package_name}} {{project_name}}"}, {"task": "Display the current workspace status:", "command": "cordova info"}, {"task": "Add a Cordova platform:", "command": "cordova platform add {{platform}}"}, {"task": "Remove a Cordova platform:", "command": "cordova platform remove {{platform}}"}, {"task": "Add a Cordova plugin:", "command": "cordova plugin add {{pluginid}}"}, {"task": "Remove a Cordova plugin:", "command": "cordova plugin remove {{pluginid}}"}]}
{"command": "core-validate-commit", "tasks": [{"task": "Validate the current commit:", "command": "core-validate-commit"}, {"task": "Validate a specific commit:", "command": "core-validate-commit {{commit_hash}}"}, {"task": "Validate a range of commits:", "command": "git rev-list {{commit_hash}}..HEAD | xargs core-validate-commit"}, {"task": "List all validation rules:", "command": "core-validate-commit --list"}, {"task": "List all valid Node.js subsystems:", "command": "core-validate-commit --list-subsystem"}, {"task": "Validate the current commit formatting the output in tap format:", "command": "core-validate-commit --tap"}, {"task": "Display help:", "command": "core-validate-commit --help"}]}
{"command": "corepack", "tasks": [{"task": "Add the Corepack shims to the Node.js installation directory to make them available as global commands:", "command": "corepack enable"}, {"task": "Add the Corepack shims to a specific directory:", "command": "corepack enable --install-directory {{path/to/directory}}"}, {"task": "Remove the Corepack shims from the Node.js installation directory:", "command": "corepack disable"}, {"task": "Prepare a specific package manager:", "command": "corepack prepare {{package_manager}}@{{version}} --activate"}, {"task": "Prepare the package manager configured for the project in the current path:", "command": "corepack prepare"}, {"task": "Use a package manager without installing it as a global command:", "command": "corepack {{npm|pnpm|yarn}} {{package_manager_arguments}}"}, {"task": "Install a package manager from the specified archive:", "command": "corepack hydrate {{path/to/corepack.tgz}}"}, {"task": "Display help for a subcommand:", "command": "corepack {{subcommand}} --help"}]}
{"command": "cosign", "tasks": [{"task": "Generate a key-pair:", "command": "cosign generate-key-pair"}, {"task": "Sign a container and store the signature in the registry:", "command": "cosign sign -key {{cosign.key}} {{image}}"}, {"task": "Sign a container image with a key pair stored in a Kubernetes secret:", "command": "cosign sign -key k8s://{{namespace}}/{{key}} {{image}}"}, {"task": "Sign a blob with a local key pair file:", "command": "cosign sign-blob --key {{cosign.key}} {{path/to/file}}"}, {"task": "Verify a container against a public key:", "command": "cosign verify -key {{cosign.pub}} {{image}}"}, {"task": "Verify images with a public key in a Dockerfile:", "command": "cosign dockerfile verify -key {{cosign.pub}} {{path/to/Dockerfile}}"}, {"task": "Verify an image with a public key stored in a Kubernetes secret:", "command": "cosign verify -key k8s://{{namespace}}/{{key}} {{image}}"}, {"task": "Copy a container image and its signatures:", "command": "cosign copy {{example.com/src:latest}} {{example.com/dest:latest}}"}]}
{"command": "cotton", "tasks": [{"task": "Use a specific base URL:", "command": "cotton -u {{base_url}} {{path/to/file}}.md"}, {"task": "Disable certificate verification (insecure mode):", "command": "cotton -u {{base_url}} -i {{path/to/file}}.md"}, {"task": "Stop running when a test fails:", "command": "cotton -u {{base_url}} -s {{path/to/file}}.md"}]}
{"command": "couchdb", "tasks": [{"task": "Start CouchDB:", "command": "couchdb"}, {"task": "Start CouchDB interactive shell:", "command": "couchdb -i"}, {"task": "Start CouchDB as a background process:", "command": "couchdb -b"}, {"task": "Kill the background process (Note: It will respawn if needed):", "command": "couchdb -k"}, {"task": "Shutdown the background process:", "command": "couchdb -d"}]}
{"command": "cowsay", "tasks": [{"task": "Print an ASCII cow saying \"hello, world\":", "command": "cowsay \"{{hello, world}}\""}, {"task": "Print an ASCII cow saying text from `stdin`:", "command": "echo \"{{hello, world}}\" | cowsay"}, {"task": "List all available art types:", "command": "cowsay -l"}, {"task": "Print the specified ASCII art saying \"hello, world\":", "command": "cowsay -f {{art}} \"{{hello, world}}\""}, {"task": "Print a dead thinking ASCII cow:", "command": "cowthink -d \"{{I'm just a cow, not a great thinker...}}\""}, {"task": "Print an ASCII cow with custom eyes saying \"hello, world\":", "command": "cowsay -e {{characters}} \"{{hello, world}}\""}]}
{"command": "cp", "tasks": [{"task": "Copy a file to another location:", "command": "cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}"}, {"task": "Copy a file into another directory, keeping the filename:", "command": "cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}"}, {"task": "Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it):", "command": "cp -R {{path/to/source_directory}} {{path/to/target_directory}}"}, {"task": "Copy a directory recursively, in verbose mode (shows files as they are copied):", "command": "cp -vR {{path/to/source_directory}} {{path/to/target_directory}}"}, {"task": "Copy multiple files at once to a directory:", "command": "cp -t {{path/to/destination_directory}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Copy text files to another location, in interactive mode (prompts user before overwriting):", "command": "cp -i {{*.txt}} {{path/to/target_directory}}"}, {"task": "Follow symbolic links before copying:", "command": "cp -L {{link}} {{path/to/target_directory}}"}, {"task": "Use the first argument as the destination directory (useful for `xargs ... | cp -t <DEST_DIR>`):", "command": "cp -t {{path/to/target_directory}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}]}
{"command": "cpdf", "tasks": [{"task": "Select pages 1, 2, 3 and 6 from a source document and write those to a destination document:", "command": "cpdf {{path/to/source_document.pdf}} {{1-3,6}} -o {{path/to/destination_document.pdf}}"}, {"task": "Merge two documents into a new one:", "command": "cpdf -merge {{path/to/source_document_one.pdf}} {{path/to/source_document_two.pdf}} -o {{path/to/destination_document.pdf}}"}, {"task": "Show the bookmarks of a document:", "command": "cpdf -list-bookmarks {{path/to/document.pdf}}"}, {"task": "Split a document into ten-page chunks, writing them to `chunk001.pdf`, `chunk002.pdf`, etc:", "command": "cpdf -split {{path/to/document.pdf}} -o {{path/to/chunk%%%.pdf}} -chunk {{10}}"}, {"task": "Encrypt a document using 128bit encryption, providing `fred` as owner password and `joe` as user password:", "command": "cpdf -encrypt {{128bit}} {{fred}} {{joe}} {{path/to/source_document.pdf}} -o {{path/to/encrypted_document.pdf}}"}, {"task": "Decrypt a document using the owner password `fred`:", "command": "cpdf -decrypt {{path/to/encrypted_document.pdf}} owner={{fred}} -o {{path/to/decrypted_document.pdf}}"}, {"task": "Show the annotations of a document:", "command": "cpdf -list-annotations {{path/to/document.pdf}}"}, {"task": "Create a new document from an existing one with additional metadata:", "command": "cpdf -set-metadata {{path/to/metadata.xml}} {{path/to/source_document.pdf}} -o {{path/to/destination_document.pdf}}"}]}
{"command": "cpio", "tasks": [{"task": "Take a list of file names from `stdin` and add them [o]nto an archive in cpio's binary format:", "command": "echo \"{{file1}} {{file2}} {{file3}}\" | cpio -o > {{archive.cpio}}"}, {"task": "Copy all files and directories in a directory and add them [o]nto an archive, in [v]erbose mode:", "command": "find {{path/to/directory}} | cpio -ov > {{archive.cpio}}"}, {"task": "P[i]ck all files from an archive, generating [d]irectories where needed, in [v]erbose mode:", "command": "cpio -idv < {{archive.cpio}}"}]}
{"command": "cppcheck", "tasks": [{"task": "Recursively check the current directory, showing progress on the screen and logging error messages to a file:", "command": "cppcheck . 2> cppcheck.log"}, {"task": "Recursively check a given directory, and don't print progress messages:", "command": "cppcheck --quiet {{path/to/directory}}"}, {"task": "Check a given file, specifying which tests to perform (by default only errors are shown):", "command": "cppcheck --enable={{error|warning|style|performance|portability|information|all}} {{path/to/file.cpp}}"}, {"task": "List available tests:", "command": "cppcheck --errorlist"}, {"task": "Check a given file, ignoring specific tests:", "command": "cppcheck --suppress={{test_id1}} --suppress={{test_id2}} {{path/to/file.cpp}}"}, {"task": "Check the current directory, providing paths for include files located outside it (e.g. external libraries):", "command": "cppcheck -I {{include/directory_1}} -I {{include/directory_2}} ."}, {"task": "Check a Microsoft Visual Studio project (`*.vcxproj`) or solution (`*.sln`):", "command": "cppcheck --project={{path/to/project.sln}}"}]}
{"command": "cppclean", "tasks": [{"task": "Run in a project's directory:", "command": "cppclean {{path/to/project}}"}, {"task": "Run on a project where the headers are in the `inc1/` and `inc2/` directories:", "command": "cppclean {{path/to/project}} --include-path={{inc1}} --include-path={{inc2}}"}, {"task": "Run on a specific file `main.cpp`:", "command": "cppclean {{main.cpp}}"}, {"task": "Run on the current directory, excluding the \"build\" directory:", "command": "cppclean {{.}} --exclude={{build}}"}]}
{"command": "cradle deploy", "tasks": [{"task": "Deploy Cradle to a server:", "command": "cradle deploy production"}, {"task": "Deploy static assets to Amazon S3:", "command": "cradle deploy s3"}, {"task": "Deploy static assets including the Yarn \"components\" directory:", "command": "cradle deploy s3 --include-yarn"}, {"task": "Deploy static assets including the \"upload\" directory:", "command": "cradle deploy s3 --include-upload"}]}
{"command": "cradle elastic", "tasks": [{"task": "Truncate the Elasticsearch index:", "command": "cradle elastic flush"}, {"task": "Truncate the Elasticsearch index for a specific package:", "command": "cradle elastic flush {{package_name}}"}, {"task": "Submit the Elasticsearch schema:", "command": "cradle elastic map"}, {"task": "Submit the Elasticsearch schema for a specific package:", "command": "cradle elastic map {{package_name}}"}, {"task": "Populate the Elasticsearch indices for all packages:", "command": "cradle elastic populate"}, {"task": "Populate the Elasticsearch indices for a specific package:", "command": "cradle elastic populate {{package_name}}"}]}
{"command": "cradle install", "tasks": [{"task": "Install Cradle's components (User will be prompted for further details):", "command": "cradle install"}, {"task": "Forcefully overwrite files:", "command": "cradle install --force"}, {"task": "Skip running SQL migrations:", "command": "cradle install --skip-sql"}, {"task": "Skip running package updates:", "command": "cradle install --skip-versioning"}, {"task": "Use specific database details:", "command": "cradle install -h {{hostname}} -u {{username}} -p {{password}}"}]}
{"command": "cradle package", "tasks": [{"task": "Display a list of available packages:", "command": "cradle package list"}, {"task": "Search for a package:", "command": "cradle package search {{package}}"}, {"task": "Install a package from Packagist:", "command": "cradle package install {{package}}"}, {"task": "Install a specific version of a package:", "command": "cradle package install {{package}} {{version}}"}, {"task": "Update a package:", "command": "cradle package update {{package}}"}, {"task": "Update a package to a specific version:", "command": "cradle package update {{package}} {{version}}"}, {"task": "Remove a specific package:", "command": "cradle package remove {{package}}"}]}
{"command": "cradle sql", "tasks": [{"task": "Rebuild the database schema:", "command": "cradle sql build"}, {"task": "Rebuild the database schema for a specific package:", "command": "cradle sql build {{package_name}}"}, {"task": "Empty the entire database:", "command": "cradle sql flush"}, {"task": "Empty the database tables for a specific package:", "command": "cradle sql flush {{package_name}}"}, {"task": "Populate the tables for all packages:", "command": "cradle sql populate"}, {"task": "Populate the tables for a specific package:", "command": "cradle sql populate {{package_name}}"}]}
{"command": "cradle", "tasks": [{"task": "Connect to a server:", "command": "cradle connect {{server_name}}"}, {"task": "Display general help:", "command": "cradle help"}, {"task": "Display help for a specific command:", "command": "cradle {{command}} help"}, {"task": "Execute a Cradle command:", "command": "cradle {{command}}"}]}
{"command": "createdb", "tasks": [{"task": "Create a database owned by the current user:", "command": "createdb {{database_name}}"}, {"task": "Create a database owned by a specific user with a description:", "command": "createdb --owner={{username}} {{database_name}} '{{description}}'"}, {"task": "Create a database from a template:", "command": "createdb --template={{template_name}} {{database_name}}"}]}
{"command": "crictl", "tasks": [{"task": "List all kubernetes pods (Ready and NotReady):", "command": "crictl pods"}, {"task": "List all containers (Running and Exited):", "command": "crictl ps --all"}, {"task": "List all images:", "command": "crictl images"}, {"task": "Print information about specific containers:", "command": "crictl inspect {{container_id1 container_id2 ...}}"}, {"task": "Open a specific shell inside a running container:", "command": "crictl exec -it {{container_id}} {{sh}}"}, {"task": "Pull a specific image from a registry:", "command": "crictl pull {{image:tag}}"}, {"task": "Print and [f]ollow logs of a specific container:", "command": "crictl logs -f {{container_id}}"}, {"task": "Remove one or more images:", "command": "crictl rmi {{image_id1 image_id2 ...}}"}]}
{"command": "croc", "tasks": [{"task": "Send a file or directory:", "command": "croc send {{path/to/file_or_directory}}"}, {"task": "Send a file or directory with a specific passphrase:", "command": "croc send --code {{passphrase}} {{path/to/file_or_directory}}"}, {"task": "Receive a file or directory on receiving machine:", "command": "croc {{passphrase}}"}, {"task": "Send and connect over a custom relay:", "command": "croc --relay {{ip_to_relay}} send {{path/to/file_or_directory}}"}, {"task": "Receive and connect over a custom relay:", "command": "croc --relay {{ip_to_relay}} {{passphrase}}"}, {"task": "Host a croc relay on the default ports:", "command": "croc relay"}, {"task": "Display parameters and options for a croc command:", "command": "croc {{send|relay}} --help"}]}
{"command": "cron", "tasks": [{"task": "View documentation for the original command:", "command": "tldr crontab"}]}
{"command": "cronic", "tasks": [{"task": "Call a command and display its output if it returns a non-zero exit code:", "command": "cronic {{command}}"}]}
{"command": "crontab", "tasks": [{"task": "Edit the crontab file for the current user:", "command": "crontab -e"}, {"task": "Edit the crontab file for a specific user:", "command": "sudo crontab -e -u {{user}}"}, {"task": "Replace the current crontab with the contents of the given file:", "command": "crontab {{path/to/file}}"}, {"task": "View a list of existing cron jobs for current user:", "command": "crontab -l"}, {"task": "Remove all cron jobs for the current user:", "command": "crontab -r"}, {"task": "Sample job which runs at 10:00 every day (* means any value):", "command": "0 10 * * * {{command_to_execute}}"}, {"task": "Sample crontab entry, which runs a command every 10 minutes:", "command": "*/10 * * * * {{command_to_execute}}"}, {"task": "Sample crontab entry, which runs a certain script at 02:30 every Friday:", "command": "30 2 * * Fri {{/absolute/path/to/script.sh}}"}]}
{"command": "crunch", "tasks": [{"task": "Output a list of words of length 1 to 3 with only lowercase characters:", "command": "crunch {{1}} {{3}}"}, {"task": "Output a list of hexadecimal words of length 8:", "command": "crunch {{8}} {{8}} {{0123456789abcdef}}"}, {"task": "Output a list of all permutations of abc (lengths are not processed):", "command": "crunch {{1}} {{1}} -p {{abc}}"}, {"task": "Output a list of all permutations of the given strings (lengths are not processed):", "command": "crunch {{1}} {{1}} -p {{abc}} {{def}} {{ghi}}"}, {"task": "Output a list of words generated according to the given pattern and a maximum number of duplicate letters:", "command": "crunch {{5}} {{5}} {{abcde123}} -t {{@@@12}} -d 2@"}, {"task": "Write a list of words in chunk files of a given size, starting with the given string:", "command": "crunch {{3}} {{5}} -o {{START}} -b {{10kb}} -s {{abc}}"}, {"task": "Write a list of words stopping with the given string and inverting the wordlist:", "command": "crunch {{1}} {{5}} -o {{START}} -e {{abcde}} -i"}, {"task": "Write a list of words in compressed chunk files with a specified number of words:", "command": "crunch {{1}} {{5}} -o {{START}} -c {{1000}} -z {{gzip|bzip2|lzma|7z}}"}]}
{"command": "cryfs", "tasks": [{"task": "Mount an encrypted filesystem. The initialization wizard will be started on the first execution:", "command": "cryfs {{path/to/cipher_dir}} {{path/to/mount_point}}"}, {"task": "Unmount an encrypted filesystem:", "command": "cryfs-unmount {{path/to/mount_point}}"}, {"task": "Automatically unmount after ten minutes of inactivity:", "command": "cryfs --unmount-idle {{10}} {{path/to/cipher_dir}} {{path/to/mount_point}}"}, {"task": "Show a list of supported ciphers:", "command": "cryfs --show-ciphers"}]}
{"command": "crystal", "tasks": [{"task": "Run a Crystal file:", "command": "crystal {{path/to/file.cr}}"}, {"task": "Compile a file and all dependencies to a single executable:", "command": "crystal build {{path/to/file.cr}}"}, {"task": "Start a local interactive server for testing the language:", "command": "crystal play"}, {"task": "Create a project directory for a Crystal application:", "command": "crystal init app {{application_name}}"}, {"task": "Display all help options:", "command": "crystal help"}]}
{"command": "cs complete dep", "tasks": [{"task": "Print which artifacts are published under a specific Maven group identifier:", "command": "cs complete-dep {{group_id}}"}, {"task": "List published library versions under a specific Maven group identifier and an artifact one:", "command": "cs complete-dep {{group_id}}:{{artifact_id}}"}, {"task": "Print which artifacts are pubblished under a given Maven groupId searching in the ivy2local:", "command": "cs complete-dep {{group_id}} --repository ivy2local"}, {"task": "List published artifacts under a Maven group identifier searching in a specific repository and credentials:", "command": "cs complete-dep {{group_id}}:{{artifact_id}} --repository {{repository_url}} --credentials {{user}}:{{password}}"}]}
{"command": "cs fetch", "tasks": [{"task": "Fetch a specific version of a jar:", "command": "cs fetch {{group_id}}:{{artifact_id}}:{{artifact_version}}"}, {"task": "Fetch a package and evaluate the classpath corresponding to the selected package in an env var:", "command": "CP=\"$(cs fetch --classpath org.scalameta::scalafmt-cli:latest.release)\""}, {"task": "Fetch a source of a specific jar:", "command": "cs fetch --sources {{group_id}}:{{artifact_id}}:{{artifact_version}}"}, {"task": "Fetch the javadoc jars:", "command": "cs fetch --javadoc {{group_id}}:{{artifact_id}}:{{artifact_version}}"}, {"task": "Fetch dependency with javadoc jars and source jars:", "command": "cs fetch --default={{true}} --sources --javadoc {{group_id}}:{{artifact_id}}:{{artifact_version}}"}, {"task": "Fetch jars coming from dependency files:", "command": "cs fetch {{--dependency-file path/to/file1 --dependency-file path/to/file2 ...}}"}]}
{"command": "cs install", "tasks": [{"task": "Install a specific application:", "command": "cs install {{application_name}}"}, {"task": "Install a specific version of an application:", "command": "cs install {{application_name}}:{{application_version}}"}, {"task": "Search an application by a specific name:", "command": "cs search {{application_partial_name}}"}, {"task": "Update a specific application if available:", "command": "cs update {{application_name}}"}, {"task": "Update all the installed applications:", "command": "cs update"}, {"task": "Uninstall a specific application:", "command": "cs uninstall {{application_name}}"}, {"task": "List all installed applications:", "command": "cs list"}, {"task": "Pass specific java options to an installed application:", "command": "{{application_name}} {{-Jjava_option_name1=value1 -Jjava_option_name2=value2 ...}}"}]}
{"command": "cs java", "tasks": [{"task": "Call the java version by using coursier:", "command": "cs java -version"}, {"task": "Call a specific java version with custom properties using coursier:", "command": "cs java --jvm {{jvm_name}}:{{jvm_version}} -Xmx32m -X{{another_jvm_opt}} -jar {{path/to/jar_name.jar}}"}, {"task": "List all the available JVM in the coursier default index:", "command": "cs java --available"}, {"task": "List all the installed JVM in the system with his own location:", "command": "cs java --installed"}, {"task": "Set the a specific JVM as one-off \"default\" for the shell instance:", "command": "cs java --jvm {{jvm_name}}:{{jvm_version}} --env"}, {"task": "Revert the changes for the default JVM settings:", "command": "eval \"$(cs java --disable)\""}, {"task": "Set a specific JVM as default for the whole system:", "command": "cs java --jvm {{jvm_name}}:{{jvm_version}} --setup"}]}
{"command": "cs launch", "tasks": [{"task": "Launch a specific application with arguments:", "command": "cs launch {{application_name}} -- {{arg1 arg2 ...}}"}, {"task": "Launch a specific application version with arguments:", "command": "cs launch {{application_name}}:{{application_version}} -- {{arg1 arg2 ...}}"}, {"task": "Launch a specific version of an application specifying which is the main file:", "command": "cs launch {{group_id}}:{{artifact_id}}:{{artifact_version}} --main-class {{path/to/main_class_file}}"}, {"task": "Launch an application with specific java options and a jvm memory ones:", "command": "cs launch --java-opt {{-Doption_name1:option_value1 -Doption_name2:option_value2 ...}} --java-opt {{-Xjvm_option1 -Xjvm_option2 ...}} {{application_name}}"}]}
{"command": "cs resolve", "tasks": [{"task": "Resolve lists of transitive dependencies of two dependencies:", "command": "cs resolve {{group_id1}}:{{artifact_id1}}:{{artifact_version1}} {{group_id2}}:{{artifact_id2}}:{{artifact_version2}}"}, {"task": "Resolve lists of transitive dependencies of a package by the dependency tree:", "command": "cs resolve --tree {{group_id}}:{{artifact_id}}:{{artifact_version}}"}, {"task": "Resolve dependency tree in a reverse order (from a dependency to its dependencies):", "command": "cs resolve --reverse-tree {{group_id}}:{{artifact_id}}:{{artifact_version}"}, {"task": "Print all the libraries that depends on a specific library:", "command": "cs resolve {{group_id}}:{{artifact_id}}:{{artifact_version}} --what-depends-on {{searched_group_id}}:{{searched_artifact_id}}"}, {"task": "Print all the libraries that depends on a specific library version:", "command": "cs resolve {{group_id}}:{{artifact_id}}:{{artifact_version}} --what-depends-on {{searched_group_id}}:{{searched_artifact_id}}{{searched_artifact_version}}"}, {"task": "Print eventual conflicts between a set of packages:", "command": "cs resolve --conflicts {{group_id1:artifact_id1:artifact_version1 group_id2:artifact_id2:artifact_version2 ...}}"}]}
{"command": "coursier", "tasks": [{"task": "Display version:", "command": "cs version"}, {"task": "Show a list of the installed applications:", "command": "cs list"}, {"task": "Install a specific application:", "command": "cs install {{application_name}}"}, {"task": "Uninstall a specific application:", "command": "cs uninstall {{application_name}}"}, {"task": "Setup machine for the Scala development:", "command": "cs setup"}, {"task": "Update all the installed applications:", "command": "cs update"}]}
{"command": "csc", "tasks": [{"task": "Compile one or more C# files to a CIL executable:", "command": "csc {{path/to/input_file_a.cs}} {{path/to/input_file_b.cs}}"}, {"task": "Specify the output filename:", "command": "csc /out:{{path/to/filename}} {{path/to/input_file.cs}}"}, {"task": "Compile into a `.dll` library instead of an executable:", "command": "csc /target:library {{path/to/input_file.cs}}"}, {"task": "Reference another assembly:", "command": "csc /reference:{{path/to/library.dll}} {{path/to/input_file.cs}}"}, {"task": "Embed a resource:", "command": "csc /resource:{{path/to/resource_file}} {{path/to/input_file.cs}}"}, {"task": "Automatically generate XML documentation:", "command": "csc /doc:{{path/to/output.xml}} {{path/to/input_file.cs}}"}, {"task": "Specify an icon:", "command": "csc /win32icon:{{path/to/icon.ico}} {{path/to/input_file.cs}}"}, {"task": "Strongly-name the resulting assembly with a keyfile:", "command": "csc /keyfile:{{path/to/keyfile}} {{path/to/input_file.cs}}"}]}
{"command": "csh", "tasks": [{"task": "Start an interactive shell session:", "command": "csh"}, {"task": "Start an interactive shell session without loading startup configs:", "command": "csh -f"}, {"task": "Execute specific [c]ommands:", "command": "csh -c \"{{echo 'csh is executed'}}\""}, {"task": "Execute a specific script:", "command": "csh {{path/to/script.csh}}"}]}
{"command": "csslint", "tasks": [{"task": "Lint a single CSS file:", "command": "csslint {{file.css}}"}, {"task": "Lint multiple CSS files:", "command": "csslint {{file1.css}} {{file2.css}} {{file3.css}}"}, {"task": "List all possible style rules:", "command": "csslint --list-rules"}, {"task": "Specify certain rules as errors (which result in a non-zero exit code):", "command": "csslint --errors={{errors,universal-selector,imports}} {{file.css}}"}, {"task": "Specify certain rules as warnings:", "command": "csslint --warnings={{box-sizing,selector-max,floats}} {{file.css}}"}, {"task": "Specify certain rules to ignore:", "command": "csslint --ignore={{ids,rules-count,shorthand}} {{file.css}}"}]}
{"command": "csv-diff", "tasks": [{"task": "Display a human-readable summary of differences between files using a specific column as a unique identifier:", "command": "csv-diff {{path/to/file1.csv}} {{path/to/file2.csv}} --key={{column_name}}"}, {"task": "Display a human-readable summary of differences between files that includes unchanged values in rows with at least one change:", "command": "csv-diff {{path/to/file1.csv}} {{path/to/file2.csv}} --key={{column_name}} --show-unchanged"}, {"task": "Display a summary of differences between files in JSON format using a specific column as a unique identifier:", "command": "csv-diff {{path/to/file1.csv}} {{path/to/file2.csv}} --key={{column_name}} --json"}]}
{"command": "csv2tsv", "tasks": [{"task": "Convert from CSV to TSV:", "command": "csv2tsv {{path/to/input_csv1 path/to/input_csv2 ...}} > {{path/to/output_tsv}}"}, {"task": "Convert field delimiter separated CSV to TSV:", "command": "csv2tsv -c'{{field_delimiter}}' {{path/to/input_csv}}"}, {"task": "Convert semicolon separated CSV to TSV:", "command": "csv2tsv -c';' {{path/to/input_csv}}"}]}
{"command": "csvclean", "tasks": [{"task": "Clean a CSV file:", "command": "csvclean {{bad.csv}}"}, {"task": "List locations of syntax errors in a CSV file:", "command": "csvclean -n {{bad.csv}}"}]}
{"command": "csvcut", "tasks": [{"task": "Print indices and names of all columns:", "command": "csvcut -n {{data.csv}}"}, {"task": "Extract the first and third columns:", "command": "csvcut -c {{1,3}} {{data.csv}}"}, {"task": "Extract all columns **except** the fourth one:", "command": "csvcut -C {{4}} {{data.csv}}"}, {"task": "Extract the columns named \"id\" and \"first name\" (in that order):", "command": "csvcut -c {{id,\"first name\"}} {{data.csv}}"}]}
{"command": "csvformat", "tasks": [{"task": "Convert to a tab-delimited file (TSV):", "command": "csvformat -T {{data.csv}}"}, {"task": "Convert delimiters to a custom character:", "command": "csvformat -D \"{{custom_character}}\" {{data.csv}}"}, {"task": "Convert line endings to carriage return (^M) + line feed:", "command": "csvformat -M \"{{\\r\\n}}\" {{data.csv}}"}, {"task": "Minimize use of quote characters:", "command": "csvformat -U 0 {{data.csv}}"}, {"task": "Maximize use of quote characters:", "command": "csvformat -U 1 {{data.csv}}"}]}
{"command": "csvgrep", "tasks": [{"task": "Find rows that have a certain string in column 1:", "command": "csvgrep -c {{1}} -m {{string_to_match}} {{data.csv}}"}, {"task": "Find rows in which columns 3 or 4 match a certain regular expression:", "command": "csvgrep -c {{3,4}} -r {{regular_expression}} {{data.csv}}"}, {"task": "Find rows in which the \"name\" column does NOT include the string \"John Doe\":", "command": "csvgrep -i -c {{name}} -m \"{{John Doe}}\" {{data.csv}}"}]}
{"command": "csvkit", "tasks": [{"task": "Run a command on a CSV file with a custom delimiter:", "command": "{{command}} -d {{delimiter}} {{path/to/file.csv}}"}, {"task": "Run a command on a CSV file with a tab as a delimiter (overrides -d):", "command": "{{command}} -t {{path/to/file.csv}}"}, {"task": "Run a command on a CSV file with a custom quote character:", "command": "{{command}} -q {{quote_char}} {{path/to/file.csv}}"}, {"task": "Run a command on a CSV file with no header row:", "command": "{{command}} -H {{path/to/file.csv}}"}]}
{"command": "csvlook", "tasks": [{"task": "View a CSV file:", "command": "csvlook {{data.csv}}"}]}
{"command": "csvpy", "tasks": [{"task": "Load a CSV file into a `CSVKitReader` object:", "command": "csvpy {{data.csv}}"}, {"task": "Load a CSV file into a `CSVKitDictReader` object:", "command": "csvpy --dict {{data.csv}}"}]}
{"command": "csvsort", "tasks": [{"task": "Sort a CSV file by column 9:", "command": "csvsort -c {{9}} {{data.csv}}"}, {"task": "Sort a CSV file by the \"name\" column in descending order:", "command": "csvsort -r -c {{name}} {{data.csv}}"}, {"task": "Sort a CSV file by column 2, then by column 4:", "command": "csvsort -c {{2,4}} {{data.csv}}"}, {"task": "Sort a CSV file without inferring data types:", "command": "csvsort --no-inference -c {{columns}} {{data.csv}}"}]}
{"command": "csvsql", "tasks": [{"task": "Generate a `CREATE TABLE` SQL statement for a CSV file:", "command": "csvsql {{path/to/data.csv}}"}, {"task": "Import a CSV file into an SQL database:", "command": "csvsql --insert --db \"{{mysql://user:password@host/database}}\" {{data.csv}}"}, {"task": "Run an SQL query on a CSV file:", "command": "csvsql --query \"{{select * from 'data'}}\" {{data.csv}}"}]}
{"command": "csvstat", "tasks": [{"task": "Show all stats for all columns:", "command": "csvstat {{data.csv}}"}, {"task": "Show all stats for columns 2 and 4:", "command": "csvstat -c {{2,4}} {{data.csv}}"}, {"task": "Show sums for all columns:", "command": "csvstat --sum {{data.csv}}"}, {"task": "Show the max value length for column 3:", "command": "csvstat -c {{3}} --len {{data.csv}}"}, {"task": "Show the number of unique values in the \"name\" column:", "command": "csvstat -c {{name}} --unique {{data.csv}}"}]}
{"command": "csvtool", "tasks": [{"task": "Extract the second column from a CSV file:", "command": "csvtool --column {{2}} {{path/to/file.csv}}"}, {"task": "Extract the second and fourth columns from a CSV file:", "command": "csvtool --column {{2,4}} {{path/to/file.csv}}"}, {"task": "Extract lines from a CSV file where the second column exactly matches 'Foo':", "command": "csvtool --column {{2}} --search '{{^Foo$}}' {{path/to/file.csv}}"}, {"task": "Extract lines from a CSV file where the second column starts with 'Bar':", "command": "csvtool --column {{2}} --search '{{^Bar}}' {{path/to/file.csv}}"}, {"task": "Find lines in a CSV file where the second column ends with 'Baz' and then extract the third and sixth columns:", "command": "csvtool --column {{2}} --search '{{Baz$}}' {{path/to/file.csv}} | csvtool --no-header --column {{3,6}}"}]}
{"command": "ctags", "tasks": [{"task": "Generate tags for a single file, and output them to a file named \"tags\" in the current directory, overwriting the file if it exists:", "command": "ctags {{path/to/file}}"}, {"task": "Generate tags for all files in the current directory, and output them to a specific file, overwriting the file if it exists:", "command": "ctags -f {{path/to/file}} *"}, {"task": "Generate tags for all files in the current directory and all subdirectories:", "command": "ctags --recurse"}, {"task": "Generate tags for a single file, and output them with start line number and end line number in JSON format:", "command": "ctags --fields=+ne --output-format=json {{path/to/file}}"}]}
{"command": "ctest", "tasks": [{"task": "Run all tests defined in the CMake project, executing 4 jobs at a time in parallel:", "command": "ctest -j{{4}} --output-on-failure"}, {"task": "Show a list of available tests:", "command": "ctest -N"}, {"task": "Run a single test based on its name, or filter on a regular expression:", "command": "ctest --output-on-failure -R '^{{test_name}}$'"}]}
{"command": "cups-config", "tasks": [{"task": "Show the currently installed version of CUPS:", "command": "cups-config --version"}, {"task": "Show where CUPS is currently installed:", "command": "cups-config --serverbin"}, {"task": "Show the location of CUPS' configuration directory:", "command": "cups-config --serverroot"}, {"task": "Show the location of CUPS' data directory:", "command": "cups-config --datadir"}, {"task": "Display all available options:", "command": "cups-config --help"}]}
{"command": "cupsd", "tasks": [{"task": "Start `cupsd` in the background, aka. as a daemon:", "command": "cupsd"}, {"task": "Start `cupsd` on the [f]oreground:", "command": "cupsd -f"}, {"task": "[l]aunch `cupsd` on-demand (commonly used by `launchd` or `systemd`):", "command": "cupsd -l"}, {"task": "Start `cupsd` using the specified [`c`]`upsd.conf` configuration file:", "command": "cupsd -c {{path/to/cupsd.conf}}"}, {"task": "Start `cupsd` using the specified `cups-file`[`s`]`.conf` configuration file:", "command": "cupsd -s {{path/to/cups-files.conf}}"}, {"task": "[t]est the [`c`]`upsd.conf` configuration file for errors:", "command": "cupsd -t -c {{path/to/cupsd.conf}}"}, {"task": "[t]est the `cups-file`[`s`]`.conf` configuration file for errors:", "command": "cupsd -t -s {{path/to/cups-files.conf}}"}, {"task": "Display all available options:", "command": "cupsd -h"}]}
{"command": "curl", "tasks": [{"task": "Download the contents of a URL to a file:", "command": "curl {{http://example.com}} --output {{path/to/file}}"}, {"task": "Download a file, saving the output under the filename indicated by the URL:", "command": "curl --remote-name {{http://example.com/filename}}"}, {"task": "Download a file, following location redirects, and automatically continuing (resuming) a previous file transfer and return an error on server error:", "command": "curl --fail --remote-name --location --continue-at - {{http://example.com/filename}}"}, {"task": "Send form-encoded data (POST request of type `application/x-www-form-urlencoded`). Use `--data @file_name` or `--data @'-'` to read from STDIN:", "command": "curl --data {{'name=bob'}} {{http://example.com/form}}"}, {"task": "Send a request with an extra header, using a custom HTTP method:", "command": "curl --header {{'X-My-Header: 123'}} --request {{PUT}} {{http://example.com}}"}, {"task": "Send data in JSON format, specifying the appropriate content-type header:", "command": "curl --data {{'{\"name\":\"bob\"}'}} --header {{'Content-Type: application/json'}} {{http://example.com/users/1234}}"}, {"task": "Pass a username and password for server authentication:", "command": "curl --user myusername:mypassword {{http://example.com}}"}, {"task": "Pass client certificate and key for a resource, skipping certificate validation:", "command": "curl --cert {{client.pem}} --key {{key.pem}} --insecure {{https://example.com}}"}]}
{"command": "cut", "tasks": [{"task": "Print a specific character/field range of each line:", "command": "{{command}} | cut --{{characters|fields}}={{1|1,10|1-10|1-|-10}}"}, {"task": "Print a range of each line with a specific delimiter:", "command": "{{command}} | cut --delimiter=\"{{,}}\" --{{fields}}={{1}}"}, {"task": "Print a range of each line of the specific file:", "command": "cut --{{characters}}={{1}} {{path/to/file}}"}]}
{"command": "cvs", "tasks": [{"task": "Create a new repository (requires the `CVSROOT` environment variable to be set externally):", "command": "cvs -d {{path/to/repository}} init"}, {"task": "Add a project to the repository:", "command": "cvs import -m \"{{message}}\" {{project_name}} {{version}} {{vendor}}"}, {"task": "Checkout a project:", "command": "cvs checkout {{project_name}}"}, {"task": "Show changes made to files:", "command": "cvs diff {{path/to/file}}"}, {"task": "Add a file:", "command": "cvs add {{path/to/file}}"}, {"task": "Commit a file:", "command": "cvs commit -m \"{{message}}\" {{path/to/file}}"}, {"task": "Update the working directory from the remote repository:", "command": "cvs update"}]}
{"command": "cwebp", "tasks": [{"task": "Compress a WebP file with default settings (q = 75) to the [o]utput file:", "command": "cwebp {{path/to/image_file}} -o {{path/to/output.webp}}"}, {"task": "Compress a WebP file with the best [q]uality and largest file size:", "command": "cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -q {{100}}"}, {"task": "Compress a WebP file with the worst [q]uality and smallest file size:", "command": "cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -q {{0}}"}, {"task": "Compress a WebP file and apply resize to image:", "command": "cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -resize {{width}} {{height}}"}, {"task": "Compress a WebP file and drop alpha channel information:", "command": "cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -noalpha"}]}
{"command": "czkawka-cli", "tasks": [{"task": "List duplicate or similar files in specific directories:", "command": "czkawka-cli {{dup|image}} --directories {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Find duplicate files in specific directories and delete them (default: `NONE`):", "command": "czkawka-cli dup --directories {{path/to/directory1 path/to/directory2 ...}} --delete-method {{AEN|AEO|ON|OO|HARD|NONE}}"}]}
{"command": "d8", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "d8"}, {"task": "Run a JavaScript file:", "command": "d8 {{path/to/file.js}}"}, {"task": "Evaluate a JavaScript expression:", "command": "d8 -e \"{{code}}"}]}
{"command": "daps", "tasks": [{"task": "Check if a DocBook XML file is valid:", "command": "daps -d {{path/to/file.xml}} validate"}, {"task": "Convert a DocBook XML file into PDF:", "command": "daps -d {{path/to/file.xml}} pdf"}, {"task": "Convert a DocBook XML file into a single HTML file:", "command": "daps -d {{path/to/file.xml}} html --single"}, {"task": "Display help:", "command": "daps --help"}, {"task": "Display version:", "command": "daps --version"}]}
{"command": "darkhttpd", "tasks": [{"task": "Start server serving the specified document root:", "command": "darkhttpd {{path/to/docroot}}"}, {"task": "Start server on specified port (port 8080 by default if running as non-root user):", "command": "darkhttpd {{path/to/docroot}} --port {{port}}"}, {"task": "Listen only on specified IP address (by default, the server listens on all interfaces):", "command": "darkhttpd {{path/to/docroot}} --addr {{ip_address}}"}]}
{"command": "dart", "tasks": [{"task": "Initialize a new Dart project in a directory of the same name:", "command": "dart create {{project_name}}"}, {"task": "Run a Dart file:", "command": "dart run {{path/to/file.dart}}"}, {"task": "Download dependencies for the current project:", "command": "dart pub get"}, {"task": "Run unit tests for the current project:", "command": "dart test"}, {"task": "Update an outdated project's dependencies to support null-safety:", "command": "dart pub upgrade --null-safety"}, {"task": "Compile a Dart file to a native binary:", "command": "dart compile exe {{path/to/file.dart}}"}]}
{"command": "dash", "tasks": [{"task": "Start an interactive shell session:", "command": "dash"}, {"task": "Execute specific [c]ommands:", "command": "dash -c \"{{echo 'dash is executed'}}\""}, {"task": "Execute a specific script:", "command": "dash {{path/to/script.sh}}"}, {"task": "Check a specific script for syntax errors:", "command": "dash -n {{path/to/script.sh}}"}, {"task": "Execute a specific script while printing each command before executing it:", "command": "dash -x {{path/to/script.sh}}"}, {"task": "Execute a specific script and stop at the first [e]rror:", "command": "dash -e {{path/to/script.sh}}"}, {"task": "Execute specific commands from `stdin`:", "command": "{{echo \"echo 'dash is executed'\"}} | dash"}]}
{"command": "datashader_cli", "tasks": [{"task": "Create a shaded scatter plot of points and save it to a png file and set the background color:", "command": "datashader_cli points {{path/to/input.parquet}} --x {{pickup_x}} --y {{pickup_y}} {{path/to/output.png}} --background {{black|white|#rrggbb}}"}, {"task": "Visualize the geospatial data (supports Geoparquet, shapefile, geojson, geopackage, etc.):", "command": "datashader_cli points {{path/to/input_data.geo.parquet}} {{path/to/output_data.png}} --geo true"}, {"task": "Use matplotlib to render the image:", "command": "datashader_cli points {{path/to/input_data.geo.parquet}} {{path/to/output_data.png}} --geo {{true}} --matplotlib true"}]}
{"command": "date", "tasks": [{"task": "Display the current date using the default locale's format:", "command": "date +%c"}, {"task": "Display the current date in UTC, using the ISO 8601 format:", "command": "date -u +%Y-%m-%dT%H:%M:%S%Z"}, {"task": "Display the current date as a Unix timestamp (seconds since the Unix epoch):", "command": "date +%s"}, {"task": "Convert a date specified as a Unix timestamp to the default format:", "command": "date -d @{{1473305798}}"}, {"task": "Convert a given date to the Unix timestamp format:", "command": "date -d \"{{2018-09-01 00:00}}\" +%s --utc"}, {"task": "Display the current date using the RFC-3339 format (`YYYY-MM-DD hh:mm:ss TZ`):", "command": "date --rfc-3339=s"}, {"task": "Set the current date using the format `MMDDhhmmYYYY.ss` (`YYYY` and `.ss` are optional):", "command": "date {{093023592021.59}}"}, {"task": "Display the current ISO week number:", "command": "date +%V"}]}
{"command": "dc", "tasks": [{"task": "Start an interactive session:", "command": "dc"}, {"task": "Execute a script:", "command": "dc {{path/to/script.dc}}"}, {"task": "Calculate an expression with the specified scale:", "command": "dc --expression='{{10}} k {{5 3 /}} p'"}, {"task": "Calculate 4 times 5 (4 5 *), subtract 17 (17 -), and [p]rint the output:", "command": "dc --expression='4 5 * 17 - p'"}, {"task": "Set number of decimal places to 7 (7 k), calculate 5 divided by -3 (5 _3 /) and [p]rint:", "command": "dc --expression='7 k 5 _3 / p'"}, {"task": "Calculate the golden ratio, phi: set number of decimal places to 100 (100 k), square root of 5 (5 v) plus 1 (1 +), divided by 2 (2 /), and [p]rint result:", "command": "dc --expression='100 k 5 v 1 + 2 / p'"}]}
{"command": "dcfldd", "tasks": [{"task": "Copy a disk to a raw image file and hash the image using SHA256:", "command": "dcfldd if=/dev/{{disk_device}} of={{file.img}} hash=sha256 hashlog={{file.hash}}"}, {"task": "Copy a disk to a raw image file, hashing each 1 GB chunk:", "command": "dcfldd if=/dev/{{disk_device}} of={{file.img}} hash={{sha512|sha384|sha256|sha1|md5}} hashlog={{file.hash}} hashwindow={{1G}}"}]}
{"command": "dcg", "tasks": [{"task": "Start a wizard to choose what kind of code (e.g. module, service, form, etc.) to generate:", "command": "dcg"}, {"task": "Directly specify the kind of code to generate:", "command": "dcg {{service|plugin|theme|module|form}}"}, {"task": "Generate the code in a specific directory:", "command": "dcg --directory {{path/to/directory}}"}]}
{"command": "dcode", "tasks": [{"task": "Recursively detect and decode a string:", "command": "dcode \"{{NjM3YTQyNzQ1YTQ0NGUzMg==}}\""}, {"task": "Rotate a string by the specified offset:", "command": "dcode -rot {{11}} \"{{spwwz hzcwo}}\""}, {"task": "Rotate a string by all 26 possible offsets:", "command": "dcode -rot {{all}} \"{{bpgkta xh qtiitg iwpc sr}}\""}, {"task": "Reverse a string:", "command": "dcode -rev \"{{hello world}}\""}]}
{"command": "dd", "tasks": [{"task": "Make a bootable USB drive from an isohybrid file (such like `archlinux-xxx.iso`):", "command": "dd if={{path/to/file.iso}} of=/dev/{{usb_drive}}"}, {"task": "Clone a drive to another drive with 4 MiB block and ignore error:", "command": "dd if=/dev/{{source_drive}} of=/dev/{{dest_drive}} bs={{4194304}} conv={{noerror}}"}, {"task": "Generate a file of 100 random bytes by using kernel random driver:", "command": "dd if=/dev/urandom of={{path/to/random_file}} bs={{100}} count={{1}}"}, {"task": "Benchmark the write performance of a disk:", "command": "dd if=/dev/zero of={{path/to/file_1GB}} bs={{1024}} count={{1000000}}"}, {"task": "Generate a system backup into an IMG file:", "command": "dd if={{/dev/drive_device}} of={{path/to/file.img}}"}, {"task": "Restore a drive from an IMG file:", "command": "dd if={{path/to/file.img}} of={{/dev/drive_device}}"}]}
{"command": "ddev", "tasks": [{"task": "Start up a project:", "command": "ddev start"}, {"task": "Configure a project's type and docroot:", "command": "ddev config"}, {"task": "[f]ollow the log trail:", "command": "ddev logs -f"}, {"task": "Run composer within the container:", "command": "ddev composer"}, {"task": "Install a specific Node.js version:", "command": "ddev nvm install {{version}}"}, {"task": "Export a database:", "command": "ddev export-db --file={{/tmp/db.sql.gz}}"}, {"task": "Run a specific command within a container:", "command": "ddev exec {{echo 1}}"}]}
{"command": "deb-get", "tasks": [{"task": "Update the list of available packages and versions:", "command": "sudo deb-get update"}, {"task": "Search for a given package:", "command": "sudo deb-get search {{package}}"}, {"task": "Show information about a package:", "command": "sudo deb-get show {{package}}"}, {"task": "Install a package, or update it to the latest available version:", "command": "sudo deb-get install {{package}}"}, {"task": "Remove a package (using `purge` instead also removes its configuration files):", "command": "sudo deb-get remove {{package}}"}, {"task": "Upgrade all installed packages to their newest available versions:", "command": "sudo deb-get upgrade"}, {"task": "List all available packages:", "command": "deb-get list"}]}
{"command": "decaffeinate", "tasks": [{"task": "Convert a CoffeeScript file to JavaScript:", "command": "decaffeinate {{path/to/file.coffee}}"}, {"task": "Convert a CoffeeScript v2 file to JavaScript:", "command": "decaffeinate --use-cs2 {{path/to/file.coffee}}"}, {"task": "Convert require and `module.exports` to import and export:", "command": "decaffeinate --use-js-modules {{path/to/file.coffee}}"}, {"task": "Convert a CoffeeScript, allowing named exports:", "command": "decaffeinate --loose-js-modules {{path/to/file.coffee}}"}]}
{"command": "declare", "tasks": [{"task": "Declare a string variable with the specified value:", "command": "declare {{variable}}=\"{{value}}\""}, {"task": "Declare an integer variable with the specified value:", "command": "declare -i {{variable}}=\"{{value}}\""}, {"task": "Declare an array variable with the specified value:", "command": "declare -a {{variable}}=({{item_a item_b item_c}})"}, {"task": "Declare an associative array variable with the specified value:", "command": "declare -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})"}, {"task": "Declare a readonly string variable with the specified value:", "command": "declare -r {{variable}}=\"{{value}}\""}, {"task": "Declare a global variable within a function with the specified value:", "command": "declare -g {{variable}}=\"{{value}}\""}]}
{"command": "deemix", "tasks": [{"task": "Download a track or playlist:", "command": "deemix {{https://www.deezer.com/us/track/00000000}}"}, {"task": "Download track/playlist at a specific bitrate:", "command": "deemix --bitrate {{FLAC|MP3}} {{url}}"}, {"task": "Download to a specific path:", "command": "deemix --bitrate {{bitrate}} --path {{path}} {{url}}"}, {"task": "Create a portable deemix config in the current directory:", "command": "deemix --portable --bitrate {{bitrate}} --path {{path}} {{url}}"}]}
{"command": "delta", "tasks": [{"task": "Compare files or directories:", "command": "delta {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}"}, {"task": "Compare files or directories, showing the line numbers:", "command": "delta --line-numbers {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}"}, {"task": "Compare files or directories, showing the differences side by side:", "command": "delta --side-by-side {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}"}, {"task": "Compare files or directories, ignoring any Git configuration settings:", "command": "delta --no-gitconfig {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}"}, {"task": "Compare, rendering commit hashes, file names, and line numbers as hyperlinks, according to the hyperlink spec for terminal emulators:", "command": "delta --hyperlinks {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}"}, {"task": "Display the current settings:", "command": "delta --show-config"}, {"task": "Display supported languages and associated file extensions:", "command": "delta --list-languages"}]}
{"command": "deluge-console", "tasks": [{"task": "Start the interactive console interface:", "command": "deluge-console"}, {"task": "Connect to a Deluge daemon instance:", "command": "connect {{hostname}}:{{port}}"}, {"task": "Add a torrent to the daemon:", "command": "add {{url|magnet|path/to/file}}"}, {"task": "Display information about all torrents:", "command": "info"}, {"task": "Display information about a specific torrent:", "command": "info {{torrent_id}}"}, {"task": "Pause a torrent:", "command": "pause {{torrent_id}}"}, {"task": "Resume a torrent:", "command": "resume {{torrent_id}}"}, {"task": "Remove a torrent from the daemon:", "command": "rm {{torrent_id}}"}]}
{"command": "deluge", "tasks": [{"task": "Download a torrent:", "command": "deluge {{url|magnet|path/to/file}}"}, {"task": "Download a torrent using a specific configuration file:", "command": "deluge -c {{path/to/configuration_file}} {{url|magnet|path/to/file}}"}, {"task": "Download a torrent and launch the specified user interface:", "command": "deluge -u {{gtk|web|console}} {{url|magnet|path/to/file}}"}, {"task": "Download a torrent and output the log to a file:", "command": "deluge -l {{path/to/log_file}} {{url|magnet|path/to/file}}"}]}
{"command": "deluged", "tasks": [{"task": "Start the Deluge daemon:", "command": "deluged"}, {"task": "Start the Deluge daemon on a specific port:", "command": "deluged -p {{port}}"}, {"task": "Start the Deluge daemon using a specific configuration file:", "command": "deluged -c {{path/to/configuration_file}}"}, {"task": "Start the Deluge daemon and output the log to a file:", "command": "deluged -l {{path/to/log_file}}"}]}
{"command": "deno", "tasks": [{"task": "Run a JavaScript or TypeScript file:", "command": "deno run {{path/to/file.ts}}"}, {"task": "Start a REPL (interactive shell):", "command": "deno"}, {"task": "Run a file with network access enabled:", "command": "deno run --allow-net {{path/to/file.ts}}"}, {"task": "Run a file from a URL:", "command": "deno run {{https://deno.land/std/examples/welcome.ts}}"}, {"task": "Install an executable script from a URL:", "command": "deno install {{https://deno.land/std/examples/colors.ts}}"}]}
{"command": "dep", "tasks": [{"task": "Interactively initialize deployer in the local path (use a framework template with `--template={{template}}`):", "command": "dep init"}, {"task": "Deploy an application to a remote host:", "command": "dep deploy {{hostname}}"}, {"task": "Rollback to the previous working release:", "command": "dep rollback"}, {"task": "Connect to a remote host via ssh:", "command": "dep ssh {{hostname}}"}, {"task": "List commands:", "command": "dep list"}, {"task": "Run any arbitrary command on the remote hosts:", "command": "dep run \"{{command}}\""}, {"task": "Display help for a command:", "command": "dep help {{command}}"}]}
{"command": "detox", "tasks": [{"task": "Remove spaces and other undesirable characters from a file's name:", "command": "detox {{path/to/file}}"}, {"task": "Show how detox would rename all the files in a directory tree:", "command": "detox --dry-run -r {{path/to/directory}}"}, {"task": "Remove spaces and other undesirable characters from all files in a directory tree:", "command": "detox -r {{path/to/directory}}"}]}
{"command": "dexdump", "tasks": [{"task": "Extract classes and methods from an APK file:", "command": "dexdump {{path/to/file.apk}}"}, {"task": "Display header information of DEX files contained in an APK file:", "command": "dexdump -f {{path/to/file.apk}}"}, {"task": "Display the dis-assembled output of executable sections:", "command": "dexdump -d {{path/to/file.apk}}"}, {"task": "Output results to a file:", "command": "dexdump -o {{path/to/file}} {{path/to/file.apk}}"}]}
{"command": "dexter", "tasks": [{"task": "Create and authenticate a user with Google OIDC:", "command": "dexter auth -i {{client_id}} -s {{client_secret}}"}, {"task": "Override the default kube config location:", "command": "dexter auth -i {{client_id}} -s {{client_secret}} --kube-config {{sample/config}}"}]}
{"command": "df", "tasks": [{"task": "Display all filesystems and their disk usage:", "command": "df"}, {"task": "Display all filesystems and their disk usage in human-readable form:", "command": "df -h"}, {"task": "Display the filesystem and its disk usage containing the given file or directory:", "command": "df {{path/to/file_or_directory}}"}, {"task": "Display statistics on the number of free inodes:", "command": "df -i"}, {"task": "Display filesystems but exclude the specified types:", "command": "df -x {{squashfs}} -x {{tmpfs}}"}]}
{"command": "dfc", "tasks": [{"task": "Display filesystems and their disk usage in human-readable form with colors and graphs:", "command": "dfc"}, {"task": "Display all filesystems including pseudo, duplicate and inaccessible filesystems:", "command": "dfc -a"}, {"task": "Display filesystems without color:", "command": "dfc -c never"}, {"task": "Display filesystems containing \"ext\" in the filesystem type:", "command": "dfc -t ext"}]}
{"command": "dhclient", "tasks": [{"task": "Get an IP address for the `eth0` interface:", "command": "sudo dhclient {{eth0}}"}, {"task": "Release an IP address for the `eth0` interface:", "command": "sudo dhclient -r {{eth0}}"}]}
{"command": "dhcpig", "tasks": [{"task": "Exhaust all of the available DHCP addresses using the specified interface:", "command": "sudo ./pig.py {{eth0}}"}, {"task": "Exhaust IPv6 addresses using eth1 interface:", "command": "sudo ./pig.py -6 {{eth1}}"}, {"task": "Send fuzzed/malformed data packets using the interface:", "command": "sudo ./pig.py --fuzz {{eth1}}"}, {"task": "Enable color output:", "command": "sudo ./pig.py -c {{eth1}}"}, {"task": "Enable minimal verbosity and color output:", "command": "sudo ./pig.py -c --verbosity=1 {{eth1}}"}, {"task": "Set debug verbosity and scan network of neighboring devices using ARP packets:", "command": "sudo ./pig.py -c --verbosity=100 --neighbors-scan-arp {{eth1}}"}, {"task": "Enable printing lease information, attempt to scan and release all neighbor IP addresses:", "command": "sudo ./pig.py --neighbors-scan-arp -r --show-options {{eth1}}"}]}
{"command": "dhcpwn", "tasks": [{"task": "Flood the network with IP requests:", "command": "dhcpwn --interface {{network_interface}} flood --count {{number_of_requests}}"}, {"task": "Sniff local DHCP traffic:", "command": "dhcpwn --interface {{network_interface}} sniff"}]}
{"command": "dict", "tasks": [{"task": "List available databases:", "command": "dict -D"}, {"task": "Get information about a database:", "command": "dict -i {{database_name}}"}, {"task": "Look up a word in a specific database:", "command": "dict -d {{database_name}} {{word}}"}, {"task": "Look up a word in all available databases:", "command": "dict {{word}}"}, {"task": "Show information about the DICT server:", "command": "dict -I"}]}
{"command": "diff-pdf", "tasks": [{"task": "Compare PDFs, indicating changes using return codes (`0` = no difference, `1` = PDFs differ):", "command": "diff-pdf {{path/to/a.pdf}} {{path/to/b.pdf}}"}, {"task": "Compare PDFs, outputting a PDF with visually highlighted differences:", "command": "diff-pdf --output-diff={{path/to/diff.pdf}} {{path/to/a.pdf}} {{path/to/b.pdf}}"}, {"task": "Compare PDFs, viewing differences in a simple GUI:", "command": "diff-pdf --view {{path/to/a.pdf}} {{path/to/b.pdf}}"}]}
{"command": "diff", "tasks": [{"task": "Compare files (lists changes to turn `old_file` into `new_file`):", "command": "diff {{old_file}} {{new_file}}"}, {"task": "Compare files, ignoring white spaces:", "command": "diff --ignore-all-space {{old_file}} {{new_file}}"}, {"task": "Compare files, showing the differences side by side:", "command": "diff --side-by-side {{old_file}} {{new_file}}"}, {"task": "Compare files, showing the differences in unified format (as used by `git diff`):", "command": "diff --unified {{old_file}} {{new_file}}"}, {"task": "Compare directories recursively (shows names for differing files/directories as well as changes made to files):", "command": "diff --recursive {{old_directory}} {{new_directory}}"}, {"task": "Compare directories, only showing the names of files that differ:", "command": "diff --recursive --brief {{old_directory}} {{new_directory}}"}, {"task": "Create a patch file for Git from the differences of two text files, treating nonexistent files as empty:", "command": "diff --text --unified --new-file {{old_file}} {{new_file}} > {{diff.patch}}"}]}
{"command": "diffoscope", "tasks": [{"task": "Compare two files:", "command": "diffoscope {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare two files without displaying a progress bar:", "command": "diffoscope --no-progress {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare two files and write an HTML-report to a file (use `-` for `stdout`):", "command": "diffoscope --html {{path/to/outfile|-}} {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare two directories excluding files with a name matching a specified pattern:", "command": "diffoscope --exclude {{pattern}} {{path/to/directory1}} {{path/to/directory2}}"}, {"task": "Compare two directories and control whether directory metadata is considered:", "command": "diffoscope --exclude-directory-metadata {{auto|yes|no|recursive}} {{path/to/directory1}} {{path/to/directory2}}"}]}
{"command": "diffstat", "tasks": [{"task": "Display changes in a histogram:", "command": "diff {{file1}} {{file2}} | diffstat"}, {"task": "Display inserted, deleted and modified changes as a table:", "command": "diff {{file1}} {{file2}} | diffstat -t"}]}
{"command": "dig", "tasks": [{"task": "Lookup the IP(s) associated with a hostname (A records):", "command": "dig +short {{example.com}}"}, {"task": "Get a detailed answer for a given domain (A records):", "command": "dig +noall +answer {{example.com}}"}, {"task": "Query a specific DNS record type associated with a given domain name:", "command": "dig +short {{example.com}} {{A|MX|TXT|CNAME|NS}}"}, {"task": "Get all types of records for a given domain name:", "command": "dig {{example.com}} ANY"}, {"task": "Specify an alternate DNS server to query:", "command": "dig @{{8.8.8.8}} {{example.com}}"}, {"task": "Perform a reverse DNS lookup on an IP address (PTR record):", "command": "dig -x {{8.8.8.8}}"}, {"task": "Find authoritative name servers for the zone and display SOA records:", "command": "dig +nssearch {{example.com}}"}, {"task": "Perform iterative queries and display the entire trace path to resolve a domain name:", "command": "dig +trace {{example.com}}"}]}
{"command": "dillo", "tasks": [{"task": "Launch Dillo:", "command": "dillo"}, {"task": "Launch Dillo with a specific window size and screen location:", "command": "dillo --geometry {{width}}x{{height}}+{{x_position}}+{{y_position}}"}, {"task": "Launch Dillo and open a specific URL:", "command": "dillo {{duckduckgo.com}}"}, {"task": "Launch Dillo and open a file or directory:", "command": "dillo {{path/to/file_or_directory}}"}, {"task": "Launch Dillo in full-screen mode:", "command": "dillo --fullwindow"}, {"task": "Display version:", "command": "dillo --version"}, {"task": "Display help:", "command": "dillo --help"}]}
{"command": "dircolors", "tasks": [{"task": "Output commands to set LS_COLOR using default colors:", "command": "dircolors"}, {"task": "Output commands to set LS_COLOR using colors from a file:", "command": "dircolors {{path/to/file}}"}, {"task": "Output commands for Bourne shell:", "command": "dircolors --bourne-shell"}, {"task": "Output commands for C shell:", "command": "dircolors --c-shell"}, {"task": "View the default colors for file types and extensions:", "command": "dircolors --print-data"}]}
{"command": "direnv", "tasks": [{"task": "Grant direnv permission to load the `.envrc` present in the current directory:", "command": "direnv allow {{.}}"}, {"task": "Revoke the authorization to load the `.envrc` present in the current directory:", "command": "direnv deny {{.}}"}, {"task": "Edit the `.envrc` file in the default text editor and reload the environment on exit:", "command": "direnv edit {{.}}"}, {"task": "Trigger a reload of the environment:", "command": "direnv reload"}, {"task": "Print some debug status information:", "command": "direnv status"}]}
{"command": "dirname", "tasks": [{"task": "Calculate the parent directory of a given path:", "command": "dirname {{path/to/file_or_directory}}"}, {"task": "Calculate the parent directory of multiple paths:", "command": "dirname {{path/to/file_a}} {{path/to/directory_b}}"}, {"task": "Delimit output with a NUL character instead of a newline (useful when combining with `xargs`):", "command": "dirname --zero {{path/to/directory_a}} {{path/to/file_b}}"}]}
{"command": "dirs", "tasks": [{"task": "Display the directory stack with a space between each entry:", "command": "dirs"}, {"task": "Display the directory stack with one entry per line:", "command": "dirs -p"}, {"task": "Display only the nth entry in the directory stack, starting at 0:", "command": "dirs +{{N}}"}, {"task": "Clear the directory stack:", "command": "dirs -c"}]}
{"command": "dirsearch", "tasks": [{"task": "Scan a web server for common paths with common extensions:", "command": "dirsearch --url {{url}} --extensions-list"}, {"task": "Scan a list of web servers for common paths with the `.php` extension:", "command": "dirsearch --url-list {{path/to/url-list.txt}} --extensions {{php}}"}, {"task": "Scan a web server for user-defined paths with common extensions:", "command": "dirsearch --url {{url}} --extensions-list --wordlist {{path/to/url-paths.txt}}"}, {"task": "Scan a web server using a cookie:", "command": "dirsearch --url {{url}} --extensions {{php}} --cookie {{cookie}}"}, {"task": "Scan a web server using the `HEAD` HTTP method:", "command": "dirsearch --url {{url}} --extensions {{php}} --http-method {{HEAD}}"}, {"task": "Scan a web server, saving the results to a `.json` file:", "command": "dirsearch --url {{url}} --extensions {{php}} --json-report {{path/to/report.json}}"}]}
{"command": "diskonaut", "tasks": [{"task": "Start `diskonaut` in the current directory:", "command": "diskonaut"}, {"task": "Start `diskonaut` in a specific directory:", "command": "diskonaut {{path/to/directory}}"}, {"task": "Show file sizes rather than their block usage on the disk:", "command": "diskonaut --apparent-size {{path/to/directory}}"}, {"task": "Disable deletion confirmation:", "command": "diskonaut --disable-delete-confirmation"}]}
{"command": "distccd", "tasks": [{"task": "Start a daemon with the default settings:", "command": "distccd --daemon"}, {"task": "Start a daemon, accepting connections from IPv4 private network ranges:", "command": "distccd --daemon --allow-private"}, {"task": "Start a daemon, accepting connections from a specific network address or address range:", "command": "distccd --daemon --allow {{ip_address|network_prefix}}"}, {"task": "Start a daemon with a lowered priority that can run a maximum of 4 tasks at a time:", "command": "distccd --daemon --jobs {{4}} --nice {{5}}"}, {"task": "Start a daemon and register it via mDNS/DNS-SD (Zeroconf):", "command": "distccd --daemon --zeroconf"}]}
{"command": "dive", "tasks": [{"task": "Analyze a Docker image:", "command": "dive {{your_image_tag}}"}, {"task": "Build an image and start analyzing it:", "command": "dive build -t {{some_tag}}"}]}
{"command": "django-admin", "tasks": [{"task": "Create a new Django project:", "command": "django-admin startproject {{project_name}}"}, {"task": "Create a new app for the current project:", "command": "django-admin startapp {{app_name}}"}, {"task": "Check the current version of Django:", "command": "django-admin --version"}, {"task": "Display more information for the given command:", "command": "django-admin help {{command}}"}]}
{"command": "dlv", "tasks": [{"task": "Compile and begin debugging the main package in the current directory (by default, with no arguments):", "command": "dlv debug"}, {"task": "Compile and begin debugging a specific package:", "command": "dlv debug {{package}} {{arguments}}"}, {"task": "Compile a test binary and begin debugging the compiled program:", "command": "dlv test"}, {"task": "Connect to a headless debug server:", "command": "dlv connect {{ip_address}}"}, {"task": "Attach to a running process and begin debugging:", "command": "div attach {{pid}}"}, {"task": "Compile and begin tracing a program:", "command": "dlv trace {{package}} --regexp '{{regular_expression}}'"}]}
{"command": "doas", "tasks": [{"task": "Run a command as root:", "command": "doas {{command}}"}, {"task": "Run a command as another user:", "command": "doas -u {{user}} {{command}}"}, {"task": "Launch the default shell as root:", "command": "doas -s"}, {"task": "Parse a config file and check if the execution of a command as another user is allowed:", "command": "doas -C {{config_file}} {{command}}"}, {"task": "Make `doas` request a password even after it was supplied earlier:", "command": "doas -L"}]}
{"command": "docker build", "tasks": [{"task": "Build a docker image using the Dockerfile in the current directory:", "command": "docker build ."}, {"task": "Build a docker image from a Dockerfile at a specified URL:", "command": "docker build {{github.com/creack/docker-firefox}}"}, {"task": "Build a docker image and tag it:", "command": "docker build --tag {{name:tag}} ."}, {"task": "Build a docker image with no build context:", "command": "docker build --tag {{name:tag}} - < {{Dockerfile}}"}, {"task": "Do not use the cache when building the image:", "command": "docker build --no-cache --tag {{name:tag}} ."}, {"task": "Build a docker image using a specific Dockerfile:", "command": "docker build --file {{Dockerfile}} ."}, {"task": "Build with custom build-time variables:", "command": "docker build --build-arg {{HTTP_PROXY=http://10.20.30.2:1234}} --build-arg {{FTP_PROXY=http://40.50.60.5:4567}} ."}]}
{"command": "docker commit", "tasks": [{"task": "Create an image from a specific container:", "command": "docker commit {{container}} {{image}}:{{tag}}"}, {"task": "Apply a `CMD` Dockerfile instruction to the created image:", "command": "docker commit --change=\"CMD {{command}}\" {{container}} {{image}}:{{tag}}"}, {"task": "Apply an `ENV` Dockerfile instruction to the created image:", "command": "docker commit --change=\"ENV {{name}}={{value}}\" {{container}} {{image}}:{{tag}}"}, {"task": "Create an image with a specific author in the metadata:", "command": "docker commit --author=\"{{author}}\" {{container}} {{image}}:{{tag}}"}, {"task": "Create an image with a specific comment in the metadata:", "command": "docker commit --message=\"{{comment}}\" {{container}} {{image}}:{{tag}}"}, {"task": "Create an image without pausing the container during commit:", "command": "docker commit --pause={{false}} {{container}} {{image}}:{{tag}}"}, {"task": "Display help:", "command": "docker commit --help"}]}
{"command": "docker compose", "tasks": [{"task": "List all running containers:", "command": "docker compose ps"}, {"task": "Create and start all containers in the background using a `docker-compose.yml` file from the current directory:", "command": "docker compose up --detach"}, {"task": "Start all containers, rebuild if necessary:", "command": "docker compose up --build"}, {"task": "Start all containers by specifying a project name and using an alternate compose file:", "command": "docker compose -p {{project_name}} --file {{path/to/file}} up"}, {"task": "Stop all running containers:", "command": "docker compose stop"}, {"task": "Stop and remove all containers, networks, images, and volumes:", "command": "docker compose down --rmi all --volumes"}, {"task": "Follow logs for all containers:", "command": "docker compose logs --follow"}, {"task": "Follow logs for a specific container:", "command": "docker compose logs --follow {{container_name}}"}]}
{"command": "docker container", "tasks": [{"task": "List currently running Docker containers:", "command": "docker container ls"}, {"task": "Start one or more stopped containers:", "command": "docker container start {{container1_name}} {{container2_name}}"}, {"task": "Kill one or more running containers:", "command": "docker container kill {{container_name}}"}, {"task": "Stop one or more running containers:", "command": "docker container stop {{container_name}}"}, {"task": "Pause all processes within one or more containers:", "command": "docker container pause {{container_name}}"}, {"task": "Display detailed information on one or more containers:", "command": "docker container inspect {{container_name}}"}, {"task": "Export a container's filesystem as a tar archive:", "command": "docker container export {{container_name}}"}, {"task": "Create a new image from a container's changes:", "command": "docker container commit {{container_name}}"}]}
{"command": "docker cp", "tasks": [{"task": "Copy a file or directory from the host to a container:", "command": "docker cp {{path/to/file_or_directory_on_host}} {{container_name}}:{{path/to/file_or_directory_in_container}}"}, {"task": "Copy a file or directory from a container to the host:", "command": "docker cp {{container_name}}:{{path/to/file_or_directory_in_container}} {{path/to/file_or_directory_on_host}}"}, {"task": "Copy a file or directory from the host to a container, following symlinks (copies the symlinked files directly, not the symlinks themselves):", "command": "docker cp --follow-link {{path/to/symlink_on_host}} {{container_name}}:{{path/to/file_or_directory_in_container}}"}]}
{"command": "docker exec", "tasks": [{"task": "Enter an interactive shell session on an already-running container:", "command": "docker exec --interactive --tty {{container_name}} {{/bin/bash}}"}, {"task": "Run a command in the background (detached) on a running container:", "command": "docker exec --detach {{container_name}} {{command}}"}, {"task": "Select the working directory for a given command to execute into:", "command": "docker exec --interactive -tty --workdir {{path/to/directory}} {{container_name}} {{command}}"}, {"task": "Run a command in background on existing container but keep `stdin` open:", "command": "docker exec --interactive --detach {{container_name}} {{command}}"}, {"task": "Set an environment variable in a running Bash session:", "command": "docker exec --interactive --tty --env {{variable_name}}={{value}} {{container_name}} {{/bin/bash}}"}, {"task": "Run a command as a specific user:", "command": "docker exec --user {{user}} {{container_name}} {{command}}"}]}
{"command": "docker image", "tasks": [{"task": "List local Docker images:", "command": "docker image ls"}, {"task": "Delete unused local Docker images:", "command": "docker image prune"}, {"task": "Delete all unused images (not just those without a tag):", "command": "docker image prune --all"}, {"task": "Show the history of a local Docker image:", "command": "docker image history {{image}}"}]}
{"command": "docker images", "tasks": [{"task": "List all Docker images:", "command": "docker images"}, {"task": "List all Docker images including intermediates:", "command": "docker images --all"}, {"task": "List the output in quiet mode (only numeric IDs):", "command": "docker images --quiet"}, {"task": "List all Docker images not used by any container:", "command": "docker images --filter dangling=true"}, {"task": "List images that contain a substring in their name:", "command": "docker images \"{{*name*}}\""}, {"task": "Sort images by size:", "command": "docker images --format \"{{.ID}}\\t{{.Size}}\\t{{.Repository}}:{{.Tag}}\" | sort -k 2 -h"}]}
{"command": "docker inspect", "tasks": [{"task": "Show help:", "command": "docker inspect"}, {"task": "Display information about a container, image, or volume using a name or ID:", "command": "docker inspect {{container|image|ID}}"}, {"task": "Display a container's IP address:", "command": "docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {{container}}"}, {"task": "Display the path to the container's log file:", "command": "docker inspect --format='{{.LogPath}}' {{container}}"}, {"task": "Display the image name of the container:", "command": "docker inspect --format='{{.Config.Image}}' {{container}}"}, {"task": "Display the configuration information as JSON:", "command": "docker inspect --format='{{json .Config}}' {{container}}"}, {"task": "Display all port bindings:", "command": "docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' {{container}}"}]}
{"command": "docker load", "tasks": [{"task": "Load a Docker image from `stdin`:", "command": "docker load < {{path/to/image_file.tar}}"}, {"task": "Load a Docker image from a specific file:", "command": "docker load --input {{path/to/image_file.tar}}"}, {"task": "Load a Docker image from a specific file in quiet mode:", "command": "docker load --quiet --input {{path/to/image_file.tar}}"}]}
{"command": "docker login", "tasks": [{"task": "Interactively log into a registry:", "command": "docker login"}, {"task": "Log into a registry with a specific username (user will be prompted for a password):", "command": "docker login --username {{username}}"}, {"task": "Log into a registry with username and password:", "command": "docker login --username {{username}} --password {{password}} {{server}}"}, {"task": "Log into a registry with password from `stdin`:", "command": "echo \"{{password}}\" | docker login --username {{username}} --password-stdin"}]}
{"command": "docker logs", "tasks": [{"task": "Print logs from a container:", "command": "docker logs {{container_name}}"}, {"task": "Print logs and follow them:", "command": "docker logs -f {{container_name}}"}, {"task": "Print last 5 lines:", "command": "docker logs {{container_name}} --tail {{5}}"}, {"task": "Print logs and append them with timestamps:", "command": "docker logs -t {{container_name}}"}, {"task": "Print logs from a certain point in time of container execution (i.e. 23m, 10s, 2013-01-02T13:23:37):", "command": "docker logs {{container_name}} --until {{time}}"}]}
{"command": "docker-machine", "tasks": [{"task": "List currently running docker machines:", "command": "docker-machine ls"}, {"task": "Create a new docker machine with specific name:", "command": "docker-machine create {{name}}"}, {"task": "Get the status of a machine:", "command": "docker-machine status {{name}}"}, {"task": "Start a machine:", "command": "docker-machine start {{name}}"}, {"task": "Stop a machine:", "command": "docker-machine stop {{name}}"}, {"task": "Inspect information about a machine:", "command": "docker-machine inspect {{name}}"}]}
{"command": "docker network", "tasks": [{"task": "List all available and configured networks on docker daemon:", "command": "docker network ls"}, {"task": "Create a user-defined network:", "command": "docker network create --driver {{driver_name}} {{network_name}}"}, {"task": "Display detailed information of a space-separated list of networks:", "command": "docker network inspect {{network_name}}"}, {"task": "Connect a container to a network using a name or ID:", "command": "docker network connect {{network_name}} {{container_name|ID}}"}, {"task": "Disconnect a container from a network:", "command": "docker network disconnect {{network_name}} {{container_name|ID}}"}, {"task": "Remove all unused (not referenced by any container) networks:", "command": "docker network prune"}, {"task": "Remove a space-separated list of unused networks:", "command": "docker network rm {{network_name}}"}]}
{"command": "docker ps", "tasks": [{"task": "List currently running docker containers:", "command": "docker ps"}, {"task": "List all docker containers (running and stopped):", "command": "docker ps --all"}, {"task": "Show the latest created container (includes all states):", "command": "docker ps --latest"}, {"task": "Filter containers that contain a substring in their name:", "command": "docker ps --filter=\"name={{name}}\""}, {"task": "Filter containers that share a given image as an ancestor:", "command": "docker ps --filter \"ancestor={{image}}:{{tag}}\""}, {"task": "Filter containers by exit status code:", "command": "docker ps --all --filter=\"exited={{code}}\""}, {"task": "Filter containers by status (created, running, removing, paused, exited and dead):", "command": "docker ps --filter=\"status={{status}}\""}, {"task": "Filter containers that mount a specific volume or have a volume mounted in a specific path:", "command": "docker ps --filter=\"volume={{path/to/directory}}\" --format \"table {{.ID}}\\t{{.Image}}\\t{{.Names}}\\t{{.Mounts}}\""}]}
{"command": "docker pull", "tasks": [{"task": "Download a specific Docker image:", "command": "docker pull {{image}}:{{tag}}"}, {"task": "Download a specific Docker image in quiet mode:", "command": "docker pull --quiet {{image}}:{{tag}}"}, {"task": "Download all tags of a specific Docker image:", "command": "docker pull --all-tags {{image}}"}, {"task": "Download a Docker images for a specific platform, e.g. linux/amd64:", "command": "docker pull --platform {{linux/amd64}} {{image}}:{{tag}}"}, {"task": "Display help:", "command": "docker pull --help"}]}
{"command": "docker rmi", "tasks": [{"task": "Show help:", "command": "docker rmi"}, {"task": "Remove one or more images given their names:", "command": "docker rmi {{image1 image2 ...}}"}, {"task": "Force remove an image:", "command": "docker rmi --force {{image}}"}, {"task": "Remove an image without deleting untagged parents:", "command": "docker rmi --no-prune {{image}}"}]}
{"command": "docker run", "tasks": [{"task": "Run command in a new container from a tagged image:", "command": "docker run {{image:tag}} {{command}}"}, {"task": "Run command in a new container in background and display its ID:", "command": "docker run --detach {{image}} {{command}}"}, {"task": "Run command in a one-off container in interactive mode and pseudo-TTY:", "command": "docker run --rm --interactive --tty {{image}} {{command}}"}, {"task": "Run command in a new container with passed environment variables:", "command": "docker run --env '{{variable}}={{value}}' --env {{variable}} {{image}} {{command}}"}, {"task": "Run command in a new container with bind mounted volumes:", "command": "docker run --volume {{/path/to/host_path}}:{{/path/to/container_path}} {{image}} {{command}}"}, {"task": "Run command in a new container with published ports:", "command": "docker run --publish {{host_port}}:{{container_port}} {{image}} {{command}}"}, {"task": "Run command in a new container overwriting the entrypoint of the image:", "command": "docker run --entrypoint {{command}} {{image}}"}, {"task": "Run command in a new container connecting it to a network:", "command": "docker run --network {{network}} {{image}}"}]}
{"command": "docker save", "tasks": [{"task": "Save an image by redirecting `stdout` to a tar archive:", "command": "docker save {{image}}:{{tag}} > {{path/to/file.tar}}"}, {"task": "Save an image to a tar archive:", "command": "docker save --output {{path/to/file.tar}} {{image}}:{{tag}}"}, {"task": "Save all tags of the image:", "command": "docker save --output {{path/to/file.tar}} {{image_name}}"}, {"task": "Cherry-pick particular tags of an image to save:", "command": "docker save --output {{path/to/file.tar}} {{image_name:tag1 image_name:tag2 ...}}"}]}
{"command": "docker secret", "tasks": [{"task": "Create a new secret from `stdin`:", "command": "{{command}} | docker secret create {{secret_name}} -"}, {"task": "Create a new secret from a file:", "command": "docker secret create {{secret_name}} {{path/to/file}}"}, {"task": "List all secrets:", "command": "docker secret ls"}, {"task": "Display detailed information on one or multiple secrets in a human friendly format:", "command": "docker secret inspect --pretty {{secret_name1 secret_name2 ...}}"}, {"task": "Remove one or more secrets:", "command": "docker secret rm {{secret_name1 secret_name2 ...}}"}]}
{"command": "docker service", "tasks": [{"task": "List the services on a docker daemon:", "command": "docker service ls"}, {"task": "Create a new service:", "command": "docker service create --name {{service_name}} {{image}}:{{tag}}"}, {"task": "Display detailed information of a space-separated list of services:", "command": "docker service inspect {{service_name|ID}}"}, {"task": "List the tasks of a space-separated list of services:", "command": "docker service ps {{service_name|ID}}"}, {"task": "Scale to a specific number of replicas for a space-separated list of services:", "command": "docker service scale {{service_name}}={{count_of_replicas}}"}, {"task": "Remove a space-separated list of services:", "command": "docker service rm {{service_name|ID}}"}]}
{"command": "docker-slim", "tasks": [{"task": "Start DockerSlim on interactive mode:", "command": "docker-slim"}, {"task": "Analyze Docker layers from a specific image:", "command": "docker-slim xray --target {{image:tag}}"}, {"task": "Lint a Dockerfile:", "command": "docker-slim lint --target {{path/to/Dockerfile}}"}, {"task": "Analyze and generate an optimized Docker image:", "command": "docker-slim build {{image:tag}}"}, {"task": "Display help for a subcommand:", "command": "docker-slim {{subcommand}} --help"}]}
{"command": "docker start", "tasks": [{"task": "Show help:", "command": "docker start"}, {"task": "Start a docker container:", "command": "docker start {{container}}"}, {"task": "Start a container, attaching `stdout` and `stderr` and forwarding signals:", "command": "docker start --attach {{container}}"}, {"task": "Start one or more space-separated containers:", "command": "docker start {{container1 container2 ...}}"}]}
{"command": "docker stats", "tasks": [{"task": "Display a live stream for the statistics of all running containers:", "command": "docker stats"}, {"task": "Display a live stream of statistics for a space-separated list of containers:", "command": "docker stats {{container_name}}"}, {"task": "Change the columns format to display container's CPU usage percentage:", "command": "docker stats --format \"{{.Name}}:\\t{{.CPUPerc}}\""}, {"task": "Display statistics for all containers (both running and stopped):", "command": "docker stats --all"}, {"task": "Disable streaming stats and only pull the current stats:", "command": "docker stats --no-stream"}]}
{"command": "docker swarm", "tasks": [{"task": "Initialize a swarm cluster:", "command": "docker swarm init"}, {"task": "Display the token to join a manager or a worker:", "command": "docker swarm join-token {{worker|manager}}"}, {"task": "Join a new node to the cluster:", "command": "docker swarm join --token {{token}} {{manager_node_url:2377}}"}, {"task": "Remove a worker from the swarm (run inside the worker node):", "command": "docker swarm leave"}, {"task": "Display the current CA certificate in PEM format:", "command": "docker swarm ca"}, {"task": "Rotate the current CA certificate and display the new certificate:", "command": "docker swarm ca --rotate"}, {"task": "Change the valid period for node certificates:", "command": "docker swarm update --cert-expiry {{hours}}h{{minutes}}m{{seconds}}s"}]}
{"command": "docker system", "tasks": [{"task": "Show help:", "command": "docker system"}, {"task": "Show docker disk usage:", "command": "docker system df"}, {"task": "Show detailed information on disk usage:", "command": "docker system df --verbose"}, {"task": "Remove unused data:", "command": "docker system prune"}, {"task": "Remove unused data created more than a specified amount of time in the past:", "command": "docker system prune --filter=\"until={{hours}}h{{minutes}}m\""}, {"task": "Display real-time events from the Docker daemon:", "command": "docker system events"}, {"task": "Display real-time events from containers streamed as valid JSON Lines:", "command": "docker system events --filter 'type=container' --format '{{json .}}'"}, {"task": "Display system-wide information:", "command": "docker system info"}]}
{"command": "docker tag", "tasks": [{"task": "Assign a name and tag to a specific image ID:", "command": "docker tag {{id}} {{name}}:{{tag}}"}, {"task": "Assign a tag to a specific image:", "command": "docker tag {{image}}:{{current_tag}} {{image}}:{{new_tag}}"}, {"task": "Display help:", "command": "docker tag"}]}
{"command": "docker update", "tasks": [{"task": "Update restart policy to apply when a specific container exits:", "command": "docker update --restart={{always|no|on-failure|unless-stopped}} {{container_name}}"}, {"task": "Update the policy to restart up to three times a specific container when it exits with non-zero exit status:", "command": "docker update --restart=on-failure:3 {{container_name}}"}, {"task": "Update the number of CPUs available to a specific container:", "command": "docker update --cpus {{count}} {{container_name}}"}, {"task": "Update the memory limit in [M]egabytes for a specific container:", "command": "docker update --memory {{limit}}M {{container_name}}"}, {"task": "Update the maximum number of process IDs allowed inside a specific container (use `-1` for unlimited):", "command": "docker update --pids-limit {{count}} {{container_name}}"}, {"task": "Update the amount of memory in [M]egabytes a specific container can swap to disk (use `-1` for unlimited):", "command": "docker update --memory-swap {{limit}}M {{container_name}}"}]}
{"command": "docker volume", "tasks": [{"task": "Create a volume:", "command": "docker volume create {{volume_name}}"}, {"task": "Create a volume with a specific label:", "command": "docker volume create --label {{label}} {{volume_name}}"}, {"task": "Create a `tmpfs` volume a size of 100 MiB and an uid of 1000:", "command": "docker volume create --opt {{type}}={{tmpfs}} --opt {{device}}={{tmpfs}} --opt {{o}}={{size=100m,uid=1000}} {{volume_name}}"}, {"task": "List all volumes:", "command": "docker volume ls"}, {"task": "Remove a volume:", "command": "docker volume rm {{volume_name}}"}, {"task": "Display information about a volume:", "command": "docker volume inspect {{volume_name}}"}, {"task": "Remove all unused local volumes:", "command": "docker volume prune"}, {"task": "Display help for a subcommand:", "command": "docker volume {{subcommand}} --help"}]}
{"command": "docker", "tasks": [{"task": "List all docker containers (running and stopped):", "command": "docker ps --all"}, {"task": "Start a container from an image, with a custom name:", "command": "docker run --name {{container_name}} {{image}}"}, {"task": "Start or stop an existing container:", "command": "docker {{start|stop}} {{container_name}}"}, {"task": "Pull an image from a docker registry:", "command": "docker pull {{image}}"}, {"task": "Display the list of already downloaded images:", "command": "docker images"}, {"task": "Open a shell inside a running container:", "command": "docker exec -it {{container_name}} {{sh}}"}, {"task": "Remove a stopped container:", "command": "docker rm {{container_name}}"}, {"task": "Fetch and follow the logs of a container:", "command": "docker logs -f {{container_name}}"}]}
{"command": "docsify", "tasks": [{"task": "Initialize a new documentation in the current directory:", "command": "docsify init"}, {"task": "Initialize a new documentation in the specified directory:", "command": "docsify init {{path/to/directory}}"}, {"task": "Serve local documentation on `localhost:3000` with live reload:", "command": "docsify serve {{path/to/directory}}"}, {"task": "Serve local documentation on `localhost` at the specified port:", "command": "docsify serve --port {{80}} {{path/to/directory}}"}, {"task": "Generate a sidebar markdown file in the specified directory:", "command": "docsify generate {{path/to/directory}}"}]}
{"command": "doctl account", "tasks": [{"task": "Display account info:", "command": "doctl account get"}, {"task": "Show the hourly API limit, progress towards it, and when the rate limit resets:", "command": "doctl account ratelimit"}, {"task": "Display help:", "command": "doctl account --help"}]}
{"command": "doctl apps", "tasks": [{"task": "Create an app:", "command": "doctl apps create"}, {"task": "Create a deployment for a specific app:", "command": "doctl apps create-deployment {{app_id}}"}, {"task": "Delete an app interactively:", "command": "doctl apps delete {{app_id}}"}, {"task": "Get an app:", "command": "doctl apps get"}, {"task": "List all apps:", "command": "doctl apps list"}, {"task": "List all deployments from a specific app:", "command": "doctl apps list-deployments {{app_id}}"}, {"task": "Get logs from a specific app:", "command": "doctl apps logs {{app_id}}"}, {"task": "Update a specific app with a given app spec:", "command": "doctl apps update {{app_id}} --spec {{path/to/spec.yml}}"}]}
{"command": "doctl auth", "tasks": [{"task": "Open a prompt to enter an API token and label its context:", "command": "doctl auth init --context {{token_label}}"}, {"task": "List authentication contexts (API tokens):", "command": "doctl auth list"}, {"task": "Switch contexts (API tokens):", "command": "doctl auth switch --context {{token_label}}"}, {"task": "Remove a stored authentication context (API token):", "command": "doctl auth remove --context {{token_label}}"}, {"task": "Show available commands:", "command": "doctl auth --help"}]}
{"command": "doctl balance", "tasks": [{"task": "Get balance of the account associated with the current context:", "command": "doctl balance get"}, {"task": "Get the balance of an account associated with an access token:", "command": "doctl balance get --access-token {{access_token}}"}, {"task": "Get the balance of an account associated with a specified context:", "command": "doctl balance get --context"}]}
{"command": "doctl compute droplet", "tasks": [{"task": "Create a droplet:", "command": "doctl compute droplet create --region {{region}} --image {{os_image}} --size {{vps_type}} {{droplet_name}}"}, {"task": "Delete a droplet:", "command": "doctl compute droplet delete {{droplet_id|droplet_name}}"}, {"task": "List droplets:", "command": "doctl compute droplet list"}]}
{"command": "doctl kubernetes cluster", "tasks": [{"task": "Create a Kubernetes cluster:", "command": "doctl kubernetes cluster create --count {{3}} --region {{nyc1}} --size {{s-1vcpu-2gb}} --version {{latest}} {{cluster_name}}"}, {"task": "List all Kubernetes clusters:", "command": "doctl kubernetes cluster list"}, {"task": "Fetch and save the kubeconfig:", "command": "doctl kubernetes cluster kubeconfig save {{cluster_name}}"}, {"task": "Check for available upgrades:", "command": "doctl kubernetes cluster get-upgrades {{cluster_name}}"}, {"task": "Upgrade a cluster to a new Kubernetes version:", "command": "doctl kubernetes cluster upgrade {{cluster_name}}"}, {"task": "Delete a cluster:", "command": "doctl kubernetes cluster delete {{cluster_name}}"}]}
{"command": "doctl kubernetes options", "tasks": [{"task": "List regions that support Kubernetes clusters:", "command": "doctl kubernetes options regions"}, {"task": "List machine sizes that can be used in a Kubernetes cluster:", "command": "doctl kubernetes options sizes"}, {"task": "List Kubernetes versions that can be used with DigitalOcean clusters:", "command": "doctl kubernetes options versions"}]}
{"command": "doctl serverless", "tasks": [{"task": "Connect local serverless support to a functions namespace:", "command": "doctl serverless connect"}, {"task": "Deploy a functions project to your functions namespace:", "command": "doctl serverless deploy"}, {"task": "Obtain metadata of a functions project:", "command": "doctl serverless get-metadata"}, {"task": "Provide information about serverless support:", "command": "doctl serverless status"}]}
{"command": "doctum", "tasks": [{"task": "Parse a project:", "command": "doctum parse"}, {"task": "Render a project:", "command": "doctum render"}, {"task": "Parse then render a project:", "command": "doctum update"}, {"task": "Parse and render only a specific version of a project:", "command": "doctum update --only-version={{version}}"}, {"task": "Parse and render a project using a specific configuration:", "command": "doctum update {{path/to/config.php}}"}]}
{"command": "dog", "tasks": [{"task": "Lookup the IP(s) associated with a hostname (A records):", "command": "dog {{example.com}}"}, {"task": "Query the MX records type associated with a given domain name:", "command": "dog {{example.com}} MX"}, {"task": "Specify a specific DNS server to query (e.g. Cloudflare):", "command": "dog {{example.com}} MX @{{1.1.1.1}}"}, {"task": "Query over TCP rather than UDP:", "command": "dog {{example.com}} MX @{{1.1.1.1}} --tcp"}, {"task": "Query the MX records type associated with a given domain name over TCP using explicit arguments:", "command": "dog --query {{example.com}} --type MX --nameserver {{1.1.1.1}} --tcp"}, {"task": "Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH):", "command": "dog {{example.com}} --https @{{https://cloudflare-dns.com/dns-query}}"}]}
{"command": "dokku", "tasks": [{"task": "List running apps:", "command": "dokku apps"}, {"task": "Create an app:", "command": "dokku apps:create {{app_name}}"}, {"task": "Remove an app:", "command": "dokku apps:destroy {{app_name}}"}, {"task": "Install plugin:", "command": "dokku plugin:install {{full_repo_url}}"}, {"task": "Link database to an app:", "command": "dokku {{db}}:link {{db_name}} {{app_name}}"}]}
{"command": "dolt add", "tasks": [{"task": "Add a table to the list of staged tables (stage a table):", "command": "dolt add {{table}}"}, {"task": "Stage all tables:", "command": "dolt add --all"}]}
{"command": "dolt blame", "tasks": [{"task": "Display the latest commit for each row of a table:", "command": "dolt blame {{table}}"}, {"task": "Display the latest commits for each row of a table when the specified commit was made:", "command": "dolt blame {{commit}} {{table}}"}, {"task": "View help:", "command": "dolt blame --help"}]}
{"command": "dolt branch", "tasks": [{"task": "List local branches (current branch is highlighted by `*`):", "command": "dolt branch"}, {"task": "List all local and remote branches:", "command": "dolt branch --all"}, {"task": "Create a new branch based on the current branch:", "command": "dolt branch {{branch_name}}"}, {"task": "Create a new branch with the specified commit as the latest:", "command": "dolt branch {{branch_name}} {{commit}}"}, {"task": "Rename a branch:", "command": "dolt branch --move {{branch_name1}} {{branch_name2}}"}, {"task": "Duplicate a branch:", "command": "dolt branch --copy {{branch_name1}} {{branch_name2}}"}, {"task": "Delete a branch:", "command": "dolt branch --delete {{branch_name}}"}, {"task": "Display the name of the current branch:", "command": "dolt branch --show-current"}]}
{"command": "dolt checkout", "tasks": [{"task": "Switch to a branch:", "command": "dolt checkout {{branch_name}}"}, {"task": "Revert unstaged changes to a table:", "command": "dolt checkout {{table}}"}, {"task": "Create new branch and switch to it:", "command": "dolt checkout -b {{branch_name}}"}, {"task": "Create new branch based on a specified commit and switch to it:", "command": "dolt checkout -b {{branch_name}} {{commit}}"}]}
{"command": "dolt clone", "tasks": [{"task": "Clone an existing repository into a specific directory (defaults to the repository name):", "command": "dolt clone {{repository_url}} {{path/to/directory}}"}, {"task": "Clone an existing repository and add a specific remote (defaults to origin):", "command": "dolt clone --remote {{remote_name}} {{repository_url}}"}, {"task": "Clone an existing repository only fetching a specific branch (defaults to all branches):", "command": "dolt clone --branch {{branch_name}} {{repository_url}}"}, {"task": "Clone a repository, using an AWS region (uses the profile's default region if none is provided):", "command": "dolt clone --aws-region {{region_name}} {{repository_url}}"}, {"task": "Clone a repository, using an AWS credentials file:", "command": "dolt clone --aws-creds-file {{credentials_file}} {{repository_url}}"}, {"task": "Clone a repository, using an AWS credentials profile (uses the default profile if none is provided):", "command": "dolt clone --aws-creds-profile {{profile_name}} {{repository_url}}"}, {"task": "Clone a repository, using an AWS credentials type:", "command": "dolt clone --aws-creds-type {{credentials_type}} {{repository_url}}"}]}
{"command": "dolt commit", "tasks": [{"task": "Commit all staged changes, opening the editor specified by `$EDITOR` to enter the commit message:", "command": "dolt commit"}, {"task": "Commit all staged changes with the specified message:", "command": "dolt commit --message \"{{commit_message}}\""}, {"task": "Stage all unstaged changes to tables before committing:", "command": "dolt commit --all"}, {"task": "Use the specified ISO 8601 commit date (defaults to current date and time):", "command": "dolt commit --date \"{{2021-12-31T00:00:00}}\""}, {"task": "Use the specified author for the commit:", "command": "dolt commit --author \"{{author_name}} <{{author_email}}>\""}, {"task": "Allow creating an empty commit, with no changes:", "command": "dolt commit --allow-empty"}, {"task": "Ignore foreign key warnings:", "command": "dolt commit --force"}]}
{"command": "dolt config", "tasks": [{"task": "List all local and global configuration options and their values:", "command": "dolt config --list"}, {"task": "Display the value of a local or global configuration variable:", "command": "dolt config --get {{name}}"}, {"task": "Modify the value of a local configuration variable, creating it if it doesn't exist:", "command": "dolt config --add {{name}} {{value}}"}, {"task": "Modify the value of a global configuration variable, creating it if it doesn't exist:", "command": "dolt config --global --add {{name}} {{value}}"}, {"task": "Delete a local configuration variable:", "command": "dolt config --unset {{name}}"}, {"task": "Delete a global configuration variable:", "command": "dolt config --global --unset {{name}}"}]}
{"command": "dolt fetch", "tasks": [{"task": "Fetch the latest changes from the default remote upstream repository (origin):", "command": "dolt fetch"}, {"task": "Fetch latest changes from a specific remote upstream repository:", "command": "dolt fetch {{remote_name}}"}, {"task": "Update branches with the current state of the remote, overwriting any conflicting history:", "command": "dolt fetch -f"}]}
{"command": "dolt init", "tasks": [{"task": "Initialize a new Dolt data repository in the current directory:", "command": "dolt init"}, {"task": "Initialize a new Dolt data repository creating a commit with the specified metadata:", "command": "dolt init --name \"{{name}}\" --email \"{{email}}\" --date \"{{2021-12-31T00:00:00}}\" -b \"{{branch_name}}\""}]}
{"command": "dolt merge", "tasks": [{"task": "Incorporate changes from the named commits into the current branch:", "command": "dolt merge {{branch_name}}"}, {"task": "Incorporate changes from the named commits into the current branch without updating the commit history:", "command": "dolt merge --squash {{branch_name}}"}, {"task": "Merge a branch and create a merge commit even when the merge resolves as a fast-forward:", "command": "dolt merge --no-ff {{branch_name}}"}, {"task": "Merge a branch and create a merge commit with a specific commit message:", "command": "dolt merge --no-ff -m \"{{message}}\" {{branch_name}}"}, {"task": "Abort the current conflict resolution process:", "command": "dolt merge --abort"}]}
{"command": "dolt sql", "tasks": [{"task": "Run a single query:", "command": "dolt sql --query \"{{INSERT INTO t values (1, 3);}}\""}, {"task": "List all saved queries:", "command": "dolt sql --list-saved"}]}
{"command": "dolt status", "tasks": [{"task": "Display the status:", "command": "dolt status"}]}
{"command": "dolt version", "tasks": [{"task": "Display version:", "command": "dolt version"}]}
{"command": "dolt", "tasks": [{"task": "Execute a dolt subcommand:", "command": "dolt {{subcommand}}"}, {"task": "List available subcommands:", "command": "dolt help"}]}
{"command": "dot", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "dot -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "dot -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "dot -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | dot -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "dot -?"}]}
{"command": "dotnet build", "tasks": [{"task": "Compile the project or solution in the current directory:", "command": "dotnet build"}, {"task": "Compile a .NET project or solution in debug mode:", "command": "dotnet build {{path/to/project_or_solution}}"}, {"task": "Compile in release mode:", "command": "dotnet build --configuration {{Release}}"}, {"task": "Compile without restoring dependencies:", "command": "dotnet build --no-restore"}, {"task": "Compile with a specific verbosity level:", "command": "dotnet build --verbosity {{quiet|minimal|normal|detailed|diagnostic}}"}, {"task": "Compile for a specific runtime:", "command": "dotnet build --runtime {{runtime_identifier}}"}, {"task": "Specify the output directory:", "command": "dotnet build --output {{path/to/directory}}"}]}
{"command": "dotnet ef", "tasks": [{"task": "Update the database to a specified migration:", "command": "dotnet ef database update {{migration}}"}, {"task": "Drop the database:", "command": "dotnet ef database drop"}, {"task": "List available `DbContext` types:", "command": "dotnet ef dbcontext list"}, {"task": "Generate code for a `DbContext` and entity types for a database:", "command": "dotnet ef dbcontext scaffold {{connection_string}} {{provider}}"}, {"task": "Add a new migration:", "command": "dotnet ef migrations add {{name}}"}, {"task": "Remove the last migration, rolling back the code changes that were done for the latest migration:", "command": "dotnet ef migrations remove"}, {"task": "List available migrations:", "command": "dotnet ef migrations list"}, {"task": "Generate a SQL script from migrations range:", "command": "dotnet ef migrations script {{from_migration}} {{to_migration}}"}]}
{"command": "dotnet publish", "tasks": [{"task": "Compile a .NET project in release mode:", "command": "dotnet publish --configuration Release {{path/to/project_file}}"}, {"task": "Publish the .NET Core runtime with your application for the specified runtime:", "command": "dotnet publish --self-contained true --runtime {{runtime_identifier}} {{path/to/project_file}}"}, {"task": "Package the application into a platform-specific single-file executable:", "command": "dotnet publish --runtime {{runtime_identifier}} -p:PublishSingleFile=true {{path/to/project_file}}"}, {"task": "Trim unused libraries to reduce the deployment size of an application:", "command": "dotnet publish --self-contained true --runtime {{runtime_identifier}} -p:PublishTrimmed=true {{path/to/project_file}}"}, {"task": "Compile a .NET project without restoring dependencies:", "command": "dotnet publish --no-restore {{path/to/project_file}}"}, {"task": "Specify the output directory:", "command": "dotnet publish --output {{path/to/directory}} {{path/to/project_file}}"}]}
{"command": "dotnet restore", "tasks": [{"task": "Restore dependencies for a .NET project or solution in the current directory:", "command": "dotnet restore"}, {"task": "Restore dependencies for a .NET project or solution in a specific location:", "command": "dotnet restore {{path/to/project_or_solution}}"}, {"task": "Restore dependencies without caching the HTTP requests:", "command": "dotnet restore --no-cache"}, {"task": "Force all dependencies to be resolved even if the last restore was successful:", "command": "dotnet restore --force"}, {"task": "Restore dependencies using package source failures as warnings:", "command": "dotnet restore --ignore-failed-sources"}, {"task": "Restore dependencies with a specific verbosity level:", "command": "dotnet restore --verbosity {{quiet|minimal|normal|detailed|diagnostic}}"}]}
{"command": "dotnet tool", "tasks": [{"task": "Install a global tool (don't use `--global` for local tools):", "command": "dotnet tool install --global {{dotnetsay}}"}, {"task": "Install tools defined in the local tool manifest:", "command": "dotnet tool restore"}, {"task": "Update a specific global tool (don't use `--global` for local tools):", "command": "dotnet tool update --global {{tool_name}}"}, {"task": "Uninstall a global tool (don't use `--global` for local tools):", "command": "dotnet tool uninstall --global {{tool_name}}"}, {"task": "List installed global tools (don't use `--global` for local tools):", "command": "dotnet tool list --global"}, {"task": "Search tools in NuGet:", "command": "dotnet tool search {{search_term}}"}, {"task": "Display help:", "command": "dotnet tool --help"}]}
{"command": "dotnet", "tasks": [{"task": "Initialize a new .NET project:", "command": "dotnet new {{template_short_name}}"}, {"task": "Restore NuGet packages:", "command": "dotnet restore"}, {"task": "Build and execute the .NET project in the current directory:", "command": "dotnet run"}, {"task": "Run a packaged dotnet application (only needs the runtime, the rest of the commands require the .NET Core SDK installed):", "command": "dotnet {{path/to/application.dll}}"}]}
{"command": "doxygen", "tasks": [{"task": "Generate a default template configuration file `Doxyfile`:", "command": "doxygen -g"}, {"task": "Generate a template configuration file:", "command": "doxygen -g {{path/to/config_file}}"}, {"task": "Generate documentation using an existing configuration file:", "command": "doxygen {{path/to/config_file}}"}]}
{"command": "drill", "tasks": [{"task": "Lookup the IP(s) associated with a hostname (A records):", "command": "drill {{example.com}}"}, {"task": "Lookup the mail server(s) associated with a given domain name (MX record):", "command": "drill mx {{example.com}}"}, {"task": "Get all types of records for a given domain name:", "command": "drill any {{example.com}}"}, {"task": "Specify an alternate DNS server to query:", "command": "drill {{example.com}} @{{8.8.8.8}}"}, {"task": "Perform a reverse DNS lookup on an IP address (PTR record):", "command": "drill -x {{8.8.8.8}}"}, {"task": "Perform DNSSEC trace from root servers down to a domain name:", "command": "drill -TD {{example.com}}"}, {"task": "Show DNSKEY record(s) for a domain name:", "command": "drill -s dnskey {{example.com}}"}]}
{"command": "drupal-check", "tasks": [{"task": "Check the code in a specific directory for deprecations:", "command": "drupal-check {{path/to/directory}}"}, {"task": "Check the code excluding a comma-separated list of directories:", "command": "drupal-check --exclude-dir {{path/to/excluded_directory}},{{path/to/excluded_files/*.php}} {{path/to/directory}}"}, {"task": "Don't show a progress bar:", "command": "drupal-check --no-progress {{path/to/directory}}"}, {"task": "Perform static analysis to detect bad coding practices:", "command": "drupal-check --analysis {{path/to/directory}}"}]}
{"command": "drupal", "tasks": [{"task": "Install a module:", "command": "drupal module:install {{module_name}}"}, {"task": "Uninstall a module:", "command": "drupal module:uninstall {{module_name}}"}, {"task": "Clear all caches:", "command": "drupal cache:rebuild"}, {"task": "View current Drupal installation status:", "command": "drupal site:status"}]}
{"command": "drush", "tasks": [{"task": "Enable module \"foo\":", "command": "drush en {{foo}}"}, {"task": "Uninstall module \"foo\":", "command": "drush pmu {{foo}}"}, {"task": "Clear all caches:", "command": "drush cr"}, {"task": "Clear CSS and JavaScript caches:", "command": "drush cc css-js"}]}
{"command": "du", "tasks": [{"task": "List the sizes of a directory and any subdirectories, in the given unit (B/KiB/MiB):", "command": "du -{{b|k|m}} {{path/to/directory}}"}, {"task": "List the sizes of a directory and any subdirectories, in human-readable form (i.e. auto-selecting the appropriate unit for each size):", "command": "du -h {{path/to/directory}}"}, {"task": "Show the size of a single directory, in human-readable units:", "command": "du -sh {{path/to/directory}}"}, {"task": "List the human-readable sizes of a directory and of all the files and directories within it:", "command": "du -ah {{path/to/directory}}"}, {"task": "List the human-readable sizes of a directory and any subdirectories, up to N levels deep:", "command": "du -h --max-depth=N {{path/to/directory}}"}, {"task": "List the human-readable size of all `.jpg` files in subdirectories of the current directory, and show a cumulative total at the end:", "command": "du -ch {{*/*.jpg}}"}]}
{"command": "dua", "tasks": [{"task": "Analyze specific directory:", "command": "dua {{path/to/directory}}"}, {"task": "Display apparent size instead of disk usage:", "command": "dua --apparent-size"}, {"task": "Count hard-linked files each time they are seen:", "command": "dua --count-hard-links"}, {"task": "Aggregate the consumed space of one or more directories or files:", "command": "dua aggregate"}, {"task": "Launch the terminal user interface:", "command": "dua interactive"}, {"task": "Format printing byte counts:", "command": "dua --format {{metric|binary|bytes|GB|GiB|MB|MiB}}"}, {"task": "Set the number of threads to be used:", "command": "dua --threads {{count}}"}]}
{"command": "duc", "tasks": [{"task": "Index the /usr directory, writing to the default database location ~/.duc.db:", "command": "duc index {{/usr}}"}, {"task": "List all files and directories under /usr/local, showing relative file sizes in a [g]raph:", "command": "duc ls -Fg {{/usr/local}}"}, {"task": "List all files and directories under /usr/local using treeview recursively:", "command": "duc ls -Fg -R {{/usr/local}}"}, {"task": "Start the graphical interface to explore the file system using sunburst graphs:", "command": "duc gui {{/usr}}"}, {"task": "Run the ncurses console interface to explore the file system:", "command": "duc ui {{/usr}}"}, {"task": "Dump database info:", "command": "duc info"}]}
{"command": "duckdb", "tasks": [{"task": "Start an interactive shell with a transient in-memory database:", "command": "duckdb"}, {"task": "Start an interactive shell on a database file. If the file does not exist, a new database is created:", "command": "duckdb {{path/to/dbfile}}"}, {"task": "Directly query a CSV, JSON, or Parquet file:", "command": "duckdb -c \"{{SELECT * FROM 'data_source.[csv|csv.gz|json|json.gz|parquet]'}}\""}, {"task": "Run a SQL script:", "command": "duckdb -c \".read {{path/to/script.sql}}\""}, {"task": "Run query on database file and keep the interactive shell open:", "command": "duckdb {{path/to/dbfile}} -cmd \"{{SELECT DISTINCT * FROM tbl}}\""}, {"task": "Run SQL queries in file on database and keep the interactive shell open:", "command": "duckdb {{path/to/dbfile}} -init {{path/to/script.sql}}"}, {"task": "Read CSV from stdin and write CSV to stdout:", "command": "cat {{path/to/source.csv}} | duckdb -c \"{{COPY (FROM read_csv_auto('/dev/stdin')) TO '/dev/stdout' WITH (FORMAT CSV, HEADER)}}\""}, {"task": "Display help:", "command": "duckdb -help"}]}
{"command": "duf", "tasks": [{"task": "List accessible devices:", "command": "duf"}, {"task": "List everything (such as pseudo, duplicate or inaccessible file systems):", "command": "duf --all"}, {"task": "Only show specified devices or mount points:", "command": "duf {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Sort the output by a specified criteria:", "command": "duf --sort {{size|used|avail|usage}}"}]}
{"command": "dumpcap", "tasks": [{"task": "Display available interfaces:", "command": "dumpcap --list-interfaces"}, {"task": "Capture packets on a specific interface:", "command": "dumpcap --interface {{1}}"}, {"task": "Capture packets to a specific location:", "command": "dumpcap --interface {{1}} -w {{path/to/output_file.pcapng}}"}, {"task": "Write to a ring buffer with a specific max file limit of a specific size:", "command": "dumpcap --interface {{1}} -w {{path/to/output_file.pcapng}} --ring-buffer filesize:{{500000}} --ring-buffer files:{{10}}"}]}
{"command": "dune", "tasks": [{"task": "Build all targets:", "command": "dune build"}, {"task": "Clean up the workspace:", "command": "dune clean"}, {"task": "Run all tests:", "command": "dune runtest"}, {"task": "Start the utop REPL with compiled modules automatically loaded into it, to remove the need to load them by hand:", "command": "dune utop"}]}
{"command": "duplicacy", "tasks": [{"task": "Use current directory as the repository, initialize a SFTP storage and encrypt the storage with a password:", "command": "duplicacy init -e {{snapshot_id}} {{sftp://user@192.168.2.100/path/to/storage/}}"}, {"task": "Save a snapshot of the repository to the default storage:", "command": "duplicacy backup"}, {"task": "List snapshots of current repository:", "command": "duplicacy list"}, {"task": "Restore the repository to a previously saved snapshot:", "command": "duplicacy restore -r {{revision}}"}, {"task": "Check the integrity of snapshots:", "command": "duplicacy check"}, {"task": "Add another storage to be used for the existing repository:", "command": "duplicacy add {{storage_name}} {{snapshot_id}} {{storage_url}}"}, {"task": "Prune a specific revision of snapshot:", "command": "duplicacy prune -r {{revision}}"}, {"task": "Prune revisions, keeping one revision every `n` days for all revisions older than `m` days:", "command": "duplicacy prune -keep {{n:m}}"}]}
{"command": "duplicity", "tasks": [{"task": "Backup a directory via FTPS to a remote machine, encrypting it with a password:", "command": "FTP_PASSWORD={{ftp_login_password}} PASSPHRASE={{encryption_password}} duplicity {{path/to/source/directory}} {{ftps://user@hostname/target/directory/path/}}"}, {"task": "Backup a directory to Amazon S3, doing a full backup every month:", "command": "duplicity --full-if-older-than {{1M}} --use-new-style s3://{{bucket_name[/prefix]}}"}, {"task": "Delete versions older than 1 year from a backup stored on a WebDAV share:", "command": "FTP_PASSWORD={{webdav_login_password}} duplicity remove-older-than {{1Y}} --force {{webdav[s]://user@hostname[:port]/some_dir}}"}, {"task": "List the available backups:", "command": "duplicity collection-status \"file://{{absolute/path/to/backup/directory}}\""}, {"task": "List the files in a backup stored on a remote machine, via ssh:", "command": "duplicity list-current-files --time {{YYYY-MM-DD}} scp://{{user@hostname}}/path/to/backup/dir"}, {"task": "Restore a subdirectory from a GnuPG-encrypted local backup to a given location:", "command": "PASSPHRASE={{gpg_key_password}} duplicity restore --encrypt-key {{gpg_key_id}} --file-to-restore {{relative/path/restoredirectory}} file://{{absolute/path/to/backup/directory}} {{path/to/directory/to/restore/to}}"}]}
{"command": "dust", "tasks": [{"task": "Display information for the current directory:", "command": "dust"}, {"task": "Display information for a space-separated list of directories:", "command": "dust {{path/to/directory1}} {{path/to/directory2}}"}, {"task": "Display 30 directories (defaults to 21):", "command": "dust --number-of-lines {{30}}"}, {"task": "Display information for the current directory, up to 3 levels deep:", "command": "dust --depth {{3}}"}, {"task": "Display the biggest directories at the top in descending order:", "command": "dust --reverse"}, {"task": "Ignore all files and directories with a specific name:", "command": "dust --ignore-directory {{file_or_directory_name}}"}, {"task": "Do not display percent bars and percentages:", "command": "dust --no-percent-bars"}]}
{"command": "dvc add", "tasks": [{"task": "Add a single target file to the index:", "command": "dvc add {{path/to/file}}"}, {"task": "Add a target directory to the index:", "command": "dvc add {{path/to/directory}}"}, {"task": "Recursively add all the files in a given target directory:", "command": "dvc add --recursive {{path/to/directory}}"}, {"task": "Add a target file with a custom `.dvc` filename:", "command": "dvc add --file {{custom_name.dvc}} {{path/to/file}}"}]}
{"command": "dvc checkout", "tasks": [{"task": "Checkout the latest version of all target files and directories:", "command": "dvc checkout"}, {"task": "Checkout the latest version of a specified target:", "command": "dvc checkout {{target}}"}, {"task": "Checkout a specific version of a target from a different Git commit/tag/branch:", "command": "git checkout {{commit_hash|tag|branch}} {{target}} && dvc checkout {{target}}"}]}
{"command": "dvc commit", "tasks": [{"task": "Commit changes to all DVC-tracked files and directories:", "command": "dvc commit"}, {"task": "Commit changes to a specified DVC-tracked target:", "command": "dvc commit {{target}}"}, {"task": "Recursively commit all DVC-tracked files in a directory:", "command": "dvc commit --recursive {{path/to/directory}}"}]}
{"command": "dvc config", "tasks": [{"task": "Get the name of the default remote:", "command": "dvc config core.remote"}, {"task": "Set the project's default remote:", "command": "dvc config core.remote {{remote_name}}"}, {"task": "Unset the project's default remote:", "command": "dvc config --unset core.remote"}, {"task": "Get the config value for a specified key for the current project:", "command": "dvc config {{key}}"}, {"task": "Set the config value for a key on a project level:", "command": "dvc config {{key}} {{value}}"}, {"task": "Unset a project level config value for a given key:", "command": "dvc config --unset {{key}}"}, {"task": "Set a local, global, or system level config value:", "command": "dvc config --local/global/system {{key}} {{value}}"}]}
{"command": "dvc dag", "tasks": [{"task": "Visualize the entire pipeline:", "command": "dvc dag"}, {"task": "Visualize the pipeline stages up to a specified target stage:", "command": "dvc dag {{target}}"}, {"task": "Export the pipeline in the dot format:", "command": "dvc dag --dot > {{path/to/pipeline.dot}}"}]}
{"command": "dvc destroy", "tasks": [{"task": "Destroy the current project:", "command": "dvc destroy"}, {"task": "Force destroy the current project:", "command": "dvc destroy --force"}]}
{"command": "dvc diff", "tasks": [{"task": "Compare DVC tracked files from different Git commits, tags, and branches w.r.t the current workspace:", "command": "dvc diff {{commit_hash/tag/branch}}"}, {"task": "Compare the changes in DVC tracked files from 1 Git commit to another:", "command": "dvc diff {{revision_b}} {{revision_a}}"}, {"task": "Compare DVC tracked files, along with their latest hash:", "command": "dvc diff --show-hash {{commit}}"}, {"task": "Compare DVC tracked files, displaying the output as JSON:", "command": "dvc diff --show-json --show-hash {{commit}}"}, {"task": "Compare DVC tracked files, displaying the output as Markdown:", "command": "dvc diff --show-md --show-hash {{commit}}"}]}
{"command": "dvc fetch", "tasks": [{"task": "Fetch the latest changes from the default remote upstream repository (if set):", "command": "dvc fetch"}, {"task": "Fetch changes from a specific remote upstream repository:", "command": "dvc fetch --remote {{remote_name}}"}, {"task": "Fetch the latest changes for a specific target/s:", "command": "dvc fetch {{target/s}}"}, {"task": "Fetch changes for all branch and tags:", "command": "dvc fetch --all-branches --all-tags"}, {"task": "Fetch changes for all commits:", "command": "dvc fetch --all-commits"}]}
{"command": "dvc freeze", "tasks": [{"task": "Freeze 1 or more specified stages:", "command": "dvc freeze {{stage_name_a}} [{{stage_name_b}} ...]"}]}
{"command": "dvc gc", "tasks": [{"task": "Garbage collect from the cache, keeping only versions referenced by the current workspace:", "command": "dvc gc --workspace"}, {"task": "Garbage collect from the cache, keeping only versions referenced by branch, tags, and commits:", "command": "dvc gc --all-branches --all-tags --all-commits"}, {"task": "Garbage collect from the cache, including the default cloud remote storage (if set):", "command": "dvc gc --all-commits --cloud"}, {"task": "Garbage collect from the cache, including a specific cloud remote storage:", "command": "dvc gc --all-commits --cloud --remote {{remote_name}}"}]}
{"command": "dvc init", "tasks": [{"task": "Initialize a new local repository:", "command": "dvc init"}, {"task": "Initialize DVC without Git:", "command": "dvc init --no-scm"}, {"task": "Initialize DVC in a subdirectory:", "command": "cd {{path/to/subdir}} && dvc init --sudir"}]}
{"command": "dvc unfreeze", "tasks": [{"task": "Unfreeze 1 or more specified stages:", "command": "dvc unfreeze {{stage_name_a}} [{{stage_name_b}} ...]"}]}
{"command": "dvc", "tasks": [{"task": "Check the DVC version:", "command": "dvc --version"}, {"task": "Display general help:", "command": "dvc --help"}, {"task": "Display help about a specific subcommand:", "command": "dvc {{subcommand}} --help"}, {"task": "Execute a DVC subcommand:", "command": "dvc {{subcommand}}"}]}
{"command": "dwebp", "tasks": [{"task": "Convert a `webp` file into a `png` file:", "command": "dwebp {{path/to/input.webp}} -o {{path/to/output.png}}"}, {"task": "Convert a `webp` file into a specific filetype:", "command": "dwebp {{path/to/input.webp}} -bmp|-tiff|-pam|-ppm|-pgm|-yuv -o {{path/to/output}}"}, {"task": "Convert a `webp` file, using multi-threading if possible:", "command": "dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -mt"}, {"task": "Convert a `webp` file, but also crop and scale at the same time:", "command": "dwebp {{input.webp}} -o {{output.png}} -crop {{x_pos}} {{y_pos}} {{width}} {{height}} -scale {{width}} {{height}}"}, {"task": "Convert a `webp` file and flip the output:", "command": "dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -flip"}, {"task": "Convert a `webp` file and don't use in-loop filtering to speed up the decoding process:", "command": "dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -nofilter"}]}
{"command": "ebook-convert", "tasks": [{"task": "Convert an e-book into another format:", "command": "ebook-convert {{path/to/input_file}} {{output_file}}"}, {"task": "Convert Markdown or HTML to e-book with TOC, title and author:", "command": "ebook-convert {{path/to/input_file}} {{output_file}} --level1-toc=\"//h:h1\" --level2-toc=\"//h:h2\" --level3-toc=\"//h:h3\" --title={{title}} --authors={{author}}"}]}
{"command": "echo", "tasks": [{"task": "Print a text message. Note: quotes are optional:", "command": "echo \"{{Hello World}}\""}, {"task": "Print a message with environment variables:", "command": "echo \"{{My path is $PATH}}\""}, {"task": "Print a message without the trailing newline:", "command": "echo -n \"{{Hello World}}\""}, {"task": "Append a message to the file:", "command": "echo \"{{Hello World}}\" >> {{file.txt}}"}, {"task": "Enable interpretation of backslash escapes (special characters):", "command": "echo -e \"{{Column 1\\tColumn 2}}\""}, {"task": "Print the exit status of the last executed command (Note: In Windows Command Prompt and PowerShell the equivalent commands are `echo %errorlevel%` and `$lastexitcode` respectively):", "command": "echo $?"}]}
{"command": "ect", "tasks": [{"task": "Compress a file:", "command": "ect {{path/to/file.png}}"}, {"task": "Compress a file with specified compression level and multithreading (1=Fastest (Worst), 9=Slowest (Best), default is 3):", "command": "ect -{{9}} --mt-deflate {{path/to/file.zip}}"}, {"task": "Compress all files in a directory recursively:", "command": "ect -recurse {{path/to/directory}}"}, {"task": "Compress a file, keeping the original modification time:", "command": "ect -keep {{path/to/file.png}}"}, {"task": "Compress a file, stripping metadata:", "command": "ect -strip {{path/to/file.png}}"}]}
{"command": "ed", "tasks": [{"task": "Start an interactive editor session with an empty document:", "command": "ed"}, {"task": "Start an interactive editor session with an empty document and a specific prompt:", "command": "ed --prompt='> '"}, {"task": "Start an interactive editor session with user-friendly errors:", "command": "ed --verbose"}, {"task": "Start an interactive editor session with an empty document and without diagnostics, byte counts and '!' prompt:", "command": "ed --quiet"}, {"task": "Start an interactive editor session without exit status change when command fails:", "command": "ed --loose-exit-status"}, {"task": "Edit a specific file (this shows the byte count of the loaded file):", "command": "ed {{path/to/file}}"}, {"task": "Replace a string with a specific replacement for all lines:", "command": ",s/{{regular_expression}}/{{replacement}}/g"}]}
{"command": "edgepaint", "tasks": [{"task": "Colorize edges of one or more graph layouts (that already have layout information) to clarify crossing edges:", "command": "edgepaint {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Colorize edges using a color scheme. (See <https://graphviz.org/doc/info/colors.html#brewer>):", "command": "edgepaint -color-scheme={{accent7}} {{path/to/layout.gv}} > {{path/to/output.gv}}"}, {"task": "Lay out a graph and colorize its edges, then convert to a PNG image:", "command": "dot {{path/to/input.gv}} | edgepaint | dot -T {{png}} > {{path/to/output.png}}"}, {"task": "Display help for `edgepaint`:", "command": "edgepaint -?"}]}
{"command": "eget", "tasks": [{"task": "Download a prebuilt binary for the current system from a repository on GitHub:", "command": "eget {{zyedidia/micro}}"}, {"task": "Download from a URL:", "command": "eget {{https://go.dev/dl/go1.17.5.linux-amd64.tar.gz}}"}, {"task": "Specify the location to place the downloaded files:", "command": "eget {{zyedidia/micro}} --to={{path/to/directory}}"}, {"task": "Specify a `git` tag instead of using the latest version:", "command": "eget {{zyedidia/micro}} --tag={{v2.0.10}}"}, {"task": "Install the latest pre-release instead of the latest stable version:", "command": "eget {{zyedidia/micro}} --pre-release"}, {"task": "Only download the asset, skipping extraction:", "command": "eget {{zyedidia/micro}} --download-only"}, {"task": "Only download if there is a newer release then the currently downloaded version:", "command": "eget {{zyedidia/micro}} --upgrade-only"}]}
{"command": "egrep", "tasks": [{"task": "Search for a pattern within a file:", "command": "egrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for a pattern within multiple files:", "command": "egrep \"{{search_pattern}}\" {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}, {"task": "Search `stdin` for a pattern:", "command": "cat {{path/to/file}} | egrep {{search_pattern}}"}, {"task": "Print file name and line number for each match:", "command": "egrep --with-filename --line-number \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for a pattern in all files recursively in a directory, ignoring binary files:", "command": "egrep --recursive --binary-files={{without-match}} \"{{search_pattern}}\" {{path/to/directory}}"}, {"task": "Search for lines that do not match a pattern:", "command": "egrep --invert-match \"{{search_pattern}}\" {{path/to/file}}"}]}
{"command": "eksctl", "tasks": [{"task": "Create a basic cluster:", "command": "eksctl create cluster"}, {"task": "List the details about a cluster or all of the clusters:", "command": "eksctl get cluster --name={{name}} --region={{region}}"}, {"task": "Create a cluster passing all configuration information in a file:", "command": "eksctl create cluster --config-file={{path/to/file}}"}, {"task": "Create a cluster using a configuration file and skip creating nodegroups until later:", "command": "eksctl create cluster --config-file=<path> --without-nodegroup"}, {"task": "Delete a cluster:", "command": "eksctl delete cluster --name={{name}} --region={{region}}"}, {"task": "Create cluster and write cluster credentials to a file other than the default:", "command": "eksctl create cluster --name={{name}} --nodes={{4}} --kubeconfig={{path/to/config.yaml}}"}, {"task": "Create a cluster and prevent storing cluster credentials locally:", "command": "eksctl create cluster --name={{name}} --nodes={{4}} --write-kubeconfig=false"}, {"task": "Create a cluster and let `eksctl` manage cluster credentials under the `~/.kube/eksctl/clusters` directory:", "command": "eksctl create cluster --name={{name}} --nodes={{4}} --auto-kubeconfig"}]}
{"command": "electron-packager", "tasks": [{"task": "Package an application for the current architecture and platform:", "command": "electron-packager \"{{path/to/app}}\" \"{{app_name}}\""}, {"task": "Package an application for all architectures and platforms:", "command": "electron-packager \"{{path/to/app}}\" \"{{app_name}}\" --all"}, {"task": "Package an application for 64-bit Linux:", "command": "electron-packager \"{{path/to/app}}\" \"{{app_name}}\" --platform=\"{{linux}}\" --arch=\"{{x64}}\""}, {"task": "Package an application for ARM macOS:", "command": "electron-packager \"{{path/to/app}}\" \"{{app_name}}\" --platform=\"{{darwin}}\" --arch=\"{{arm64}}\""}]}
{"command": "electrum", "tasks": [{"task": "Create a new wallet:", "command": "electrum -w {{new_wallet.dat}} create"}, {"task": "Restore an existing wallet from seed offline:", "command": "electrum -w {{recovery_wallet.dat}} restore -o"}, {"task": "Create a signed transaction offline:", "command": "electrum mktx {{recipient}} {{amount}} -f 0.0000001 -F {{from}} -o"}, {"task": "Display all wallet receiving addresses:", "command": "electrum listaddresses -a"}, {"task": "Sign a message:", "command": "electrum signmessage {{address}} {{message}}"}, {"task": "Verify a message:", "command": "electrum verifymessage {{address}} {{signature}} {{message}}"}, {"task": "Connect only to a specific electrum-server instance:", "command": "electrum -p socks5:{{127.0.0.1}}:9050 -s {{56ckl5obj37gypcu.onion}}:50001:t -1"}]}
{"command": "elinks", "tasks": [{"task": "Start ELinks:", "command": "elinks"}, {"task": "Quit elinks:", "command": "Ctrl + C"}, {"task": "Dump output of webpage to console, colorizing the text with ANSI control codes:", "command": "elinks -dump -dump-color-mode {{1}} {{url}}"}]}
{"command": "elixir", "tasks": [{"task": "Run an Elixir file:", "command": "elixir {{path/to/file}}"}, {"task": "Evaluate Elixir code by passing it as an argument:", "command": "elixir -e \"{{code}}\""}]}
{"command": "elm", "tasks": [{"task": "Initialize an Elm project, generates an elm.json file:", "command": "elm init"}, {"task": "Start interactive Elm shell:", "command": "elm repl"}, {"task": "Compile an Elm file, output the result to an `index.html` file:", "command": "elm make {{source}}"}, {"task": "Compile an Elm file, output the result to a JavaScript file:", "command": "elm make {{source}} --output={{destination}}.js"}, {"task": "Start local web server that compiles Elm files on page load:", "command": "elm reactor"}, {"task": "Install Elm package from https://package.elm-lang.org:", "command": "elm install {{author}}/{{package}}"}]}
{"command": "elvish", "tasks": [{"task": "Start an interactive shell session:", "command": "elvish"}, {"task": "Execute specific [c]ommands:", "command": "elvish -c \"{{echo 'elvish is executed'}}\""}, {"task": "Execute a specific script:", "command": "elvish {{path/to/script.elv}}"}]}
{"command": "emacs", "tasks": [{"task": "Start Emacs and open a file:", "command": "emacs {{path/to/file}}"}, {"task": "Open a file at a specified line number:", "command": "emacs +{{line_number}} {{path/to/file}}"}, {"task": "Run an Emacs Lisp file as a script:", "command": "emacs --script {{path/to/file.el}}"}, {"task": "Start Emacs in console mode (without an X window):", "command": "emacs --no-window-system"}, {"task": "Start an Emacs server in the background (accessible via `emacsclient`):", "command": "emacs --daemon"}, {"task": "Stop a running Emacs server and all its instances, asking for confirmation on unsaved files:", "command": "emacsclient --eval '(save-buffers-kill-emacs)'"}, {"task": "Save a file in Emacs:", "command": "Ctrl + X, Ctrl + S"}, {"task": "Quit Emacs:", "command": "Ctrl + X, Ctrl + C"}]}
{"command": "emacsclient", "tasks": [{"task": "Open a file in an existing Emacs server (using GUI if available):", "command": "emacsclient {{path/to/file}}"}, {"task": "Open a file in console mode (without an X window):", "command": "emacsclient --no-window-system {{path/to/file}}"}, {"task": "Open a file in a new Emacs window:", "command": "emacsclient --create-frame {{path/to/file}}"}, {"task": "Evaluate a command, printing the output to `stdout`, and then quit:", "command": "emacsclient --eval '({{command}})'"}, {"task": "Specify an alternative editor in case no Emacs server is running:", "command": "emacsclient --alternate-editor {{editor}} {{path/to/file}}"}, {"task": "Stop a running Emacs server and all its instances, asking for confirmation on unsaved files:", "command": "emacsclient --eval '(save-buffers-kill-emacs)'"}]}
{"command": "ember", "tasks": [{"task": "Create a new Ember application:", "command": "ember new {{my_new_app}}"}, {"task": "Create a new Ember addon:", "command": "ember addon {{my_new_addon}}"}, {"task": "Build the project:", "command": "ember build"}, {"task": "Build the project in production mode:", "command": "ember build -prod"}, {"task": "Run the development server:", "command": "ember serve"}, {"task": "Run the test suite:", "command": "ember test"}, {"task": "Run a blueprint to generate something like a route or component:", "command": "ember generate {{type}} {{name}}"}, {"task": "Install an ember-cli addon:", "command": "ember install {{name_of_addon}}"}]}
{"command": "emulator", "tasks": [{"task": "Start an Android emulator device:", "command": "emulator -avd {{name}}"}, {"task": "Display the webcams on your development computer that are available for emulation:", "command": "emulator -avd {{name}} -webcam-list"}, {"task": "Start an emulator overriding the facing back camera setting (use `-camera-front` for front camera):", "command": "emulator -avd {{name}} -camera-back {{none|emulated|webcamN}}"}, {"task": "Start an emulator, with a maximum network speed:", "command": "emulator -avd {{name}} -netspeed {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|full}}"}, {"task": "Start an emulator with network latency:", "command": "emulator -avd {{name}} -netdelay {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|none}}"}, {"task": "Start an emulator, making all TCP connections through a specified HTTP/HTTPS proxy (port number is required):", "command": "emulator -avd {{name}} -http-proxy {{http://example.com:80}}"}, {"task": "Start an emulator with a given SD card partition image file:", "command": "emulator -avd {{name}} -sdcard {{path/to/sdcard.img}}"}, {"task": "Display help:", "command": "emulator -help"}]}
{"command": "enca", "tasks": [{"task": "Detect file(s) encoding according to the system's locale:", "command": "enca {{path/to/file1 path/to/file2 ...}}"}, {"task": "Detect file(s) encoding specifying a language in the POSIX/C locale format (e.g. zh_CN, en_US):", "command": "enca -L {{language}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Convert file(s) to a specific encoding:", "command": "enca -L {{language}} -x {{to_encoding}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Create a copy of an existing file using a different encoding:", "command": "enca -L {{language}} -x {{to_encoding}} < {{original_file}} > {{new_file}}"}]}
{"command": "encfs", "tasks": [{"task": "Initialize or mount an encrypted filesystem:", "command": "encfs {{/path/to/cipher_dir}} {{/path/to/mount_point}}"}, {"task": "Initialize an encrypted filesystem with standard settings:", "command": "encfs --standard {{/path/to/cipher_dir}} {{/path/to/mount_point}}"}, {"task": "Run encfs in the foreground instead of spawning a daemon:", "command": "encfs -f {{/path/to/cipher_dir}} {{/path/to/mount_point}}"}, {"task": "Mount an encrypted snapshot of a plain directory:", "command": "encfs --reverse {{path/to/plain_dir}} {{path/to/cipher_dir}}"}]}
{"command": "enscript", "tasks": [{"task": "Generate a PostScript file from a text file:", "command": "enscript {{path/to/input_file}} --output={{path/to/output_file}}"}, {"task": "Generate a file in a different language than PostScript:", "command": "enscript {{path/to/input_file}} --language={{html|rtf|...}} --output={{path/to/output_file}}"}, {"task": "Generate a PostScript file with a landscape layout, splitting the page into columns (maximum 9):", "command": "enscript {{path/to/input_file}} --columns={{num}} --landscape --output={{path/to/output_file}}"}, {"task": "Display available syntax highlighting languages and file formats:", "command": "enscript --help-highlight"}, {"task": "Generate a PostScript file with syntax highlighting and color for a specified language:", "command": "enscript {{path/to/input_file}} --color=1 --highlight={{language}} --output={{path/to/output_file}}"}]}
{"command": "entr", "tasks": [{"task": "Rebuild with `make` if any file in any subdirectory changes:", "command": "{{ag -l}} | entr {{make}}"}, {"task": "Rebuild and test with `make` if any `.c` source files in the current directory change:", "command": "{{ls *.c}} | entr {{'make && make test'}}"}, {"task": "Send a `SIGTERM` to any previously spawned ruby subprocesses before executing `ruby main.rb`:", "command": "{{ls *.rb}} | entr -r {{ruby main.rb}}"}, {"task": "Run a command with the changed file (`/_`) as an argument:", "command": "{{ls *.sql}} | entr {{psql -f}} /_"}]}
{"command": "env", "tasks": [{"task": "Show the environment:", "command": "env"}, {"task": "Run a program. Often used in scripts after the shebang (#!) for looking up the path to the program:", "command": "env {{program}}"}, {"task": "Clear the environment and run a program:", "command": "env -i {{program}}"}, {"task": "Remove variable from the environment and run a program:", "command": "env -u {{variable}} {{program}}"}, {"task": "Set a variable and run a program:", "command": "env {{variable}}={{value}} {{program}}"}, {"task": "Set multiple variables and run a program:", "command": "env {{variable1}}={{value}} {{variable2}}={{value}} {{variable3}}={{value}} {{program}}"}]}
{"command": "envoy", "tasks": [{"task": "Initialize a configuration file:", "command": "envoy init {{host_name}}"}, {"task": "Run a task:", "command": "envoy run {{task_name}}"}, {"task": "Run a task from a specific project:", "command": "envoy run --path {{path/to/directory}} {{task_name}}"}, {"task": "Run a task and continue on failure:", "command": "envoy run --continue {{task_name}}"}, {"task": "Dump a task as a Bash script for inspection:", "command": "envoy run --pretend {{task_name}}"}, {"task": "Connect to the specified server via SSH:", "command": "envoy ssh {{server_name}}"}]}
{"command": "envsubst", "tasks": [{"task": "Replace environment variables in `stdin` and output to `stdout`:", "command": "echo '{{$HOME}}' | envsubst"}, {"task": "Replace environment variables in an input file and output to `stdout`:", "command": "envsubst < {{path/to/input_file}}"}, {"task": "Replace environment variables in an input file and output to a file:", "command": "envsubst < {{path/to/input_file}} > {{path/to/output_file}}"}, {"task": "Replace environment variables in an input file from a space-separated list:", "command": "envsubst '{{$USER $SHELL $HOME}}' < {{path/to/input_file}}"}]}
{"command": "eol", "tasks": [{"task": "List all available products:", "command": "eol"}, {"task": "Get EoLs of one or more products:", "command": "eol {{product1 product2 ...}}"}, {"task": "Open the product webpage:", "command": "eol {{product}} --web"}, {"task": "Get EoLs of a one or more products in a specific format:", "command": "eol {{product1 product2 ...}} --format {{html|json|md|markdown|pretty|rst|csv|tsv|yaml}}"}, {"task": "Get EoLs of one or more products as a single markdown file:", "command": "eol {{product1 product2 ...}} --format {{markdown}} > {{eol_report.md}}"}, {"task": "Display help:", "command": "eol --help"}]}
{"command": "eqn", "tasks": [{"task": "Process input with equations, saving the output for future typesetting with groff to PostScript:", "command": "eqn {{path/to/input.eqn}} > {{path/to/output.roff}}"}, {"task": "Typeset an input file with equations to PDF using the [me] macro package:", "command": "eqn -T {{pdf}} {{path/to/input.eqn}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}"}]}
{"command": "erl", "tasks": [{"task": "Compile and run sequential Erlang program as a common script and then exit:", "command": "erlc {{files}} && erl -noshell '{{mymodule:myfunction(arguments)}}, init:stop().'"}, {"task": "Connect to a running Erlang node:", "command": "erl -remsh {{nodename}}@{{hostname}} -sname {{custom_shortname}} -hidden -setcookie {{cookie_of_remote_node}}"}, {"task": "Tell the Erlang shell to load modules from a directory:", "command": "erl -pa {{directory_with_beam_files}}"}]}
{"command": "ern", "tasks": [{"task": "Create a new `ern` application (`MiniApp`):", "command": "ern create-miniapp {{application_name}}"}, {"task": "Run one or more `MiniApps` in the iOS/Android Runner application:", "command": "ern run-{{ios|android}}"}, {"task": "Create an Electrode Native container:", "command": "ern create-container --miniapps {{/path/to/miniapp_directory}} --platform {{ios|android}}"}, {"task": "Publish an Electrode Native container to a local Maven repository:", "command": "ern publish-container --publisher {{maven}} --platform {{android}} --extra {{'{\"groupId\":\"com.walmart.ern\",\"artifactId\":\"quickstart\"}'}}"}, {"task": "Transform an iOS container into a pre-compiled binary framework:", "command": "ern transform-container --platform {{ios}} --transformer {{xcframework}}"}, {"task": "List all installed versions of Electrode Native:", "command": "ern platform versions"}, {"task": "Set a logging level:", "command": "ern platform config set logLevel {{trace|debug}}"}]}
{"command": "errno", "tasks": [{"task": "Lookup errno description by name or code:", "command": "errno {{name|code}}"}, {"task": "List all errno names, codes, and descriptions:", "command": "errno --list"}, {"task": "Search for code whose description contains all of the given text:", "command": "errno --search {{text}}"}, {"task": "Search for code whose description contains all of the given text (all locales):", "command": "errno --search-all-locales {{text}}"}]}
{"command": "esbuild", "tasks": [{"task": "Bundle a JavaScript application and print to `stdout`:", "command": "esbuild --bundle {{path/to/file.js}}"}, {"task": "Bundle a JSX application from `stdin`:", "command": "esbuild --bundle --outfile={{path/to/out.js}} < {{path/to/file.jsx}}"}, {"task": "Bundle and minify a JSX application with source maps in `production` mode:", "command": "esbuild --bundle --define:{{process.env.NODE_ENV=\\\"production\\\"}} --minify --sourcemap {{path/to/file.js}}"}, {"task": "Bundle a JSX application for a comma-separated list of browsers:", "command": "esbuild --bundle --minify --sourcemap --target={{chrome58,firefox57,safari11,edge16}} {{path/to/file.jsx}}"}, {"task": "Bundle a JavaScript application for a specific node version:", "command": "esbuild --bundle --platform={{node}} --target={{node12}} {{path/to/file.js}}"}, {"task": "Bundle a JavaScript application enabling JSX syntax in `.js` files:", "command": "esbuild --bundle app.js --loader:{{.js=jsx}} {{path/to/file.js}}"}, {"task": "Bundle and serve a JavaScript application on an HTTP server:", "command": "esbuild --bundle --serve={{port}} --outfile={{index.js}} {{path/to/file.js}}"}, {"task": "Bundle a list of files to an output directory:", "command": "esbuild --bundle --outdir={{path/to/output_directory}} {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "eslint", "tasks": [{"task": "Create the ESLint config file:", "command": "eslint --init"}, {"task": "Lint one or more files:", "command": "eslint {{path/to/file1.js path/to/file2.js ...}}"}, {"task": "Fix lint issues:", "command": "eslint --fix"}, {"task": "Lint using the specified config:", "command": "eslint -c {{path/to/config_file}} {{path/to/file1.js path/to/file2.js}}"}]}
{"command": "espanso", "tasks": [{"task": "Check status:", "command": "espanso status"}, {"task": "Edit the configuration:", "command": "espanso edit config"}, {"task": "Install a package from the hub store (<https://hub.espanso.org/>):", "command": "espanso install {{package_name}}"}, {"task": "Restart (required after installing a package, useful in case of failure):", "command": "espanso restart"}]}
{"command": "espeak", "tasks": [{"task": "Speak a phrase aloud:", "command": "espeak \"I like to ride my bike.\""}, {"task": "Speak a file aloud:", "command": "espeak -f {{path/to/file}}"}, {"task": "Save output to a WAV audio file, rather than speaking it directly:", "command": "espeak -w {{filename.wav}} \"It's GNU plus Linux\""}, {"task": "Use a different voice:", "command": "espeak -v {{voice}}"}]}
{"command": "esptool.py", "tasks": [{"task": "Flash a firmware file to an ESP chip with a given port and baud rate:", "command": "sudo esptool.py --port {{port}} --baud {{baud_rate}} write_flash 0x0 {{path/to/firmware.bin}}"}, {"task": "Clear the flash of an ESP chip:", "command": "sudo esptool.py --port {{port}} --baud {{baud_rate}} erase_flash"}]}
{"command": "etcd", "tasks": [{"task": "Start a single-node etcd cluster:", "command": "etcd"}, {"task": "Start a single-node etcd cluster, listening for client requests on a custom URL:", "command": "etcd --advertise-client-urls {{http://127.0.0.1:1234}} --listen-client-urls {{http://127.0.0.1:1234}}"}, {"task": "Start a single-node etcd cluster with a custom name:", "command": "etcd --name {{my_etcd_cluster}}"}, {"task": "Start a single-node etcd cluster with extensive metrics available at http://localhost:2379/debug/pprof/:", "command": "etcd --enable-pprof --metrics extensive"}]}
{"command": "etcdctl", "tasks": [{"task": "Display the value associated with a specified key:", "command": "etcdctl get {{my/key}}"}, {"task": "Store a key-value pair:", "command": "etcdctl put {{my/key}} {{my_value}}"}, {"task": "Delete a key-value pair:", "command": "etcdctl del {{my/key}}"}, {"task": "Store a key-value pair, reading the value from a file:", "command": "etcdctl put {{my/file}} < {{path/to/file.txt}}"}, {"task": "Save a snapshot of the etcd keystore:", "command": "etcdctl snapshot save {{path/to/snapshot.db}}"}, {"task": "Restore a snapshot of an etcd keystore (restart the etcd server afterwards):", "command": "etcdctl snapshot restore {{path/to/snapshot.db}}"}, {"task": "Add a user:", "command": "etcdctl user add {{my_user}}"}, {"task": "Watch a key for changes:", "command": "etcdctl watch {{my/key}}"}]}
{"command": "eva", "tasks": [{"task": "Run the calculator in interactive mode:", "command": "eva"}, {"task": "Calculate the result of an expression:", "command": "eva \"{{(1 + 2) * 2 ^ 2}}\""}, {"task": "Calculate an expression forcing the number of decimal places to 5:", "command": "eva --fix {{5}} \"{{5 / 3}}\""}, {"task": "Calculate an expression with sine and cosine:", "command": "eva \"{{sin(1) + cos(1)}}\""}]}
{"command": "eval", "tasks": [{"task": "Call `echo` with the \"foo\" argument:", "command": "eval \"{{echo foo}}\""}, {"task": "Set a variable in the current shell:", "command": "eval \"{{foo=bar}}\""}]}
{"command": "evil-winrm", "tasks": [{"task": "Connect to a host:", "command": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}}"}, {"task": "Connect to a host, passing the password hash:", "command": "evil-winrm --ip {{ip}} --user {{user}} --hash {{nt_hash}}"}, {"task": "Connect to a host, specifying directories for scripts and executables:", "command": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --scripts {{path/to/scripts}} --executables {{path/to/executables}}"}, {"task": "Connect to a host, using SSL:", "command": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --ssl --pub-key {{path/to/pubkey}} --priv-key {{path/to/privkey}}"}, {"task": "Upload a file to the host:", "command": "PS > upload {{path/to/local/file}} {{path/to/remote/file}}"}, {"task": "Get a list of loaded PowerShell functions:", "command": "PS > menu"}, {"task": "Load a PowerShell script from the `--scripts` directory:", "command": "PS > {{script.ps1}}"}, {"task": "Invoke a binary on the host from the `--executables` directory:", "command": "PS > Invoke-Binary {{binary.exe}}"}]}
{"command": "ex", "tasks": [{"task": "Open a file:", "command": "ex {{path/to/file}}"}, {"task": "Save and Quit:", "command": "wq<Enter>"}, {"task": "Undo the last operation:", "command": "undo<Enter>"}, {"task": "Search for a pattern in the file:", "command": "/{{search_pattern}}<Enter>"}, {"task": "Perform a regular expression substitution in the whole file:", "command": "%s/{{regular_expression}}/{{replacement}}/g<Enter>"}, {"task": "Insert text:", "command": "i<Enter>{{text}}<C-c>"}, {"task": "Switch to Vim:", "command": "visual<Enter>"}]}
{"command": "exa", "tasks": [{"task": "List files one per line:", "command": "exa --oneline"}, {"task": "List all files, including hidden files:", "command": "exa --all"}, {"task": "Long format list (permissions, ownership, size and modification date) of all files:", "command": "exa --long --all"}, {"task": "List files with the largest at the top:", "command": "exa --reverse --sort={{size}}"}, {"task": "Display a tree of files, three levels deep:", "command": "exa --long --tree --level={{3}}"}, {"task": "List files sorted by modification date (oldest first):", "command": "exa --long --sort={{modified}}"}, {"task": "List files with their headers, icons, and Git statuses:", "command": "exa --long --header --icons --git"}, {"task": "Don't list files mentioned in `.gitignore`:", "command": "exa --git-ignore"}]}
{"command": "exec", "tasks": [{"task": "Replace with the specified command using the current environment variables:", "command": "exec {{command -with -flags}}"}, {"task": "Replace with the specified command, clearing environment variables:", "command": "exec -c {{command -with -flags}}"}, {"task": "Replace with the specified command and login using the default shell:", "command": "exec -l {{command -with -flags}}"}, {"task": "Replace with the specified command and change the process name:", "command": "exec -a {{process_name}} {{command -with -flags}}"}]}
{"command": "exenv", "tasks": [{"task": "Display a list of installed versions:", "command": "exenv versions"}, {"task": "Use a specific version of Elixir across the whole system:", "command": "exenv global {{version}}"}, {"task": "Use a specific version of Elixir for the current application/project directory:", "command": "exenv local {{version}}"}, {"task": "Show the currently selected Elixir version:", "command": "exenv {{version}}"}, {"task": "Install a version of Elixir (requires `elixir-build` plugin <https://github.com/mururu/elixir-build>):", "command": "exenv install {{version}}"}]}
{"command": "exercism", "tasks": [{"task": "Configure the application token and the preferred workspace for Exercism:", "command": "exercism configure --token={{your-application-token}} --workspace={{/path/to/preferred/workspace}}"}, {"task": "Download a specific exercise:", "command": "exercism download --exercise={{exercise_slug}} --track={{track_slug}}"}, {"task": "Submit an exercise:", "command": "exercism submit {{path/to/file}}"}, {"task": "Print the path to the solution workspace:", "command": "exercism workspace"}]}
{"command": "exfatlabel", "tasks": [{"task": "Display the current filesystem label:", "command": "exfatlabel {{/dev/sda}}"}, {"task": "Set the filesystem label:", "command": "exfatlabel {{/dev/sda}} {{new_label}}"}]}
{"command": "exiftool", "tasks": [{"task": "Print the EXIF metadata for a given file:", "command": "exiftool {{path/to/file}}"}, {"task": "Remove all EXIF metadata from the given files:", "command": "exiftool -All= {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove GPS EXIF metadata from given image files:", "command": "exiftool \"-gps*=\" {{path/to/image1 path/to/image2 ...}}"}, {"task": "Remove all EXIF metadata from the given image files, then re-add metadata for color and orientation:", "command": "exiftool -All= -tagsfromfile @ -colorspacetags -orientation {{path/to/image1 path/to/image2 ...}}"}, {"task": "Move the date at which all photos in a directory were taken 1 hour forward:", "command": "exiftool \"-AllDates+=0:0:0 1:0:0\" {{path/to/directory}}"}, {"task": "Move the date at which all JPEG photos in the current directory were taken 1 day and 2 hours backward:", "command": "exiftool \"-AllDates-=0:0:1 2:0:0\" -ext jpg"}, {"task": "Only change the `DateTimeOriginal` field subtracting 1.5 hours, without keeping backups:", "command": "exiftool -DateTimeOriginal-=1.5 -overwrite_original"}, {"task": "Recursively rename all JPEG photos in a directory based on the `DateTimeOriginal` field:", "command": "exiftool '-filename<DateTimeOriginal' -d %Y-%m-%d_%H-%M-%S%%lc.%%e {{path/to/directory}} -r -ext jpg"}]}
{"command": "exit", "tasks": [{"task": "Exit the shell with the exit code of the last command executed:", "command": "exit"}, {"task": "Exit the shell with the specified exit code:", "command": "exit {{exit_code}}"}]}
{"command": "exiv2", "tasks": [{"task": "Print a summary of the image Exif metadata:", "command": "exiv2 {{path/to/file}}"}, {"task": "Print all metadata (Exif, IPTC, XMP) with interpreted values:", "command": "exiv2 -P kt {{path/to/file}}"}, {"task": "Print all metadata with raw values:", "command": "exiv2 -P kv {{path/to/file}}"}, {"task": "Delete all metadata from an image:", "command": "exiv2 -d a {{path/to/file}}"}, {"task": "Delete all metadata, preserving the file timestamp:", "command": "exiv2 -d a -k {{path/to/file}}"}, {"task": "Rename the file, prepending the date and time from metadata (not from the file timestamp):", "command": "exiv2 -r {{'%Y%m%d_%H%M%S_:basename:'}} {{path/to/file}}"}]}
{"command": "expand", "tasks": [{"task": "Convert tabs in each file to spaces, writing to `stdout`:", "command": "expand {{path/to/file}}"}, {"task": "Convert tabs to spaces, reading from `stdin`:", "command": "expand"}, {"task": "Do not convert tabs after non blanks:", "command": "expand -i {{path/to/file}}"}, {"task": "Have tabs a certain number of characters apart, not 8:", "command": "expand -t={{number}} {{path/to/file}}"}, {"task": "Use a comma separated list of explicit tab positions:", "command": "expand -t={{1,4,6}}"}]}
{"command": "export", "tasks": [{"task": "Set a new environment variable:", "command": "export {{VARIABLE}}={{value}}"}, {"task": "Remove an environment variable:", "command": "export -n {{VARIABLE}}"}, {"task": "Mark a shell function for export:", "command": "export -f {{FUNCTION_NAME}}"}, {"task": "Append something to the PATH variable:", "command": "export PATH=$PATH:{{path/to/append}}"}]}
{"command": "expose", "tasks": [{"task": "Register your authentication token:", "command": "expose token {{token}}"}, {"task": "Share the current working directory:", "command": "expose"}, {"task": "Share the current working directory with a specific subdomain:", "command": "expose --subdomain={{subdomain}}"}, {"task": "Share a local URL:", "command": "expose share {{url}}"}, {"task": "Run the Expose server:", "command": "expose serve"}, {"task": "Run the Expose server with a specific hostname:", "command": "expose serve {{hostname}}"}]}
{"command": "expr", "tasks": [{"task": "Get the length of a specific string:", "command": "expr length \"{{string}}\""}, {"task": "Get the substring of a string with a specific length:", "command": "expr substr \"{{string}}\" {{from}} {{length}}"}, {"task": "Match a specific substring against an anchored pattern:", "command": "expr match \"{{string}}\" '{{pattern}}'"}, {"task": "Get the first char position from a specific set in a string:", "command": "expr index \"{{string}}\" \"{{chars}}\""}, {"task": "Calculate a specific mathematic expression:", "command": "expr {{expression1}} {{+|-|*|/|%}} {{expression2}}"}, {"task": "Get the first expression if its value is non-zero and not null otherwise get the second one:", "command": "expr {{expression1}} \\| {{expression2}}"}, {"task": "Get the first expression if both expressions are non-zero and not null otherwise get zero:", "command": "expr {{expression1}} \\& {{expression2}}"}]}
{"command": "exrex", "tasks": [{"task": "Generate all possible strings that match a regular expression:", "command": "exrex '{{regular_expression}}'"}, {"task": "Generate a random string that matches a regular expression:", "command": "exrex --random '{{regular_expression}}'"}, {"task": "Generate at most 100 strings that match a regular expression:", "command": "exrex --max-number {{100}} '{{regular_expression}}'"}, {"task": "Generate all possible strings that match a regular expression, joined by a custom delimiter string:", "command": "exrex --delimiter \"{{, }}\" '{{regular_expression}}'"}, {"task": "Print count of all possible strings that match a regular expression:", "command": "exrex --count '{{regular_expression}}'"}, {"task": "Simplify a regular expression:", "command": "exrex --simplify '{{ab|ac}}'"}, {"task": "Print eyes:", "command": "exrex '{{[oO0](_)[oO0]}}'"}, {"task": "Print a boat:", "command": "exrex '{{( {20}(\\| *\\\\|-{22}|\\|)|\\.={50}| ( ){0,5}\\\\\\.| {12}~{39})}}'"}]}
{"command": "f3fix", "tasks": [{"task": "Fill a fake flash drive with a single partition that matches its real capacity:", "command": "sudo f3fix {{/dev/device_name}}"}, {"task": "Mark the partition as bootable:", "command": "sudo f3fix --boot {{/dev/device_name}}"}, {"task": "Specify the filesystem:", "command": "sudo f3fix --fs-type={{filesystem_type}} {{/dev/device_name}}"}]}
{"command": "f3probe", "tasks": [{"task": "Probe a block device:", "command": "sudo f3probe {{path/to/block_device}}"}, {"task": "Use the minimum about of RAM possible:", "command": "sudo f3probe --min-memory {{path/to/block_device}}"}, {"task": "Time disk operations:", "command": "sudo f3probe --time-ops {{path/to/block_device}}"}]}
{"command": "f3read", "tasks": [{"task": "Validate a device by checking the files in a given directory:", "command": "f3read {{path/to/mount_point}}"}]}
{"command": "f3write", "tasks": [{"task": "Write test files to a given directory, filling the drive:", "command": "f3write {{path/to/mount_point}}"}, {"task": "Limit the write speed:", "command": "f3write --max-write-rate={{kb_per_second}} {{path/to/mount_point}}"}]}
{"command": "factor", "tasks": [{"task": "Display the prime-factorization of a number:", "command": "factor {{number}}"}, {"task": "Take the input from `stdin` if no argument is specified:", "command": "echo {{number}} | factor"}]}
{"command": "fakedata", "tasks": [{"task": "List all valid generators:", "command": "fakedata --generators"}, {"task": "Generate data using one or more generators:", "command": "fakedata {{generator1}} {{generator2}}"}, {"task": "Generate data with a specific output format:", "command": "fakedata --format {{csv|tab|sql}} {{generator}}"}, {"task": "Generate a given number of data items (defaults to 10):", "command": "fakedata --limit {{n}} {{generator}}"}, {"task": "Generate data using a custom output template (the first letter of generator names must be capitalized):", "command": "echo \"{{\\{\\{Generator\\}\\}}}\" | fakedata"}]}
{"command": "false", "tasks": [{"task": "Return a non-zero exit code:", "command": "false"}]}
{"command": "fast", "tasks": [{"task": "Measure the current download speed:", "command": "fast"}, {"task": "Measure the current upload speed in addition to download speed:", "command": "fast --upload"}, {"task": "Display results on a single line to reduce spacing:", "command": "fast --single-line"}]}
{"command": "fastboot", "tasks": [{"task": "Unlock the bootloader:", "command": "fastboot oem unlock"}, {"task": "Relock the bootloader:", "command": "fastboot oem lock"}, {"task": "Reboot the device from fastboot mode into fastboot mode again:", "command": "fastboot reboot bootloader"}, {"task": "Flash a given image:", "command": "fastboot flash {{file.img}}"}, {"task": "Flash a custom recovery image:", "command": "fastboot flash recovery {{file.img}}"}, {"task": "Display connected devices:", "command": "fastboot devices"}, {"task": "Display all information of a device:", "command": "fastboot getvar all"}]}
{"command": "fastd", "tasks": [{"task": "Start `fastd` with a specific configuration file:", "command": "fastd --config {{path/to/fastd.conf}}"}, {"task": "Start a Layer 3 VPN with an MTU of 1400, loading the rest of the configuration parameters from a file:", "command": "fastd --mode {{tap}} --mtu {{1400}} --config {{path/to/fastd.conf}}"}, {"task": "Validate a configuration file:", "command": "fastd --verify-config --config {{path/to/fastd.conf}}"}, {"task": "Generate a new key:", "command": "fastd --generate-key"}, {"task": "Show the public key to a private key in a configuration file:", "command": "fastd --show-key --config {{path/to/fastd.conf}}"}, {"task": "Show the current version:", "command": "fastd -v"}]}
{"command": "fastfetch", "tasks": [{"task": "Display system information:", "command": "fastfetch"}, {"task": "Set the structure of the fetch:", "command": "fastfetch --structure {{structure}}"}, {"task": "Load a custom config file:", "command": "fastfetch --load-config {{path/to/config_file}}"}, {"task": "Set the logo to use:", "command": "fastfetch --logo {{logo}}"}, {"task": "Set the color of the keys and title:", "command": "fastfetch --color {{blue}}"}]}
{"command": "fastlane", "tasks": [{"task": "Build and sign the iOS application in the current directory:", "command": "fastlane run build_app"}, {"task": "Run `pod install` for the project in the current directory:", "command": "fastlane run cocoapods"}, {"task": "Delete the derived data from Xcode:", "command": "fastlane run clear_derived_data"}, {"task": "Remove the cache for pods:", "command": "fastlane run clean_cocoapods_cache"}]}
{"command": "fastmod", "tasks": [{"task": "Replace a regex pattern in all files of the current directory, ignoring files on .ignore and .gitignore:", "command": "fastmod {{regex_pattern}} {{replacement}}"}, {"task": "Replace a regex pattern in case-insensitive mode in specific files or directories:", "command": "fastmod --ignore-case {{regex_pattern}} {{replacement}} -- {{path/to/file path/to/directory ...}}"}, {"task": "Replace a regex pattern in a specific directory in files filtered with a case-insensitive glob pattern:", "command": "fastmod {{regex}} {{replacement}} --dir {{path/to/directory}} --iglob {{'**/*.{js,json}'}}"}, {"task": "Replace for an exact string in .js or .json files:", "command": "fastmod --fixed-strings {{exact_string}} {{replacement}} --extensions {{json,js}}"}, {"task": "Replace for an exact string without prompt for a confirmation (disables regular expressions):", "command": "fastmod --accept-all --fixed-strings {{exact_string}} {{replacement}}"}, {"task": "Replace for an exact string without prompt for a confirmation, printing changed files:", "command": "fastmod --accept-all --print-changed-files --fixed-strings {{exact_string}} {{replacement}}"}]}
{"command": "fc-cache", "tasks": [{"task": "Generate font cache files:", "command": "fc-cache"}, {"task": "Force a rebuild of all font cache files, without checking if cache is up-to-date:", "command": "fc-cache -f"}, {"task": "Erase font cache files, then generate new font cache files:", "command": "fc-cache -r"}]}
{"command": "fc-list", "tasks": [{"task": "Return a list of installed fonts in your system:", "command": "fc-list"}, {"task": "Return a list of installed fonts with given name:", "command": "fc-list | grep '{{DejaVu Serif}}'"}, {"task": "Return the number of installed fonts in your system:", "command": "fc-list | wc -l"}]}
{"command": "fc-match", "tasks": [{"task": "Return a sorted list of best matching fonts:", "command": "fc-match -s '{{DejaVu Serif}}'"}]}
{"command": "fc-pattern", "tasks": [{"task": "Display default information about a font:", "command": "fc-pattern --default '{{DejaVu Serif}}'"}, {"task": "Display config information about a font:", "command": "fc-pattern --config '{{DejaVu Serif}}'"}]}
{"command": "fc", "tasks": [{"task": "Open in the default system editor:", "command": "fc"}, {"task": "Specify an editor to open with:", "command": "fc -e {{'emacs'}}"}, {"task": "List recent commands from history:", "command": "fc -l"}, {"task": "List recent commands in reverse order:", "command": "fc -l -r"}, {"task": "List commands in a given interval:", "command": "fc '{{416}}' '{{420}}'"}]}
{"command": "fd", "tasks": [{"task": "Recursively find files matching a specific pattern in the current directory:", "command": "fd \"{{string|regex}}\""}, {"task": "Find files that begin with `foo`:", "command": "fd \"^foo\""}, {"task": "Find files with a specific extension:", "command": "fd --extension txt"}, {"task": "Find files in a specific directory:", "command": "fd \"{{string|regex}}\" {{path/to/directory}}"}, {"task": "Include ignored and hidden files in the search:", "command": "fd --hidden --no-ignore \"{{string|regex}}\""}, {"task": "Execute a command on each search result returned:", "command": "fd \"{{string|regex}}\" --exec {{command}}"}]}
{"command": "fdp", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "fdp -T png -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "fdp -T svg -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in a specific format:", "command": "fdp -T {{ps|pdf|svg|fig|png|gif|jpg|json|dot}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | fdp -T gif > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "fdp -?"}]}
{"command": "fdroid", "tasks": [{"task": "Build a specific app:", "command": "fdroid build {{app_id}}"}, {"task": "Build a specific app in a build server VM:", "command": "fdroid build {{app_id}} --server"}, {"task": "Publish the app to the local repository:", "command": "fdroid publish {{app_id}}"}, {"task": "Install the app on every connected device:", "command": "fdroid install {{app_id}}"}, {"task": "Check if the metadata is formatted correctly:", "command": "fdroid lint --format {{app_id}}"}, {"task": "Fix the formatting automatically (if possible):", "command": "fdroid rewritemeta {{app_id}}"}]}
{"command": "fdroidcl", "tasks": [{"task": "Fetch the F-Droid index:", "command": "fdroidcl update"}, {"task": "Display info about an app:", "command": "fdroidcl show {{app_id}}"}, {"task": "Download an APK file:", "command": "fdroidcl download {{app_id}}"}, {"task": "Search for an app in the index:", "command": "fdroidcl search {{search_pattern}}"}, {"task": "Install an app on a connected device:", "command": "fdroidcl install {{app_id}}"}]}
{"command": "fdupes", "tasks": [{"task": "Search a single directory:", "command": "fdupes {{path/to/directory}}"}, {"task": "Search multiple directories:", "command": "fdupes {{directory1}} {{directory2}}"}, {"task": "Search a directory recursively:", "command": "fdupes -r {{path/to/directory}}"}, {"task": "Search multiple directories, one recursively:", "command": "fdupes {{directory1}} -R {{directory2}}"}, {"task": "Search recursively and replace duplicates with hardlinks:", "command": "fdupes -rH {{path/to/directory}}"}, {"task": "Search recursively for duplicates and display interactive prompt to pick which ones to keep, deleting the others:", "command": "fdupes -rd {{path/to/directory}}"}, {"task": "Search recursively and delete duplicates without prompting:", "command": "fdupes -rdN {{path/to/directory}}"}]}
{"command": "feh", "tasks": [{"task": "View images locally or using a URL:", "command": "feh {{path/to/images}}"}, {"task": "View images recursively:", "command": "feh --recursive {{path/to/images}}"}, {"task": "View images without window borders:", "command": "feh --borderless {{path/to/images}}"}, {"task": "Exit after the last image:", "command": "feh --cycle-once {{path/to/images}}"}, {"task": "Set the slideshow cycle delay:", "command": "feh --slideshow-delay {{seconds}} {{path/to/images}}"}, {"task": "Set your wallpaper (centered, filled, maximized, scaled or tiled):", "command": "feh --bg-{{center|fill|max|scale|tile}} {{path/to/image}}"}, {"task": "Create a montage of all images within a directory. Outputs as a new image:", "command": "feh --montage --thumb-height {{150}} --thumb-width {{150}} --index-info \"{{%nn%wx%h}}\" --output {{path/to/montage_image.png}}"}]}
{"command": "feroxbuster", "tasks": [{"task": "Discover specific directories and files that match in the wordlist with extensions and 100 threads and a random user-agent:", "command": "feroxbuster --url \"{{https://example.com}}\" --wordlist {{path/to/file}} --threads {{100}} --extensions \"{{php,txt}}\" --random-agent"}, {"task": "Enumerate directories without recursion through a specific proxy:", "command": "feroxbuster --url \"{{https://example.com}}\" --wordlist {{path/to/file}} --no-recursion --proxy \"{{http://127.0.0.1:8080}}\""}, {"task": "Find links in webpages:", "command": "feroxbuster --url \"{{https://example.com}}\" --extract-links"}, {"task": "Filter by a specific status code and a number of chars:", "command": "feroxbuster --url \"{{https://example.com}}\" --filter-status {{301}} --filter-size {{4092}}"}]}
{"command": "ffe", "tasks": [{"task": "Display all input data using the specified data configuration:", "command": "ffe --configuration={{path/to/config.ffe}} {{path/to/input}}"}, {"task": "Convert an input file to an output file in a new format:", "command": "ffe --output={{path/to/output}} -c {{path/to/config.ffe}} {{path/to/input}}"}, {"task": "Select input structure and print format from definitions in `~/.fferc` config file:", "command": "ffe --structure={{structure}} --print={{format}} {{path/to/input}}"}, {"task": "Write only the selected fields:", "command": "ffe --field-list=\"{{FirstName,LastName,Age}}\" -c {{path/to/config.ffe}} {{path/to/input}}"}, {"task": "Write only the records that match an expression:", "command": "ffe -e \"{{LastName=Smith}}\" -c {{path/to/config.ffe}} {{path/to/input}}"}, {"task": "Display help:", "command": "ffe --help"}]}
{"command": "ffmpeg", "tasks": [{"task": "Extract the sound from a video and save it as MP3:", "command": "ffmpeg -i {{video.mp4}} -vn {{sound}}.mp3"}, {"task": "Save a video as GIF, scaling the height to 1000px and setting framerate to 15:", "command": "ffmpeg -i {{video.mp4}} -vf 'scale=-1:{{1000}}' -r {{15}} {{output.gif}}"}, {"task": "Combine numbered images (`frame_1.jpg`, `frame_2.jpg`, etc) into a video or GIF:", "command": "ffmpeg -i {{frame_%d.jpg}} -f image2 {{video.mpg|video.gif}}"}, {"task": "Quickly extract a single frame from a video at time mm:ss and save it as a 128x128 resolution image:", "command": "ffmpeg -ss {{mm:ss}} -i {{video.mp4}} -frames 1 -s {{128x128}} -f image2 {{image.png}}"}, {"task": "Trim a video from a given start time mm:ss to an end time mm2:ss2 (omit the -to flag to trim till the end):", "command": "ffmpeg -ss {{mm:ss}} -to {{mm2:ss2}} -i {{video.mp4}} -codec copy {{output.mp4}}"}, {"task": "Convert AVI video to MP4. AAC Audio @ 128kbit, h264 Video @ CRF 23:", "command": "ffmpeg -i {{input_video}}.avi -codec:a aac -b:a 128k -codec:v libx264 -crf 23 {{output_video}}.mp4"}, {"task": "Remux MKV video to MP4 without re-encoding audio or video streams:", "command": "ffmpeg -i {{input_video}}.mkv -codec copy {{output_video}}.mp4"}, {"task": "Convert MP4 video to VP9 codec. For the best quality, use a CRF value (recommended range 15-35) and -b:v MUST be 0:", "command": "ffmpeg -i {{input_video}}.mp4 -codec:v libvpx-vp9 -crf {{30}} -b:v 0 -codec:a libopus -vbr on -threads {{number_of_threads}} {{output_video}}.webm"}]}
{"command": "ffplay", "tasks": [{"task": "Play a media file:", "command": "ffplay {{path/to/file}}"}, {"task": "Play audio from a media file without a GUI:", "command": "ffplay -nodisp {{path/to/file}}"}, {"task": "Play media passed by `ffmpeg` through `stdin`:", "command": "ffmpeg -i {{path/to/file}} -c {{copy}} -f {{media_format}} - | ffplay -"}, {"task": "Play a video and show motion vectors in real time:", "command": "ffplay -flags2 +export_mvs -vf codecview=mv=pf+bf+bb {{path/to/file}}"}, {"task": "Show only video keyframes:", "command": "ffplay -vf select=\"{{eq(pict_type\\,PICT_TYPE_I)}}\" {{path/to/file}}"}]}
{"command": "ffprobe", "tasks": [{"task": "Display all available stream info for a media file:", "command": "ffprobe -v error -show_streams {{input.mp4}}"}, {"task": "Display media duration:", "command": "ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}"}, {"task": "Display the frame rate of a video:", "command": "ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}"}, {"task": "Display the width or height of a video:", "command": "ffprobe -v error -select_streams v:0 -show_entries stream={{width|height}} -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}"}, {"task": "Display the average bit rate of a video:", "command": "ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}"}]}
{"command": "ffsend", "tasks": [{"task": "Upload a file:", "command": "ffsend upload {{path/to/file}}"}, {"task": "Download a file:", "command": "ffsend download {{url}}"}, {"task": "Upload a file with password:", "command": "ffsend upload {{path/to/file}} -p {{password}}"}, {"task": "Download a file protected by password:", "command": "ffsend download {{path/to/file}} -p {{password}}"}, {"task": "Upload a file and allow 4 downloads:", "command": "ffsend upload {{path/to/file}} -d {{4}}"}]}
{"command": "fg", "tasks": [{"task": "Bring most recently suspended or running background job to foreground:", "command": "fg"}, {"task": "Bring a specific job to foreground:", "command": "fg %{{job_id}}"}]}
{"command": "fgrep", "tasks": [{"task": "Search for an exact string in a file:", "command": "fgrep {{search_string}} {{path/to/file}}"}, {"task": "Search only lines that match entirely in files:", "command": "fgrep -x {{path/to/file1}} {{path/to/file2}}"}, {"task": "Count the number of lines that match the given string in a file:", "command": "fgrep -c {{search_string}} {{path/to/file}}"}, {"task": "Show the line number in the file along with the line matched:", "command": "fgrep -n {{search_string}} {{path/to/file}}"}, {"task": "Display all lines except those that contain the search string:", "command": "fgrep -v {{search_string}} {{path/to/file}}"}, {"task": "Display filenames whose content matches the search string at least once:", "command": "fgrep -l {{search_string}} {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "figlet", "tasks": [{"task": "Generate by directly inputting text:", "command": "figlet {{input_text}}"}, {"task": "Use a custom font file:", "command": "figlet {{input_text}} -f {{path/to/font_file.flf}}"}, {"task": "Use a font from the default font directory (the extension can be omitted):", "command": "figlet {{input_text}} -f {{font_filename}}"}, {"task": "Pipe command output through FIGlet:", "command": "{{command}} | figlet"}, {"task": "Show available FIGlet fonts:", "command": "showfigfonts {{optional_string_to_display}}"}]}
{"command": "file", "tasks": [{"task": "Give a description of the type of the specified file. Works fine for files with no file extension:", "command": "file {{path/to/file}}"}, {"task": "Look inside a zipped file and determine the file type(s) inside:", "command": "file -z {{foo.zip}}"}, {"task": "Allow file to work with special or device files:", "command": "file -s {{path/to/file}}"}, {"task": "Don't stop at first file type match; keep going until the end of the file:", "command": "file -k {{path/to/file}}"}, {"task": "Determine the MIME encoding type of a file:", "command": "file -i {{path/to/file}}"}]}
{"command": "fin", "tasks": [{"task": "Start the project in the current directory:", "command": "fin project start"}, {"task": "Stop the project in the current directory:", "command": "fin project stop"}, {"task": "Open a shell into a specific container:", "command": "fin bash {{container_name}}"}, {"task": "Display logs of a specific container:", "command": "fin logs {{container_name}}"}, {"task": "Display logs of a specific container and follow the log:", "command": "fin logs -f {{container_name}}"}]}
{"command": "find", "tasks": [{"task": "Find files by extension:", "command": "find {{root_path}} -name '{{*.ext}}'"}, {"task": "Find files matching multiple path/name patterns:", "command": "find {{root_path}} -path '{{**/path/**/*.ext}}' -or -name '{{*pattern*}}'"}, {"task": "Find directories matching a given name, in case-insensitive mode:", "command": "find {{root_path}} -type d -iname '{{*lib*}}'"}, {"task": "Find files matching a given pattern, excluding specific paths:", "command": "find {{root_path}} -name '{{*.py}}' -not -path '{{*/site-packages/*}}'"}, {"task": "Find files matching a given size range, limiting the recursive depth to \"1\":", "command": "find {{root_path}} -maxdepth 1 -size {{+500k}} -size {{-10M}}"}, {"task": "Run a command for each file (use `{}` within the command to access the filename):", "command": "find {{root_path}} -name '{{*.ext}}' -exec {{wc -l {} }}\\;"}, {"task": "Find files modified in the last 7 days:", "command": "find {{root_path}} -daystart -mtime -{{7}}"}, {"task": "Find empty (0 byte) files and delete them:", "command": "find {{root_path}} -type {{f}} -empty -delete"}]}
{"command": "finger", "tasks": [{"task": "Display information about currently logged in users:", "command": "finger"}, {"task": "Display information about a specific user:", "command": "finger {{username}}"}, {"task": "Display the user's login name, real name, terminal name, and other information:", "command": "finger -s"}, {"task": "Produce multiline output format displaying same information as `-s` as well as user's home directory, home phone number, login shell, mail status, etc.:", "command": "finger -l"}, {"task": "Prevent matching against user's names and only use login names:", "command": "finger -m"}]}
{"command": "fio", "tasks": [{"task": "Test random reads:", "command": "sudo fio --filename={{path/to/file}} --direct=1 --rw=randread --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1 --readonly"}, {"task": "Test sequential reads:", "command": "sudo fio --filename={{path/to/file}} --direct=1 --rw=read --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1 --readonly"}, {"task": "Test random read/write:", "command": "sudo fio --filename={{path/to/file}} --size=500GB --direct=1 --rw=randrw --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1"}, {"task": "Test with parameters from a job file:", "command": "sudo fio {{path/to/job_file}}"}, {"task": "Convert a specific job file to command-line options:", "command": "fio --showcmd {{path/to/job_file}}"}]}
{"command": "firebase", "tasks": [{"task": "Log in to <https://console.firebase.google.com>:", "command": "firebase login"}, {"task": "List existing Firebase projects:", "command": "firebase projects:list"}, {"task": "Start an interactive wizard to create a Firebase project in the current directory:", "command": "firebase init"}, {"task": "Deploy code and assets to the current Firebase project:", "command": "firebase deploy"}, {"task": "Start a local server to statically host the current Firebase project's assets:", "command": "firebase serve"}, {"task": "Start an interactive wizard to open one of many links of the current Firebase project in the default web browser:", "command": "firebase open"}]}
{"command": "firefox", "tasks": [{"task": "Launch Firefox and open a web page:", "command": "firefox {{https://www.duckduckgo.com}}"}, {"task": "Open a new window:", "command": "firefox --new-window {{https://www.duckduckgo.com}}"}, {"task": "Open a private (incognito) window:", "command": "firefox --private-window"}, {"task": "Search for \"wikipedia\" using the default search engine:", "command": "firefox --search \"{{wikipedia}}\""}, {"task": "Launch Firefox in safe mode, with all extensions disabled:", "command": "firefox --safe-mode"}, {"task": "Take a screenshot of a web page in headless mode:", "command": "firefox --headless --screenshot {{path/to/output_file.png}} {{https://example.com/}}"}, {"task": "Use a specific profile to allow multiple separate instances of Firefox to run at once:", "command": "firefox --profile {{path/to/directory}} {{https://example.com/}}"}, {"task": "Set Firefox as the default browser:", "command": "firefox --setDefaultBrowser"}]}
{"command": "fish", "tasks": [{"task": "Start an interactive shell session:", "command": "fish"}, {"task": "Start an interactive shell session without loading startup configs:", "command": "fish --no-config"}, {"task": "Execute specific commands:", "command": "fish --command \"{{echo 'fish is executed'}}\""}, {"task": "Execute a specific script:", "command": "fish {{path/to/script.fish}}"}, {"task": "Check a specific script for syntax errors:", "command": "fish --no-execute {{path/to/script.fish}}"}, {"task": "Execute specific commands from `stdin`:", "command": "{{echo \"echo 'fish is executed'\"}} | fish"}, {"task": "Start an interactive shell session in private mode, where the shell does not access old history or save new history:", "command": "fish --private"}, {"task": "Define and export an environmental variable that persists across shell restarts (builtin):", "command": "set --universal --export {{variable_name}} {{variable_value}}"}]}
{"command": "fisher", "tasks": [{"task": "Install one or more plugins:", "command": "fisher {{plugin1}} {{plugin2}}"}, {"task": "Install a plugin from a GitHub gist:", "command": "fisher {{gist_url}}"}, {"task": "Edit 'fishfile' manually with your favorite editor and install multiple plugins:", "command": "{{editor}} ~/.config/fish/fishfile; fisher"}, {"task": "List installed plugins:", "command": "fisher ls"}, {"task": "Update plugins:", "command": "fisher update"}, {"task": "Remove one or more plugins:", "command": "fisher remove {{plugin1}} {{plugin2}}"}]}
{"command": "fkill", "tasks": [{"task": "Run without arguments to use the interactive interface:", "command": "fkill"}, {"task": "Kill the process by PID, name or port:", "command": "fkill {{pid|name|:port}}"}]}
{"command": "flac", "tasks": [{"task": "Encode a WAV file to FLAC (this will create a FLAC file in the same location as the WAV file):", "command": "flac {{path/to/file.wav}}"}, {"task": "Encode a WAV file to FLAC, specifying the output file:", "command": "flac -o {{path/to/output.flac}} {{path/to/file.wav}}"}, {"task": "Decode a FLAC file to WAV, specifying the output file:", "command": "flac -d -o {{path/to/output.wav}} {{path/to/file.flac}}"}, {"task": "Test a FLAC file for the correct encoding:", "command": "flac -t {{path/to/file.flac}}"}]}
{"command": "flake8", "tasks": [{"task": "Lint a file or directory recursively:", "command": "flake8 {{path/to/file_or_directory}}"}, {"task": "Lint a file or directory recursively and show the line on which each error occurred:", "command": "flake8 --show-source {{path/to/file_or_directory}}"}, {"task": "Lint a file or directory recursively and ignore a list of rules. (All available rules can be found at flake8rules.com):", "command": "flake8 --ignore {{rule1,rule2}} {{path/to/file_or_directory}}"}, {"task": "Lint a file or directory recursively but exclude files matching the given globs or substrings:", "command": "flake8 --exclude {{substring1,glob2}} {{path/to/file_or_directory}}"}]}
{"command": "flarectl", "tasks": [{"task": "Block a specific IP:", "command": "flarectl firewall rules create --zone=\"{{example.com}}\" --value=\"{{8.8.8.8}}\" --mode=\"{{block}}\" --notes=\"{{Block bad actor}}\""}, {"task": "Add a DNS record:", "command": "flarectl dns create --zone=\"{{example.com}}\" --name=\"{{app}}\" --type=\"{{CNAME}}\" --content=\"{{myapp.herokuapp.com}}\" --proxy"}, {"task": "List all Cloudflare IPv4/IPv6 ranges:", "command": "flarectl ips --ip-type {{ipv4|ipv6|all}}"}, {"task": "Create many new Cloudflare zones automatically with names from `domains.txt`:", "command": "for domain in $(cat {{domains.txt}}); do flarectl zone info --zone=$domain; done"}, {"task": "List all firewall rules:", "command": "flarectl firewall rules list"}]}
{"command": "flask", "tasks": [{"task": "Run a development server:", "command": "flask run"}, {"task": "Show the routes for the app:", "command": "flask routes"}, {"task": "Run a Python interactive shell in the app's context:", "command": "flask shell"}]}
{"command": "flex", "tasks": [{"task": "Generate an analyzer from a flex file:", "command": "flex {{analyzer.l}}"}, {"task": "Specify the output file:", "command": "flex --outfile {{analyzer.c}} {{analyzer.l}}"}, {"task": "Compile a C file generated by flex:", "command": "cc {{path/to/lex.yy.c}} --output {{executable}}"}]}
{"command": "flips", "tasks": [{"task": "Start Flips to create and apply patches interactively:", "command": "flips"}, {"task": "Apply a patch and create a new ROM file:", "command": "flips --apply {{patch.bps}} {{rom.smc}} {{hack.smc}}"}, {"task": "Create a patch from two ROMs:", "command": "flips --create {{rom.smc}} {{hack.smc}} {{patch.bps}}"}]}
{"command": "flite", "tasks": [{"task": "List all available voices:", "command": "flite -lv"}, {"task": "Convert a text string to speech:", "command": "flite -t \"{{string}}\""}, {"task": "Convert the contents of a file to speech:", "command": "flite -f {{path/to/file.txt}}"}, {"task": "Specify which voice to use:", "command": "flite -voice {{file://path/to/filename.flitevox|url}}"}, {"task": "Store output into a wav file:", "command": "flite -voice {{file://path/to/filename.flitevox|url}} -f {{path/to/file.txt}} -o {{output.wav}}"}, {"task": "Display version:", "command": "flite --version"}]}
{"command": "flow", "tasks": [{"task": "Run a flow check:", "command": "flow"}, {"task": "Check which files are being checked by flow:", "command": "flow ls"}, {"task": "Run a type coverage check on all files in a directory:", "command": "flow batch-coverage --show-all --strip-root {{path/to/directory}}"}, {"task": "Display line-by-line type coverage stats:", "command": "flow coverage --color {{path/to/file.jsx}}"}]}
{"command": "fls", "tasks": [{"task": "Build a recursive fls list over a device, output paths will start with C:", "command": "fls -r -m {{C:}} {{/dev/loop1p1}}"}, {"task": "Analyze a single partition, providing the sector offset at which the filesystem starts in the image:", "command": "fls -r -m {{C:}} -o {{sector}} {{path/to/image_file}}"}, {"task": "Analyze a single partition, providing the timezone of the original system:", "command": "fls -r -m {{C:}} -z {{timezone}} {{/dev/loop1p1}}"}]}
{"command": "flutter", "tasks": [{"task": "Initialize a new Flutter project in a directory of the same name:", "command": "flutter create {{project_name}}"}, {"task": "Check if all external tools are correctly installed:", "command": "flutter doctor"}, {"task": "List or change Flutter channel:", "command": "flutter channel {{stable|beta|dev|master}}"}, {"task": "Run Flutter on all started emulators and connected devices:", "command": "flutter run -d all"}, {"task": "Download all packages specified in `pubspec.yaml`:", "command": "flutter pub get"}, {"task": "Run tests in a terminal from the root of the project:", "command": "flutter test {{test/example_test.dart}}"}, {"task": "Build a release APK targeting most modern smartphones:", "command": "flutter build apk --target-platform {{android-arm}},{{android-arm64}}"}, {"task": "Display help about a specific command:", "command": "flutter help {{command}}"}]}
{"command": "fluxctl", "tasks": [{"task": "List workloads currently running in the cluster on specific namespace:", "command": "fluxctl --k8s-fwd-ns={{namespace}} list-workloads"}, {"task": "Show deployed and available images:", "command": "fluxctl list-images"}, {"task": "Synchronize the cluster with the git repository:", "command": "fluxctl sync"}, {"task": "Turn on automatic deployment for a workload:", "command": "fluxctl automate"}]}
{"command": "fly", "tasks": [{"task": "Authenticate with and save concourse target:", "command": "fly --target {{target_name}} login --team-name {{team_name}} -c {{https://ci.example.com}}"}, {"task": "List targets:", "command": "fly targets"}, {"task": "List pipelines:", "command": "fly -t {{target_name}} pipelines"}, {"task": "Upload or update a pipeline:", "command": "fly -t {{target_name}} set-pipeline --config {{pipeline.yml}} --pipeline {{pipeline_name}}"}, {"task": "Unpause pipeline:", "command": "fly -t {{target_name}} unpause-pipeline --pipeline {{pipeline_name}}"}, {"task": "Show pipeline configuration:", "command": "fly -t {{target_name}} get-pipeline --pipeline {{pipeline_name}}"}, {"task": "Update local copy of fly:", "command": "fly -t {{target_name}} sync"}, {"task": "Destroy pipeline:", "command": "fly -t {{target_name}} destroy-pipeline --pipeline {{pipeline_name}}"}]}
{"command": "flyctl", "tasks": [{"task": "Sign into a Fly account:", "command": "flyctl auth login"}, {"task": "Launch an application from a specific Dockerfile (the default path is the current working directory):", "command": "flyctl launch --dockerfile {{path/to/dockerfile}}"}, {"task": "Open the current deployed application in the default web browser:", "command": "flyctl open"}, {"task": "Deploy the Fly applications from a specific Dockerfile:", "command": "flyctl deploy --dockerfile {{path/to/dockerfile}}"}, {"task": "Open the Fly Web UI for the current application in a web browser:", "command": "flyctl dashboard"}, {"task": "List all applications in the logged-in Fly account:", "command": "flyctl apps list"}, {"task": "View the status of a specific running application:", "command": "flyctl status --app {{app_name}}"}, {"task": "Show version information:", "command": "flyctl version"}]}
{"command": "fmt", "tasks": [{"task": "Reformat a file:", "command": "fmt {{path/to/file}}"}, {"task": "Reformat a file producing output lines of (at most) `n` characters:", "command": "fmt -w {{n}} {{path/to/file}}"}, {"task": "Reformat a file without joining lines shorter than the given width together:", "command": "fmt -s {{path/to/file}}"}, {"task": "Reformat a file with uniform spacing (1 space between words and 2 spaces between paragraphs):", "command": "fmt -u {{path/to/file}}"}]}
{"command": "fnm", "tasks": [{"task": "Install a specific version of Node.js:", "command": "fnm install {{node_version}}"}, {"task": "List all available Node.js versions and highlight the default one:", "command": "fnm list"}, {"task": "Use a specific version of Node.js in the current shell:", "command": "fnm use {{node_version}}"}, {"task": "Set the default Node.js version:", "command": "fnm default {{node_version}}"}, {"task": "Uninstall a given Node.js version:", "command": "fnm uninstall {{node_version}}"}]}
{"command": "fold", "tasks": [{"task": "Wrap each line to default width (80 characters):", "command": "fold {{path/to/file}}"}, {"task": "Wrap each line to width \"30\":", "command": "fold -w30 {{path/to/file}}"}, {"task": "Wrap each line to width \"5\" and break the line at spaces (puts each space separated word in a new line, words with length > 5 are wrapped):", "command": "fold -w5 -s {{path/to/file}}"}]}
{"command": "for", "tasks": [{"task": "Execute the given commands for each of the specified items:", "command": "for {{variable}} in {{item1 item2 ...}}; do {{echo \"Loop is executed\"}}; done"}, {"task": "Iterate over a given range of numbers:", "command": "for {{variable}} in {{{from}}..{{to}}..{{step}}}; do {{echo \"Loop is executed\"}}; done"}, {"task": "Iterate over a given list of files:", "command": "for {{variable}} in {{path/to/file1 path/to/file2 ...}}; do {{echo \"Loop is executed\"}}; done"}, {"task": "Iterate over a given list of directories:", "command": "for {{variable}} in {{path/to/directory1/ path/to/directory2/ ...}}; do {{echo \"Loop is executed\"}}; done"}, {"task": "Perform a given command in every directory:", "command": "for {{variable}} in */; do (cd \"${{variable}}\" || continue; {{echo \"Loop is executed\"}}) done"}]}
{"command": "forever", "tasks": [{"task": "Start running a file forever (as a daemon):", "command": "forever {{script}}"}, {"task": "List running \"forever\" processes (along with IDs and other details of \"forever\" processes):", "command": "forever list"}, {"task": "Stop a running \"forever\" process:", "command": "forever stop {{ID|pid|script}}"}]}
{"command": "fortune", "tasks": [{"task": "Print a quotation:", "command": "fortune"}, {"task": "Print an offensive quotation:", "command": "fortune -o"}, {"task": "Print a long quotation:", "command": "fortune -l"}, {"task": "Print a short quotation:", "command": "fortune -s"}, {"task": "List the available quotation database files:", "command": "fortune -f"}, {"task": "Print a quotation from one of the database files listed by `fortune -f`:", "command": "fortune {{path/to/file}}"}]}
{"command": "fossa", "tasks": [{"task": "Initialize a `.fossa.yml` configuration file:", "command": "fossa init"}, {"task": "Run a default project build:", "command": "fossa build"}, {"task": "Analyze built dependencies:", "command": "fossa analyze"}, {"task": "Generate reports:", "command": "fossa report"}, {"task": "Test current revision against the FOSSA scan status and exit with errors if issues are found:", "command": "fossa test"}]}
{"command": "fossil add", "tasks": [{"task": "Put a file or directory under version control, so it will be in the current checkout:", "command": "fossil add {{path/to/file_or_directory}}"}, {"task": "Remove all added files from the current checkout:", "command": "fossil add --reset"}]}
{"command": "fossil ci", "tasks": [{"task": "View documentation for the original command:", "command": "tldr fossil-commit"}]}
{"command": "fossil commit", "tasks": [{"task": "Create a new version containing all the changes in the current checkout; user will be prompted for a comment:", "command": "fossil commit"}, {"task": "Create a new version containing all the changes in the current checkout, using the specified comment:", "command": "fossil commit --comment \"{{comment}}\""}, {"task": "Create a new version containing all the changes in the current checkout with a comment read from a specific file:", "command": "fossil commit --message-file {{path/to/commit_message_file}}"}, {"task": "Create a new version containing changes from the specified files; user will be prompted for a comment:", "command": "fossil commit {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "fossil delete", "tasks": [{"task": "View documentation for the original command:", "command": "tldr fossil rm"}]}
{"command": "fossil forget", "tasks": [{"task": "View documentation for the original command:", "command": "tldr fossil rm"}]}
{"command": "fossil init", "tasks": [{"task": "Create a new repository in a named file:", "command": "fossil init {{path/to/filename}}"}]}
{"command": "fossil new", "tasks": [{"task": "View documentation for the original command:", "command": "tldr fossil-init"}]}
{"command": "fossil rm", "tasks": [{"task": "Remove a file or directory from Fossil version control:", "command": "fossil rm {{path/to/file_or_directory}}"}, {"task": "Remove a file or directory from Fossil version control, and also delete it from the disk:", "command": "fossil rm --hard {{path/to/file_or_directory}}"}, {"task": "Re-add all previously removed and uncommitted files to Fossil version control:", "command": "fossil rm --reset"}]}
{"command": "fossil", "tasks": [{"task": "Check the Fossil version:", "command": "fossil version"}, {"task": "Show general help (list available subcommands):", "command": "fossil help"}, {"task": "Show help on a Fossil subcommand (like `add`, `commit`, etc.):", "command": "fossil help {{subcommand}}"}, {"task": "Execute a Fossil subcommand:", "command": "fossil {{subcommand}}"}]}
{"command": "fping", "tasks": [{"task": "List alive hosts within a subnet generated from a netmask:", "command": "fping -a -g 192.168.1.0/24"}, {"task": "List alive hosts within a subnet generated from an IP range:", "command": "fping -a -g 192.168.1.1 192.168.1.254"}, {"task": "List unreachable hosts within a subnet generated from a netmask:", "command": "fping -u -g 192.168.1.0/24"}]}
{"command": "freshclam", "tasks": [{"task": "Update virus definitions:", "command": "freshclam"}]}
{"command": "from", "tasks": [{"task": "List mail:", "command": "from"}, {"task": "Display the number of messages stored:", "command": "from --count"}, {"task": "List mail in the specified mailbox directory:", "command": "MAIL={{path/to/mailbox}} from"}, {"task": "Print the mail from the specified address:", "command": "from --sender={{me@example.com}}"}]}
{"command": "fselect", "tasks": [{"task": "Select full path and size from temporary or config files in a given directory:", "command": "fselect size, path from {{path/to/directory}} where name = {{'*.cfg'}} or name = {{'*.tmp'}}"}, {"task": "Find square images:", "command": "fselect path from {{path/to/directory}} where width = height"}, {"task": "Find old-school rap 320kbps MP3 files:", "command": "fselect path from {{path/to/directory}} where genre = {{Rap}} and bitrate = {{320}} and mp3_year lt {{2000}}"}, {"task": "Select only the first 5 results and output as JSON:", "command": "fselect size, path from {{path/to/directory}} limit {{5}} into json"}, {"task": "Use SQL aggregate functions to calculate minimum, maximum and average size of files in a directory:", "command": "fselect \"{{MIN(size), MAX(size), AVG(size), SUM(size), COUNT(*)}} from {{path/to/directory}}\""}]}
{"command": "fswatch", "tasks": [{"task": "Run a Bash command on file creation, update or deletion:", "command": "fswatch {{path/to/file}} | xargs -n 1 {{bash_command}}"}, {"task": "Watch one or more files and/or directories:", "command": "fswatch {{path/to/file}} {{path/to/directory}} {{path/to/another_directory/**/*.js}} | xargs -n 1 {{bash_command}}"}, {"task": "Print the absolute paths of the changed files:", "command": "fswatch {{path/to/directory}} | xargs -n 1 -I {} echo {}"}, {"task": "Filter by event type:", "command": "fswatch --event {{Updated|Deleted|Created}} {{path/to/directory}} | xargs -n 1 {{bash_command}}"}]}
{"command": "fswebcam", "tasks": [{"task": "Take a picture:", "command": "fswebcam {{filename}}"}, {"task": "Take a picture with custom resolution:", "command": "fswebcam -r {{width}}x{{height}} {{filename}}"}, {"task": "Take a picture from selected device(Default is `/dev/video0`):", "command": "fswebcam -d {{device}} {{filename}}"}, {"task": "Take a picture with timestamp(timestamp string is formatted by strftime):", "command": "fswebcam --timestamp {{timestamp}} {{filename}}"}]}
{"command": "ftp", "tasks": [{"task": "Connect to an FTP server:", "command": "ftp {{ftp.example.com}}"}, {"task": "Connect to an FTP server specifying its IP address and port:", "command": "ftp {{ip_address}} {{port}}"}, {"task": "Switch to binary transfer mode (graphics, compressed files, etc):", "command": "binary"}, {"task": "Transfer multiple files without prompting for confirmation on every file:", "command": "prompt off"}, {"task": "Download multiple files (glob expression):", "command": "mget {{*.png}}"}, {"task": "Upload multiple files (glob expression):", "command": "mput {{*.zip}}"}, {"task": "Delete multiple files on the remote server:", "command": "mdelete {{*.txt}}"}, {"task": "Rename a file on the remote server:", "command": "rename {{original_filename}} {{new_filename}}"}]}
{"command": "fuck", "tasks": [{"task": "Set the `fuck` alias to `thefuck` tool:", "command": "eval \"$(thefuck --alias)\""}, {"task": "Try to match a rule for the previous command:", "command": "fuck"}, {"task": "Confirm the first choice immediately (correct argument depends on level of annoyance):", "command": "fuck --{{yes|yeah|hard}}"}]}
{"command": "func", "tasks": [{"task": "Create a new functions project:", "command": "func init {{project}}"}, {"task": "Create a new function:", "command": "func new"}, {"task": "Run functions locally:", "command": "func start"}, {"task": "Publish your code to a function app in Azure:", "command": "func azure functionapp publish {{function}}"}, {"task": "Download all settings from an existing function app:", "command": "func azure functionapp fetch-app-settings {{function}}"}, {"task": "Get the connection string for a specific storage account:", "command": "func azure storage fetch-connection-string {{storage_account}}"}]}
{"command": "funzip", "tasks": [{"task": "Print the content of the first member in a `.zip` archive:", "command": "funzip {{path/to/archive.zip}}"}, {"task": "Print the content in a `.gz` archive:", "command": "funzip {{path/to/archive.gz}}"}, {"task": "Decrypt a `.zip` or `.gz` archive and print the content:", "command": "funzip -password {{password}} {{path/to/archive}}"}]}
{"command": "fusermount", "tasks": [{"task": "Unmount a FUSE filesystem:", "command": "fusermount -u {{path/to/mount_point}}"}, {"task": "Unmount a FUSE filesystem as soon as it becomes unused:", "command": "fusermount -z {{path/to/mount_point}}"}, {"task": "Display version:", "command": "fusermount --version"}]}
{"command": "fzf", "tasks": [{"task": "Start `fzf` on all files in the specified directory:", "command": "find {{path/to/directory}} -type f | fzf"}, {"task": "Start `fzf` for running processes:", "command": "ps aux | fzf"}, {"task": "Select multiple files with `Shift + Tab` and write to a file:", "command": "find {{path/to/directory}} -type f | fzf --multi > {{path/to/file}}"}, {"task": "Start `fzf` with a specified query:", "command": "fzf --query \"{{query}}\""}, {"task": "Start `fzf` on entries that start with core and end with either go, rb, or py:", "command": "fzf --query \"^core go$ | rb$ | py$\""}, {"task": "Start `fzf` on entries that not match pyc and match exactly travis:", "command": "fzf --query \"!pyc 'travis\""}]}
{"command": "g++", "tasks": [{"task": "Compile a source code file into an executable binary:", "command": "g++ {{path/to/source.cpp}} -o {{path/to/output_executable}}"}, {"task": "Display common warnings:", "command": "g++ {{path/to/source.cpp}} -Wall -o {{path/to/output_executable}}"}, {"task": "Choose a language standard to compile for (C++98/C++11/C++14/C++17):", "command": "g++ {{path/to/source.cpp}} -std={{c++98|c++11|c++14|c++17}} -o {{path/to/output_executable}}"}, {"task": "Include libraries located at a different path than the source file:", "command": "g++ {{path/to/source.cpp}} -o {{path/to/output_executable}} -I{{path/to/header}} -L{{path/to/library}} -l{{library_name}}"}, {"task": "Compile and link multiple source code files into an executable binary:", "command": "g++ -c {{path/to/source_1.cpp path/to/source_2.cpp ...}} && g++ -o {{path/to/output_executable}} {{path/to/source_1.o path/to/source_2.o ...}}"}, {"task": "Display version:", "command": "g++ --version"}]}
{"command": "gacutil", "tasks": [{"task": "Install the specified assembly into GAC:", "command": "gacutil -i {{path/to/assembly.dll}}"}, {"task": "Uninstall the specified assembly from GAC:", "command": "gacutil -i {{assembly_display_name}}"}, {"task": "Print the content of GAC:", "command": "gacutil -l"}]}
{"command": "gallery-dl", "tasks": [{"task": "Download images from the specified URL:", "command": "gallery-dl \"{{url}}\""}, {"task": "Retrieve pre-existing cookies from your web browser (useful for sites that require login):", "command": "gallery-dl --cookies-from-browser {{browser}} \"{{url}}\""}, {"task": "Get the direct URL of an image from a site supporting authentication with username and password:", "command": "gallery-dl --get-urls --username {{username}} --password {{password}} \"{{url}}\""}, {"task": "Filter manga chapters by chapter number and language:", "command": "gallery-dl --chapter-filter \"{{10 <= chapter < 20}}\" --option \"lang={{language_code}}\" \"{{url}}\""}]}
{"command": "ganache-cli", "tasks": [{"task": "Run Ganache:", "command": "ganache-cli"}, {"task": "Run Ganache with a specific number of accounts:", "command": "ganache-cli --accounts={{number_of_accounts}}"}, {"task": "Run Ganache and lock available accounts by default:", "command": "ganache-cli --secure"}, {"task": "Run Ganache server and unlock specific accounts:", "command": "ganache-cli --secure --unlock \"{{account_private_key1}}\" --unlock \"{{account_private_key2}}\""}, {"task": "Run Ganache with a specific account and balance:", "command": "ganache-cli --account=\"{{account_private_key}},{{account_balance}}\""}, {"task": "Run Ganache with accounts with a default balance:", "command": "ganache-cli --defaultBalanceEther={{default_balance}}"}, {"task": "Run Ganache and log all requests to `stdout`:", "command": "ganache-cli --verbose"}]}
{"command": "gatsby", "tasks": [{"task": "Create a new site:", "command": "gatsby new {{site_name}}"}, {"task": "Create a new site with a Gatsby 'starter':", "command": "gatsby new {{site_name}} {{url_of_starter_github_repo}}"}, {"task": "Start a live-reloading local development server:", "command": "gatsby develop"}, {"task": "Perform a production build and generate static HTML:", "command": "gatsby build"}, {"task": "Start a local server which serves the production build:", "command": "gatsby serve"}]}
{"command": "gcal", "tasks": [{"task": "Display calendar for the current month:", "command": "gcal"}, {"task": "Display calendar for the month of February of the year 2010:", "command": "gcal {{2}} {{2010}}"}, {"task": "Provide calendar sheet with week numbers:", "command": "gcal --with-week-number"}, {"task": "Change starting day of week to 1st day of the week (Monday):", "command": "gcal --starting-day={{1}}"}, {"task": "Display the previous, current and next month surrounding today:", "command": "gcal ."}]}
{"command": "gcalcli", "tasks": [{"task": "List your events for all your calendars over the next 7 days:", "command": "gcalcli agenda"}, {"task": "Show events starting from or between specific dates (also takes relative dates e.g. \"tomorrow\"):", "command": "gcalcli agenda {{mm/dd}} [{{mm/dd}}]"}, {"task": "List events from a specific calendar:", "command": "gcalcli --calendar {{calendar_name}} agenda"}, {"task": "Display an ASCII calendar of events by week:", "command": "gcalcli calw"}, {"task": "Display an ASCII calendar of events for a month:", "command": "gcalcli calm"}, {"task": "Quick-add an event to your calendar:", "command": "gcalcli --calendar {{calendar_name}} quick \"{{mm/dd}} {{HH:MM}} {{event_name}}\""}, {"task": "Add an event to calendar. Triggers interactive prompt:", "command": "gcalcli --calendar \"{{calendar_name}}\" add"}]}
{"command": "gcc", "tasks": [{"task": "Compile multiple source files into an executable:", "command": "gcc {{path/to/source1.c path/to/source2.c ...}} -o {{path/to/output_executable}}"}, {"task": "Show common warnings, debug symbols in output, and optimize without affecting debugging:", "command": "gcc {{path/to/source.c}} -Wall -g -Og -o {{path/to/output_executable}}"}, {"task": "Include libraries from a different path:", "command": "gcc {{path/to/source.c}} -o {{path/to/output_executable}} -I{{path/to/header}} -L{{path/to/library}} -l{{library_name}}"}, {"task": "Compile source code into Assembler instructions:", "command": "gcc -S {{path/to/source.c}}"}, {"task": "Compile source code into an object file without linking:", "command": "gcc -c {{path/to/source.c}}"}]}
{"command": "gcloud", "tasks": [{"task": "List all properties in one's active configuration:", "command": "gcloud config list"}, {"task": "Log in to Google account:", "command": "gcloud auth login"}, {"task": "Set the active project:", "command": "gcloud config set project {{project_name}}"}, {"task": "SSH into a virtual machine instance:", "command": "gcloud compute ssh {{user}}@{{instance}} "}, {"task": "Display all Google Compute Engine instances in a project. Instances from all zones are listed by default:", "command": "gcloud compute instances list"}, {"task": "Update a kubeconfig file with the appropriate credentials to point kubectl to a specific cluster in Google Kubernetes Engine:", "command": "gcloud container clusters get-credentials {{cluster_name}}"}, {"task": "Update all gcloud CLI components:", "command": "gcloud components update"}, {"task": "Show help for a given command:", "command": "gcloud help {{command}}"}]}
{"command": "gcpdiag", "tasks": [{"task": "Run `gcpdiag` on your project, returning all rules:", "command": "gcpdiag lint --project={{gcp_project_id}}"}, {"task": "Hide rules that are ok:", "command": "gcpdiag lint --project={{gcp_project_id}} --hide-ok"}, {"task": "Authenticate using a service account private key file:", "command": "gcpdiag lint --project={{gcp_project_id}} --auth-key {{path/to/private_key}}"}, {"task": "Search logs and metrics from a number of days back (default: 3 days):", "command": "gcpdiag lint --project={{gcp_project_id}} --within-days {{number}}"}, {"task": "Display help:", "command": "gcpdiag lint --help"}]}
{"command": "gdal2tiles.py", "tasks": [{"task": "Generate TMS tiles for the zoom levels 2-5 of a raster dataset:", "command": "gdal2tiles.py --zoom={{2-5}} {{path/to/input.tif}} {{path/to/output_directory}}"}, {"task": "Generate XYZ tiles for the zoom levels 2-5 of a raster dataset:", "command": "gdal2tiles.py --zoom={{2-5}} --xyz {{path/to/input.tif}} {{path/to/output_directory}}"}]}
{"command": "gdal_contour", "tasks": [{"task": "Create a vector dataset with contour lines spread over an 100-meter [i]nterval while [a]ttributing the elevation property as \"ele\":", "command": "gdal_contour -a {{ele}} -i {{100.0}} {{path/to/input.tif}} {{path/to/output.gpkg}}"}, {"task": "Create a vector dataset with [p]olygons spread over an 100-meter [i]nterval:", "command": "gdal_contour -i {{100.0}} -p {{path/to/input.tif}} {{path/to/output.gpkg}}"}]}
{"command": "gdal_translate", "tasks": [{"task": "Convert a raster dataset to JPEG format:", "command": "gdal_translate -of {{JPEG}} {{path/to/input.tif}} {{path/to/output.jpeg}}"}, {"task": "Assign a projection to a raster dataset:", "command": "gdal_translate -a_srs {{EPSG:4326}} {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Reduce the size of a raster dataset to a specific fraction:", "command": "gdal_translate -outsize {{40%}} {{40%}} {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Convert a GeoTiff to a Cloud Optimized GeoTiff:", "command": "gdal_translate {{path/to/input.tif}} {{path/to/output.tif}} -of COG -co COMPRESS=LZW"}]}
{"command": "gdaladdo", "tasks": [{"task": "Build overview images of a raster dataset using the \"average\" [r]esampling method:", "command": "gdaladdo -r average {{path/to/input.tif}}"}]}
{"command": "gdalbuildvrt", "tasks": [{"task": "Make a virtual mosaic from all TIFF files contained in a directory:", "command": "gdalbuildvrt {{path/to/output.vrt}} {{path/to/input_directory/*.tif}}"}, {"task": "Make a virtual mosaic from files whose name is specified in a text file:", "command": "gdalbuildvrt -input_file_list {{path/to/list.txt}} {{path/to/output.vrt}}"}, {"task": "Make an RGB virtual mosaic from 3 single-band input files:", "command": "gdalbuildvrt -separate {{path/to/rgb.vrt}} {{path/to/red.tif}} {{path/to/green.tif}} {{path/to/blue.tif}}"}, {"task": "Make a virtual mosaic with blue background color (RGB: 0 0 255):", "command": "gdalbuildvrt -hidenodata -vrtnodata \"{{0 0 255}}\" {{path/to/output.vrt}} {{path/to/input_directory/*.tif}}"}]}
{"command": "gdaldem", "tasks": [{"task": "Compute the hillshade of a DEM:", "command": "gdaldem hillshade {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Compute the slope of a DEM:", "command": "gdaldem slope {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Compute the aspect of a DEM:", "command": "gdaldem aspect {{path/to/input.tif}} {{path/to/output.tif}}"}]}
{"command": "gdalinfo", "tasks": [{"task": "List all supported raster formats:", "command": "gdalinfo --formats"}, {"task": "List information about a specific raster dataset:", "command": "gdalinfo {{path/to/input.tif}}"}, {"task": "List information about a specific raster dataset in JSON format:", "command": "gdalinfo -json {{path/to/input.tif}}"}, {"task": "Show histogram values of a specific raster dataset:", "command": "gdalinfo -hist {{path/to/input.tif}}"}, {"task": "List information about a Web Map Service (WMS):", "command": "gdalinfo WMS:{{https://services.meggsimum.de/geoserver/ows}}"}, {"task": "List information about a specific dataset of a Web Map Service (WMS):", "command": "gdalinfo WMS:{{https://services.meggsimum.de/geoserver/ows}} -sd {{4}}"}]}
{"command": "gdalwarp", "tasks": [{"task": "Reproject a raster dataset:", "command": "gdalwarp -t_srs {{EPSG:4326}} {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Crop a raster dataset by using specific coordinates:", "command": "gdalwarp -te {{min_x}} {{min_y}} {{max_x}} {{max_y}} -te_srs {{EPSG:4326}} {{path/to/input.tif}} {{path/to/output.tif}}"}, {"task": "Crop a raster dataset using a vector layer:", "command": "gdalwarp -cutline {{path/to/area_to_cut.geojson}} -crop_to_cutline {{path/to/input.tif}} {{path/to/output.tif}}"}]}
{"command": "gdb", "tasks": [{"task": "Debug an executable:", "command": "gdb {{executable}}"}, {"task": "Attach a process to gdb:", "command": "gdb -p {{procID}}"}, {"task": "Debug with a core file:", "command": "gdb -c {{core}} {{executable}}"}, {"task": "Execute given GDB commands upon start:", "command": "gdb -ex \"{{commands}}\" {{executable}}"}, {"task": "Start `gdb` and pass arguments to the executable:", "command": "gdb --args {{executable}} {{argument1}} {{argument2}}"}]}
{"command": "gdrive", "tasks": [{"task": "Upload a local path to the parent folder with the specified ID:", "command": "gdrive upload -p {{id}} {{path/to/file_or_folder}}"}, {"task": "Download file or directory by ID to current directory:", "command": "gdrive download {{id}}"}, {"task": "Download to a given local path by its ID:", "command": "gdrive download --path {{path/to/folder}} {{id}}"}, {"task": "Create a new revision of an ID using a given file or folder:", "command": "gdrive update {{id}} {{path/to/file_or_folder}}"}]}
{"command": "gdu", "tasks": [{"task": "Interactively show the disk usage of the current directory:", "command": "gdu"}, {"task": "Interactively show the disk usage of a given directory:", "command": "gdu {{path/to/directory}}"}, {"task": "Interactively show the disk usage of all mounted disks:", "command": "gdu --show-disks"}, {"task": "Interactively show the disk usage of the current directory but ignore some sub-directories:", "command": "gdu --ignore-dirs {{path/to/directory1,path/to/directory2,...}}"}, {"task": "Ignore paths by regular expression:", "command": "gdu --ignore-dirs-pattern '{{.*[abc]+}}'"}, {"task": "Ignore hidden directories:", "command": "gdu --no-hidden"}, {"task": "Only print the result, do not enter interactive mode:", "command": "gdu --non-interactive {{path/to/directory}}"}, {"task": "Do not show the progress in non-interactive mode (useful in scripts):", "command": "gdu --no-progress {{path/to/directory}}"}]}
{"command": "gem", "tasks": [{"task": "Search for remote gem(s) and show all available versions:", "command": "gem search {{regular_expression}} --all"}, {"task": "Install the latest version of a gem:", "command": "gem install {{gem_name}}"}, {"task": "Install a specific version of a gem:", "command": "gem install {{gem_name}} --version {{1.0.0}}"}, {"task": "Install the latest matching (SemVer) version of a gem:", "command": "gem install {{gem_name}} --version '~> {{1.0}}'"}, {"task": "Update a gem:", "command": "gem update {{gem_name}}"}, {"task": "List all local gems:", "command": "gem list"}, {"task": "Uninstall a gem:", "command": "gem uninstall {{gem_name}}"}, {"task": "Uninstall a specific version of a gem:", "command": "gem uninstall {{gem_name}} --version {{1.0.0}}"}]}
{"command": "geth", "tasks": [{"task": "Connect to the main Ethereum network and automatically download the full node:", "command": "geth"}, {"task": "Connect to the Ropsten test network:", "command": "geth --testnet"}, {"task": "Create a new account:", "command": "geth account new"}, {"task": "Enable mining:", "command": "geth --mine"}]}
{"command": "gfortran", "tasks": [{"task": "Compile multiple source files into an executable:", "command": "gfortran {{path/to/source1.f90 path/to/source2.f90 ...}} -o {{path/to/output_executable}}"}, {"task": "Show common warnings, debug symbols in output, and optimize without affecting debugging:", "command": "gfortran {{path/to/source.f90}} -Wall -g -Og -o {{path/to/output_executable}}"}, {"task": "Include libraries from a different path:", "command": "gfortran {{path/to/source.f90}} -o {{path/to/output_executable}} -I{{path/to/mod_and_include}} -L{{path/to/library}} -l{{library_name}}"}, {"task": "Compile source code into Assembler instructions:", "command": "gfortran -S {{path/to/source.f90}}"}, {"task": "Compile source code into an object file without linking:", "command": "gfortran -c {{path/to/source.f90}}"}]}
{"command": "gh alias", "tasks": [{"task": "Display the subcommand help:", "command": "gh alias"}, {"task": "List all the aliases `gh` is configured to use:", "command": "gh alias list"}, {"task": "Create a `gh` subcommand alias:", "command": "gh alias set {{pv}} '{{pr view}}'"}, {"task": "Set a shell command as a `gh` subcommand:", "command": "gh alias set --shell {{alias_name}} {{command}}"}, {"task": "Delete a command shortcut:", "command": "gh alias delete {{alias_name}}"}]}
{"command": "gh api", "tasks": [{"task": "Display the subcommand help:", "command": "gh api --help"}, {"task": "Display the releases for the current repository in JSON format:", "command": "gh api repos/:owner/:repo/releases"}, {"task": "Create a reaction for a specific issue:", "command": "gh api --header {{Accept:application/vnd.github.squirrel-girl-preview+json}} --raw-field '{{content=+1}}' {{repos/:owner/:repo/issues/123/reactions}}"}, {"task": "Display the result of a GraphQL query in JSON format:", "command": "gh api graphql --field {{name=':repo'}} --raw-field '{{query}}'"}, {"task": "Send a request using a custom HTTP method:", "command": "gh api --method {{POST}} {{endpoint}}"}, {"task": "Include the HTTP response headers in the output:", "command": "gh api --include {{endpoint}}"}, {"task": "Do not print the response body:", "command": "gh api --silent {{endpoint}}"}, {"task": "Send a request to a specific GitHub Enterprise Server:", "command": "gh api --hostname {{github.example.com}} {{endpoint}}"}]}
{"command": "gh auth", "tasks": [{"task": "Log in with interactive prompt:", "command": "gh auth login"}, {"task": "Log in with a token from `stdin` (created in https://github.com/settings/tokens):", "command": "echo {{your_token}} | gh auth login --with-token"}, {"task": "Check if you are logged in:", "command": "gh auth status"}, {"task": "Log out:", "command": "gh auth logout"}, {"task": "Log in with a specific GitHub Enterprise Server:", "command": "gh auth login --hostname {{github.example.com}}"}, {"task": "Refresh the session to ensure authentication credentials have the correct minimum scopes (removes additional scopes requested previously):", "command": "gh auth refresh"}, {"task": "Expand the permission scopes:", "command": "gh auth refresh --scopes {{repo,admin:repo_hook,admin:org,admin:public_key,admin:org_hook,...}}"}]}
{"command": "gh browse", "tasks": [{"task": "Open the homepage of the current repository in the default web browser:", "command": "gh browse"}, {"task": "Open the homepage of a specific repository in the default web browser:", "command": "gh browse {{owner}}/{{repository}}"}, {"task": "Open the settings page of the current repository in the default web browser:", "command": "gh browse --settings"}, {"task": "Open the wiki of the current repository in the default web browser:", "command": "gh browse --wiki"}, {"task": "Open a specific issue or pull request in the web browser:", "command": "gh browse {{issue_number|pull_request_number}}"}, {"task": "Open a specific branch in the web browser:", "command": "gh browse --branch {{branch_name}}"}, {"task": "Open a specific file or directory of the current repository in the web browser:", "command": "gh browse {{path/to/file_or_directory}}"}, {"task": "Print the destination URL without open the web browser:", "command": "gh browse --no-browser"}]}
{"command": "gh codespace", "tasks": [{"task": "Create a codespace in GitHub interactively:", "command": "gh codespace create"}, {"task": "List all available codespaces:", "command": "gh codespace list"}, {"task": "Connect to a codespace via SSH interactively:", "command": "gh codespace ssh"}, {"task": "Transfer a specific file to a codespace interactively:", "command": "gh codespace cp {{path/to/source_file}} remote:{{path/to/remote_file}}"}, {"task": "List the ports of a codespace interactively:", "command": "gh codespace ports"}, {"task": "Display the logs from a codespace interactively:", "command": "gh codespace logs"}, {"task": "Delete a codespace interactively:", "command": "gh codespace delete"}, {"task": "Display help for a subcommand:", "command": "gh codespace {{code|cp|create|delete|edit|...}} --help"}]}
{"command": "gh completion", "tasks": [{"task": "Display the subcommand help:", "command": "gh completion"}, {"task": "Print a completion script:", "command": "gh completion --shell {{bash|zsh|fish|powershell}}"}, {"task": "Append the `gh` completion script to `~/.bashrc`:", "command": "gh completion --shell {{bash}} >> {{~/.bashrc}}"}, {"task": "Append the `gh` completion script to `~/.zshrc`:", "command": "gh completion --shell {{zsh}} >> {{~/.zshrc}}"}]}
{"command": "gh config", "tasks": [{"task": "Display what Git protocol is being used:", "command": "gh config get git_protocol"}, {"task": "Set protocol to SSH:", "command": "gh config set git_protocol {{ssh}}"}, {"task": "Use `delta` in side-by-side mode as the default pager for all `gh` commands:", "command": "gh config set pager '{{delta --side-by-side}}'"}, {"task": "Set text editor to Vim:", "command": "gh config set editor {{vim}}"}, {"task": "Reset to default text editor:", "command": "gh config set editor {{\"\"}}"}, {"task": "Disable interactive prompts:", "command": "gh config set prompt {{disabled}}"}, {"task": "Set a specific configuration value:", "command": "gh config set {{key}} {{value}}"}]}
{"command": "gh cs", "tasks": [{"task": "View documentation for the original command:", "command": "tldr gh-codespace"}]}
{"command": "gh environment", "tasks": [{"task": "Display help about environment variables that can be used with `gh`:", "command": "gh environment"}]}
{"command": "gh extension", "tasks": [{"task": "Initialize a new GitHub CLI extension project in a directory of the same name:", "command": "gh extension create {{extension_name}}"}, {"task": "Install an extension from a GitHub repository:", "command": "gh extension install {{owner}}/{{repository}}"}, {"task": "List installed extensions:", "command": "gh extension list"}, {"task": "Upgrade a specific extension:", "command": "gh extension upgrade {{extension_name}}"}, {"task": "Upgrade all extensions:", "command": "gh extension upgrade --all"}, {"task": "List installed extensions:", "command": "gh extension list"}, {"task": "Remove an extension:", "command": "gh extension remove {{extension_name}}"}, {"task": "Display help about a subcommand:", "command": "gh extension {{subcommand}} --help"}]}
{"command": "gh formatting", "tasks": [{"task": "Display help about formatting JSON output from `gh` using `jq`:", "command": "gh formatting"}]}
{"command": "gh gist", "tasks": [{"task": "Create a new Gist from a space-separated list of files:", "command": "gh gist create {{path/to/file1 path/to/file2 ...}}"}, {"task": "Create a new Gist with a specific [desc]ription:", "command": "gh gist create {{path/to/file1 path/to/file2 ...}} --desc \"{{description}}\""}, {"task": "Edit a Gist:", "command": "gh gist edit {{id|url}}"}, {"task": "List up to 42 Gists owned by the currently logged in user:", "command": "gh gist list --limit {{42}}"}, {"task": "View a Gist in the default browser without rendering Markdown:", "command": "gh gist view {{id|url}} --web --raw"}]}
{"command": "gh help", "tasks": [{"task": "Display general help:", "command": "gh help"}, {"task": "Display help for the `gh help` subcommand:", "command": "gh help --help"}, {"task": "Display help about environment variables that can be used with `gh`:", "command": "gh help environment"}, {"task": "Display a markdown reference of all `gh` commands:", "command": "gh help reference"}, {"task": "Display help about formatting JSON output from `gh` using `jq`:", "command": "gh help formatting"}, {"task": "Display help about using `gh` with MinTTY:", "command": "gh help mintty"}, {"task": "Display help for a subcommand:", "command": "gh help {{subcommand}}"}, {"task": "Display help for a subcommand action:", "command": "gh help {{pr}} {{create}}"}]}
{"command": "gh issue create", "tasks": [{"task": "Create a new issue against the current repository interactively:", "command": "gh issue create"}, {"task": "Create a new issue with the `bug` label interactively:", "command": "gh issue create --label \"{{bug}}\""}, {"task": "Create a new issue interactively and assign it to the specified users:", "command": "gh issue create --assignee {{user1,user2,...}}"}, {"task": "Create a new issue with a title, body and assign it to the current user:", "command": "gh issue create --title \"{{title}}\" --body \"{{body}}\" --assignee \"{{@me}}\""}, {"task": "Create a new issue interactively, reading the body text from a file:", "command": "gh issue create --body-file {{path/to/file}}"}, {"task": "Create a new issue in the default web browser:", "command": "gh issue create --web"}, {"task": "Display the help:", "command": "gh issue create --help"}]}
{"command": "gh issue", "tasks": [{"task": "Display a specific issue:", "command": "gh issue view {{issue_number}}"}, {"task": "Display a specific issue in the default web browser:", "command": "gh issue view {{issue_number}} --web"}, {"task": "Create a new issue in the default web browser:", "command": "gh issue create --web"}, {"task": "List the last 10 issues with the `bug` label:", "command": "gh issue list --limit {{10}} --label \"{{bug}}\""}, {"task": "List closed issues made by a specific user:", "command": "gh issue list --state closed --author {{username}}"}, {"task": "Display the status of issues relevant to the user, in a specific repository:", "command": "gh issue status --repo {{owner}}/{{repository}}"}, {"task": "Reopen a specific issue:", "command": "gh issue reopen {{issue_number}}"}]}
{"command": "gh label", "tasks": [{"task": "List labels for the repository in the current directory:", "command": "gh label list"}, {"task": "View labels for the repository in the current directory in the default web browser:", "command": "gh label list --web"}, {"task": "Create a label with a specific name, description and color in hexadecimal format for the repository in the current directory:", "command": "gh label create {{name}} --description \"{{description}}\" --color {{color_hex}}"}, {"task": "Delete a label for the repository in the current directory, prompting for confirmation:", "command": "gh label delete {{name}}"}, {"task": "Update the name and description for a specific label for the repository in the current directory:", "command": "gh label edit {{name}} --name {{new_name}} --description \"{{description}}\""}, {"task": "Clone labels from a specific repository into the repository in the current directory:", "command": "gh label clone {{owner}}/{{repository}}"}, {"task": "Display help for a subcommand:", "command": "gh label {{subcommand}} --help"}]}
{"command": "gh mintty", "tasks": [{"task": "Display help about using `gh` with MinTTY:", "command": "gh mintty"}]}
{"command": "gh pr create", "tasks": [{"task": "Interactively create a pull request:", "command": "gh pr create"}, {"task": "Create a pull request, determining the title and description from the commit messages of the current branch:", "command": "gh pr create --fill"}, {"task": "Create a draft pull request:", "command": "gh pr create --draft"}, {"task": "Create a pull request specifying the base branch, title, and description:", "command": "gh pr create --base {{base_branch}} --title \"{{title}}\" --body \"{{body}}\""}, {"task": "Start opening a pull request in the default web browser:", "command": "gh pr create --web"}]}
{"command": "gh pr merge", "tasks": [{"task": "Merge the pull request associated with the current branch interactively:", "command": "gh pr merge"}, {"task": "Merge the specified pull request, interactively:", "command": "gh pr merge {{pr_number}}"}, {"task": "Merge the pull request, removing the branch on both the local and the remote:", "command": "gh pr merge --delete-branch"}, {"task": "Merge the current pull request with the specified merge strategy:", "command": "gh pr merge --{{merge|squash|rebase}}"}, {"task": "Merge the current pull request with the specified merge strategy and commit message:", "command": "gh pr merge --{{merge|squash|rebase}} --subject {{commit_message}}"}, {"task": "Squash the current pull request into one commit with the message body and merge:", "command": "gh pr merge --squash --body=\"{{commit_message_body}}\""}, {"task": "Display help:", "command": "gh pr merge --help"}]}
{"command": "gh pr", "tasks": [{"task": "Create a pull request:", "command": "gh pr create"}, {"task": "Check out a specific pull request locally:", "command": "gh pr checkout {{pr_number}}"}, {"task": "View the changes made in the pull request for the current branch:", "command": "gh pr diff"}, {"task": "Approve the pull request for the current branch:", "command": "gh pr review --approve"}, {"task": "Merge the pull request associated with the current branch interactively:", "command": "gh pr merge"}, {"task": "Edit a pull request interactively:", "command": "gh pr edit"}, {"task": "Edit the base branch of a pull request:", "command": "gh pr edit --base {{branch_name}}"}, {"task": "Check the status of the current repository's pull requests:", "command": "gh pr status"}]}
{"command": "gh reference", "tasks": [{"task": "Display a markdown reference of all `gh` commands:", "command": "gh reference"}]}
{"command": "gh release", "tasks": [{"task": "List releases in a GitHub repository, limited to 30 items:", "command": "gh release list"}, {"task": "Display information about a specific release:", "command": "gh release view {{tag}}"}, {"task": "Create a new release:", "command": "gh release create {{tag}}"}, {"task": "Delete a specific release:", "command": "gh release delete {{tag}}"}, {"task": "Download assets from a specific release:", "command": "gh release download {{tag}}"}, {"task": "Upload assets to a specific release:", "command": "gh release upload {{tag}} {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "gh repo", "tasks": [{"task": "Create a new repository (if the repository name is not set, the default name will be the name of the current directory):", "command": "gh repo create {{name}}"}, {"task": "Clone a repository:", "command": "gh repo clone {{owner}}/{{repository}}"}, {"task": "Fork and clone a repository:", "command": "gh repo fork {{owner}}/{{repository}} --clone"}, {"task": "View a repository in the default web browser:", "command": "gh repo view {{repository}} --web"}, {"task": "List repositories owned by a specific user or organization (if the owner is not set, the default owner will be the currently logged in user):", "command": "gh repo list {{owner}}"}, {"task": "List only non-forks repositories:", "command": "gh repo list {{owner}} --non-forks"}, {"task": "List repositories with a specific primary coding language:", "command": "gh repo list {{owner}} --language {{language_name}}"}]}
{"command": "gh run", "tasks": [{"task": "Interactively select a run to see information about the jobs:", "command": "gh run view"}, {"task": "Display information about a specific run:", "command": "gh run view {{workflow_run_number}}"}, {"task": "Display information about the steps of a job:", "command": "gh run view --job={{job_number}}"}, {"task": "Display the log of a job:", "command": "gh run view --job={{job_number}} --log"}, {"task": "Check a specific workflow and exit with a non-zero status if the run failed:", "command": "gh run view {{workflow_run_number}} --exit-status && {{echo \"run pending or passed\"}}"}, {"task": "Interactively select an active run and wait until it's done:", "command": "gh run watch"}, {"task": "Display the jobs for a run and wait until it's done:", "command": "gh run watch {{workflow_run_number}}"}, {"task": "Re-run a specific workflow:", "command": "gh run rerun {{workflow_run_number}}"}]}
{"command": "gh screensaver", "tasks": [{"task": "Run a random screensaver:", "command": "gh screensaver"}, {"task": "Run a specific screensaver:", "command": "gh screensaver --saver {{fireworks|marquee|pipes|pollock|starfield}}"}, {"task": "Run the \"marquee\" screensaver with a specific text and font:", "command": "gh screensaver --saver {{marquee}} -- --message=\"{{message}}\" --font={{font_name}}"}, {"task": "Run the \"starfield\" screensaver with a specific density and speed:", "command": "gh screensaver --saver {{starfield}} -- --density {{500}} --speed {{10}}"}, {"task": "List available screensavers:", "command": "gh screensaver --list"}]}
{"command": "gh secret set", "tasks": [{"task": "Set a secret for the current repository (user will be prompted for the value):", "command": "gh secret set {{name}}"}, {"task": "Set a secret from a file for the current repository:", "command": "gh secret set {{name}} < {{path/to/file}}"}, {"task": "Set a secret for a specific repository:", "command": "gh secret set {{name}} --body {{value}} --repo {{owner}}/{{repository}}"}, {"task": "Set an organization secret for specific repositories:", "command": "gh secret set {{name}} --org {{organization}} --repos \"{{repository1,repository2,...}}\""}, {"task": "Set an organization secret with a specific visibility:", "command": "gh secret set {{name}} --org {{organization}} --visibility {{all|private|selected}}"}]}
{"command": "gh secret", "tasks": [{"task": "List secret keys for the current repository:", "command": "gh secret list"}, {"task": "List secret keys for a specific organization:", "command": "gh secret list --org {{organization}}"}, {"task": "List secret keys for a specific repository:", "command": "gh secret list --repo {{owner}}/{{repository}}"}, {"task": "Set a secret for the current repository (user will be prompted for the value):", "command": "gh secret set {{name}}"}, {"task": "Set a secret from a file for the current repository:", "command": "gh secret set {{name}} < {{path/to/file}}"}, {"task": "Set an organization secret for specific repositories:", "command": "gh secret set {{name}} --org {{organization}} --repos {{repository1,repository2}}"}, {"task": "Remove a secret for the current repository:", "command": "gh secret remove {{name}}"}, {"task": "Remove a secret for a specific organization:", "command": "gh secret remove {{name}} --org {{organization}}"}]}
{"command": "gh ssh-key", "tasks": [{"task": "Display help:", "command": "gh ssh-key"}, {"task": "List SSH keys for the currently authenticated user:", "command": "gh ssh-key list"}, {"task": "Add an SSH key to the currently authenticated user's account:", "command": "gh ssh-key add {{path/to/key.pub}}"}, {"task": "Add an SSH key to the currently authenticated user's account with a specific title:", "command": "gh ssh-key add --title {{title}} {{path/to/key.pub}}"}]}
{"command": "gh workflow", "tasks": [{"task": "Interactively select a workflow to view the latest jobs for:", "command": "gh workflow view"}, {"task": "View a specific workflow in the default browser:", "command": "gh workflow view {{id|workflow_name|filename.yml}} --web"}, {"task": "Display the YAML definition of a specific workflow:", "command": "gh workflow view {{id|workflow_name|filename.yml}} --yaml"}, {"task": "Display the YAML definition for a specific Git branch or tag:", "command": "gh workflow view {{id|workflow_name|filename.yml}} --ref {{branch|tag_name}} --yaml"}, {"task": "List workflow files (use `--all` to include disabled workflows):", "command": "gh workflow list"}, {"task": "Run a manual workflow with parameters:", "command": "gh workflow run {{id|workflow_name|filename.yml}} {{--raw-field param1=value1 --raw-field param2=value2 ...}}"}, {"task": "Run a manual workflow using a specific branch or tag with JSON parameters from `stdin`:", "command": "echo '{{{\"param1\": \"value1\", \"param2\": \"value2\", ...}}}' | gh workflow run {{id|workflow_name|filename.yml}} --ref {{branch|tag_name}}"}, {"task": "Enable or disable a specific workflow:", "command": "gh workflow {{enable|disable}} {{id|workflow_name|filename.yml}}"}]}
{"command": "gh", "tasks": [{"task": "Clone a GitHub repository locally:", "command": "gh repo clone {{owner}}/{{repository}}"}, {"task": "Create a new issue:", "command": "gh issue create"}, {"task": "View and filter the open issues of the current repository:", "command": "gh issue list"}, {"task": "View an issue in the default web browser:", "command": "gh issue view --web {{issue_number}}"}, {"task": "Create a pull request:", "command": "gh pr create"}, {"task": "View a pull request in the default web browser:", "command": "gh pr view --web {{pr_number}}"}, {"task": "Check out a specific pull request locally:", "command": "gh pr checkout {{pr_number}}"}, {"task": "Check the status of a repository's pull requests:", "command": "gh pr status"}]}
{"command": "ghc", "tasks": [{"task": "Find and compile all modules in the current directory:", "command": "ghc Main"}, {"task": "Compile a single file:", "command": "ghc {{file.hs}}"}, {"task": "Compile using extra optimization:", "command": "ghc -O {{file.hs}}"}, {"task": "Stop compilation after generating object files (.o):", "command": "ghc -c {{file.hs}}"}, {"task": "Start a REPL (interactive shell):", "command": "ghci"}, {"task": "Evaluate a single expression:", "command": "ghc -e {{expression}}"}]}
{"command": "ghci", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "ghci"}, {"task": "Start a REPL and load the specified Haskell source file:", "command": "ghci {{source_file.hs}}"}, {"task": "Start a REPL and enable a language option:", "command": "ghci -X{{language_option}}"}, {"task": "Start a REPL and enable some level of compiler warnings (e.g. `all` or `compact`):", "command": "ghci -W{{warning_level}}"}, {"task": "Start a REPL with a colon-separated list of directories for finding source files:", "command": "ghci -i{{path/to/directory1}}:{{path/to/directory2}}"}]}
{"command": "ghcup", "tasks": [{"task": "Start the interactive TUI:", "command": "ghcup tui"}, {"task": "List available GHC/cabal versions:", "command": "ghcup list"}, {"task": "Install the recommended GHC version:", "command": "ghcup install ghc"}, {"task": "Install a specific GHC version:", "command": "ghcup install ghc {{version}}"}, {"task": "Set the currently \"active\" GHC version:", "command": "ghcup set ghc {{version}}"}, {"task": "Install cabal-install:", "command": "ghcup install cabal"}, {"task": "Update `ghcup` itself:", "command": "ghcup upgrade"}]}
{"command": "ghdl", "tasks": [{"task": "Analyze a VHDL source file and produce an object file:", "command": "ghdl -a {{filename.vhdl}}"}, {"task": "Elaborate a design (where `{{design}}` is the name of a configuration unit, entity unit or architecture unit):", "command": "ghdl -e {{design}}"}, {"task": "Run an elaborated design:", "command": "ghdl -r {{design}}"}, {"task": "Run an elaborated design and dump output to a waveform file:", "command": "ghdl -r {{design}} --wave={{output.ghw}}"}, {"task": "Check the syntax of a VHDL source file:", "command": "ghdl -s {{filename.vhdl}}"}, {"task": "Display the help page:", "command": "ghdl --help"}]}
{"command": "ghost", "tasks": [{"task": "Install Ghost in the current directory:", "command": "ghost install"}, {"task": "Start an instance of Ghost:", "command": "ghost start"}, {"task": "Restart the Ghost instance:", "command": "ghost restart"}, {"task": "Check the system for any potential hiccups while installing or updating Ghost:", "command": "ghost doctor"}, {"task": "View the logs of a Ghost instance:", "command": "ghost log {{name}}"}, {"task": "Run a Ghost instance directly (used by process managers and for debugging):", "command": "ghost run"}, {"task": "View running Ghost processes:", "command": "ghost ls"}, {"task": "View or edit Ghost configuration:", "command": "ghost config {{key}} {{value}}"}]}
{"command": "gibo", "tasks": [{"task": "List available boilerplates:", "command": "gibo list"}, {"task": "Write a boilerplate to `stdout`:", "command": "gibo dump {{boilerplate}}"}, {"task": "Write a boilerplate to .gitignore:", "command": "gibo dump {{boilerplate}} >>{{.gitignore}}"}, {"task": "Search for boilerplates containing a given string:", "command": "gibo search {{string}}"}, {"task": "Update available local boilerplates:", "command": "gibo update"}]}
{"command": "gifdiff", "tasks": [{"task": "Check how GIFs differ:", "command": "gifdiff {{path/to/first.gif}} {{path/to/second.gif}}"}, {"task": "Check if GIFs differ:", "command": "gifdiff --brief {{path/to/first.gif}} {{path/to/second.gif}}"}]}
{"command": "gifsicle", "tasks": [{"task": "Optimize a GIF as a new file:", "command": "gifsicle {{path/to/input.gif}} --optimize=3 -o {{path/to/output.gif}}"}, {"task": "Unoptimize a GIF in place:", "command": "gifsicle -b {{path/to/input.gif}} --unoptimize"}, {"task": "Extract a frame from a GIF:", "command": "gifsicle {{path/to/input.gif}} '#{{0}}' > {{path/to/firstframe.gif}}"}, {"task": "Make a GIF animation from selected GIFs:", "command": "gifsicle {{*.gif}} --delay={{10}} --loop > {{path/to/output.gif}}"}, {"task": "Reduce file size using lossy compression:", "command": "gifsicle -b {{path/to/input.gif}} --optimize=3 --lossy={{100}} --colors={{16}} --dither"}, {"task": "Delete the first 10 frames and all frames after frame 20 from a GIF:", "command": "gifsicle -b {{path/to/input.gif}} --delete '#{{0-9}}' '#{{20-}}'"}, {"task": "Modify all frames of a GIF using specific transformation options:", "command": "gifsicle -b --crop {{50}},{{50}}+{{-50}}x{{-50}} --scale {{0.25}} --flip-horizontal --rotate-90 {{path/to/input.gif}}"}]}
{"command": "gimp", "tasks": [{"task": "Start GIMP:", "command": "gimp"}, {"task": "Open specific files:", "command": "gimp {{path/to/image1 path/to/image2 ...}}"}, {"task": "Open specific files in a new window:", "command": "gimp --new-instance {{path/to/image1 path/to/image2 ...}}"}, {"task": "Start without a splash screen:", "command": "gimp --no-splash"}, {"task": "Print errors and warnings to the console instead of showing them in a dialog box:", "command": "gimp --console-messages"}, {"task": "Enable debugging signal handlers:", "command": "gimp --debug-handlers"}]}
{"command": "gist", "tasks": [{"task": "Log in in gist on this computer:", "command": "gist --login"}, {"task": "Create a gist from any number of text files:", "command": "gist {{file.txt}} {{file2.txt}}"}, {"task": "Create a private gist with a description:", "command": "gist --private --description \"{{A meaningful description}}\" {{file.txt}} "}, {"task": "Read contents from `stdin` and create a gist from it:", "command": "{{echo \"hello world\"}} | gist"}, {"task": "List your public and private gists:", "command": "gist --list"}, {"task": "List all public gists for any user:", "command": "gist --list {{username}}"}, {"task": "Update a gist using the ID from URL:", "command": "gist --update {{GIST_ID}} {{file.txt}}"}]}
{"command": "git abort", "tasks": [{"task": "Abort a Git rebase, merge, or cherry-pick:", "command": "git abort"}]}
{"command": "git add", "tasks": [{"task": "Add a file to the index:", "command": "git add {{path/to/file}}"}, {"task": "Add all files (tracked and untracked):", "command": "git add -A"}, {"task": "Only add already tracked files:", "command": "git add -u"}, {"task": "Also add ignored files:", "command": "git add -f"}, {"task": "Interactively stage parts of files:", "command": "git add -p"}, {"task": "Interactively stage parts of a given file:", "command": "git add -p {{path/to/file}}"}, {"task": "Interactively stage a file:", "command": "git add -i"}]}
{"command": "git alias", "tasks": [{"task": "List all aliases:", "command": "git alias"}, {"task": "Create a new alias:", "command": "git alias \"{{name}}\" \"{{command}}\""}, {"task": "Search for an existing alias:", "command": "git alias ^{{name}}"}]}
{"command": "git am", "tasks": [{"task": "Apply and commit changes following a local patch file:", "command": "git am {{path/to/file.patch}}"}, {"task": "Apply and commit changes following a remote patch file:", "command": "curl -L {{https://example.com/file.patch}} | git apply"}, {"task": "Abort the process of applying a patch file:", "command": "git am --abort"}, {"task": "Apply as much of a patch file as possible, saving failed hunks to reject files:", "command": "git am --reject {{path/to/file.patch}}"}]}
{"command": "git annex", "tasks": [{"task": "Initialize a repo with Git annex:", "command": "git annex init"}, {"task": "Add a file:", "command": "git annex add {{path/to/file_or_directory}}"}, {"task": "Show the current status of a file or directory:", "command": "git annex status {{path/to/file_or_directory}}"}, {"task": "Synchronize a local repository with a remote:", "command": "git annex {{remote}}"}, {"task": "Get a file or directory:", "command": "git annex get {{path/to/file_or_directory}}"}, {"task": "Display help:", "command": "git annex help"}]}
{"command": "git annotate", "tasks": [{"task": "Print a file with the author name and commit hash prepended to each line:", "command": "git annotate {{path/to/file}}"}, {"task": "Print a file with the author email and commit hash prepended to each line:", "command": "git annotate -e {{path/to/file}}"}, {"task": "Print only rows that match a regular expression:", "command": "git annotate -L :{{regexp}} {{path/to/file}}"}]}
{"command": "git apply", "tasks": [{"task": "Print messages about the patched files:", "command": "git apply --verbose {{path/to/file}}"}, {"task": "Apply and add the patched files to the index:", "command": "git apply --index {{path/to/file}}"}, {"task": "Apply a remote patch file:", "command": "curl -L {{https://example.com/file.patch}} | git apply"}, {"task": "Output diffstat for the input and apply the patch:", "command": "git apply --stat --apply {{path/to/file}}"}, {"task": "Apply the patch in reverse:", "command": "git apply --reverse {{path/to/file}}"}, {"task": "Store the patch result in the index without modifying the working tree:", "command": "git apply --cache {{path/to/file}}"}]}
{"command": "git archive-file", "tasks": [{"task": "Pack the currently checked out commit into a zip archive:", "command": "git archive-file"}]}
{"command": "git archive", "tasks": [{"task": "Create a tar archive from the contents of the current HEAD and print it to `stdout`:", "command": "git archive --verbose HEAD"}, {"task": "Create a zip archive from the current HEAD and print it to `stdout`:", "command": "git archive --verbose --format=zip HEAD"}, {"task": "Same as above, but write the zip archive to file:", "command": "git archive --verbose --output={{path/to/file.zip}} HEAD"}, {"task": "Create a tar archive from the contents of the latest commit on a specific branch:", "command": "git archive --output={{path/to/file.tar}} {{branch_name}}"}, {"task": "Create a tar archive from the contents of a specific directory:", "command": "git archive --output={{path/to/file.tar}} HEAD:{{path/to/directory}}"}, {"task": "Prepend a path to each file to archive it inside a specific directory:", "command": "git archive --output={{path/to/file.tar}} --prefix={{path/to/prepend}}/ HEAD"}]}
{"command": "git authors", "tasks": [{"task": "Print a full list of committers to `stdout` instead of to the `AUTHORS` file:", "command": "git authors --list"}, {"task": "Append the list of committers to the `AUTHORS` file and open it in the default editor:", "command": "git authors"}, {"task": "Append the list of committers, excluding emails, to the `AUTHORS` file and open it in the default editor:", "command": "git authors --no-email"}]}
{"command": "git bisect", "tasks": [{"task": "Start a bisect session on a commit range bounded by a known buggy commit, and a known clean (typically older) one:", "command": "git bisect start {{bad_commit}} {{good_commit}}"}, {"task": "For each commit that `git bisect` selects, mark it as \"bad\" or \"good\" after testing it for the issue:", "command": "git bisect {{good|bad}}"}, {"task": "After `git bisect` pinpoints the faulty commit, end the bisect session and return to the previous branch:", "command": "git bisect reset"}, {"task": "Skip a commit during a bisect (e.g. one that fails the tests due to a different issue):", "command": "git bisect skip"}, {"task": "Display a log of what has been done so far:", "command": "git bisect log"}]}
{"command": "git blame-someone-else", "tasks": [{"task": "Change the committer and author of a commit:", "command": "git blame-someone-else \"{{author <someone@example.com>}}\" {{commit}}"}]}
{"command": "git blame", "tasks": [{"task": "Print file with author name and commit hash on each line:", "command": "git blame {{path/to/file}}"}, {"task": "Print file with author email and commit hash on each line:", "command": "git blame -e {{path/to/file}}"}, {"task": "Print file with author name and commit hash on each line at a specific commit:", "command": "git blame {{commit}} {{path/to/file}}"}, {"task": "Print file with author name and commit hash on each line before a specific commit:", "command": "git blame {{commit}}~ {{path/to/file}}"}]}
{"command": "git branch", "tasks": [{"task": "List all branches (local and remote; the current branch is highlighted by `*`):", "command": "git branch --all"}, {"task": "List which branches include a specific Git commit in their history:", "command": "git branch --all --contains {{commit_hash}}"}, {"task": "Show the name of the current branch:", "command": "git branch --show-current"}, {"task": "Create new branch based on the current commit:", "command": "git branch {{branch_name}}"}, {"task": "Create new branch based on a specific commit:", "command": "git branch {{branch_name}} {{commit_hash}}"}, {"task": "Rename a branch (must not have it checked out to do this):", "command": "git branch -m {{old_branch_name}} {{new_branch_name}}"}, {"task": "Delete a local branch (must not have it checked out to do this):", "command": "git branch -d {{branch_name}}"}, {"task": "Delete a remote branch:", "command": "git push {{remote_name}} --delete {{remote_branch_name}}"}]}
{"command": "git browse-ci", "tasks": [{"task": "Open the current repository's CI configuration on its upstream website:", "command": "git browse-ci"}, {"task": "Open the current repository's CI configuration on its upstream website for a specific remote:", "command": "git browse-ci {{remote}}"}]}
{"command": "git browse", "tasks": [{"task": "Open the first upstream in the default browser:", "command": "git browse"}, {"task": "Open a specific upstream in the default browser:", "command": "git browse {{upstream}}"}]}
{"command": "git brv", "tasks": [{"task": "List each branch showing date, latest commit hash and message:", "command": "git brv"}]}
{"command": "git bug", "tasks": [{"task": "Create a new identity:", "command": "git bug user create"}, {"task": "Create a new bug:", "command": "git bug add"}, {"task": "You can push your new entry to a remote:", "command": "git bug push"}, {"task": "You can pull for updates:", "command": "git bug pull"}, {"task": "List existing bugs:", "command": "git bug ls"}, {"task": "Filter and sort bugs using a query:", "command": "git bug ls \"{{status}}:{{open}} {{sort}}:{{edit}}\""}, {"task": "Search for bugs by text content:", "command": "git bug ls \"{{search_query}}\" baz"}]}
{"command": "git bugreport", "tasks": [{"task": "Create a new bug report file in the current directory:", "command": "git bugreport"}, {"task": "Create a new bug report file in the specified directory, creating it if it does not exist:", "command": "git bugreport --output-directory {{path/to/directory}}"}, {"task": "Create a new bug report file with the specified filename suffix in `strftime` format:", "command": "git bugreport --suffix {{%m%d%y}}"}]}
{"command": "git bulk", "tasks": [{"task": "Register the current directory as a workspace:", "command": "git bulk --addcurrent {{workspace_name}}"}, {"task": "Register a workspace for bulk operations:", "command": "git bulk --addworkspace {{workspace_name}} {{/absolute/path/to/repository}}"}, {"task": "Clone a repository inside a specific directory then register the repository as a workspace:", "command": "git bulk --addworkspace {{workspace_name}} {{/absolute/path/to/parent_directory}} --from {{remote_repository_location}}"}, {"task": "Clone repositories from a newline-separated list of remote locations then register them as workspaces:", "command": "git bulk --addworkspace {{workspace-name}} {{absolute/path/to/root/directory}} --from {{absolute/path/to/file}}"}, {"task": "List all registered workspaces:", "command": "git bulk --listall"}, {"task": "Run a Git command on the repositories of the current workspace:", "command": "git bulk {{command}} {{command_arguments}}"}, {"task": "Remove a specific workspace:", "command": "git bulk --removeworkspace {{workspace_name}}"}, {"task": "Remove all workspaces:", "command": "git bulk --purge"}]}
{"command": "git bundle", "tasks": [{"task": "Create a bundle file that contains all objects and references of a specific branch:", "command": "git bundle create {{path/to/file.bundle}} {{branch_name}}"}, {"task": "Create a bundle file of all branches:", "command": "git bundle create {{path/to/file.bundle}} --all"}, {"task": "Create a bundle file of the last 5 commits of the current branch:", "command": "git bundle create {{path/to/file.bundle}} -{{5}} {{HEAD}}"}, {"task": "Create a bundle file of the latest 7 days:", "command": "git bundle create {{path/to/file.bundle}} --since={{7.days}} {{HEAD}}"}, {"task": "Verify that a bundle file is valid and can be applied to the current repository:", "command": "git bundle verify {{path/to/file.bundle}}"}, {"task": "Print to `stdout` the list of references contained in a bundle:", "command": "git bundle unbundle {{path/to/file.bundle}}"}, {"task": "Unbundle a specific branch from a bundle file into the current repository:", "command": "git pull {{path/to/file.bundle}} {{branch_name}}"}]}
{"command": "git cat-file", "tasks": [{"task": "Get the [s]ize of the HEAD commit in bytes:", "command": "git cat-file -s HEAD"}, {"task": "Get the [t]ype (blob, tree, commit, tag) of a given Git object:", "command": "git cat-file -t {{8c442dc3}}"}, {"task": "Pretty-[p]rint the contents of a given Git object based on its type:", "command": "git cat-file -p {{HEAD~2}}"}]}
{"command": "git changelog", "tasks": [{"task": "Update existing file or create a new `History.md` file with the commit messages since the latest Git tag:", "command": "git changelog"}, {"task": "List commits from the current version:", "command": "git changelog --list"}, {"task": "List a range of commits from the tag named `2.1.0` to now:", "command": "git changelog --list --start-tag {{2.1.0}}"}, {"task": "List pretty formatted range of commits between the tag `0.5.0` and the tag `1.0.0`:", "command": "git changelog --start-tag {{0.5.0}} --final-tag {{1.0.0}}"}, {"task": "List pretty formatted range of commits between the commit `0b97430` and the tag `1.0.0`:", "command": "git changelog --start-commit {{0b97430}} --final-tag {{1.0.0}}"}, {"task": "Specify `CHANGELOG.md` as the output file:", "command": "git changelog {{CHANGELOG.md}}"}, {"task": "Replace contents of current changelog file entirely:", "command": "git changelog --prune-old"}]}
{"command": "git check-attr", "tasks": [{"task": "Check the values of all attributes on a file:", "command": "git check-attr --all {{path/to/file}}"}, {"task": "Check the value of a specific attribute on a file:", "command": "git check-attr {{attribute}} {{path/to/file}}"}, {"task": "Check the value of a specific attribute on files:", "command": "git check-attr --all {{path/to/file1}} {{path/to/file2}}"}, {"task": "Check the value of a specific attribute on one or more files:", "command": "git check-attr {{attribute}} {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "git check-ignore", "tasks": [{"task": "Check whether a file or directory is ignored:", "command": "git check-ignore {{path/to/file_or_directory}}"}, {"task": "Check whether multiple files or directories are ignored:", "command": "git check-ignore {{path/to/file}} {{path/to/directory}}"}, {"task": "Use pathnames, one per line, from `stdin`:", "command": "git check-ignore --stdin < {{path/to/file_list}}"}, {"task": "Do not check the index (used to debug why paths were tracked and not ignored):", "command": "git check-ignore --no-index {{path/to/files_or_directories}}"}, {"task": "Include details about the matching pattern for each path:", "command": "git check-ignore --verbose {{path/to/files_or_directories}}"}]}
{"command": "git check-mailmap", "tasks": [{"task": "Look up the canonical name associated with an email address:", "command": "git check-mailmap \"<{{email@example.com}}>\""}]}
{"command": "git check-ref-format", "tasks": [{"task": "Check the format of the specified refname:", "command": "git check-ref-format {{refs/head/refname}}"}, {"task": "Print the name of the last branch checked out:", "command": "git check-ref-format --branch @{-1}"}, {"task": "Normalize a refname:", "command": "git check-ref-format --normalize {{refs/head/refname}}"}]}
{"command": "git checkout-index", "tasks": [{"task": "Restore any files deleted since the last commit:", "command": "git checkout-index --all"}, {"task": "Restore any files deleted or changed since the last commit:", "command": "git checkout-index --all --force"}, {"task": "Restore any files changed since the last commit, ignoring any files that were deleted:", "command": "git checkout-index --all --force --no-create"}, {"task": "Export a copy of the entire tree at the last commit to the specified directory (the trailing slash is important):", "command": "git checkout-index --all --force --prefix={{path/to/export_directory/}}"}]}
{"command": "git checkout", "tasks": [{"task": "Create and switch to a new branch:", "command": "git checkout -b {{branch_name}}"}, {"task": "Create and switch to a new branch based on a specific reference (branch, remote/branch, tag are examples of valid references):", "command": "git checkout -b {{branch_name}} {{reference}}"}, {"task": "Switch to an existing local branch:", "command": "git checkout {{branch_name}}"}, {"task": "Switch to the previously checked out branch:", "command": "git checkout -"}, {"task": "Switch to an existing remote branch:", "command": "git checkout --track {{remote_name}}/{{branch_name}}"}, {"task": "Discard all unstaged changes in the current directory (see `git reset` for more undo-like commands):", "command": "git checkout ."}, {"task": "Discard unstaged changes to a given file:", "command": "git checkout {{path/to/file}}"}, {"task": "Replace a file in the current directory with the version of it committed in a given branch:", "command": "git checkout {{branch_name}} -- {{path/to/file}}"}]}
{"command": "git cherry-pick", "tasks": [{"task": "Apply a commit to the current branch:", "command": "git cherry-pick {{commit}}"}, {"task": "Apply a range of commits to the current branch (see also `git rebase --onto`):", "command": "git cherry-pick {{start_commit}}~..{{end_commit}}"}, {"task": "Apply multiple (non-sequential) commits to the current branch:", "command": "git cherry-pick {{commit_1}} {{commit_2}}"}, {"task": "Add the changes of a commit to the working directory, without creating a commit:", "command": "git cherry-pick --no-commit {{commit}}"}]}
{"command": "git cherry", "tasks": [{"task": "Show commits (and their messages) with equivalent commits upstream:", "command": "git cherry -v"}, {"task": "Specify a different upstream and topic branch:", "command": "git cherry {{origin}} {{topic}}"}, {"task": "Limit commits to those within a given limit:", "command": "git cherry {{origin}} {{topic}} {{base}}"}]}
{"command": "git clean", "tasks": [{"task": "Delete files that are not tracked by Git:", "command": "git clean"}, {"task": "Interactively delete files that are not tracked by Git:", "command": "git clean -i"}, {"task": "Show what files would be deleted without actually deleting them:", "command": "git clean --dry-run"}, {"task": "Forcefully delete files that are not tracked by Git:", "command": "git clean -f"}, {"task": "Forcefully delete directories that are not tracked by Git:", "command": "git clean -fd"}, {"task": "Delete untracked files, including ignored files in `.gitignore` and `.git/info/exclude`:", "command": "git clean -x"}]}
{"command": "git clear-soft", "tasks": [{"task": "Reset all tracked files and delete all untracked files:", "command": "git clear-soft"}]}
{"command": "git clear", "tasks": [{"task": "Reset all tracked files and delete all untracked files even if they are included in the `.gitignore`:", "command": "git clear"}]}
{"command": "git clone", "tasks": [{"task": "Clone an existing repository into a new directory (the default directory is the repository name):", "command": "git clone {{remote_repository_location}} {{path/to/directory}}"}, {"task": "Clone an existing repository and its submodules:", "command": "git clone --recursive {{remote_repository_location}}"}, {"task": "Clone only the `.git` directory of an existing repository:", "command": "git clone --no-checkout {{remote_repository_location}}"}, {"task": "Clone a local repository:", "command": "git clone --local {{path/to/local/repository}}"}, {"task": "Clone quietly:", "command": "git clone --quiet {{remote_repository_location}}"}, {"task": "Clone an existing repository only fetching the 10 most recent commits on the default branch (useful to save time):", "command": "git clone --depth {{10}} {{remote_repository_location}}"}, {"task": "Clone an existing repository only fetching a specific branch:", "command": "git clone --branch {{name}} --single-branch {{remote_repository_location}}"}, {"task": "Clone an existing repository using a specific SSH command:", "command": "git clone --config core.sshCommand=\"{{ssh -i path/to/private_ssh_key}}\" {{remote_repository_location}}"}]}
{"command": "git coauthor", "tasks": [{"task": "Insert an additional author to the last Git commit:", "command": "git coauthor {{name}} {{name@example.com}}"}]}
{"command": "git cola", "tasks": [{"task": "Start git cola:", "command": "git cola"}, {"task": "Start git cola in amend mode:", "command": "git cola --amend"}, {"task": "Prompt for a Git repository. Defaults to the current directory:", "command": "git cola --prompt"}, {"task": "Open the Git repository at mentioned path:", "command": "git cola --repo {{path/to/git-repository}}"}, {"task": "Apply the path filter to the status widget:", "command": "git cola --status-filter {{filter}}"}]}
{"command": "git column", "tasks": [{"task": "Format `stdin` as multiple columns:", "command": "ls | git column --mode={{column}}"}, {"task": "Format `stdin` as multiple columns with a maximum width of `100`:", "command": "ls | git column --mode=column --width={{100}}"}, {"task": "Format `stdin` as multiple columns with a maximum padding of `30`:", "command": "ls | git column --mode=column --padding={{30}}"}]}
{"command": "git commit-graph", "tasks": [{"task": "Write a commit-graph file for the packed commits in the repository's local `.git` directory:", "command": "git commit-graph write"}, {"task": "Write a commit-graph file containing all reachable commits:", "command": "git show-ref --hash | git commit-graph write --stdin-commits"}, {"task": "Write a commit-graph file containing all commits in the current commit-graph file along with those reachable from `HEAD`:", "command": "git rev-parse {{HEAD}} | git commit-graph write --stdin-commits --append"}]}
{"command": "git commit-tree", "tasks": [{"task": "Create a commit object with the specified message:", "command": "git commit-tree {{tree}} -m \"{{message}}\""}, {"task": "Create a commit object reading the message from a file (use `-` for `stdin`):", "command": "git commit-tree {{tree}} -F {{path/to/file}}"}, {"task": "Create a GPG-signed commit object:", "command": "git commit-tree {{tree}} -m \"{{message}}\" --gpg-sign"}, {"task": "Create a commit object with the specified parent commit object:", "command": "git commit-tree {{tree}} -m \"{{message}}\" -p {{parent_commit_sha}}"}]}
{"command": "git commit", "tasks": [{"task": "Commit staged files to the repository with a message:", "command": "git commit --message \"{{message}}\""}, {"task": "Commit staged files with a message read from a file:", "command": "git commit --file {{path/to/commit_message_file}}"}, {"task": "Auto stage all modified and deleted files and commit with a message:", "command": "git commit --all --message \"{{message}}\""}, {"task": "Commit staged files and sign them with the specified GPG key (or the one defined in the config file if no argument is specified):", "command": "git commit --gpg-sign {{key_id}} --message \"{{message}}\""}, {"task": "Update the last commit by adding the currently staged changes, changing the commit's hash:", "command": "git commit --amend"}, {"task": "Commit only specific (already staged) files:", "command": "git commit {{path/to/file1}} {{path/to/file2}}"}, {"task": "Create a commit, even if there are no staged files:", "command": "git commit --message \"{{message}}\" --allow-empty"}]}
{"command": "git commits-since", "tasks": [{"task": "Display commits since yesterday:", "command": "git commits-since {{yesterday}}"}, {"task": "Display commits since last week:", "command": "git commits-since {{last week}}"}, {"task": "Display commits since last month:", "command": "git commits-since {{last month}}"}, {"task": "Display commits since yesterday 2pm:", "command": "git commits-since {{yesterday 2pm}}"}]}
{"command": "git config", "tasks": [{"task": "List only local configuration entries (stored in `.git/config` in the current repository):", "command": "git config --list --local"}, {"task": "List only global configuration entries (stored in `~/.gitconfig` by default or in `$XDG_CONFIG_HOME/git/config` if such a file exists):", "command": "git config --list --global"}, {"task": "List only system configuration entries (stored in `/etc/gitconfig`), and show their file location:", "command": "git config --list --system --show-origin"}, {"task": "Get the value of a given configuration entry:", "command": "git config alias.unstage"}, {"task": "Set the global value of a given configuration entry:", "command": "git config --global alias.unstage \"reset HEAD --\""}, {"task": "Revert a global configuration entry to its default value:", "command": "git config --global --unset alias.unstage"}, {"task": "Edit the Git configuration for the current repository in the default editor:", "command": "git config --edit"}, {"task": "Edit the global Git configuration in the default editor:", "command": "git config --global --edit"}]}
{"command": "git contrib", "tasks": [{"task": "Display all commit hashes and their corresponding commit messages from a specific author:", "command": "git contrib {{author}}"}]}
{"command": "git count-objects", "tasks": [{"task": "Count all objects and display the total disk usage:", "command": "git count-objects"}, {"task": "Display a count of all objects and their total disk usage, displaying sizes in human-readable units:", "command": "git count-objects --human-readable"}, {"task": "Display more verbose information:", "command": "git count-objects --verbose"}, {"task": "Display more verbose information, displaying sizes in human-readable units:", "command": "git count-objects --human-readable --verbose"}]}
{"command": "git count", "tasks": [{"task": "Print the total number of commits:", "command": "git count"}, {"task": "Print the number of commits per contributor and the total number of commits:", "command": "git count --all"}]}
{"command": "git cp", "tasks": [{"task": "Copy an existing file in a Git repo, staying in the same directory:", "command": "git cp {{file}} {{new_file}}"}, {"task": "Copy an existing file in a Git repo and place it elsewhere:", "command": "git cp {{path/to/file}} {{path/to/new_file}}"}]}
{"command": "git create-branch", "tasks": [{"task": "Create a local branch:", "command": "git create-branch {{branch_name}}"}, {"task": "Create a branch locally and on origin:", "command": "git create-branch --remote {{branch_name}}"}, {"task": "Create a branch locally and on upstream (through forks):", "command": "git create-branch --remote upstream {{branch_name}}"}]}
{"command": "git credential-cache", "tasks": [{"task": "Store Git credentials for a specific amount of time:", "command": "git config credential.helper 'cache --timeout={{time_in_seconds}}'"}]}
{"command": "git credential-store", "tasks": [{"task": "Store Git credentials in a specific file:", "command": "git config credential.helper 'store --file={{path/to/file}}'"}]}
{"command": "git credential", "tasks": [{"task": "Display credential information, retrieving the username and password from configuration files:", "command": "echo \"{{url=http://example.com}}\" | git credential fill"}, {"task": "Send credential information to all configured credential helpers to store for later use:", "command": "echo \"{{url=http://example.com}}\" | git credential approve"}, {"task": "Erase the specified credential information from all the configured credential helpers:", "command": "echo \"{{url=http://example.com}}\" | git credential reject"}]}
{"command": "git cvsexportcommit", "tasks": [{"task": "Merge a specific patch into CVS:", "command": "git cvsexportcommit -v -c -w {{path/to/project_cvs_checkout}} {{commit_sha1}}"}]}
{"command": "git daemon", "tasks": [{"task": "Launch a Git daemon with a whitelisted set of directories:", "command": "git daemon --export-all {{path/to/directory1}} {{path/to/directory2}}"}, {"task": "Launch a Git daemon with a specific base directory and allow pulling from all sub-directories that look like Git repositories:", "command": "git daemon --base-path={{path/to/directory}} --export-all --reuseaddr"}, {"task": "Launch a Git daemon for the specified directory, verbosely printing log messages and allowing Git clients to write to it:", "command": "git daemon {{path/to/directory}} --enable=receive-pack --informative-errors --verbose"}]}
{"command": "git delete-branch", "tasks": [{"task": "Delete a local and remote Git branch:", "command": "git delete-branch {{branch_name}}"}, {"task": "Delete multiple local and remote Git branches:", "command": "git delete-branch {{branch_name1 branch_name2 ...}}"}]}
{"command": "git delete-merged-branches", "tasks": [{"task": "Delete merged branches:", "command": "git delete-merged-branches"}]}
{"command": "git delete-submodule", "tasks": [{"task": "Delete a specific submodule:", "command": "git delete-submodule {{path/to/submodule}}"}]}
{"command": "git delete-tag", "tasks": [{"task": "Delete a tag:", "command": "git delete-tag {{tag_version}}"}]}
{"command": "git delta", "tasks": [{"task": "List files from the current checked out branch that differ from the `main` branch:", "command": "git delta {{main}}"}, {"task": "List files from a specific branch that differ from another specific branch:", "command": "git delta {{branch_1}} {{branch_2}}"}]}
{"command": "git describe", "tasks": [{"task": "Create a unique name for the current commit (the name contains the most recent annotated tag, the number of additional commits, and the abbreviated commit hash):", "command": "git describe"}, {"task": "Create a name with 4 digits for the abbreviated commit hash:", "command": "git describe --abbrev={{4}}"}, {"task": "Generate a name with the tag reference path:", "command": "git describe --all"}, {"task": "Describe a Git tag:", "command": "git describe {{v1.0.0}}"}, {"task": "Create a name for the last commit of a given branch:", "command": "git describe {{branch_name}}"}]}
{"command": "git diff-files", "tasks": [{"task": "Compare all changed files:", "command": "git diff-files"}, {"task": "Compare only specified files:", "command": "git diff-files {{path/to/file}}"}, {"task": "Show only the names of changed files:", "command": "git diff-files --name-only"}, {"task": "Output a summary of extended header information:", "command": "git diff-files --summary"}]}
{"command": "git diff", "tasks": [{"task": "Show unstaged, uncommitted changes:", "command": "git diff"}, {"task": "Show all uncommitted changes (including staged ones):", "command": "git diff HEAD"}, {"task": "Show only staged (added, but not yet committed) changes:", "command": "git diff --staged"}, {"task": "Show changes from all commits since a given date/time (a date expression, e.g. \"1 week 2 days\" or an ISO date):", "command": "git diff 'HEAD@{3 months|weeks|days|hours|seconds ago}'"}, {"task": "Show only names of changed files since a given commit:", "command": "git diff --name-only {{commit}}"}, {"task": "Output a summary of file creations, renames and mode changes since a given commit:", "command": "git diff --summary {{commit}}"}, {"task": "Compare a single file between two branches or commits:", "command": "git diff {{branch_1}}..{{branch_2}} [--] {{path/to/file}}"}, {"task": "Compare different files from the current branch to other branch:", "command": "git diff {{branch}}:{{path/to/file2}} {{path/to/file}}"}]}
{"command": "git difftool", "tasks": [{"task": "List available diff tools:", "command": "git difftool --tool-help"}, {"task": "Set the default diff tool to meld:", "command": "git config --global diff.tool \"{{meld}}\""}, {"task": "Use the default diff tool to show staged changes:", "command": "git difftool --staged"}, {"task": "Use a specific tool (opendiff) to show changes since a given commit:", "command": "git difftool --tool={{opendiff}} {{commit}}"}]}
{"command": "git effort", "tasks": [{"task": "Display each file in the repository, showing commits and active days:", "command": "git effort"}, {"task": "Display files modified by a specific number of commits or more, showing commits and active days:", "command": "git effort --above {{5}}"}, {"task": "Display files modified by a specific author, showing commits and active days:", "command": "git effort -- --author=\"{{username}}\""}, {"task": "Display files modified since a specific time/date, showing commits and active days:", "command": "git effort -- --since=\"{{last month}}\""}, {"task": "Display only the specified files or directories, showing commits and active days:", "command": "git effort {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Display all files in a specific directory, showing commits and active days:", "command": "git effort {{path/to/directory/*}}"}]}
{"command": "git extras", "tasks": [{"task": "Install or upgrade `git-extras` commands:", "command": "git extras update"}, {"task": "Display help and subcommands:", "command": "git extras --help"}, {"task": "Print the version of installed `git-extras`:", "command": "git extras --version"}]}
{"command": "git fame", "tasks": [{"task": "Calculate contributions for the current Git repository:", "command": "git fame"}, {"task": "Exclude files/directories that match the specified regular expression:", "command": "git fame --excl \"{{regular_expression}}\""}, {"task": "Calculate contributions made after the specified date:", "command": "git fame --since \"{{3 weeks ago|2021-05-13}}\""}, {"task": "Display contributions in the specified format:", "command": "git fame --format {{pipe|yaml|json|csv|tsv}}"}, {"task": "Display contributions per file extension:", "command": "git fame --bytype"}, {"task": "Ignore whitespace changes:", "command": "git fame --ignore-whitespace"}, {"task": "Detect inter-file line moves and copies:", "command": "git fame -C"}, {"task": "Detect intra-file line moves and copies:", "command": "git fame -M"}]}
{"command": "git feature", "tasks": [{"task": "Create and switch to a new feature branch:", "command": "git feature {{feature_branch}}"}, {"task": "Merge a feature branch into the current branch creating a merge commit:", "command": "git feature finish {{feature_branch}}"}, {"task": "Merge a feature branch into the current branch squashing the changes into one commit:", "command": "git feature finish --squash {{feature_branch}}"}, {"task": "Send changes from a specific feature branch to its remote counterpart:", "command": "git feature {{feature_branch}} --remote {{remote_name}}"}]}
{"command": "git fetch", "tasks": [{"task": "Fetch the latest changes from the default remote upstream repository (if set):", "command": "git fetch"}, {"task": "Fetch new branches from a specific remote upstream repository:", "command": "git fetch {{remote_name}}"}, {"task": "Fetch the latest changes from all remote upstream repositories:", "command": "git fetch --all"}, {"task": "Also fetch tags from the remote upstream repository:", "command": "git fetch --tags"}, {"task": "Delete local references to remote branches that have been deleted upstream:", "command": "git fetch --prune"}]}
{"command": "git filter-repo", "tasks": [{"task": "Replace a sensitive string in all files:", "command": "git filter-repo --replace-text <(echo '{{find}}==>{{replacement}}')"}, {"task": "Extract a single folder, keeping history:", "command": "git filter-repo --path {{path/to/folder}}"}, {"task": "Remove a single folder, keeping history:", "command": "git filter-repo --path {{path/to/folder}} --invert-paths"}, {"task": "Move everything from sub-folder one level up:", "command": "git filter-repo --path-rename {{path/to/folder/:}}"}]}
{"command": "git flow", "tasks": [{"task": "Initialize it inside an existing Git repository:", "command": "git flow init"}, {"task": "Start developing on a feature branch based on `develop`:", "command": "git flow feature start {{feature}}"}, {"task": "Finish development on a feature branch, merging it into the `develop` branch and deleting it:", "command": "git flow feature finish {{feature}}"}, {"task": "Publish a feature to the remote server:", "command": "git flow feature publish {{feature}}"}, {"task": "Get a feature published by another user:", "command": "git flow feature pull origin {{feature}}"}]}
{"command": "git for-each-repo", "tasks": [{"task": "Run maintenance on each of a list of repositories stored in the `maintenance.repo` user configuration variable:", "command": "git for-each-repo --config={{maintenance.repo}} {{maintenance run}}"}, {"task": "Run `git pull` on each repository listed in a global configuration variable:", "command": "git for-each-repo --config={{global_configuration_variable}} {{pull}}"}]}
{"command": "git force-clone", "tasks": [{"task": "Clone a Git repository into a new directory:", "command": "git force-clone {{remote_repository_location}} {{path/to/directory}}"}, {"task": "Clone a Git repository into a new directory, checking out an specific branch:", "command": "git force-clone -b {{branch_name}} {{remote_repository_location}} {{path/to/directory}}"}, {"task": "Clone a Git repository into an existing directory of a Git repository, performing a force-reset to resemble it to the remote and checking out an specific branch:", "command": "git force-clone -b {{branch_name}} {{remote_repository_location}} {{path/to/directory}}"}]}
{"command": "git fork", "tasks": [{"task": "Fork and clone a GitHub repository by its URL:", "command": "git fork {{https://github.com/tldr-pages/tldr}}"}, {"task": "Fork and clone a GitHub repository by its slug:", "command": "git fork {{tldr-pages/tldr}}"}]}
{"command": "git format-patch", "tasks": [{"task": "Create an auto-named `.patch` file for all the unpushed commits:", "command": "git format-patch {{origin}}"}, {"task": "Write a `.patch` file for all the commits between 2 revisions to `stdout`:", "command": "git format-patch {{revision_1}}..{{revision_2}}"}, {"task": "Write a `.patch` file for the 3 latest commits:", "command": "git format-patch -{{3}}"}]}
{"command": "git fsck", "tasks": [{"task": "Check the current repository:", "command": "git fsck"}, {"task": "List all tags found:", "command": "git fsck --tags"}, {"task": "List all root nodes found:", "command": "git fsck --root"}]}
{"command": "git gc", "tasks": [{"task": "Optimise the repository:", "command": "git gc"}, {"task": "Aggressively optimise, takes more time:", "command": "git gc --aggressive"}, {"task": "Do not prune loose objects (prunes by default):", "command": "git gc --no-prune"}, {"task": "Suppress all output:", "command": "git gc --quiet"}, {"task": "View full usage:", "command": "git gc --help"}]}
{"command": "git gh-pages", "tasks": [{"task": "Create the GitHub pages branch inside the repository in the current directory:", "command": "git gh-pages"}]}
{"command": "git graft", "tasks": [{"task": "Merge all commits not present on the target branch from the source branch to target branch, and delete the source branch:", "command": "git graft {{source_branch}} {{target_branch}}"}]}
{"command": "git-grep", "tasks": [{"task": "Search for a string in tracked files:", "command": "git grep {{search_string}}"}, {"task": "Search for a string in files matching a pattern in tracked files:", "command": "git grep {{search_string}} -- {{file_glob_pattern}}"}, {"task": "Search for a string in tracked files, including submodules:", "command": "git grep --recurse-submodules {{search_string}}"}, {"task": "Search for a string at a specific point in history:", "command": "git grep {{search_string}} {{HEAD~2}}"}, {"task": "Search for a string across all branches:", "command": "git grep {{search_string}} $(git rev-list --all)"}]}
{"command": "git hash-object", "tasks": [{"task": "Compute the object ID without storing it:", "command": "git hash-object {{path/to/file}}"}, {"task": "Compute the object ID and store it in the Git database:", "command": "git hash-object -w {{path/to/file}}"}, {"task": "Compute the object ID specifying the object type:", "command": "git hash-object -t {{blob|commit|tag|tree}} {{path/to/file}}"}, {"task": "Compute the object ID from `stdin`:", "command": "cat {{path/to/file}} | git hash-object --stdin"}]}
{"command": "git help", "tasks": [{"task": "Display help about a specific Git subcommand:", "command": "git help {{subcommand}}"}, {"task": "Display help about a specific Git subcommand in a web browser:", "command": "git help --web {{subcommand}}"}, {"task": "Display a list of all available Git subcommands:", "command": "git help --all"}, {"task": "List the available guides:", "command": "git help --guide"}, {"task": "List all possible configuration variables:", "command": "git help --config"}]}
{"command": "git ignore-io", "tasks": [{"task": "List available templates:", "command": "git ignore-io list"}, {"task": "Generate a .gitignore template:", "command": "git ignore-io {{item_a,item_b,item_n}}"}]}
{"command": "git ignore", "tasks": [{"task": "Show the content of all global and local `.gitignore` files:", "command": "git ignore"}, {"task": "Ignore file(s) privately, updating `.git/info/exclude` file:", "command": "git ignore {{file_pattern}} --private"}, {"task": "Ignore file(s) locally, updating local `.gitignore` file:", "command": "git ignore {{file_pattern}}"}, {"task": "Ignore file(s) globally, updating global `.gitignore` file:", "command": "git ignore {{file_pattern}} --global"}]}
{"command": "git-imerge", "tasks": [{"task": "Start imerge-based rebase (checkout the branch to be rebased, first):", "command": "git imerge rebase {{branch_to_rebase_onto}}"}, {"task": "Start imerge-based merge (checkout the branch to merge into, first):", "command": "git imerge merge {{branch_to_be_merged}}"}, {"task": "Show ASCII diagram of in-progress merge or rebase:", "command": "git imerge diagram"}, {"task": "Continue imerge operation after resolving conflicts (`git add` the conflicted files, first):", "command": "git imerge continue --no-edit"}, {"task": "Wrap up imerge operation, after all conflicts are resolved:", "command": "git imerge finish"}, {"task": "Abort imerge operation, and return to the previous branch:", "command": "git-imerge remove && git checkout {{previous_branch}}"}]}
{"command": "git info", "tasks": [{"task": "Display remote locations, remote and local branches, most recent commit data and `.git/config` settings:", "command": "git info"}, {"task": "Display remote locations, remote and local branches and most recent commit data:", "command": "git info --no-config"}]}
{"command": "git init", "tasks": [{"task": "Initialize a new local repository:", "command": "git init"}, {"task": "Initialize a repository with the specified name for the initial branch:", "command": "git init --initial-branch={{branch_name}}"}, {"task": "Initialize a repository using SHA256 for object hashes (requires Git version 2.29+):", "command": "git init --object-format={{sha256}}"}, {"task": "Initialize a barebones repository, suitable for use as a remote over ssh:", "command": "git init --bare"}]}
{"command": "git instaweb", "tasks": [{"task": "Launch a GitWeb server for the current Git repository:", "command": "git instaweb --start"}, {"task": "Listen only on localhost:", "command": "git instaweb --start --local"}, {"task": "Listen on a specific port:", "command": "git instaweb --start --port {{1234}}"}, {"task": "Use a specified HTTP daemon:", "command": "git instaweb --start --httpd {{lighttpd|apache2|mongoose|plackup|webrick}}"}, {"task": "Also auto-launch a web browser:", "command": "git instaweb --start --browser"}, {"task": "Stop the currently running GitWeb server:", "command": "git instaweb --stop"}, {"task": "Restart the currently running GitWeb server:", "command": "git instaweb --restart"}]}
{"command": "git lfs", "tasks": [{"task": "Initialize Git LFS:", "command": "git lfs install"}, {"task": "Track files that match a glob:", "command": "git lfs track '{{*.bin}}'"}, {"task": "Change the Git LFS endpoint URL (useful if the LFS server is separate from the Git server):", "command": "git config -f .lfsconfig lfs.url {{lfs_endpoint_url}}"}, {"task": "List tracked patterns:", "command": "git lfs track"}, {"task": "List tracked files that have been committed:", "command": "git lfs ls-files"}, {"task": "Push all Git LFS objects to the remote server (useful if errors are encountered):", "command": "git lfs push --all {{remote_name}} {{branch_name}}"}, {"task": "Fetch all Git LFS objects:", "command": "git lfs fetch"}, {"task": "Checkout all Git LFS objects:", "command": "git lfs checkout"}]}
{"command": "git local-commits", "tasks": [{"task": "Show commits that haven't been pushed:", "command": "git local-commits"}]}
{"command": "git lock", "tasks": [{"task": "Disable the ability to commit changes of a local file:", "command": "git lock {{path/to/file}}"}]}
{"command": "git locked", "tasks": [{"task": "List all local locked files:", "command": "git locked"}]}
{"command": "git log", "tasks": [{"task": "Show the sequence of commits starting from the current one, in reverse chronological order of the Git repository in the current working directory:", "command": "git log"}, {"task": "Show the history of a particular file or directory, including differences:", "command": "git log -p {{path/to/file_or_directory}}"}, {"task": "Show an overview of which file(s) changed in each commit:", "command": "git log --stat"}, {"task": "Show a graph of commits in the current branch using only the first line of each commit message:", "command": "git log --oneline --graph"}, {"task": "Show a graph of all commits, tags and branches in the entire repo:", "command": "git log --oneline --decorate --all --graph"}, {"task": "Show only commits whose messages include a given string (case-insensitively):", "command": "git log -i --grep {{search_string}}"}, {"task": "Show the last N commits from a certain author:", "command": "git log -n {{number}} --author={{author}}"}, {"task": "Show commits between two dates (yyyy-mm-dd):", "command": "git log --before=\"{{2017-01-29}}\" --after=\"{{2017-01-17}}\""}]}
{"command": "git ls-files", "tasks": [{"task": "Show deleted files:", "command": "git ls-files --deleted"}, {"task": "Show modified and deleted files:", "command": "git ls-files --modified"}, {"task": "Show ignored and untracked files:", "command": "git ls-files --others"}, {"task": "Show untracked files, not ignored:", "command": "git ls-files --others --exclude-standard"}]}
{"command": "git ls-remote", "tasks": [{"task": "Show all references in the default remote repository:", "command": "git ls-remote"}, {"task": "Show only heads references in the default remote repository:", "command": "git ls-remote --heads"}, {"task": "Show only tags references in the default remote repository:", "command": "git ls-remote --tags"}, {"task": "Show all references from a remote repository based on name or URL:", "command": "git ls-remote {{repository_url}}"}, {"task": "Show references from a remote repository filtered by a pattern:", "command": "git ls-remote {{repository_name}} \"{{pattern}}\""}]}
{"command": "git ls-tree", "tasks": [{"task": "List the contents of the tree on a branch:", "command": "git ls-tree {{branch_name}}"}, {"task": "List the contents of the tree on a commit, recursing into subtrees:", "command": "git ls-tree -r {{commit_hash}}"}, {"task": "List only the filenames of the tree on a commit:", "command": "git ls-tree --name-only {{commit_hash}}"}]}
{"command": "git mailinfo", "tasks": [{"task": "Extract the patch and author data from an email message:", "command": "git mailinfo {{message|patch}}"}, {"task": "Extract but remove leading and trailing whitespace:", "command": "git mailinfo -k {{message|patch}}"}, {"task": "Remove everything from the body before a scissors line (e.g. \"-->* --\") and retrieve the message or patch:", "command": "git mailinfo --scissors {{message|patch}}"}]}
{"command": "git-maintenance", "tasks": [{"task": "Register the current repository in the user's list of repositories to daily have maintenance run:", "command": "git maintenance register"}, {"task": "Start running maintenance on the current repository:", "command": "git maintenance start"}, {"task": "Halt the background maintenance schedule for the current repository:", "command": "git maintenance stop"}, {"task": "Remove the current repository from the user's maintenance repository list:", "command": "git maintenance unregister"}, {"task": "Run a specific maintenance task on the current repository:", "command": "git maintenance run --task={{commit-graph|gc|incremental-repack|loose-objects|pack-refs|prefetch}}"}]}
{"command": "git merge-base", "tasks": [{"task": "Print the best common ancestor of two commits:", "command": "git merge-base {{commit_1}} {{commit_2}}"}, {"task": "Output all best common ancestors of two commits:", "command": "git merge-base --all {{commit_1}} {{commit_2}}"}, {"task": "Check if a commit is an ancestor of a specific commit:", "command": "git merge-base --is-ancestor {{ancestor_commit}} {{commit}}"}]}
{"command": "git merge-into", "tasks": [{"task": "Merge a source branch into a specific destination branch:", "command": "git merge-into {{source_branch}} {{destination_branch}}"}, {"task": "Merge current branch into a specific destination branch:", "command": "git merge-into {{destination_branch}}"}]}
{"command": "git merge-repo", "tasks": [{"task": "Merge a repository's branch into the current repository's directory:", "command": "git merge-repo {{path/to/repo}} {{branch_name}} {{path/to/directory}}"}, {"task": "Merge a remote repository's branch into the current repository's directory, not preserving history:", "command": "git merge-repo {{path/to/remote_repo}} {{branch_name}} ."}]}
{"command": "git merge", "tasks": [{"task": "Merge a branch into your current branch:", "command": "git merge {{branch_name}}"}, {"task": "Edit the merge message:", "command": "git merge --edit {{branch_name}}"}, {"task": "Merge a branch and create a merge commit:", "command": "git merge --no-ff {{branch_name}}"}, {"task": "Abort a merge in case of conflicts:", "command": "git merge --abort"}, {"task": "Merge using a specific strategy:", "command": "git merge --strategy {{strategy}} --strategy-option {{strategy_option}} {{branch_name}}"}]}
{"command": "git mergetool", "tasks": [{"task": "Launch the default merge tool to resolve conflicts:", "command": "git mergetool"}, {"task": "List valid merge tools:", "command": "git mergetool --tool-help"}, {"task": "Launch the merge tool identified by a name:", "command": "git mergetool --tool {{tool_name}}"}, {"task": "Don't prompt before each invocation of the merge tool:", "command": "git mergetool --no-prompt"}, {"task": "Explicitly use the GUI merge tool (see the `merge.guitool` config variable):", "command": "git mergetool --gui"}, {"task": "Explicitly use the regular merge tool (see the `merge.tool` config variable):", "command": "git mergetool --no-gui"}]}
{"command": "git missing", "tasks": [{"task": "Show commits which aren't shared between the currently checked-out branch and another branch:", "command": "git missing {{branch}}"}, {"task": "Show commits which aren't shared between two branches:", "command": "git missing {{branch_1}} {{branch_2}}"}]}
{"command": "git mr", "tasks": [{"task": "Check out a specific merge request:", "command": "git mr {{mr_number}}"}, {"task": "Check out a merge request from a specific remote:", "command": "git mr {{mr_number}} {{remote}}"}, {"task": "Checkout a merge request from its URL:", "command": "git mr {{url}}"}, {"task": "Clean up old merge request branches:", "command": "git mr clean"}]}
{"command": "git mv", "tasks": [{"task": "Move a file inside the repo and add the movement to the next commit:", "command": "git mv {{path/to/file}} {{new/path/to/file}}"}, {"task": "Rename a file or directory and add the renaming to the next commit:", "command": "git mv {{path/to/file_or_directory}} {{path/to/destination}}"}, {"task": "Overwrite the file or directory in the target path if it exists:", "command": "git mv --force {{path/to/file_or_directory}} {{path/to/destination}}"}]}
{"command": "git notes", "tasks": [{"task": "List all notes and the objects they are attached to:", "command": "git notes list"}, {"task": "List all notes attached to a given object (defaults to HEAD):", "command": "git notes list [{{object}}]"}, {"task": "Show the notes attached to a given object (defaults to HEAD):", "command": "git notes show [{{object}}]"}, {"task": "Append a note to a specified object (opens the default text editor):", "command": "git notes append {{object}}"}, {"task": "Append a note to a specified object, specifying the message:", "command": "git notes append --message=\"{{message_text}}\""}, {"task": "Edit an existing note (defaults to HEAD):", "command": "git notes edit [{{object}}]"}, {"task": "Copy a note from one object to another:", "command": "git notes copy {{source_object}} {{target_object}}"}, {"task": "Remove all the notes added to a specified object:", "command": "git notes remove {{object}}"}]}
{"command": "git obliterate", "tasks": [{"task": "Erase the existence of specific files:", "command": "git obliterate {{file_1 file_2 ...}}"}, {"task": "Erase the existence of specific files between 2 commits:", "command": "git obliterate {{file_1 file_2 ...}} -- {{commit_hash_1}}..{{commit_hash_2}}"}]}
{"command": "git pr", "tasks": [{"task": "Check out a specific pull request:", "command": "git pr {{pr_number}}"}, {"task": "Check out a pull request from a specific remote:", "command": "git pr {{pr_number}} {{remote}}"}, {"task": "Check out a pull request from its URL:", "command": "git pr {{url}}"}, {"task": "Clean up old pull request branches:", "command": "git pr clean"}]}
{"command": "git prune", "tasks": [{"task": "Report what would be removed by Git prune without removing it:", "command": "git prune --dry-run"}, {"task": "Prune unreachable objects and display what has been pruned to `stdout`:", "command": "git prune --verbose"}, {"task": "Prune unreachable objects while showing progress:", "command": "git prune --progress"}]}
{"command": "git pull", "tasks": [{"task": "Download changes from default remote repository and merge it:", "command": "git pull"}, {"task": "Download changes from default remote repository and use fast-forward:", "command": "git pull --rebase"}, {"task": "Download changes from given remote repository and branch, then merge them into HEAD:", "command": "git pull {{remote_name}} {{branch}}"}]}
{"command": "git push", "tasks": [{"task": "Send local changes in the current branch to its default remote counterpart:", "command": "git push"}, {"task": "Send changes from a specific local branch to its remote counterpart:", "command": "git push {{remote_name}} {{local_branch}}"}, {"task": "Send changes from a specific local branch to its remote counterpart, and set the remote one as the default push/pull target of the local one:", "command": "git push -u {{remote_name}} {{local_branch}}"}, {"task": "Send changes from a specific local branch to a specific remote branch:", "command": "git push {{remote_name}} {{local_branch}}:{{remote_branch}}"}, {"task": "Send changes on all local branches to their counterparts in a given remote repository:", "command": "git push --all {{remote_name}}"}, {"task": "Delete a branch in a remote repository:", "command": "git push {{remote_name}} --delete {{remote_branch}}"}, {"task": "Remove remote branches that don't have a local counterpart:", "command": "git push --prune {{remote_name}}"}, {"task": "Publish tags that aren't yet in the remote repository:", "command": "git push --tags"}]}
{"command": "git range-diff", "tasks": [{"task": "Diff the changes of two individual commits:", "command": "git range-diff {{commit_1}}^! {{commit_2}}^!"}, {"task": "Diff the changes of ours and theirs from their common ancestor, e.g. after an interactive rebase:", "command": "git range-diff {{theirs}}...{{ours}}"}, {"task": "Diff the changes of two commit ranges, e.g. to check whether conflicts have been resolved appropriately when rebasing commits from `base1` to `base2`:", "command": "git range-diff {{base1}}..{{rev1}} {{base2}}..{{rev2}}"}]}
{"command": "git reauthor", "tasks": [{"task": "Change an author's email and name across the whole Git repository:", "command": "git reauthor --old-email {{old@example.com}} --correct-email {{new@example.com}} --correct-name \"{{name}}\""}, {"task": "Change the email and name to the ones defined in the Git config:", "command": "git reauthor --old-email {{old@example.com}} --use-config"}, {"task": "Change the email and name of all commits, regardless of their original author:", "command": "git reauthor --all --correct-email {{name@example.com}} --correct-name {{name}}"}]}
{"command": "git rebase", "tasks": [{"task": "Rebase the current branch on top of another specified branch:", "command": "git rebase {{new_base_branch}}"}, {"task": "Start an interactive rebase, which allows the commits to be reordered, omitted, combined or modified:", "command": "git rebase -i {{target_base_branch_or_commit_hash}}"}, {"task": "Continue a rebase that was interrupted by a merge failure, after editing conflicting files:", "command": "git rebase --continue"}, {"task": "Continue a rebase that was paused due to merge conflicts, by skipping the conflicted commit:", "command": "git rebase --skip"}, {"task": "Abort a rebase in progress (e.g. if it is interrupted by a merge conflict):", "command": "git rebase --abort"}, {"task": "Move part of the current branch onto a new base, providing the old base to start from:", "command": "git rebase --onto {{new_base}} {{old_base}}"}, {"task": "Reapply the last 5 commits in-place, stopping to allow them to be reordered, omitted, combined or modified:", "command": "git rebase -i {{HEAD~5}}"}, {"task": "Auto-resolve any conflicts by favoring the working branch version (`theirs` keyword has reversed meaning in this case):", "command": "git rebase -X theirs {{branch_name}}"}]}
{"command": "git reflog", "tasks": [{"task": "Show the reflog for HEAD:", "command": "git reflog"}, {"task": "Show the reflog for a given branch:", "command": "git reflog {{branch_name}}"}, {"task": "Show only the 5 latest entries in the reflog:", "command": "git reflog -n {{5}}"}]}
{"command": "git release", "tasks": [{"task": "Create and push a release:", "command": "git release {{tag_name}}"}, {"task": "Create and push a signed release:", "command": "git release {{tag_name}} -s"}, {"task": "Create and push a release with a message:", "command": "git release {{{tag_name}}} -m \"{{message}}\""}]}
{"command": "git remote", "tasks": [{"task": "Show a list of existing remotes, their names and URL:", "command": "git remote -v"}, {"task": "Show information about a remote:", "command": "git remote show {{remote_name}}"}, {"task": "Add a remote:", "command": "git remote add {{remote_name}} {{remote_url}}"}, {"task": "Change the URL of a remote (use `--add` to keep the existing URL):", "command": "git remote set-url {{remote_name}} {{new_url}}"}, {"task": "Show the URL of a remote:", "command": "git remote get-url {{remote_name}}"}, {"task": "Remove a remote:", "command": "git remote remove {{remote_name}}"}, {"task": "Rename a remote:", "command": "git remote rename {{old_name}} {{new_name}}"}]}
{"command": "git rename-branch", "tasks": [{"task": "Rename the branch you are currently on:", "command": "git rename-branch {{new_branch_name}}"}, {"task": "Rename a specific branch:", "command": "git rename-branch {{old_branch_name}} {{new_branch_name}}"}]}
{"command": "git rename-remote", "tasks": [{"task": "Change the upstream remote to origin:", "command": "git rename-remote {{upstream}} {{origin}}"}]}
{"command": "git rename-tag", "tasks": [{"task": "Rename an existing Git tag locally and remotely:", "command": "git rename-tag {{old_tag_name}} {{new_tag_name}}"}]}
{"command": "git repack", "tasks": [{"task": "Pack unpacked objects in the current directory:", "command": "git repack"}, {"task": "Also remove redundant objects after packing:", "command": "git repack -d"}]}
{"command": "git repl", "tasks": [{"task": "Start an interactive Git shell:", "command": "git repl"}, {"task": "Run a Git command while in the interactive Git shell:", "command": "{{git_subcommand}} {{command_arguments}}"}, {"task": "Run an external (non-Git) command while in the interactive Git shell:", "command": "!{{command}} {{command_arguments}}"}, {"task": "Exit the interactive Git shell (or press Ctrl + D):", "command": "exit"}]}
{"command": "git replace", "tasks": [{"task": "Replace any commit with a different one, leaving other commits unchanged:", "command": "git replace {{object}} {{replacement}}"}, {"task": "Delete existing replace refs for the given objects:", "command": "git replace --delete {{object}}"}, {"task": "Edit an object’s content interactively:", "command": "git replace --edit {{object}}"}]}
{"command": "git request-pull", "tasks": [{"task": "Produce a request summarizing the changes between the v1.1 release and a specified branch:", "command": "git request-pull {{v1.1}} {{https://example.com/project}} {{branch_name}}"}, {"task": "Produce a request summarizing the changes between the v0.1 release on the `foo` branch and the local `bar` branch:", "command": "git request-pull {{v0.1}} {{https://example.com/project}} {{foo:bar}}"}]}
{"command": "git reset-file", "tasks": [{"task": "Reset a file to HEAD:", "command": "git reset-file {{path/to/file}}"}, {"task": "Reset a file to a specific commit:", "command": "git reset-file {{path/to/file}} {{commit_hash}}"}]}
{"command": "git reset", "tasks": [{"task": "Unstage everything:", "command": "git reset"}, {"task": "Unstage specific file(s):", "command": "git reset {{path/to/file1 path/to/file2 ...}}"}, {"task": "Interactively unstage portions of a file:", "command": "git reset --patch {{path/to/file}}"}, {"task": "Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem:", "command": "git reset HEAD~"}, {"task": "Undo the last two commits, adding their changes to the index, i.e. staged for commit:", "command": "git reset --soft HEAD~2"}, {"task": "Discard any uncommitted changes, staged or not (for only unstaged changes, use `git checkout`):", "command": "git reset --hard"}, {"task": "Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then:", "command": "git reset --hard {{commit}}"}]}
{"command": "git restore", "tasks": [{"task": "Restore an unstaged file to the version of the current commit (HEAD):", "command": "git restore {{path/to/file}}"}, {"task": "Restore an unstaged file to the version of a specific commit:", "command": "git restore --source {{commit}} {{path/to/file}}"}, {"task": "Discard all unstaged changes to tracked files:", "command": "git restore :/"}, {"task": "Unstage a file:", "command": "git restore --staged {{path/to/file}}"}, {"task": "Unstage all files:", "command": "git restore --staged :/"}, {"task": "Discard all changes to files, both staged and unstaged:", "command": "git restore --worktree --staged :/"}, {"task": "Interactively select sections of files to restore:", "command": "git restore --patch"}]}
{"command": "git rev-list", "tasks": [{"task": "List all commits on the current branch:", "command": "git rev-list {{HEAD}}"}, {"task": "Print the latest commit that changed (add/edit/remove) a specific file on the current branch:", "command": "git rev-list -n 1 HEAD -- {{path/to/file}}"}, {"task": "List commits more recent than a specific date, on a specific branch:", "command": "git rev-list --since={{'2019-12-01 00:00:00'}} {{branch_name}}"}, {"task": "List all merge commits on a specific commit:", "command": "git rev-list --merges {{commit}}"}, {"task": "Print the number of commits since a specific tag:", "command": "git rev-list {{tag_name}}..HEAD --count"}]}
{"command": "git rev-parse", "tasks": [{"task": "Get the commit hash of a branch:", "command": "git rev-parse {{branch_name}}"}, {"task": "Get the current branch name:", "command": "git rev-parse --abbrev-ref {{HEAD}}"}, {"task": "Get the absolute path to the root directory:", "command": "git rev-parse --show-toplevel"}]}
{"command": "git revert", "tasks": [{"task": "Revert the most recent commit:", "command": "git revert {{HEAD}}"}, {"task": "Revert the 5th last commit:", "command": "git revert HEAD~{{4}}"}, {"task": "Revert a specific commit:", "command": "git revert {{0c01a9}}"}, {"task": "Revert multiple commits:", "command": "git revert {{branch_name~5..branch_name~2}}"}, {"task": "Don't create new commits, just change the working tree:", "command": "git revert -n {{0c01a9..9a1743}}"}]}
{"command": "git rm", "tasks": [{"task": "Remove file from repository index and filesystem:", "command": "git rm {{path/to/file}}"}, {"task": "Remove directory:", "command": "git rm -r {{path/to/directory}}"}, {"task": "Remove file from repository index but keep it untouched locally:", "command": "git rm --cached {{path/to/file}}"}]}
{"command": "git root", "tasks": [{"task": "Print the absolute path of the current Git repository:", "command": "git root"}, {"task": "Print the current working directory relative to the root of the current Git repository:", "command": "git root --relative"}]}
{"command": "git scp", "tasks": [{"task": "Copy unstaged files to a specific remote:", "command": "git scp {{remote_name}}"}, {"task": "Copy staged and unstaged files to a remote:", "command": "git scp {{remote_name}} HEAD"}, {"task": "Copy files that has been changed in the last commit and any staged or unstaged files to a remote:", "command": "git scp {{remote_name}} HEAD~1"}, {"task": "Copy specific files to a remote:", "command": "git scp {{remote_name}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Copy a specific directory to a remote:", "command": "git scp {{remote_name}} {{path/to/directory}}"}]}
{"command": "git secret", "tasks": [{"task": "Initialize `git-secret` in a local repository:", "command": "git secret init"}, {"task": "Grant access to the current Git user's email:", "command": "git secret tell -m"}, {"task": "Grant access by email:", "command": "git secret tell {{email}}"}, {"task": "Revoke access by email:", "command": "git secret killperson {{email}}"}, {"task": "List emails with access to secrets:", "command": "git secret whoknows"}, {"task": "Register a secret file:", "command": "git secret add {{path/to/file}}"}, {"task": "Encrypt secrets:", "command": "git secret hide"}, {"task": "Decrypt secret files:", "command": "git secret reveal"}]}
{"command": "git sed", "tasks": [{"task": "Replace the specified text in the current repository:", "command": "git sed '{{find_text}}' '{{replace_text}}'"}, {"task": "Replace the specified text and then commit the resulting changes with a standard commit message:", "command": "git sed -c '{{find_text}}' '{{replace_text}}'"}, {"task": "Replace the specified text, using regular expressions:", "command": "git sed -f g '{{find_text}}' '{{replace_text}}'"}, {"task": "Replace a specific text in all files under a given directory:", "command": "git sed '{{find_text}}' '{{replace_text}}' -- {{path/to/directory}}"}]}
{"command": "git send-email", "tasks": [{"task": "Send the last commit in the current branch:", "command": "git send-email -1"}, {"task": "Send a given commit:", "command": "git send-email -1 {{commit}}"}, {"task": "Send multiple (e.g. 10) commits in the current branch:", "command": "git send-email {{-10}}"}, {"task": "Send an introductory email message for the patch series:", "command": "git send-email -{{number_of_commits}} --compose"}, {"task": "Review and edit the email message for each patch you're about to send:", "command": "git send-email -{{number_of_commits}} --annotate"}]}
{"command": "git setup", "tasks": [{"task": "Create a Git repository in the current directory and commit all files:", "command": "git setup"}, {"task": "Create a Git repository in a specific directory and commit all files:", "command": "git setup {{path/to/directory}}"}]}
{"command": "git shortlog", "tasks": [{"task": "View a summary of all the commits made, grouped alphabetically by author name:", "command": "git shortlog"}, {"task": "View a summary of all the commits made, sorted by the number of commits made:", "command": "git shortlog -n"}, {"task": "View a summary of all the commits made, grouped by the committer identities (name and email):", "command": "git shortlog -c"}, {"task": "View a summary of the last 5 commits (i.e. specify a revision range):", "command": "git shortlog HEAD~{{5}}..HEAD"}, {"task": "View all users, emails and the number of commits in the current branch:", "command": "git shortlog -sne"}, {"task": "View all users, emails and the number of commits in all branches:", "command": "git shortlog -sne --all"}]}
{"command": "git show-branch", "tasks": [{"task": "Show a summary of the latest commit on a branch:", "command": "git show-branch {{branch_name|ref|commit}}"}, {"task": "Compare commits in the history of multiple commits or branches:", "command": "git show-branch {{branch_name|ref|commit}}"}, {"task": "Compare all remote tracking branches:", "command": "git show-branch --remotes"}, {"task": "Compare both local and remote tracking branches:", "command": "git show-branch --all"}, {"task": "List the latest commits in all branches:", "command": "git show-branch --all --list"}, {"task": "Compare a given branch with the current branch:", "command": "git show-branch --current {{commit|branch_name|ref}}"}, {"task": "Display the commit name instead of the relative name:", "command": "git show-branch --sha1-name --current {{current|branch_name|ref}}"}, {"task": "Keep going a given number of commits past the common ancestor:", "command": "git show-branch --more {{5}} {{commit|branch_name|ref}} {{commit|branch_name|ref}} {{...}}"}]}
{"command": "git show-index", "tasks": [{"task": "Read an IDX file for a Git packfile and dump its contents to `stdout`:", "command": "git show-index {{path/to/file.idx}}"}, {"task": "Specify the hash algorithm for the index file (experimental):", "command": "git show-index --object-format={{sha1|sha256}} {{path/to/file}}"}]}
{"command": "git show-merged-branches", "tasks": [{"task": "Print all branches which are merged into the current head:", "command": "git show-merged-branches"}]}
{"command": "git show-ref", "tasks": [{"task": "Show all refs in the repository:", "command": "git show-ref"}, {"task": "Show only heads references:", "command": "git show-ref --heads"}, {"task": "Show only tags references:", "command": "git show-ref --tags"}, {"task": "Verify that a given reference exists:", "command": "git show-ref --verify {{path/to/ref}}"}]}
{"command": "git show-tree", "tasks": [{"task": "Show a decorated tree graph for all branches annotated with tags and branch names:", "command": "git show-tree"}]}
{"command": "git show-unmerged-branches", "tasks": [{"task": "Print all branches which are not merged into the current HEAD:", "command": "git show-unmerged-branches"}]}
{"command": "git show", "tasks": [{"task": "Show information about the latest commit (hash, message, changes, and other metadata):", "command": "git show"}, {"task": "Show information about a given commit:", "command": "git show {{commit}}"}, {"task": "Show information about the commit associated with a given tag:", "command": "git show {{tag}}"}, {"task": "Show information about the 3rd commit from the HEAD of a branch:", "command": "git show {{branch}}~{{3}}"}, {"task": "Show a commit's message in a single line, suppressing the diff output:", "command": "git show --oneline -s {{commit}}"}, {"task": "Show only statistics (added/removed characters) about the changed files:", "command": "git show --stat {{commit}}"}, {"task": "Show only the list of added, renamed or deleted files:", "command": "git show --summary {{commit}}"}, {"task": "Show the contents of a file as it was at a given revision (e.g. branch, tag or commit):", "command": "git show {{revision}}:{{path/to/file}}"}]}
{"command": "git sizer", "tasks": [{"task": "Report only statistics that have a level of concern greater than 0:", "command": "git sizer"}, {"task": "Report all statistics:", "command": "git sizer -v"}, {"task": "See additional options:", "command": "git sizer -h"}]}
{"command": "git squash", "tasks": [{"task": "Merge all commits from a specific branch into the current branch as a single commit:", "command": "git squash {{source_branch}}"}, {"task": "Squash all commits starting with a specific commit on the current branch:", "command": "git squash {{commit}}"}, {"task": "Squash the `n` latest commits and commit with a message:", "command": "git squash HEAD~{{n}} \"{{message}}\""}, {"task": "Squash the `n` latest commits and commit concatenating all individual messages:", "command": "git squash --squash-msg HEAD~{{n}}"}]}
{"command": "git stage", "tasks": [{"task": "Add a file to the index:", "command": "git stage {{path/to/file}}"}, {"task": "Add all files (tracked and untracked):", "command": "git stage -A"}, {"task": "Only add already tracked files:", "command": "git stage -u"}, {"task": "Also add ignored files:", "command": "git stage -f"}, {"task": "Interactively stage parts of files:", "command": "git stage -p"}, {"task": "Interactively stage parts of a given file:", "command": "git stage -p {{path/to/file}}"}, {"task": "Interactively stage a file:", "command": "git stage -i"}]}
{"command": "git stamp", "tasks": [{"task": "Stamp the last commit message referencing it with the issue number from your bug tracker:", "command": "git stamp {{issue_number}}"}, {"task": "Stamp the last commit message linking it to its review page:", "command": "git stamp {{Review https://example.org/path/to/review}}"}, {"task": "Stamp the last commit message replacing previous issues with a new one:", "command": "git stamp --replace {{issue_number}}"}]}
{"command": "git standup", "tasks": [{"task": "Show a given author's commits from the last 10 days:", "command": "git standup -a {{name|email}} -d {{10}}"}, {"task": "Show a given author's commits from the last 10 days and whether they are GPG signed:", "command": "git standup -a {[name|email}} -d {{10}} -g"}, {"task": "Show all the commits from all contributors for the last 10 days:", "command": "git standup -a all -d {{10}}"}, {"task": "Display help:", "command": "git standup -h"}]}
{"command": "git stash", "tasks": [{"task": "Stash current changes, except new (untracked) files:", "command": "git stash push -m {{optional_stash_message}}"}, {"task": "Stash current changes, including new (untracked) files:", "command": "git stash -u"}, {"task": "Interactively select parts of changed files for stashing:", "command": "git stash -p"}, {"task": "List all stashes (shows stash name, related branch and message):", "command": "git stash list"}, {"task": "Show the changes as a patch between the stash (default is stash@{0}) and the commit back when stash entry was first created:", "command": "git stash show -p {{stash@{0}}}"}, {"task": "Apply a stash (default is the latest, named stash@{0}):", "command": "git stash apply {{optional_stash_name_or_commit}}"}, {"task": "Drop or apply a stash (default is stash@{0}) and remove it from the stash list if applying doesn't cause conflicts:", "command": "git stash pop {{optional_stash_name}}"}, {"task": "Drop all stashes:", "command": "git stash clear"}]}
{"command": "git status", "tasks": [{"task": "Show changed files which are not yet added for commit:", "command": "git status"}, {"task": "Give output in [s]hort format:", "command": "git status -s"}, {"task": "Don't show untracked files in the output:", "command": "git status --untracked-files=no"}, {"task": "Show output in [s]hort format along with [b]ranch info:", "command": "git status -sb"}]}
{"command": "git stripspace", "tasks": [{"task": "Trim whitespace from a file:", "command": "cat {{path/to/file}} | git stripspace"}, {"task": "Trim whitespace and Git comments from a file:", "command": "cat {{path/to/file}} | git stripspace --strip-comments"}, {"task": "Convert all lines in a file into Git comments:", "command": "git stripspace --comment-lines < {{path/to/file}}"}]}
{"command": "git submodule", "tasks": [{"task": "Install a repository's specified submodules:", "command": "git submodule update --init --recursive"}, {"task": "Add a Git repository as a submodule:", "command": "git submodule add {{repository_url}}"}, {"task": "Add a Git repository as a submodule at the specified directory:", "command": "git submodule add {{repository_url}} {{path/to/directory}}"}, {"task": "Update every submodule to its latest commit:", "command": "git submodule foreach git pull"}]}
{"command": "git subtree", "tasks": [{"task": "Add a Git repository as a subtree:", "command": "git subtree add --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}"}, {"task": "Update subtree repository to its latest commit:", "command": "git subtree pull --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}"}, {"task": "Merge recent changes up to the latest subtree commit into the subtree:", "command": "git subtree merge --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}"}, {"task": "Push commits to a subtree repository:", "command": "git subtree push --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}"}, {"task": "Extract a new project history from the history of a subtree:", "command": "git subtree split --prefix={{path/to/directory/}} {{repository_url}} -b {{branch_name}}"}]}
{"command": "git summary", "tasks": [{"task": "Display data about a Git repository:", "command": "git summary"}, {"task": "Display data about a Git repository since a commit-ish:", "command": "git summary {{commit|branch_name|tag_name}}"}, {"task": "Display data about a Git repository, merging committers using different emails into 1 statistic for each author:", "command": "git summary --dedup-by-email"}, {"task": "Display data about a Git repository, showing the number of lines modified by each contributor:", "command": "git summary --line"}]}
{"command": "git svn", "tasks": [{"task": "Clone an SVN repository:", "command": "git svn clone {{https://example.com/subversion_repo}} {{local_dir}}"}, {"task": "Clone an SVN repository starting at a given revision number:", "command": "git svn clone -r{{1234}}:HEAD {{https://svn.example.net/subversion/repo}} {{local_dir}}"}, {"task": "Update local clone from the remote SVN repository:", "command": "git svn rebase"}, {"task": "Fetch updates from the remote SVN repository without changing the Git HEAD:", "command": "git svn fetch"}, {"task": "Commit back to the SVN repository:", "command": "git svn dcommit"}]}
{"command": "git switch", "tasks": [{"task": "Switch to an existing branch:", "command": "git switch {{branch_name}}"}, {"task": "Create a new branch and switch to it:", "command": "git switch --create {{branch_name}}"}, {"task": "Create a new branch based on an existing commit and switch to it:", "command": "git switch --create {{branch_name}} {{commit}}"}, {"task": "Switch to the previous branch:", "command": "git switch -"}, {"task": "Switch to a branch and update all submodules to match:", "command": "git switch --recurse-submodules {{branch_name}}"}, {"task": "Switch to a branch and automatically merge the current branch and any uncommitted changes into it:", "command": "git switch --merge {{branch_name}}"}]}
{"command": "git symbolic-ref", "tasks": [{"task": "Store a reference by a name:", "command": "git symbolic-ref refs/{{name}} {{ref}}"}, {"task": "Store a reference by name, including a message with a reason for the update:", "command": "git symbolic-ref -m \"{{message}}\" refs/{{name}} refs/heads/{{branch_name}}"}, {"task": "Read a reference by name:", "command": "git symbolic-ref refs/{{name}}"}, {"task": "Delete a reference by name:", "command": "git symbolic-ref --delete refs/{{name}}"}, {"task": "For scripting, hide errors with `--quiet` and use `--short` to simplify (\"refs/heads/X\" prints as \"X\"):", "command": "git symbolic-ref --quiet --short refs/{{name}}"}]}
{"command": "git sync", "tasks": [{"task": "Sync the current local branch with its remote branch:", "command": "git sync"}, {"task": "Sync the current local branch with the remote main branch:", "command": "git sync origin main"}, {"task": "Sync without cleaning untracked files:", "command": "git sync -s {{remote_name}} {{branch_name}}"}]}
{"command": "git tag", "tasks": [{"task": "List all tags:", "command": "git tag"}, {"task": "Create a tag with the given name pointing to the current commit:", "command": "git tag {{tag_name}}"}, {"task": "Create a tag with the given name pointing to a given commit:", "command": "git tag {{tag_name}} {{commit}}"}, {"task": "Create an annotated tag with the given message:", "command": "git tag {{tag_name}} -m {{tag_message}}"}, {"task": "Delete the tag with the given name:", "command": "git tag -d {{tag_name}}"}, {"task": "Get updated tags from upstream:", "command": "git fetch --tags"}, {"task": "List all tags whose ancestors include a given commit:", "command": "git tag --contains {{commit}}"}]}
{"command": "git touch", "tasks": [{"task": "Create new files and add them to the index:", "command": "git touch {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "git undo", "tasks": [{"task": "Remove the most recent commit:", "command": "git undo"}, {"task": "Remove a specific number of the most recent commits:", "command": "git undo {{3}}"}]}
{"command": "git unlock", "tasks": [{"task": "Enable the ability to commit changes of a previously-locked local file:", "command": "git unlock {{path/to/file}}"}]}
{"command": "git unpack-file", "tasks": [{"task": "Create a file holding the contents of the blob specified by its ID then print the name of the temporary file:", "command": "git unpack-file {{blob_id}}"}]}
{"command": "git update-index", "tasks": [{"task": "Pretend that a modified file is unchanged (`git status` will not show this as changed):", "command": "git update-index --skip-worktree {{path/to/modified_file}}"}]}
{"command": "git update-ref", "tasks": [{"task": "Delete a ref, useful for soft resetting the first commit:", "command": "git update-ref -d {{HEAD}}"}, {"task": "Update ref with a message:", "command": "git update-ref -m {{message}} {{HEAD}} {{4e95e05}}"}]}
{"command": "git utimes", "tasks": [{"task": "Change all files modification time to their last commit date:", "command": "git utimes"}, {"task": "Change files modification time that are newer than their last commit date, preserving original modification time of files that were committed from the local repository:", "command": "git utimes --newer"}]}
{"command": "git var", "tasks": [{"task": "Print the value of a Git logical variable:", "command": "git var {{GIT_AUTHOR_IDENT|GIT_COMMITTER_IDENT|GIT_EDITOR|GIT_PAGER}}"}, {"task": "[l]ist all Git logical variables:", "command": "git var -l"}]}
{"command": "git verify-commit", "tasks": [{"task": "Check commits for a GPG signature:", "command": "git verify-commit {{commit_hash1 optional_commit_hash2 ...}}"}, {"task": "Check commits for a GPG signature and show details of each commit:", "command": "git verify-commit {{commit_hash1 optional_commit_hash2 ...}} --verbose"}, {"task": "Check commits for a GPG signature and print the raw details:", "command": "git verify-commit {{commit_hash1 optional_commit_hash2 ...}} --raw"}]}
{"command": "git verify-tag", "tasks": [{"task": "Check tags for a GPG signature:", "command": "git verify-tag {{tag1 optional_tag2 ...}}"}, {"task": "Check tags for a GPG signature and show details for each tag:", "command": "git verify-tag {{tag1 optional_tag2 ...}} --verbose"}, {"task": "Check tags for a GPG signature and print the raw details:", "command": "git verify-tag {{tag1 optional_tag2 ...}} --raw"}]}
{"command": "git whatchanged", "tasks": [{"task": "Display logs and changes for recent commits:", "command": "git whatchanged"}, {"task": "Display logs and changes for recent commits within the specified time frame:", "command": "git whatchanged --since=\"{{2 hours ago}}\""}, {"task": "Display logs and changes for recent commits for specific files or directories:", "command": "git whatchanged {{path/to/file_or_directory}}"}]}
{"command": "git worktree", "tasks": [{"task": "Create a new directory with the specified branch checked out into it:", "command": "git worktree add {{path/to/directory}} {{branch}}"}, {"task": "Create a new directory with a new branch checked out into it:", "command": "git worktree add {{path/to/directory}} -b {{new_branch}}"}, {"task": "List all the working directories attached to this repository:", "command": "git worktree list"}, {"task": "Remove a worktree (after deleting worktree directory):", "command": "git worktree prune"}]}
{"command": "git", "tasks": [{"task": "Check the Git version:", "command": "git --version"}, {"task": "Show general help:", "command": "git --help"}, {"task": "Show help on a Git subcommand (like `clone`, `add`, `push`, `log`, etc.):", "command": "git help {{subcommand}}"}, {"task": "Execute a Git subcommand:", "command": "git {{subcommand}}"}, {"task": "Execute a Git subcommand on a custom repository root path:", "command": "git -C {{path/to/repo}} {{subcommand}}"}, {"task": "Execute a Git subcommand with a given configuration set:", "command": "git -c '{{config.key}}={{value}}' {{subcommand}}"}]}
{"command": "github-label-sync", "tasks": [{"task": "Synchronize labels using a local `labels.json` file:", "command": "github-label-sync --access-token {{token}} {{repository_name}}"}, {"task": "Synchronize labels using a specific labels JSON file:", "command": "github-label-sync --access-token {{token}} --labels {{url|path/to/json_file}} {{repository_name}}"}, {"task": "Perform a dry run instead of actually synchronizing labels:", "command": "github-label-sync --access-token {{token}} --dry-run {{repository_name}}"}, {"task": "Keep labels that aren't in `labels.json`:", "command": "github-label-sync --access-token {{token}} --allow-added-labels {{repository_name}}"}, {"task": "Synchronize using the `GITHUB_ACCESS_TOKEN` environment variable:", "command": "github-label-sync {{repository_name}}"}]}
{"command": "gitk", "tasks": [{"task": "Show the repository browser for the current Git repository:", "command": "gitk"}, {"task": "Show repository browser for a specific file or directory:", "command": "gitk {{path/to/file_or_directory}}"}, {"task": "Show commits made since 1 week ago:", "command": "gitk --since=\"{{1 week ago}}\""}, {"task": "Show commits older than 1/1/2016:", "command": "gitk --until=\"{{1/1/2015}}\""}, {"task": "Show at most 100 changes in all branches:", "command": " gitk --max-count={{100}} --all"}]}
{"command": "gitlab-ctl", "tasks": [{"task": "Display the status of every service:", "command": "sudo gitlab-ctl status"}, {"task": "Display the status of a specific service:", "command": "sudo gitlab-ctl status {{nginx}}"}, {"task": "Restart every service:", "command": "sudo gitlab-ctl restart"}, {"task": "Restart a specific service:", "command": "sudo gitlab-ctl restart {{nginx}}"}, {"task": "Display the logs of every service and keep reading until `Ctrl + C` is pressed:", "command": "sudo gitlab-ctl tail"}, {"task": "Display the logs of a specific service:", "command": "sudo gitlab-ctl tail {{nginx}}"}]}
{"command": "gitlab-runner", "tasks": [{"task": "Register a runner:", "command": "sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}}"}, {"task": "Register a runner with a Docker executor:", "command": "sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}} --executor {{docker}}"}, {"task": "Unregister a runner:", "command": "sudo gitlab-runner unregister --name {{name}}"}, {"task": "Display the status of the runner service:", "command": "sudo gitlab-runner status"}, {"task": "Restart the runner service:", "command": "sudo gitlab-runner restart"}, {"task": "Check if the registered runners can connect to GitLab:", "command": "sudo gitlab-runner verify"}]}
{"command": "gitlab", "tasks": [{"task": "Create a new project:", "command": "gitlab create_project {{project_name}}"}, {"task": "Get info about a specific commit:", "command": "gitlab commit {{project_name}} {{commit_hash}}"}, {"task": "Get info about jobs in a CI pipeline:", "command": "gitlab pipeline_jobs {{project_name}} {{pipeline_id}}"}, {"task": "Start a specific CI job:", "command": "gitlab job_play {{project_name}} {{job_id}}"}]}
{"command": "gitlint", "tasks": [{"task": "Check the last commit message:", "command": "gitlint"}, {"task": "The range of commits to lint:", "command": "gitlint --commits {{single_refspec_argument}}"}, {"task": "Path to a directory or Python module with extra user-defined rules:", "command": "gitlint --extra-path {{path/to/directory}}"}, {"task": "Start a specific CI job:", "command": "gitlint --target {{path/to/target_directory}}"}, {"task": "Path to a file containing a commit-msg:", "command": "gitlint --msg-filename {{path/to/filename}}"}, {"task": "Read staged commit meta-info from the local repository:", "command": "gitlint --staged"}]}
{"command": "gitmoji", "tasks": [{"task": "Start the commit wizard:", "command": "gitmoji --commit"}, {"task": "Initialize the git hook (so `gitmoji` will be run every time `git commit` is run):", "command": "gitmoji --init"}, {"task": "Remove the git hook:", "command": "gitmoji --remove"}, {"task": "List all available emojis and their descriptions:", "command": "gitmoji --list"}, {"task": "Search emoji list for a list of keywords:", "command": "gitmoji --search {{keyword1}} {{keyword2}}"}, {"task": "Update cached list of emojis from main repository:", "command": "gitmoji --update"}, {"task": "Configure global preferences:", "command": "gitmoji --config"}]}
{"command": "gitsome", "tasks": [{"task": "Enter the gitsome shell (optional), to enable autocompletion and interactive help for Git (and gh) commands:", "command": "gitsome"}, {"task": "Setup GitHub integration with the current account:", "command": "gh configure"}, {"task": "List notifications for the current account (as would be seen in https://github.com/notifications):", "command": "gh notifications"}, {"task": "List the current account's starred repos, filtered by a given search string:", "command": "gh starred \"{{python 3}}\""}, {"task": "View the recent activity feed of a given GitHub repository:", "command": "gh feed {{tldr-pages/tldr}}"}, {"task": "View the recent activity feed for a given GitHub user, using the default pager (e.g. `less`):", "command": "gh feed {{torvalds}} -p"}]}
{"command": "gitwatch", "tasks": [{"task": "Automatically commit any changes made to a file or directory:", "command": "gitwatch {{path/to/file_or_directory}}"}, {"task": "Automatically commit changes and push them to a remote repository:", "command": "gitwatch -r {{remote_name}} {{path/to/file_or_directory}}"}, {"task": "Automatically commit changes and push them to a specific branch of a remote repository:", "command": "gitwatch -r {{remote_name}} -b {{branch_name}} {{path/to/file_or_directory}}"}]}
{"command": "gixy", "tasks": [{"task": "Analyze nginx configuration (default path: `/etc/nginx/nginx.conf`):", "command": "gixy"}, {"task": "Analyze nginx configuration but skip specific tests:", "command": "gixy --skips {{http_splitting}}"}, {"task": "Analyze nginx configuration with the specific severity level:", "command": "gixy {{-l|-ll|-lll}}"}, {"task": "Analyze nginx configuration files on the specific path:", "command": "gixy {{path/to/configuration_file_1}} {{path/to/configuration_file_2}}"}]}
{"command": "glab alias", "tasks": [{"task": "Display the subcommand help:", "command": "glab alias"}, {"task": "List all the aliases `glab` is configured to use:", "command": "glab alias list"}, {"task": "Create a `glab` subcommand alias:", "command": "glab alias set {{mrv}} '{{mr view}}'"}, {"task": "Set a shell command as a `glab` subcommand:", "command": "glab alias set --shell {{alias_name}} {{command}}"}, {"task": "Delete a command shortcut:", "command": "glab alias delete {{alias_name}}"}]}
{"command": "glab auth", "tasks": [{"task": "Log in with interactive prompt:", "command": "glab auth login"}, {"task": "Log in with a token:", "command": "glab auth login --token {{token}}"}, {"task": "Check authentication status:", "command": "glab auth status"}, {"task": "Log in to a specific GitLab instance:", "command": "glab auth login --hostname {{gitlab.example.com}}"}]}
{"command": "glab issue", "tasks": [{"task": "Display a specific issue:", "command": "glab issue view {{issue_number}}"}, {"task": "Display a specific issue in the default web browser:", "command": "glab issue view {{issue_number}} --web"}, {"task": "Create a new issue in the default web browser:", "command": "glab issue create --web"}, {"task": "List the last 10 issues with the `bug` label:", "command": "glab issue list --per-page {{10}} --label \"{{bug}}\""}, {"task": "List closed issues made by a specific user:", "command": "glab issue list --closed --author {{username}}"}, {"task": "Reopen a specific issue:", "command": "glab issue reopen {{issue_number}}"}]}
{"command": "glab mr create", "tasks": [{"task": "Interactively create a merge request:", "command": "glab mr create"}, {"task": "Create a merge request, determining the title and description from the commit messages of the current branch:", "command": "glab mr create --fill"}, {"task": "Create a draft merge request:", "command": "glab mr create --draft"}, {"task": "Create a merge request specifying the target branch, title, and description:", "command": "glab mr create --target-branch {{target_branch}} --title \"{{title}}\" --description \"{{description}}\""}, {"task": "Start opening a merge request in the default web browser:", "command": "glab mr create --web"}]}
{"command": "glab mr merge", "tasks": [{"task": "Merge the merge request associated with the current branch interactively:", "command": "glab mr merge"}, {"task": "Merge the specified merge request, interactively:", "command": "glab mr merge {{mr_number}}"}, {"task": "Merge the merge request, removing the branch on both the local and the remote:", "command": "glab mr merge --remove-source-branch"}, {"task": "Squash the current merge request into one commit with the message body and merge:", "command": "glab mr merge --squash --message=\"{{commit_message_body}}\""}, {"task": "Display help:", "command": "glab mr merge --help"}]}
{"command": "glab mr", "tasks": [{"task": "Create a merge request:", "command": "glab mr create"}, {"task": "Check out a specific merge request locally:", "command": "glab mr checkout {{mr_number}}"}, {"task": "View the changes made in the merge request:", "command": "glab mr diff"}, {"task": "Approve the merge request for the current branch:", "command": "glab mr approve"}, {"task": "Merge the merge request associated with the current branch interactively:", "command": "glab mr merge"}, {"task": "Edit a merge request interactively:", "command": "glab mr update"}, {"task": "Edit the target branch of a merge request:", "command": "glab mr update --target-branch {{branch_name}}"}]}
{"command": "glab pipeline", "tasks": [{"task": "View a running pipeline on the current branch:", "command": "glab pipeline status"}, {"task": "View a running pipeline on a specific branch:", "command": "glab pipeline status --branch {{branch_name}}"}, {"task": "Get the list of pipelines:", "command": "glab pipeline list"}, {"task": "Run a manual pipeline on the current branch:", "command": "glab pipeline run"}, {"task": "Run a manual pipeline on a specific branch:", "command": "glab pipeline run --branch {{branch_name}}"}]}
{"command": "glab release", "tasks": [{"task": "List releases in a Gitlab repository, limited to 30 items:", "command": "glab release list"}, {"task": "Display information about a specific release:", "command": "glab release view {{tag}}"}, {"task": "Create a new release:", "command": "glab release create {{tag}}"}, {"task": "Delete a specific release:", "command": "glab release delete {{tag}}"}, {"task": "Download assets from a specific release:", "command": "glab release download {{tag}}"}, {"task": "Upload assets to a specific release:", "command": "glab release upload {{tag}} {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "glab repo", "tasks": [{"task": "Create a new repository (if the repository name is not set, the default name will be the name of the current directory):", "command": "glab repo create {{name}}"}, {"task": "Clone a repository:", "command": "glab repo clone {{owner}}/{{repository}}"}, {"task": "Fork and clone a repository:", "command": "glab repo fork {{owner}}/{{repository}} --clone"}, {"task": "View a repository in the default web browser:", "command": "glab repo view {{owner}}/{{repository}} --web"}, {"task": "Search some repositories in the GitLab instance:", "command": "glab repo search -s {{search_string}}"}]}
{"command": "glab", "tasks": [{"task": "Clone a GitLab repository locally:", "command": "glab repo clone {{owner}}/{{repository}}"}, {"task": "Create a new issue:", "command": "glab issue create"}, {"task": "View and filter the open issues of the current repository:", "command": "glab issue list"}, {"task": "View an issue in the default browser:", "command": "glab issue view --web {{issue_number}}"}, {"task": "Create a merge request:", "command": "glab mr create"}, {"task": "View a pull request in the default web browser:", "command": "glab mr view --web {{pr_number}}"}, {"task": "Check out a specific pull request locally:", "command": "glab mr checkout {{pr_number}}"}]}
{"command": "glances", "tasks": [{"task": "Run in terminal:", "command": "glances"}, {"task": "Run in web server mode to show results in browser:", "command": "glances -w"}, {"task": "Run in server mode to allow connections from other Glances clients:", "command": "glances -s"}, {"task": "Connect to a Glances server:", "command": "glances -c {{hostname}}"}, {"task": "Require a password in (web) server mode:", "command": "glances -s --password"}]}
{"command": "glib-compile-resources", "tasks": [{"task": "Compile resources referenced in `file.gresource.xml` to a .gresource binary:", "command": "glib-compile-resources {{file.gresource.xml}}"}, {"task": "Compile resources referenced in `file.gresource.xml` to a C source file:", "command": "glib-compile-resources --generate-source {{file.gresource.xml}}"}, {"task": "Compile resources in `file.gresource.xml` to a chosen target file, with `.c`, `.h` or `.gresource` extension:", "command": "glib-compile-resources --generate --target={{file.ext}} {{file.gresource.xml}}"}, {"task": "Print a list of resource files referenced in `file.gresource.xml`:", "command": "glib-compile-resources --generate-dependencies {{file.gresource.xml}}"}]}
{"command": "glow", "tasks": [{"task": "Run glow and select a file to view:", "command": "glow"}, {"task": "Render a Markdown file to the terminal:", "command": "glow {{path/to/file}}"}, {"task": "View a Markdown file using a paginator:", "command": "glow -p {{path/to/file}}"}, {"task": "View a file from a URL:", "command": "glow {{https://example.com/file.md}}"}, {"task": "View a GitHub/GitLab README:", "command": "glow {{github.com/owner/repository}}"}]}
{"command": "gml2gv", "tasks": [{"task": "Convert a graph from `gml` to `gv` format:", "command": "gml2gv -o {{output.gv}} {{input.gml}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.gml}} | gml2gv > {{output.gv}}"}, {"task": "Display help:", "command": "gml2gv -?"}]}
{"command": "gmssl", "tasks": [{"task": "Generate an SM3 hash for a file:", "command": "gmssl sm3 {{path/to/file}}"}, {"task": "Encrypt a file using the SM4 cipher:", "command": "gmssl sms4 -e -in {{path/to/file}} -out {{path/to/file.sms4}}"}, {"task": "Decrypt a file using the SM4 cipher:", "command": "gmssl sms4 -d -in {{path/to/file.sms4}}"}, {"task": "Generate an SM2 private key:", "command": "gmssl sm2 -genkey -out {{path/to/file.pem}}"}, {"task": "Generate an SM2 public key from an existing private key:", "command": "gmssl sm2 -pubout -in {{path/to/file.pem}} -out {{path/to/file.pem.pub}}"}, {"task": "Encrypt a file using the ZUC cipher:", "command": "gmssl zuc -e -in {{path/to/file}} -out {{path/to/file.zuc}}"}, {"task": "Decrypt a file using the ZUC cipher:", "command": "gmssl zuc -d -in {{path/to/file.zuc}}"}, {"task": "Print version:", "command": "gmssl version"}]}
{"command": "gnatmake", "tasks": [{"task": "Compile an executable:", "command": "gnatmake {{source_file1.adb source_file2.adb ...}}"}, {"task": "Set a custom executable name:", "command": "gnatmake -o {{executable_name}} {{source_file.adb}}"}, {"task": "[f]orce recompilation:", "command": "gnatmake -f {{source_file.adb}}"}]}
{"command": "gnatprep", "tasks": [{"task": "Use symbol definitions from a file:", "command": "gnatprep {{source_file}} {{target_file}} {{definitions_file}}"}, {"task": "Specify symbol values in the command-line:", "command": "gnatprep -D{{name}}={{value}} {{source_file}} {{target_file}}"}]}
{"command": "gnmic get", "tasks": [{"task": "Get a snapshot of the device state at a specific path:", "command": "gnmic --address {{ip:port}} get --path {{path}}"}, {"task": "Query the device state at multiple paths:", "command": "gnmic -a {{ip:port}} get --path {{path1}} --path {{path2}}"}, {"task": "Query the device state at multiple paths with a common prefix:", "command": "gnmic -a {{ip:port}} get --prefix {{prefix}} --path {{path1}} --path {{path2}}"}, {"task": "Query the device state and specify response encoding (json_ietf):", "command": "gnmic -a {{ip:port}} get --path {{path}} --encoding json_ietf"}]}
{"command": "gnmic set", "tasks": [{"task": "Update the value of a path:", "command": "gnmic --address {{ip:port}} set --update-path {{path}} --update-value {{value}}"}, {"task": "Update the value of a path to match the contents of a json file:", "command": "gnmic -a {{ip:port}} set --update-path {{path}} --update-file {{filepath}}"}, {"task": "Replace the value of a path to match the contents of a json file:", "command": "gnmic -a {{ip:port}} set --replace-path {{path}} --replace-file {{filepath}}"}, {"task": "Delete the node at a given path:", "command": "gnmic -a {{ip:port}} set --delete {{path}}"}]}
{"command": "gnmic sub", "tasks": [{"task": "View documentation for the original command:", "command": "tldr gnmic subscribe"}]}
{"command": "gnmic subscribe", "tasks": [{"task": "Subscribe to target state updates under the subtree of a specific path:", "command": "gnmic --address {{ip:port}} subscribe --path {{path}}"}, {"task": "Subscribe to a target with a sample interval of 30s (default is 10s):", "command": "gnmic -a {{ip:port}} subscribe --path {{path}} --sample-interval 30s"}, {"task": "Subscribe to a target with sample interval and updates only on change:", "command": "gnmic -a {{ip:port}} subscribe --path {{path}} --stream-mode on-change --heartbeat-interval 1m"}, {"task": "Subscribe to a target for only one update:", "command": "gnmic -a {{ip:port}} subscribe --path {{path}} --mode once"}, {"task": "Subscribe to a target and specify response encoding (json_ietf):", "command": "gnmic -a {{ip:port}} subscribe --path {{path}} --encoding json_ietf"}]}
{"command": "gnmic", "tasks": [{"task": "Request device capabilities:", "command": "gnmic --address {{ip:port}} capabilities"}, {"task": "Provide a username and password to fetch device capabilities:", "command": "gnmic --address {{ip:port}} --username {{username}} --password {{password}} capabilities"}, {"task": "Get a snapshot of the device state at a specific path:", "command": "gnmic -a {{ip:port}} get --path {{path}}"}, {"task": "Update device state at a specific path:", "command": "gnmic -a {{ip:port}} set --update-path {{path}} --update-value {{value}}"}, {"task": "Subscribe to target state updates under the subtree at a specific path:", "command": "gnmic -a {{ip:port}} subscribe --path {{path}}"}]}
{"command": "gnomon", "tasks": [{"task": "Use UNIX (or DOS) pipes to pipe `stdout` of any command through gnomon:", "command": "{{npm test}} | gnomon"}, {"task": "Show number of seconds since the start of the process:", "command": "{{npm test}} | gnomon --type=elapsed-total"}, {"task": "Show an absolute timestamp in UTC:", "command": "{{npm test}} | gnomon --type=absolute"}, {"task": "Set a high threshold of 0.5 seconds for the elapsed time; exceeding which the timestamp will be colored bright red:", "command": "{{npm test}} | gnomon --high {{0.5}}"}, {"task": "Set a medium threshold of 0.2 seconds (Timestamp will be colored bright yellow):", "command": "{{npm test}} | gnomon --medium {{0.2}}"}]}
{"command": "gnucash-cli", "tasks": [{"task": "Get quotes for currencies and stocks specified in a file and print them:", "command": "gnucash-cli --quotes get {{path/to/file.gnucash}}"}, {"task": "Generate a financial report of a specific type, specified by `--name`:", "command": "gnucash-cli --report run --name \"{{Balance Sheet}}\" {{path/to/file.gnucash}}"}]}
{"command": "gnucash", "tasks": [{"task": "Launch GnuCash and load the previously opened file:", "command": "gnucash"}, {"task": "Launch GnuCash and load the specified file:", "command": "gnucash {{path/to/file.gnucash}}"}, {"task": "Launch GnuCash and load an empty file:", "command": "gnucash --nofile"}]}
{"command": "gnuplot", "tasks": [{"task": "Start the interactive graph plotting shell:", "command": "gnuplot"}, {"task": "Plot the graph for the specified graph definition file:", "command": "gnuplot {{path/to/definition.plt}}"}, {"task": "Set the output format by executing a command before loading the definition file:", "command": "gnuplot -e \"{{set output \"path/to/filename.png\" size 1024,768}}\" {{path/to/definition.plt}}"}, {"task": "Persist the graph plot preview window after gnuplot exits:", "command": "gnuplot --persist {{path/to/definition.plt}}"}]}
{"command": "go bug", "tasks": [{"task": "Open a web page to start a bug report:", "command": "go bug"}]}
{"command": "go build", "tasks": [{"task": "Compile a 'package main' file (output will be the filename without extension):", "command": "go build {{path/to/main.go}}"}, {"task": "Compile, specifying the output filename:", "command": "go build -o {{path/to/binary}} {{path/to/source.go}}"}, {"task": "Compile a package:", "command": "go build -o {{path/to/binary}} {{path/to/package}}"}, {"task": "Compile a main package into an executable, enabling data race detection:", "command": "go build -race -o {{path/to/executable}} {{path/to/main/package}}"}]}
{"command": "go clean", "tasks": [{"task": "Print the remove commands instead of actually removing anything:", "command": "go clean -n"}, {"task": "Delete the build cache:", "command": "go clean -cache"}, {"task": "Delete all cached test results:", "command": "go clean -testcache"}, {"task": "Delete the module cache:", "command": "go clean -modcache"}]}
{"command": "go doc", "tasks": [{"task": "Show documentation for the current package:", "command": "go doc"}, {"task": "Show package documentation and exported symbols:", "command": "go doc {{encoding/json}}"}, {"task": "Show also documentation of symbols:", "command": "go doc -all {{encoding/json}}"}, {"task": "Show also sources:", "command": "go doc -all -src {{encoding/json}}"}, {"task": "Show a specific symbol:", "command": "go doc -all -src {{encoding/json.Number}}"}]}
{"command": "go env", "tasks": [{"task": "Show all environment variables:", "command": "go env"}, {"task": "Show a specific environment variable:", "command": "go env {{GOPATH}}"}, {"task": "Set an environment variable to a value:", "command": "go env -w {{GOBIN}}={{path/to/directory}}"}, {"task": "Reset an environment variable's value:", "command": "go env -u {{GOBIN}}"}]}
{"command": "go fix", "tasks": [{"task": "Update packages to use new APIs:", "command": "go fix {{packages}}"}]}
{"command": "go fmt", "tasks": [{"task": "Format Go source files in the current directory:", "command": "go fmt"}, {"task": "Format a specific Go package in your import path (`$GOPATH/src`):", "command": "go fmt {{path/to/package}}"}, {"task": "Format the package in the current directory and all subdirectories (note the `...`):", "command": "go fmt {{./...}}"}, {"task": "Print what format commands would've been run, without modifying anything:", "command": "go fmt -n"}, {"task": "Print which format commands are run as they are run:", "command": "go fmt -x"}]}
{"command": "go generate", "tasks": [{"task": "Generate Go files by running commands within source files:", "command": "go generate"}]}
{"command": "go get", "tasks": [{"task": "Add a specified package to `go.mod` in module-mode or install the package in GOPATH-mode:", "command": "go get {{example.com/pkg}}"}, {"task": "Modify the package with a given version in module-aware mode:", "command": "go get {{example.com/pkg}}@{{v1.2.3}}"}, {"task": "Remove a specified package:", "command": "go get {{example.com/pkg}}@{{none}}"}]}
{"command": "go install", "tasks": [{"task": "Compile and install the current package:", "command": "go install"}, {"task": "Compile and install a specific local package:", "command": "go install {{path/to/package}}"}, {"task": "Install the latest version of a program, ignoring `go.mod` in the current directory:", "command": "go install {{golang.org/x/tools/gopls}}@{{latest}}"}, {"task": "Install a program at the version selected by `go.mod` in the current directory:", "command": "go install {{golang.org/x/tools/gopls}}"}]}
{"command": "go list", "tasks": [{"task": "List packages:", "command": "go list ./..."}, {"task": "List standard packages:", "command": "go list std"}, {"task": "List packages in JSON format:", "command": "go list -json time net/http"}, {"task": "List module dependencies and available updates:", "command": "go list -m -u all"}]}
{"command": "go mod", "tasks": [{"task": "Initialize new module in current directory:", "command": "go mod init {{moduleName}}"}, {"task": "Download modules to local cache:", "command": "go mod download"}, {"task": "Add missing and remove unused modules:", "command": "go mod tidy"}, {"task": "Verify dependencies have expected content:", "command": "go mod verify"}, {"task": "Copy sources of all dependencies into the vendor directory:", "command": "go mod vendor"}]}
{"command": "go run", "tasks": [{"task": "Run a Go file:", "command": "go run {{path/to/file.go}}"}, {"task": "Run a main Go package:", "command": "go run {{path/to/package}}"}]}
{"command": "go test", "tasks": [{"task": "Test the package found in the current directory:", "command": "go test"}, {"task": "[v]erbosely test the package in the current directory:", "command": "go test -v"}, {"task": "Test the packages in the current directory and all subdirectories (note the `...`):", "command": "go test -v ./..."}, {"task": "Test the package in the current directory and run all benchmarks:", "command": "go test -v -bench ."}, {"task": "Test the package in the current directory and run all benchmarks for 50 seconds:", "command": "go test -v -bench . -benchtime {{50s}}"}, {"task": "Test the package with coverage analysis:", "command": "go test -cover"}]}
{"command": "go tool", "tasks": [{"task": "List available tools:", "command": "go tool"}, {"task": "Run the go link tool:", "command": "go tool link {{path/to/main.o}}"}, {"task": "Print the command that would be executed, but do not execute it (similar to `whereis`):", "command": "go tool -n {{command}} {{arguments}}"}, {"task": "Display documentation for a specified tool:", "command": "go tool {{command}} --help"}]}
{"command": "go version", "tasks": [{"task": "Print Go version:", "command": "go version"}, {"task": "Print the Go version used to build the named executable file:", "command": "go version {{path/to/executable}}"}]}
{"command": "go vet", "tasks": [{"task": "Check the Go package in the current directory:", "command": "go vet"}, {"task": "Check the Go package in the specified path:", "command": "go vet {{path/to/file_or_directory}}"}, {"task": "List available checks that can be run with go vet:", "command": "go tool vet help"}, {"task": "View details and flags for a particular check:", "command": "go tool vet help {{check_name}}"}, {"task": "Display offending lines plus N lines of surrounding context:", "command": "go vet -c={{N}}"}, {"task": "Output analysis and errors in JSON format:", "command": "go vet -json"}]}
{"command": "go", "tasks": [{"task": "Download and install a package, specified by its import path:", "command": "go get {{package_path}}"}, {"task": "Compile and run a source file (it has to contain a `main` package):", "command": "go run {{file}}.go"}, {"task": "Compile a source file into a named executable:", "command": "go build -o {{executable}} {{file}}.go"}, {"task": "Compile the package present in the current directory:", "command": "go build"}, {"task": "Execute all test cases of the current package (files have to end with `_test.go`):", "command": "go test"}, {"task": "Compile and install the current package:", "command": "go install"}, {"task": "Initialize a new module in the current directory:", "command": "go mod init {{module_name}}"}]}
{"command": "gobuster", "tasks": [{"task": "Discover directories and files that match in the wordlist:", "command": "gobuster dir --url {{https://example.com/}} --wordlist {{path/to/file}}"}, {"task": "Discover subdomains:", "command": "gobuster dns --domain {{example.com}} --wordlist {{path/to/file}}"}, {"task": "Discover Amazon S3 buckets:", "command": "gobuster s3 --wordlist {{path/to/file}}"}, {"task": "Discover other virtual hosts on the server:", "command": "gobuster vhost --url {{https://example.com/}} --wordlist {{path/to/file}}"}, {"task": "Fuzz the value of a parameter:", "command": "gobuster fuzz --url {{https://example.com/?parameter=FUZZ}} --wordlist {{path/to/file}}"}, {"task": "Fuzz the name of a parameter:", "command": "gobuster fuzz --url {{https://example.com/?FUZZ=value}} --wordlist {{path/to/file}}"}]}
{"command": "gocryptfs", "tasks": [{"task": "Initialize an encrypted filesystem:", "command": "gocryptfs -init {{path/to/cipher_dir}}"}, {"task": "Mount an encrypted filesystem:", "command": "gocryptfs {{path/to/cipher_dir}} {{path/to/mount_point}}"}, {"task": "Mount with the explicit master key instead of password:", "command": "gocryptfs --masterkey {{path/to/cipher_dir}} {{path/to/mount_point}}"}, {"task": "Change the password:", "command": "gocryptfs --passwd {{path/to/cipher_dir}}"}, {"task": "Make an encrypted snapshot of a plain directory:", "command": "gocryptfs --reverse {{path/to/plain_dir}} {{path/to/cipher_dir}}"}]}
{"command": "godoc", "tasks": [{"task": "Display help for package \"fmt\":", "command": "godoc {{fmt}}"}, {"task": "Display help for the function \"Printf\" of \"fmt\" package:", "command": "godoc {{fmt}} {{Printf}}"}, {"task": "Serve documentation as a web server on port 6060:", "command": "godoc -http=:{{6060}}"}, {"task": "Create an index file:", "command": "godoc -write_index -index_files={{path/to/file}}"}, {"task": "Use the given index file to search the docs:", "command": "godoc -http=:{{6060}} -index -index_files={{path/to/file}}"}]}
{"command": "godot", "tasks": [{"task": "Run a project if the current directory contains a `project.godot` file, otherwise open the project manager:", "command": "godot"}, {"task": "Edit a project (the current directory must contain a `project.godot` file):", "command": "godot -e"}, {"task": "Open the project manager even if the current directory contains a `project.godot` file:", "command": "godot -p"}, {"task": "Export a project for a given export preset (the preset must be defined in the project):", "command": "godot --export {{preset}} {{output_path}}"}, {"task": "Execute a standalone GDScript file (the script must inherit from `SceneTree` or `MainLoop`):", "command": "godot -s {{script.gd}}"}]}
{"command": "gofmt", "tasks": [{"task": "Format a file and display the result to the console:", "command": "gofmt {{source.go}}"}, {"task": "Format a file, overwriting the original file in-place:", "command": "gofmt -w {{source.go}}"}, {"task": "Format a file, and then simplify the code, overwriting the original file:", "command": "gofmt -s -w {{source.go}}"}, {"task": "Print all (including spurious) errors:", "command": "gofmt -e {{source.go}}"}]}
{"command": "goimports", "tasks": [{"task": "Display the completed import source file:", "command": "goimports {{path/to/file}}.go"}, {"task": "Write the result back to the source file instead of `stdout`:", "command": "goimports -w {{path/to/file}}.go"}, {"task": "Display diffs and write the result back to the source file:", "command": "goimports -w -d {{path/to/file}}.go"}, {"task": "Set the import prefix string after 3rd-party packages (comma-separated list):", "command": "goimports -local {{path/to/package}} {{path/to/file}}.go"}]}
{"command": "google-chrome", "tasks": [{"task": "View documentation for the original command:", "command": "tldr chromium"}]}
{"command": "googler", "tasks": [{"task": "Search Google for a keyword:", "command": "googler {{keyword}}"}, {"task": "Search Google and open the first result in web browser:", "command": "googler -j {{keyword}}"}, {"task": "Show N search results (default 10):", "command": "googler -n {{N}} {{keyword}}"}, {"task": "Disable automatic spelling correction:", "command": "googler -x {{keyword}}"}, {"task": "Search one site for a keyword:", "command": "googler -w {{site}} {{keyword}}"}, {"task": "Show Google search result in JSON format:", "command": "googler --json {{keyword}}"}, {"task": "Perform in-place self-upgrade:", "command": "googler -u"}, {"task": "For more help in interactive mode:", "command": "?"}]}
{"command": "gopass", "tasks": [{"task": "Initialize the configuration settings:", "command": "gopass init"}, {"task": "Create a new entry:", "command": "gopass new"}, {"task": "Show all stores:", "command": "gopass mounts"}, {"task": "Mount a shared Git store:", "command": "gopass mounts add {{store_name}} {{git_repo_url}}"}, {"task": "Search interactively using a keyword:", "command": "gopass show {{keyword}}"}, {"task": "Search using a keyword:", "command": "gopass find {{keyword}}"}, {"task": "Sync all mounted stores:", "command": "gopass sync"}, {"task": "Show a particular password entry:", "command": "gopass {{store_name|path/to/directory|email@email.com}}"}]}
{"command": "gops", "tasks": [{"task": "Print all go processes running locally:", "command": "gops"}, {"task": "Print more information about a process:", "command": "gops {{pid}}"}, {"task": "Display a process tree:", "command": "gops tree"}, {"task": "Print the current stack trace from a target program:", "command": "gops stack {{pid|addr}}"}, {"task": "Print the current runtime memory statistics:", "command": "gops memstats {{pid|addr}}"}]}
{"command": "goreload", "tasks": [{"task": "Set the name of the binary file to watch (defaults to `.goreload`):", "command": "goreload -b {{path/to/binary}} {{path/to/file}}.go"}, {"task": "Set a custom log prefix (defaults to `goreload`):", "command": "goreload --logPrefix {{prefix}} {{path/to/file}}.go"}, {"task": "Reload whenever any file changes:", "command": "goreload --all"}]}
{"command": "gotty", "tasks": [{"task": "Share result of command:", "command": "gotty {{command}}"}, {"task": "Share with write permission:", "command": "gotty -w {{shell}}"}, {"task": "Share with credential (Basic Auth):", "command": "gotty -w -c {{username}}:{{password}} {{shell}}"}]}
{"command": "gource", "tasks": [{"task": "Run gource in a directory (if it isn't the repository's root directory, the root is sought up from there):", "command": "gource {{path/to/repository}}"}, {"task": "Run gource in the current directory, with a custom output resolution:", "command": "gource -{{width}}x{{height}}"}, {"task": "Set a custom timescale for the animation:", "command": "gource -c {{time_scale_multiplier}}"}, {"task": "Set how long each day should be in the animation (this combines with -c, if provided):", "command": "gource -s {{seconds}}"}, {"task": "Set fullscreen mode and a custom background color:", "command": "gource -f -b {{hex_color_code}}"}, {"task": "Set a title for the animation:", "command": "gource --title {{title}}"}]}
{"command": "gow", "tasks": [{"task": "Start and watch the current directory:", "command": "gow run ."}, {"task": "Start the application with the specified arguments:", "command": "gow run . {{argument1 argument2 ...}}"}, {"task": "Watch subdirectories in verbose mode:", "command": "gow -v -w={{path/to/directory1,path/to/directory2,...}} run ."}, {"task": "Watch the specified file extensions:", "command": "gow -e={{go,html}} run ."}, {"task": "Display help:", "command": "gow -h"}]}
{"command": "gox", "tasks": [{"task": "Compile Go program in the current directory for all operating systems and architecture combinations:", "command": "gox"}, {"task": "Download and compile a Go program from a remote URL:", "command": "gox {{url_1}} {{url_2}}"}, {"task": "Compile current directory for a particular operating system:", "command": "gox -os=\"{{os}}\""}, {"task": "Compile current directory for a single operating system and architecture combination:", "command": "gox -osarch=\"{{os}}/{{arch}}\""}]}
{"command": "gpg-tui", "tasks": [{"task": "Start `gpg-tui`:", "command": "gpg-tui"}, {"task": "Start `gpg-tui` with color and ASCII armored output:", "command": "gpg-tui --style {{colored}} --armor"}, {"task": "Show help in `gpg-tui`:", "command": "?"}, {"task": "Quit `gpg-tui`:", "command": "q"}, {"task": "Interactively generate a new key:", "command": "g"}, {"task": "Export the selected key:", "command": "x"}, {"task": "Set the detail level for the selected key:", "command": "1|2|3"}, {"task": "Refresh `gpg-tui`:", "command": "r"}]}
{"command": "gpg-zip", "tasks": [{"task": "Encrypt a directory into `archive.gpg` using a passphrase:", "command": "gpg-zip --symmetric --output {{archive.gpg}} {{path/to/directory}}"}, {"task": "Decrypt `archive.gpg` into a directory of the same name:", "command": "gpg-zip --decrypt {{path/to/archive.gpg}}"}, {"task": "List the contents of the encrypted `archive.gpg`:", "command": "gpg-zip --list-archive {{path/to/archive.gpg}}"}]}
{"command": "gpg", "tasks": [{"task": "Create a GPG public and private key interactively:", "command": "gpg --full-generate-key"}, {"task": "Sign `doc.txt` without encryption (writes output to `doc.txt.asc`):", "command": "gpg --clearsign {{doc.txt}}"}, {"task": "Encrypt and sign `doc.txt` for alice@example.com and bob@example.com (output to `doc.txt.gpg`):", "command": "gpg --encrypt --sign --recipient {{alice@example.com}} --recipient {{bob@example.com}} {{doc.txt}}"}, {"task": "Encrypt `doc.txt` with only a passphrase (output to `doc.txt.gpg`):", "command": "gpg --symmetric {{doc.txt}}"}, {"task": "Decrypt `doc.txt.gpg` (output to `stdout`):", "command": "gpg --decrypt {{doc.txt.gpg}}"}, {"task": "Import a public key:", "command": "gpg --import {{public.gpg}}"}, {"task": "Export public key for alice@example.com (output to `stdout`):", "command": "gpg --export --armor {{alice@example.com}}"}, {"task": "Export private key for alice@example.com (output to `stdout`):", "command": "gpg --export-secret-keys --armor {{alice@example.com}}"}]}
{"command": "gpg2", "tasks": [{"task": "List imported keys:", "command": "gpg2 --list-keys"}, {"task": "Encrypt a specified file for a specified recipient, writing the output to a new file with `.gpg` appended:", "command": "gpg2 --encrypt --recipient {{alice@example.com}} {{path/to/doc.txt}}"}, {"task": "Encrypt a specified file with only a passphrase, writing the output to a new file with `.gpg` appended:", "command": "gpg2 --symmetric {{path/to/doc.txt}}"}, {"task": "Decrypt a specified file, writing the result to `stdout`:", "command": "gpg2 --decrypt {{path/to/doc.txt.gpg}}"}, {"task": "Import a public key:", "command": "gpg2 --import {{path/to/public_key.gpg}}"}, {"task": "Export the public key of a specified email address to `stdout`:", "command": "gpg2 --export --armor {{alice@example.com}}"}, {"task": "Export the private key with a specified email address to `stdout`:", "command": "gpg2 --export-secret-keys --armor {{alice@example.com}}"}]}
{"command": "gpgconf", "tasks": [{"task": "List all components:", "command": "gpgconf --list-components"}, {"task": "List the directories used by gpgconf:", "command": "gpgconf --list-dirs"}, {"task": "List all options of a component:", "command": "gpgconf --list-options {{component}}"}, {"task": "List programs and test whether they are runnable:", "command": "gpgconf --check-programs"}, {"task": "Reload a component:", "command": "gpgconf --reload {{component}}"}]}
{"command": "gpgv", "tasks": [{"task": "Verify a signed file:", "command": "gpgv {{path/to/file}}"}, {"task": "Verify a signed file using a detached signature:", "command": "gpgv {{path/to/signature}} {{path/to/file}}"}, {"task": "Add a file to the list of keyrings (a single exported key also counts as a keyring):", "command": "gpgv --keyring {{./alice.keyring}} {{path/to/signature}} {{path/to/file}}"}]}
{"command": "gprbuild", "tasks": [{"task": "Build a project (assuming only one `*.gpr` file exists in the current directory):", "command": "gprbuild"}, {"task": "Build a specific [P]roject file:", "command": "gprbuild -P{{project_name}}"}, {"task": "Clean up the build workspace:", "command": "gprclean"}, {"task": "Install compiled binaries:", "command": "gprinstall --prefix {{path/to/installation/dir}}"}]}
{"command": "gprof", "tasks": [{"task": "Compile binary with gprof information and run it to get `gmon.out`:", "command": "gcc -pg {{program.c}} && {{./a.out}}"}, {"task": "Run gprof to obtain profile output:", "command": "gprof"}, {"task": "Suppress profile field's description:", "command": "gprof -b"}, {"task": "Display routines that have zero usage:", "command": "gprof -bz"}]}
{"command": "gradle", "tasks": [{"task": "Compile a package:", "command": "gradle build"}, {"task": "Exclude test task:", "command": "gradle build -x {{test}}"}, {"task": "Run in offline mode to prevent Gradle from accessing the network during builds:", "command": "gradle build --offline"}, {"task": "Clear the build directory:", "command": "gradle clean"}, {"task": "Build an Android Package (APK) in release mode:", "command": "gradle assembleRelease"}, {"task": "List the main tasks:", "command": "gradle tasks"}, {"task": "List all the tasks:", "command": "gradle tasks --all"}]}
{"command": "grafana-cli", "tasks": [{"task": "Install, update, or remove specific plugins:", "command": "grafana-cli plugins {{install|update|remove}} {{plugin_id1 plugin_id2 ...}}"}, {"task": "List all installed plugins:", "command": "grafana-cli plugins ls"}]}
{"command": "grap", "tasks": [{"task": "Process a `grap` file and save the output file for future processing with `pic` and `groff`:", "command": "grap {{path/to/input.grap}} > {{path/to/output.pic}}"}, {"task": "Typeset a `grap` file to PDF using the [me] macro package, saving the output to a file:", "command": "grap {{path/to/input.grap}} | pic -T {{pdf}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}"}]}
{"command": "graphml2gv", "tasks": [{"task": "Convert a graph from `gml` to `gv` format:", "command": "graphml2gv -o {{output.gv}} {{input.gml}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.gml}} | graphml2gv > {{output.gv}}"}, {"task": "Display help:", "command": "graphml2gv -?"}]}
{"command": "grep", "tasks": [{"task": "Search for a pattern within a file:", "command": "grep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for an exact string (disables regular expressions):", "command": "grep --fixed-strings \"{{exact_string}}\" {{path/to/file}}"}, {"task": "Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files:", "command": "grep --recursive --line-number --binary-files={{without-match}} \"{{search_pattern}}\" {{path/to/directory}}"}, {"task": "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode:", "command": "grep --extended-regexp --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print 3 lines of context around, before, or after each match:", "command": "grep --{{context|before-context|after-context}}={{3}} \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match with color output:", "command": "grep --with-filename --line-number --color=always \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "grep --only-matching \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search `stdin` for lines that do not match a pattern:", "command": "cat {{path/to/file}} | grep --invert-match \"{{search_pattern}}\""}]}
{"command": "grex", "tasks": [{"task": "Generate a simple regular expression:", "command": " grex {{space_separated_strings}}"}, {"task": "Generate a case-insensitive regular expression:", "command": "grex -i {{space_separated_strings}}"}, {"task": "Replace digits with '\\d':", "command": "grex -d {{space_separated_strings}}"}, {"task": "Replace Unicode word character with '\\w':", "command": "grex -w {{space_separated_strings}}"}, {"task": "Replace spaces with '\\s':", "command": "grex -s {{space_separated_strings}}"}, {"task": "Add {min, max} quantifier representation for repeating sub-strings:", "command": "grex -r {{space_separated_strings}}"}]}
{"command": "grip", "tasks": [{"task": "Start the server and serve the rendered `README` file of a current directory:", "command": "grip"}, {"task": "Start the server and serve a specific Markdown file:", "command": "grip {{path/to/file.md}}"}, {"task": "Start the server and open the `README` file of the current directory in the browser:", "command": "grip --browser"}, {"task": "Start the server in the specified port and serve the rendered `README` file of the current directory:", "command": "grip {{port}}"}]}
{"command": "groff", "tasks": [{"task": "Format output for a PostScript printer, saving the output to a file:", "command": "groff {{path/to/input.roff}} > {{path/to/output.ps}}"}, {"task": "Render a man page using the ASCII output device, and display it using a pager:", "command": "groff -man -T ascii {{path/to/manpage.1}} | less --RAW-CONTROL-CHARS"}, {"task": "Render a man page into an HTML file:", "command": "groff -man -T html {{path/to/manpage.1}} > {{path/to/manpage.html}}"}, {"task": "Typeset a roff file containing [t]ables and [p]ictures, using the [me] macro set, to PDF, saving the output:", "command": "groff {{-t}} {{-p}} -{{me}} -T {{pdf}} {{path/to/input.me}} > {{path/to/output.pdf}}"}, {"task": "Run a `groff` command with preprocessor and macro options guessed by the `grog` utility:", "command": "eval \"$(grog -T utf8 {{path/to/input.me}})\""}]}
{"command": "groups", "tasks": [{"task": "Print group memberships for the current user:", "command": "groups"}, {"task": "Print group memberships for a list of users:", "command": "groups {{username1 username2 ...}}"}]}
{"command": "grpcurl", "tasks": [{"task": "Send an empty request:", "command": "grpcurl {{grpc.server.com:443}} {{my.custom.server.Service/Method}}"}, {"task": "Send a request with a header and a body:", "command": "grpcurl -H \"{{Authorization: Bearer $token}}\" -d {{'{\"foo\": \"bar\"}'}} {{grpc.server.com:443}} {{my.custom.server.Service/Method}}"}, {"task": "List all services exposed by a server:", "command": "grpcurl {{grpc.server.com:443}} list"}, {"task": "List all methods in a particular service:", "command": "grpcurl {{grpc.server.com:443}} list {{my.custom.server.Service}}"}]}
{"command": "grumphp", "tasks": [{"task": "Register the Git hooks:", "command": "grumphp git:init"}, {"task": "Trigger the pre-commit hook manually:", "command": "grumphp git:pre-commit"}, {"task": "Check every versioned file:", "command": "grumphp run"}]}
{"command": "grunt", "tasks": [{"task": "Run the default task process:", "command": "grunt"}, {"task": "Run one or more specific space-separated task(s):", "command": "grunt {{task_name}}"}, {"task": "Specify an alternative configuration file:", "command": "grunt --gruntfile {{path/to/file}}"}, {"task": "Specify an alternative base path for relative files:", "command": "grunt --base {{path/to/directory}}"}, {"task": "Specify an additional directory to scan for tasks in:", "command": "grunt --tasks {{path/to/directory}}"}, {"task": "Perform a dry-run without writing any files:", "command": "grunt --no-write"}, {"task": "List all available options:", "command": "grunt --help"}]}
{"command": "gst-inspect-1.0", "tasks": [{"task": "Print information on a plugin:", "command": "gst-inspect-1.0 {{plugin}}"}, {"task": "List hardware transcoding capabilities of your device:", "command": "gst-inspect-1.0 {{vaapi|nvcodec}}"}]}
{"command": "gst-launch-1.0", "tasks": [{"task": "Play test video in a window:", "command": "gst-launch-1.0 videotestsrc ! xvimagesink"}, {"task": "Play a media file in a window:", "command": "gst-launch-1.0 playbin uri={{protocol}}://{{host}}/{{path/to/file}}"}, {"task": "Re-encode a media file:", "command": "gst-launch-1.0 filesrc location={{path/to/file}} ! {{file_type}}demux ! {{codec_type}}dec ! {{codec_type}}enc ! {{file_type}}mux ! filesink location={{path/to/file}}"}, {"task": "Stream a file to an RTSP server:", "command": "gst-launch-1.0 filesrc location={{path/to/file}} ! rtspclientsink location=rtsp://{{host_IP}}/{{path/to/file}}"}]}
{"command": "gsutil", "tasks": [{"task": "List all buckets in a project you are logged into:", "command": "gsutil ls"}, {"task": "List the objects in a bucket:", "command": "gsutil ls -r 'gs://{{bucket_name}}/{{prefix}}**'"}, {"task": "Download an object from a bucket:", "command": "gsutil cp gs://{{bucket_name}}/{{object_name}} {{path/to/save_location}}"}, {"task": "Upload an object to a bucket:", "command": "gsutil cp {{object_location}} gs://{{destination_bucket_name}}/"}, {"task": "Rename or move objects in a bucket:", "command": "gsutil mv gs://{{bucket_name}}/{{old_object_name}} gs://{{bucket_name}}/{{new_object_name}}"}, {"task": "Create a new bucket in the project you are logged into:", "command": "gsutil mb gs://{{bucket_name}}"}, {"task": "Delete a bucket and remove all the objects in it:", "command": "gsutil rm -r gs://{{bucket_name}}"}]}
{"command": "gt", "tasks": [{"task": "Authenticate the CLI with Graphite's API:", "command": "gt auth --token {{graphite_cli_auth_token}}"}, {"task": "Initialise `gt` for the repository in the current directory:", "command": "gt repo init"}, {"task": "Create a new branch stacked on top of the current branch and commit staged changes:", "command": "gt branch create {{branch_name}}"}, {"task": "Create a new commit and fix upstack branches:", "command": "gt commit create -m {{commit_message}}"}, {"task": "Force push all branches in the current stack to GitHub and create or update PRs:", "command": "gt stack submit"}, {"task": "Log all tracked stacks:", "command": "gt log short"}, {"task": "Print help for a specified subcommand:", "command": "gt {{subcommand}} --help"}]}
{"command": "gtop", "tasks": [{"task": "Show the system stats dashboard:", "command": "gtop"}, {"task": "Sort by CPU usage:", "command": "c"}, {"task": "Sort by memory usage:", "command": "m"}]}
{"command": "guacd", "tasks": [{"task": "Bind to a specific port on localhost:", "command": "guacd -b {{127.0.0.1}} -l {{4823}}"}, {"task": "Start in debug mode, keeping the process in the foreground:", "command": "guacd -f -L {{debug}}"}, {"task": "Start with TLS support:", "command": "guacd -C {{my-cert.crt}} -K {{my-key.pem}}"}, {"task": "Write the PID to a file:", "command": "guacd -p {{path/to/file.pid}}"}]}
{"command": "guetzli", "tasks": [{"task": "Compress a JPEG image:", "command": "guetzli {{input.jpg}} {{output.jpg}}"}, {"task": "Create a compressed JPEG from a PNG:", "command": "guetzli {{input.png}} {{output.jpg}}"}, {"task": "Compress a JPEG with the desired visual quality (84-100):", "command": "guetzli --quality {{quality_value}} {{input.jpg}} {{output.jpg}}"}]}
{"command": "guile", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "guile"}, {"task": "Execute the script in a given Scheme file:", "command": "guile {{script.scm}}"}, {"task": "Execute a Scheme expression:", "command": "guile -c \"{{expression}}\""}, {"task": "Listen on a port or a Unix domain socket (the default is port 37146) for remote REPL connections:", "command": "guile --listen={{port_or_socket}}"}]}
{"command": "gulp", "tasks": [{"task": "Run the default task:", "command": "gulp"}, {"task": "Run individual tasks:", "command": "gulp {{task}} {{othertask}}"}]}
{"command": "gum", "tasks": [{"task": "Interactively pick a specific option to print to `stdout`:", "command": "gum choose \"{{option_1}}\" \"{{option_2}}\" \"{{option_3}}\""}, {"task": "Open an interactive prompt for the user to input a string with a specific placeholder:", "command": "gum input --placeholder \"{{value}}\""}, {"task": "Open an interactive confirmation prompt and exit with either `0` or `1`:", "command": "gum confirm \"{{Continue?}}\" --default=false --affirmative \"{{Yes}}\" --negative \"{{No}}\" {{&& echo \"Yes selected\" || echo \"No selected\"}}"}, {"task": "Show a spinner while a command is taking place with text alongside:", "command": "gum spin --spinner {{dot|line|minidot|jump|pulse|points|globe|moon|monkey|meter|hamburger}} --title \"{{loading...}}\" -- {{command}}"}, {"task": "Format text to include emojis:", "command": "gum format -t {{emoji}} \"{{:smile: :heart: hello}}\""}, {"task": "Interactively prompt for multi-line text (CTRL + D to save) and write to `data.txt`:", "command": "gum write > {{data.txt}}"}]}
{"command": "gunicorn", "tasks": [{"task": "Run Python web app:", "command": "gunicorn {{import.path:app_object}}"}, {"task": "Listen on port 8080 on localhost:", "command": "gunicorn --bind {{localhost}}:{{8080}} {{import.path:app_object}}"}, {"task": "Turn on live reload:", "command": "gunicorn --reload {{import.path:app_object}}"}, {"task": "Use 4 worker processes for handling requests:", "command": "gunicorn --workers {{4}} {{import.path:app_object}}"}, {"task": "Use 4 worker threads for handling requests:", "command": "gunicorn --threads {{4}} {{import.path:app_object}}"}, {"task": "Run app over HTTPS:", "command": "gunicorn --certfile {{cert.pem}} --keyfile {{key.pem}} {{import.path:app_object}}"}]}
{"command": "gunzip", "tasks": [{"task": "Extract a file from an archive, replacing the original file if it exists:", "command": "gunzip {{archive.tar.gz}}"}, {"task": "Extract a file to a target destination:", "command": "gunzip --stdout {{archive.tar.gz}} > {{archive.tar}}"}, {"task": "Extract a file and keep the archive file:", "command": "gunzip --keep {{archive.tar.gz}}"}, {"task": "List the contents of a compressed file:", "command": "gunzip --list {{file.txt.gz}}"}, {"task": "Decompress an archive from `stdin`:", "command": "cat {{path/to/archive.gz}} | gunzip"}]}
{"command": "gv2gml", "tasks": [{"task": "Convert a graph from `gv` to `gml` format:", "command": "gv2gml -o {{output.gml}} {{input.gv}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.gv}} | gv2gml > {{output.gml}}"}, {"task": "Display help:", "command": "gv2gml -?"}]}
{"command": "gv2gxl", "tasks": [{"task": "Convert a graph from `gv` to `gxl` format:", "command": "gv2gxl -o {{output.gxl}} {{input.gv}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.gv}} | gv2gxl > {{output.gxl}}"}, {"task": "Display help:", "command": "gv2gxl -?"}]}
{"command": "gvcolor", "tasks": [{"task": "Colorize one or more ranked digraph (that were already processed by `dot`):", "command": "gvcolor {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Lay out a graph and colorize it, then convert to a PNG image:", "command": "dot {{path/to/input.gv}} | gvcolor | dot -T {{png}} > {{path/to/output.png}}"}, {"task": "Display help for `gvcolor`:", "command": "gvcolor -?"}]}
{"command": "gvpack", "tasks": [{"task": "Combine several graph layouts (that already have layout information):", "command": "gvpack {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Combine several graph layouts at the graph level, keeping graphs separate:", "command": "gvpack -g {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Combine several graph layouts at the node level, ignoring clusters:", "command": "gvpack -n {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Combine several graph layouts without packing:", "command": "gvpack -u {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Display help for `gvpack`:", "command": "gvpack -?"}]}
{"command": "gxl2gv", "tasks": [{"task": "Convert a graph from `gxl` to `gv` format:", "command": "gxl2gv -o {{output.gv}} {{input.gxl}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.gxl}} | gxl2gv > {{output.gv}}"}, {"task": "Display help:", "command": "gxl2gv -?"}]}
{"command": "gyb", "tasks": [{"task": "Estimate the number and the size of all emails on your Gmail account:", "command": "gyb --email {{email@gmail.com}} --action estimate"}, {"task": "Backup a Gmail account to a specific directory:", "command": "gyb --email {{email@gmail.com}} --action backup --local-folder {{path/to/directory}}"}, {"task": "Backup only important or starred emails from a Gmail account to the default local folder:", "command": "gyb --email {{email@gmail.com}} --search \"{{is:important OR is:starred}}\""}, {"task": "Restore from a local folder to a Gmail account:", "command": "gyb --email {{email@gmail.com}} --action restore --local-folder {{path/to/directory}}"}]}
{"command": "gzip", "tasks": [{"task": "Compress a file, replacing it with a gzipped compressed version:", "command": "gzip {{file.ext}}"}, {"task": "Decompress a file, replacing it with the original uncompressed version:", "command": "gzip -d {{file.ext}}.gz"}, {"task": "Compress a file, keeping the original file:", "command": "gzip --keep {{file.ext}}"}, {"task": "Compress a file specifying the output filename:", "command": "gzip -c {{file.ext}} > {{compressed_file.ext.gz}}"}, {"task": "Decompress a gzipped file specifying the output filename:", "command": "gzip -c -d {{file.ext}}.gz > {{uncompressed_file.ext}}"}, {"task": "Specify the compression level. 1=Fastest (Worst), 9=Slowest (Best), Default level is 6:", "command": "gzip -9 -c {{file.ext}} > {{compressed_file.ext.gz}}"}]}
{"command": "hadolint", "tasks": [{"task": "Lint a Dockerfile:", "command": "hadolint {{path/to/Dockerfile}}"}, {"task": "Lint a Dockerfile, displaying the output in JSON format:", "command": "hadolint --format {{json}} {{path/to/Dockerfile}}"}, {"task": "Lint a Dockerfile, displaying the output in a specific format:", "command": "hadolint --format {{tty|json|checkstyle|codeclimate|codacy}} {{path/to/Dockerfile}}"}, {"task": "Lint a Dockerfile ignoring specific rules:", "command": "hadolint --ignore {{DL3006}} --ignore {{DL3008}} {{path/to/Dockerfile}}"}, {"task": "Lint multiple Dockerfiles using specific trusted registries:", "command": "hadolint --trusted-registry {{docker.io}} --trusted-registry {{example.com}}:{{5000}} {{path/to/Dockerfile}} {{path/to/another/Dockerfile}}"}]}
{"command": "hakyll-init", "tasks": [{"task": "Generate a new Hakyll sample blog:", "command": "hakyll-init {{path/to/directory}}"}, {"task": "Show help for `hakyll-init`:", "command": "hakyll-init --help"}]}
{"command": "handbrakecli", "tasks": [{"task": "Convert a video file to MKV (AAC 160kbit audio and x264 CRF20 video):", "command": "handbrakecli --input {{input.avi}} --output {{output.mkv}} --encoder x264 --quality 20 --ab 160"}, {"task": "Resize a video file to 320x240:", "command": "handbrakecli --input {{input.mp4}} --output {{output.mp4}} --width 320 --height 240"}, {"task": "List available presets:", "command": "handbrakecli --preset-list"}, {"task": "Convert an AVI video to MP4 using the Android preset:", "command": "handbrakecli --preset=\"Android\" --input {{input.ext}} --output {{output.mp4}}"}, {"task": "Print the content of a DVD, getting the CSS keys in the process:", "command": "handbrakecli --input {{/dev/sr0}} --title 0"}, {"task": "Rip the first track of a DVD in the specified device. Audiotracks and subtitle languages are specified as lists:", "command": "handbrakecli --input {{/dev/sr0}} --title 1 --output {{out.mkv}} --format av_mkv --encoder x264 --subtitle {{1,4,5}} --audio {{1,2}} --aencoder copy --quality {{23}}"}]}
{"command": "hangups", "tasks": [{"task": "Start `hangups`:", "command": "hangups"}, {"task": "View troubleshooting information and help:", "command": "hangups -h"}, {"task": "Set a refresh token for hangups:", "command": "hangups --token-path {{path/to/token}}"}]}
{"command": "hardhat", "tasks": [{"task": "List available subcommands (or create a new project if no configuration exists):", "command": "hardhat"}, {"task": "Compile the current project and build all artifacts:", "command": "hardhat compile"}, {"task": "Run a user-defined script after compiling the project:", "command": "hardhat run {{path/to/script.js}}"}, {"task": "Run Mocha tests:", "command": "hardhat test"}, {"task": "Run all given test files:", "command": "hardhat test {{path/to/file1.js}} {{path/to/file2.js}}"}, {"task": "Start a local Ethereum JSON-RPC node for development:", "command": "hardhat node"}, {"task": "Start a local Ethereum JSON-RPC node with a specific hostname and port:", "command": "hardhat node --hostname {{hostname}} --port {{port}}"}, {"task": "Clean the cache and all artifacts:", "command": "hardhat clean"}]}
{"command": "hashcat", "tasks": [{"task": "Perform a brute-force attack (mode 3) with the default hashcat mask:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{3}} {{hash_value}}"}, {"task": "Perform a brute-force attack (mode 3) with a known pattern of 4 digits:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{3}} {{hash_value}} \"{{?d?d?d?d}}\""}, {"task": "Perform a brute-force attack (mode 3) using at most 8 of all printable ASCII characters:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{3}} --increment {{hash_value}} \"{{?a?a?a?a?a?a?a?a}}\""}, {"task": "Perform a dictionary attack (mode 0) using the RockYou wordlist of a Kali Linux box:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{0}} {{hash_value}} {{/usr/share/wordlists/rockyou.txt}}"}, {"task": "Perform a rule-based dictionary attack (mode 0) using the RockYou wordlist mutated with common password variations:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{0}} --rules-file {{/usr/share/hashcat/rules/best64.rule}} {{hash_value}} {{/usr/share/wordlists/rockyou.txt}}"}, {"task": "Perform a combination attack (mode 1) using the concatenation of words from two different custom dictionaries:", "command": "hashcat --hash-type {{hash_type_id}} --attack-mode {{1}} {{hash_value}} {{/path/to/dictionary1.txt}} {{/path/to/dictionary2.txt}}"}, {"task": "Show result of an already cracked hash:", "command": "hashcat --show {{hash_value}}"}]}
{"command": "hashid", "tasks": [{"task": "Identify hashes from `stdin` (through typing, copying and pasting, or piping the hash into the program):", "command": "hashid"}, {"task": "Identify hashes passed as arguments (multiple hashes can be passed):", "command": "hashid {{hash}}"}, {"task": "Identify hashes on a file (one hash per line):", "command": "hashid {{path/to/hashes.txt}}"}, {"task": "Show all possible hash types (including salted hashes):", "command": "hashid --extended {{hash}}"}, {"task": "Show `hashcat`'s mode number and `john`'s format string of the hash types:", "command": "hashid --mode --john {{hash}}"}, {"task": "Save output to a file instead of printing to `stdout`:", "command": "hashid --outfile {{path/to/output.txt}} {{hash}}"}]}
{"command": "haxelib", "tasks": [{"task": "Search for a Haxe library:", "command": "haxelib search {{keyword}}"}, {"task": "Install a Haxe library:", "command": "haxelib install {{libname}}"}, {"task": "Install a specific version of a Haxe library:", "command": "haxelib install {{libname}} {{version}}"}, {"task": "Upgrade all installed Haxe libraries:", "command": "haxelib upgrade"}, {"task": "Install the development version of a library from a Git repository:", "command": "haxelib git {{libname}} {{git_url}}"}, {"task": "Uninstall a Haxe library:", "command": "haxelib remove {{libname}}"}, {"task": "Print a tree of locally installed Haxe libraries:", "command": "haxelib list"}]}
{"command": "hcloud", "tasks": [{"task": "Show available commands and flags:", "command": "hcloud"}, {"task": "Show help for `hcloud`:", "command": "hcloud -h"}, {"task": "Show available commands and flags for `hcloud` contexts:", "command": "hcloud context"}]}
{"command": "head", "tasks": [{"task": "Output the first few lines of a file:", "command": "head -n {{count}} {{path/to/file}}"}]}
{"command": "helix", "tasks": [{"task": "Open a file:", "command": "helix {{path/to/file}}"}, {"task": "Change the Helix theme:", "command": ":theme {{theme_name}}"}, {"task": "Save and Quit:", "command": ":wq<Enter>"}, {"task": "Force-quit without saving:", "command": ":q!<Enter>"}, {"task": "Undo the last operation:", "command": "u"}, {"task": "Search for a pattern in the file (press `n`/`N` to go to next/previous match):", "command": "/{{search_pattern}}<Enter>"}, {"task": "Format the file:", "command": ":format"}]}
{"command": "hello", "tasks": [{"task": "Print \"Hello, world!\":", "command": "hello"}, {"task": "Print \"hello, world\", the traditional type:", "command": "hello --traditional"}, {"task": "Print a text message:", "command": "hello --greeting=\"{{greeting_text}}\""}]}
{"command": "helm install", "tasks": [{"task": "Install a helm chart:", "command": "helm install {{name}} {{repository_name}}/{{chart_name}}"}, {"task": "Install a helm chart from an unpacked chart directory:", "command": "helm install {{name}} {{path/to/source_directory}}"}, {"task": "Install a helm chart from a URL:", "command": "helm install {{package_name}} {{https://example.com/charts/packagename-1.2.3.tgz}}"}, {"task": "Install a helm chart and generate a name:", "command": "helm install {{repository_name}}/{{chart_name}} --generate-name"}, {"task": "Perform a dry run:", "command": "helm install {{name}} {{repository_name}}/{{chart_name}} --dry-run"}, {"task": "Install a helm chart with custom values:", "command": "helm install {{name}} {{repository_name}}/{{chart_name}} --set {{parameter1}}={{value1}},{{parameter2}}={{value2}}"}, {"task": "Install a helm chart passing a custom values file:", "command": "helm install {{name}} {{repository_name}}/{{chart_name}} --values {{path/to/values.yaml}}"}]}
{"command": "helm", "tasks": [{"task": "Create a helm chart:", "command": "helm create {{chart_name}}"}, {"task": "Add a new helm repository:", "command": "helm repo add {{repository_name}}"}, {"task": "List helm repositories:", "command": "helm repo list"}, {"task": "Update helm repositories:", "command": "helm repo update"}, {"task": "Delete a helm repository:", "command": "helm repo remove {{repository_name}}"}, {"task": "Install a helm chart:", "command": "helm install {{name}} {{repository_name}}/{{chart_name}}"}, {"task": "Download helm chart as a tar archive:", "command": "helm get {{chart_release_name}}"}, {"task": "Update helm dependencies:", "command": "helm dependency update"}]}
{"command": "help2man", "tasks": [{"task": "Generate a man page for an executable:", "command": "help2man {{executable}}"}, {"task": "Specify the \"name\" paragraph in the man page:", "command": "help2man {{executable}} --name {{name}}"}, {"task": "Specify the section for the man page (defaults to 1):", "command": "help2man {{executable}} --section {{section}}"}, {"task": "Output to a file instead of `stdout`:", "command": "help2man {{executable}} --output {{path/to/file}}"}, {"task": "Display detailed help:", "command": "help2man --help"}]}
{"command": "heroku", "tasks": [{"task": "Log in to your Heroku account:", "command": "heroku login"}, {"task": "Create a Heroku app:", "command": "heroku create"}, {"task": "Show logs for an app:", "command": "heroku logs --app {{app_name}}"}, {"task": "Run a one-off process inside a dyno (Heroku virtual machine):", "command": "heroku run {{process_name}} --app {{app_name}}"}, {"task": "List dynos (Heroku virtual machines) for an app:", "command": "heroku ps --app {{app_name}}"}, {"task": "Permanently destroy an app:", "command": "heroku destroy --app {{app_name}}"}]}
{"command": "hexdump", "tasks": [{"task": "Print the hexadecimal representation of a file, replacing duplicate lines by '*':", "command": "hexdump {{path/to/file}}"}, {"task": "Display the input offset in hexadecimal and its ASCII representation in two columns:", "command": "hexdump -C {{path/to/file}}"}, {"task": "Display the hexadecimal representation of a file, but interpret only n bytes of the input:", "command": "hexdump -C -n{{number_of_bytes}} {{path/to/file}}"}, {"task": "Don't replace duplicate lines with '*':", "command": "hexdump --no-squeezing {{path/to/file}}"}]}
{"command": "hexo", "tasks": [{"task": "Initialize a website:", "command": "hexo init {{path/to/directory}}"}, {"task": "Create a new article:", "command": "hexo new {{layout}} {{title}}"}, {"task": "Generate static files:", "command": "hexo generate"}, {"task": "Start a local server:", "command": "hexo server"}, {"task": "Deploy the website:", "command": "hexo deploy"}, {"task": "Clean the cache file (`db.json`) and generated files (`public/`):", "command": "hexo clean"}]}
{"command": "hexyl", "tasks": [{"task": "Print the hexadecimal representation of a file:", "command": "hexyl {{path/to/file}}"}, {"task": "Print the hexadecimal representation of the first n bytes of a file:", "command": "hexyl -n {{n}} {{path/to/file}}"}, {"task": "Print bytes 512 through 1024 of a file:", "command": "hexyl -r {{512}}:{{1024}} {{path/to/file}}"}, {"task": "Print 512 bytes starting at the 1024th byte:", "command": "hexyl -r {{1024}}:+{{512}} {{path/to/file}}"}]}
{"command": "hg add", "tasks": [{"task": "Add files or directories to the staging area:", "command": "hg add {{path/to/file}}"}, {"task": "Add all unstaged files matching a specified pattern:", "command": "hg add --include {{pattern}}"}, {"task": "Add all unstaged files, excluding those that match a specified pattern:", "command": "hg add --exclude {{pattern}}"}, {"task": "Recursively add sub-repositories:", "command": "hg add --subrepos"}, {"task": "Perform a test-run without performing any actions:", "command": "hg add --dry-run"}]}
{"command": "hg branch", "tasks": [{"task": "Show the name of the currently active branch:", "command": "hg branch"}, {"task": "Create a new branch for the next commit:", "command": "hg branch {{branch_name}}"}]}
{"command": "hg clone", "tasks": [{"task": "Clone a repository to a specified directory:", "command": "hg clone {{remote_repository_source}} {{destination_path}}"}, {"task": "Clone a repository to the head of a specific branch, ignoring later commits:", "command": "hg clone --branch {{branch}} {{remote_repository_source}}"}, {"task": "Clone a repository with only the `.hg` directory, without checking out files:", "command": "hg clone --noupdate {{remote_repository_source}}"}, {"task": "Clone a repository to a specific revision, tag or branch, keeping the entire history:", "command": "hg clone --updaterev {{revision}} {{remote_repository_source}}"}, {"task": "Clone a repository up to a specific revision without any newer history:", "command": "hg clone --rev {{revision}} {{remote_repository_source}}"}]}
{"command": "hg commit", "tasks": [{"task": "Commit staged files to the repository:", "command": "hg commit"}, {"task": "Commit a specific file or directory:", "command": "hg commit {{path/to/file_or_directory}}"}, {"task": "Commit with a specific message:", "command": "hg commit --message {{message}}"}, {"task": "Commit all files matching a specified pattern:", "command": "hg commit --include {{pattern}}"}, {"task": "Commit all files, excluding those that match a specified pattern:", "command": "hg commit --exclude {{pattern}}"}, {"task": "Commit using the interactive mode:", "command": "hg commit --interactive"}]}
{"command": "hg init", "tasks": [{"task": "Initialize a new repository in the current directory:", "command": "hg init"}, {"task": "Initialize a new repository in the specified directory:", "command": "hg init {{path/to/directory}}"}]}
{"command": "hg log", "tasks": [{"task": "Display the entire revision history of the repository:", "command": "hg log"}, {"task": "Display the revision history with an ASCII graph:", "command": "hg log --graph"}, {"task": "Display the revision history with file names matching a specified pattern:", "command": "hg log --include {{pattern}}"}, {"task": "Display the revision history, excluding file names that match a specified pattern:", "command": "hg log --exclude {{pattern}}"}, {"task": "Display the log information for a specific revision:", "command": "hg log --rev {{revision}}"}, {"task": "Display the revision history for a specific branch:", "command": "hg log --branch {{branch}}"}, {"task": "Display the revision history for a specific date:", "command": "hg log --date {{date}}"}, {"task": "Display revisions committed by a specific user:", "command": "hg log --user {{user}}"}]}
{"command": "hg pull", "tasks": [{"task": "Pull from the \"default\" source path:", "command": "hg pull"}, {"task": "Pull from a specified source repository:", "command": "hg pull {{path/to/source_repository}}"}, {"task": "Update the local repository to the head of the remote:", "command": "hg pull --update"}, {"task": "Pull changes even when the remote repository is unrelated:", "command": "hg pull --force"}, {"task": "Specify a specific revision changeset to pull up to:", "command": "hg pull --rev {{revision}}"}, {"task": "Specify a specific branch to pull:", "command": "hg pull --branch {{branch}}"}, {"task": "Specify a specific bookmark to pull:", "command": "hg pull --bookmark {{bookmark}}"}]}
{"command": "hg push", "tasks": [{"task": "Push changes to the \"default\" remote path:", "command": "hg push"}, {"task": "Push changes to a specified remote repository:", "command": "hg push {{path/to/destination_repository}}"}, {"task": "Push a new branch if it does not exist (disabled by default):", "command": "hg push --new-branch"}, {"task": "Specify a specific revision changeset to push:", "command": "hg push --rev {{revision}}"}, {"task": "Specify a specific branch to push:", "command": "hg push --branch {{branch}}"}, {"task": "Specify a specific bookmark to push:", "command": "hg push --bookmark {{bookmark}}"}]}
{"command": "hg remove", "tasks": [{"task": "Remove files or directories from the staging area:", "command": "hg remove {{path/to/file}}"}, {"task": "Remove all staged files matching a specified pattern:", "command": "hg remove --include {{pattern}}"}, {"task": "Remove all staged files, excluding those that match a specified pattern:", "command": "hg remove --exclude {{pattern}}"}, {"task": "Recursively remove sub-repositories:", "command": "hg remove --subrepos"}, {"task": "Remove files from the repository that have been physically removed:", "command": "hg remove --after"}]}
{"command": "hg root", "tasks": [{"task": "Display the root location of the current repository:", "command": "hg root"}, {"task": "Display the root location of the specified repository:", "command": "hg root --cwd {{path/to/directory}}"}]}
{"command": "hg serve", "tasks": [{"task": "Start a web server instance:", "command": "hg serve"}, {"task": "Start a web server instance on the specified port:", "command": "hg serve --port {{port}}"}, {"task": "Start a web server instance on the specified listening address:", "command": "hg serve --address {{address}}"}, {"task": "Start a web server instance with a specific identifier:", "command": "hg serve --name {{name}}"}, {"task": "Start a web server instance using the specified theme (see the templates directory):", "command": "hg serve --style {{style}}"}, {"task": "Start a web server instance using the specified SSL certificate bundle:", "command": "hg serve --certificate {{path/to/certificate}}"}]}
{"command": "hg status", "tasks": [{"task": "Display the status of changed files:", "command": "hg status"}, {"task": "Display only modified files:", "command": "hg status --modified"}, {"task": "Display only added files:", "command": "hg status --added"}, {"task": "Display only removed files:", "command": "hg status --removed"}, {"task": "Display only deleted (but tracked) files:", "command": "hg status --deleted"}, {"task": "Display changes in the working directory compared to a specified changeset:", "command": "hg status --rev {{revision}}"}, {"task": "Display only files matching a specified glob pattern:", "command": "hg status --include {{pattern}}"}, {"task": "Display files, excluding those that match a specified glob pattern:", "command": "hg status --exclude {{pattern}}"}]}
{"command": "hg update", "tasks": [{"task": "Update to the tip of the current branch:", "command": "hg update"}, {"task": "Update to the specified revision:", "command": "hg update --rev {{revision}}"}, {"task": "Update and discard uncommitted changes:", "command": "hg update --clean"}, {"task": "Update to the last commit matching a specified date:", "command": "hg update --date {{dd-mm-yyyy}}"}]}
{"command": "hg", "tasks": [{"task": "Execute a Mercurial command:", "command": "hg {{command}}"}, {"task": "Call general help:", "command": "hg help"}, {"task": "Call help on a command:", "command": "hg help {{command}}"}, {"task": "Check the Mercurial version:", "command": "hg --version"}]}
{"command": "highlight", "tasks": [{"task": "Produce a complete HTML document from a source code file:", "command": "highlight --out-format={{html}} --style {{theme_name}} --syntax {{language}} {{path/to/source_code}}"}, {"task": "Produce an HTML fragment, suitable for inclusion in a larger document:", "command": "highlight --out-format={{html}} --fragment --syntax {{language}} {{source_file}}"}, {"task": "Inline the CSS styling in every tag:", "command": "highlight --out-format={{html}} --inline-css --syntax {{language}} {{source_file}}"}, {"task": "List all supported languages, themes, or plugins:", "command": "highlight --list-scripts {{langs|themes|plugins}}"}, {"task": "Print a CSS stylesheet for a theme:", "command": "highlight --out-format={{html}} --print-style --style {{theme_name}} --syntax {{language}}] --stdout"}]}
{"command": "history expansion", "tasks": [{"task": "Run the previous command as root (`!!` is replaced by the previous command):", "command": "sudo !!"}, {"task": "Run a command with the last argument of the previous command:", "command": "{{command}} !$"}, {"task": "Run a command with the first argument of the previous command:", "command": "{{command}} !^"}, {"task": "Run the Nth command of the history:", "command": "!{{n}}"}, {"task": "Run the command `n` lines back in the history:", "command": "!-{{n}}"}, {"task": "Run the most recent command containing `string`:", "command": "!?{{string}}?"}, {"task": "Run the previous command, replacing `string1` with `string2`:", "command": "^{{string1}}^{{string2}}^"}, {"task": "Perform a history expansion, but print the command that would be run instead of actually running it:", "command": "{{!-n}}:p"}]}
{"command": "history", "tasks": [{"task": "Display the commands history list with line numbers:", "command": "history"}, {"task": "Display the last 20 commands (in `zsh` it displays all commands starting from the 20th):", "command": "history {{20}}"}, {"task": "Clear the commands history list (only for current `bash` shell):", "command": "history -c"}, {"task": "Overwrite history file with history of current `bash` shell (often combined with `history -c` to purge history):", "command": "history -w"}, {"task": "Delete the history entry at the specified offset:", "command": "history -d {{offset}}"}]}
{"command": "hive", "tasks": [{"task": "Start a Hive interactive shell:", "command": "hive"}, {"task": "Run HiveQL:", "command": "hive -e \"{{hiveql_query}}\""}, {"task": "Run a HiveQL file with a variable substitution:", "command": "hive --define {{key}}={{value}} -f {{path/to/file.sql}}"}, {"task": "Run a HiveQL with HiveConfig (e.g. `mapred.reduce.tasks=32`):", "command": "hive --hiveconf {{conf_name}}={{conf_value}}"}]}
{"command": "hledger", "tasks": [{"task": "Add transactions to your journal interactively:", "command": "hledger add"}, {"task": "Show the account hierarchy, using a specific journal file:", "command": "hledger --file {{path/to/file.journal}} accounts --tree"}, {"task": "Show a monthly income statement:", "command": "hledger incomestatement --monthly --depth 2"}, {"task": "Print the amount of cash spent on food:", "command": "hledger print assets:cash | hledger -f- -I balance expenses:food --depth 2"}]}
{"command": "hn", "tasks": [{"task": "View stories on Hacker News:", "command": "hn"}, {"task": "View _number_ of stories on Hacker News:", "command": "hn --limit {{number}}"}, {"task": "View stories on Hacker News, and keep the list open after selecting a link:", "command": "hn --keep-open"}, {"task": "View stories on Hacker News sorted by submission date:", "command": "hn --latest"}]}
{"command": "holehe", "tasks": [{"task": "Show status across all supported websites for the specified email address:", "command": "holehe {{username@example.org}}"}, {"task": "Show status for only sites where the specified email address is in use:", "command": "holehe {{username@example.org}} --only-used"}]}
{"command": "home-manager", "tasks": [{"task": "Activate the configuration defined in `~/.config/nixpkgs/home.nix`:", "command": "home-manager build"}, {"task": "Activate the configuration and switch to it:", "command": "home-manager switch"}]}
{"command": "host", "tasks": [{"task": "Lookup A, AAAA, and MX records of a domain:", "command": "host {{domain}}"}, {"task": "Lookup a field (CNAME, TXT,...) of a domain:", "command": "host -t {{field}} {{domain}}"}, {"task": "Reverse lookup an IP:", "command": "host {{ip_address}}"}, {"task": "Specify an alternate DNS server to query:", "command": "host {{domain}} {{8.8.8.8}}"}]}
{"command": "hostapd", "tasks": [{"task": "Start an access point:", "command": "sudo hostapd {{path/to/hostapd.conf}}"}, {"task": "Start an access point, forking into the background:", "command": "sudo hostapd -B {{path/to/hostapd.conf}}"}]}
{"command": "hostess", "tasks": [{"task": "List domains, target IP addresses and on/off status:", "command": "hostess list"}, {"task": "Add a domain pointing to your machine to your hosts file:", "command": "hostess add {{local.example.com}} {{127.0.0.1}}"}, {"task": "Remove a domain from your hosts file:", "command": "hostess del {{local.example.com}}"}, {"task": "Disable a domain (but don't remove it):", "command": "hostess off {{local.example.com}}"}]}
{"command": "hostid", "tasks": [{"task": "Display the numeric identifier for the current host in hexadecimal:", "command": "hostid"}]}
{"command": "hostname", "tasks": [{"task": "Show current host name:", "command": "hostname"}, {"task": "Show the network address of the host name:", "command": "hostname -i"}, {"task": "Show all network addresses of the host:", "command": "hostname -I"}, {"task": "Show the FQDN (Fully Qualified Domain Name):", "command": "hostname --fqdn"}, {"task": "Set current host name:", "command": "hostname {{new_hostname}}"}]}
{"command": "hping", "tasks": [{"task": "View documentation for the original command:", "command": "tldr hping3"}]}
{"command": "hping3", "tasks": [{"task": "Ping a destination with 4 ICMP ping requests:", "command": "hping3 --icmp --count {{4}} {{ip_or_hostname}}"}, {"task": "Ping an IP address over UDP on port 80:", "command": "hping3 --udp --destport {{80}} --syn {{ip_or_hostname}}"}, {"task": "Scan TCP port 80, scanning from the specific local source port 5090:", "command": "hping3 --verbose --syn --destport {{80}} --baseport {{5090}} {{ip_or_hostname}}"}, {"task": "Traceroute using a TCP scan to a specific destination port:", "command": "hping3 --traceroute --verbose --syn --destport {{80}} {{ip_or_hostname}}"}, {"task": "Scan a set of TCP ports on a specific IP address:", "command": "hping3 --scan {{80,3000,9000}} --syn {{ip_or_hostname}}"}, {"task": "Perform a TCP ACK scan to check if a given host is alive:", "command": "hping3 --count {{2}} --verbose --destport {{80}} --ack {{ip_or_hostname}}"}, {"task": "Perform a charge test on port 80:", "command": "hping3 --flood --destport {{80}} --syn {{ip_or_hostname}}"}]}
{"command": "hr", "tasks": [{"task": "Print a horizontal rule:", "command": "hr"}, {"task": "Print a horizontal rule with a custom string:", "command": "hr {{string}}"}, {"task": "Print a multiline horizontal rule:", "command": "hr {{string_a}} {{string_b}} {{string_c}}"}]}
{"command": "hsd-cli", "tasks": [{"task": "Retrieve information about the current server:", "command": "hsd-cli info"}, {"task": "Broadcast a local transaction:", "command": "hsd-cli broadcast {{transaction_hex}}"}, {"task": "Retrieve a mempool snapshot:", "command": "hsd-cli mempool"}, {"task": "View a transaction by address or hash:", "command": "hsd-cli tx {{address_or_hash}}"}, {"task": "View a coin by its hash index or address:", "command": "hsd-cli coin {{hash_index_or_address}}"}, {"task": "View a block by height or hash:", "command": "hsd-cli block {{height_or_hash}}"}, {"task": "Reset the chain to the specified block:", "command": "hsd-cli reset {{height_or_hash}}"}, {"task": "Execute an RPC command:", "command": "hsd-cli rpc {{command}} {{args}}"}]}
{"command": "hsw-cli", "tasks": [{"task": "Unlock the current wallet (timeout in seconds):", "command": "hsw-cli unlock {{passphrase}} {{timeout}}"}, {"task": "Lock the current wallet:", "command": "hsw-cli lock"}, {"task": "View the current wallet's details:", "command": "hsw-cli get"}, {"task": "View the current wallet's balance:", "command": "hsw-cli balance"}, {"task": "View the current wallet's transaction history:", "command": "hsw-cli history"}, {"task": "Send a transaction with the specified coin amount to an address:", "command": "hsw-cli send {{address}} {{1.05}}"}, {"task": "View the current wallet's pending transactions:", "command": "hsw-cli pending"}, {"task": "View details about a transaction:", "command": "hsw-cli tx {{transaction_hash}}"}]}
{"command": "html5validator", "tasks": [{"task": "Validate a specific file:", "command": "html5validator {{path/to/file}}"}, {"task": "Validate all HTML files in a specific directory:", "command": "html5validator --root {{path/to/directory}}"}, {"task": "Show warnings as well as errors:", "command": "html5validator --show-warnings {{path/to/file}}"}, {"task": "Match multiple files using a glob pattern:", "command": "html5validator --root {{path/to/directory}} --match \"{{*.html *.php}}\""}, {"task": "Ignore specific directory names:", "command": "html5validator --root {{path/to/directory}} --blacklist \"{{node_modules vendor}}\""}, {"task": "Output the results in a specific format:", "command": "html5validator --format {{gnu|xml|json|text}} {{path/to/file}}"}, {"task": "Output the log at a specific verbosity level:", "command": "html5validator --root {{path/to/directory}} --log {{debug|info|warning}}"}]}
{"command": "htop", "tasks": [{"task": "Start `htop`:", "command": "htop"}, {"task": "Start `htop` displaying processes owned by a specific user:", "command": "htop --user {{username}}"}, {"task": "Sort processes by a specified `sort_item` (use `htop --sort help` for available options):", "command": "htop --sort {{sort_item}}"}, {"task": "See interactive commands while running htop:", "command": "?"}, {"task": "Switch to a different tab:", "command": "tab"}, {"task": "Display help:", "command": "htop --help"}]}
{"command": "htpasswd", "tasks": [{"task": "Create/overwrite htpasswd file:", "command": "htpasswd -c {{path/to/file}} {{username}}"}, {"task": "Add user to htpasswd file or update existing user:", "command": "htpasswd {{path/to/file}} {{username}}"}, {"task": "Add user to htpasswd file in batch mode without an interactive password prompt (for script usage):", "command": "htpasswd -b {{path/to/file}} {{username}} {{password}}"}, {"task": "Delete user from htpasswd file:", "command": "htpasswd -D {{path/to/file}} {{username}}"}, {"task": "Verify user password:", "command": "htpasswd -v {{path/to/file}} {{username}}"}, {"task": "Display a string with username (plain text) and password (md5):", "command": "htpasswd -nbm {{username}} {{password}}"}]}
{"command": "http-server-upload", "tasks": [{"task": "Start an HTTP server on the default port to upload files to the current directory:", "command": "http-server-upload"}, {"task": "Start an HTTP server with the specified maximum allowed file size for uploads in MiB (defaults to 200 MiB):", "command": "MAX_FILE_SIZE={{size_in_megabytes}} http-server-upload"}, {"task": "Start an HTTP server on a specific port to upload files to the current directory:", "command": "PORT={{port}} http-server-upload"}, {"task": "Start an HTTP server, storing the uploaded files in a specific directory:", "command": "UPLOAD_DIR={{path/to/directory}} http-server-upload"}, {"task": "Start an HTTP server using a specific directory to temporarily store files during the upload process:", "command": "UPLOAD_TMP_DIR={{path/to/directory}} http-server-upload"}, {"task": "Start an HTTP server accepting uploads with a specific token field in the HTTP post:", "command": "TOKEN={{secret}} http-server-upload"}]}
{"command": "http-server", "tasks": [{"task": "Start an HTTP server listening on the default port to serve the current directory:", "command": "http-server"}, {"task": "Start an HTTP server on a specific port to serve a specific directory:", "command": "http-server {{path/to/directory}} --port {{port}}"}, {"task": "Start an HTTP server using basic authentication:", "command": "http-server --username {{username}} --password {{password}}"}, {"task": "Start an HTTP server with directory listings disabled:", "command": "http-server -d {{false}}"}, {"task": "Start an HTTPS server on the default port using the specified certificate:", "command": "http-server --ssl --cert {{path/to/cert.pem}} --key {{path/to/key.pem}}"}, {"task": "Start an HTTP server and include the client's IP address in the output logging:", "command": "http-server --log-ip"}, {"task": "Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin: *` header in all responses:", "command": "http-server --cors"}, {"task": "Start an HTTP server with logging disabled:", "command": "http-server --silent"}]}
{"command": "http", "tasks": [{"task": "Download a URL to a file:", "command": "http --download {{example.org}}"}, {"task": "Send form-encoded data:", "command": "http --form {{example.org}} {{name='bob'}} {{profile_picture@'bob.png'}}"}, {"task": "Send JSON object:", "command": "http {{example.org}} {{name='bob'}}"}, {"task": "Specify an HTTP method:", "command": "http {{HEAD}} {{example.org}}"}, {"task": "Include an extra header:", "command": "http {{example.org}} {{X-MyHeader:123}}"}, {"task": "Pass a username and password for server authentication:", "command": "http --auth {{username:password}} {{example.org}}"}, {"task": "Specify raw request body via `stdin`:", "command": "cat {{data.txt}} | http PUT {{example.org}}"}]}
{"command": "httpflow", "tasks": [{"task": "Capture traffic on all interfaces:", "command": "httpflow -i {{any}}"}, {"task": "Use a bpf-style capture to filter the results:", "command": "httpflow {{host httpbin.org or host baidu.com}}"}, {"task": "Use a regular expression to filter requests by URLs:", "command": "httpflow -u '{{regular_expression}}'"}, {"task": "Read packets from pcap format binary file:", "command": "httpflow -r {{out.cap}}"}, {"task": "Write the output to a directory:", "command": "httpflow -w {{path/to/directory}}"}]}
{"command": "httping", "tasks": [{"task": "Ping the specified URL:", "command": "httping -g {{url}}"}, {"task": "Ping the web server on `host` and `port`:", "command": "httping -h {{host}} -p {{port}}"}, {"task": "Ping the web server on `host` using a TLS connection:", "command": "httping -l -g https://{{host}}"}, {"task": "Ping the web server on `host` using HTTP basic authentication:", "command": "httping -g http://{{host}} -U {{username}} -P {{password}}"}]}
{"command": "httprobe", "tasks": [{"task": "Probe a list of domains from a text file:", "command": "cat {{input_file}} | httprobe"}, {"task": "Only check for HTTP if HTTPS is not working:", "command": "cat {{input_file}} | httprobe --prefer-https"}, {"task": "Probe additional ports with a given protocol:", "command": "cat {{input_file}} | httprobe -p {{https:2222}}"}, {"task": "Output all available options:", "command": "httprobe --help"}]}
{"command": "httpry", "tasks": [{"task": "Save output to a file:", "command": "httpry -o {{path/to/file.log}}"}, {"task": "Listen on a specific interface and save output to a binary pcap format file:", "command": "httpry {{eth0}} -b {{path/to/file.pcap}}"}, {"task": "Filter output by a comma-separated list of HTTP verbs:", "command": "httpry -m {{get|post|put|head|options|delete|trace|connect|patch}}"}, {"task": "Read from an input capture file and filter by IP:", "command": "httpry -r {{path/to/file.log}} '{{host 192.168.5.25}}'"}, {"task": "Run as daemon process:", "command": "httpry -d -o {{path/to/file.log}}"}]}
{"command": "hub", "tasks": [{"task": "Clone a repository using its slug (owners can omit the username):", "command": "hub clone {{username}}/{{repo_name}}"}, {"task": "Create a fork of the current repository (cloned from another user) under your GitHub profile:", "command": "hub fork"}, {"task": "Push the current local branch to GitHub and create a PR for it in the original repository:", "command": "hub push {{remote_name}} && hub pull-request"}, {"task": "Create a PR of the current (already pushed) branch, reusing the message from the first commit:", "command": "hub pull-request --no-edit"}, {"task": "Create a new branch with the contents of a pull request and switch to it:", "command": "hub pr checkout {{pr_number}}"}, {"task": "Upload the current (local-only) repository to your GitHub account:", "command": "hub create"}, {"task": "Fetch Git objects from upstream and update local branches:", "command": "hub sync"}]}
{"command": "hugo", "tasks": [{"task": "Create a new Hugo site:", "command": "hugo new site {{path/to/site}}"}, {"task": "Create a new Hugo theme (themes may also be downloaded from https://themes.gohugo.io/):", "command": "hugo new theme {{theme_name}}"}, {"task": "Create a new page:", "command": "hugo new {{section_name}}/{{page_name}}"}, {"task": "Build a site to the `./public/` directory:", "command": "hugo"}, {"task": "Build a site including pages that are marked as a \"draft\":", "command": "hugo --buildDrafts"}, {"task": "Build a site to a given directory:", "command": "hugo --destination {{path/to/destination}}"}, {"task": "Build a site, start up a webserver to serve it, and automatically reload when pages are edited:", "command": "hugo server"}]}
{"command": "hunspell", "tasks": [{"task": "Check the spelling of a file:", "command": "hunspell {{path/to/file}}"}, {"task": "Check the spelling of a file with the en_US dictionary:", "command": "hunspell -d {{en_US}} {{path/to/file}}"}, {"task": "List misspelled words in a file:", "command": "hunspell -l {{path/to/file}}"}]}
{"command": "husky", "tasks": [{"task": "Install Husky in the current directory:", "command": "husky install"}, {"task": "Install Husky into a specific directory:", "command": "husky install {{path/to/directory}}"}, {"task": "Set a specific command as a `pre-push` hook for Git:", "command": "husky set {{.husky/pre-push}} \"{{command}} {{command_arguments}}\""}, {"task": "Add a specific command to the current `pre-commit` hook:", "command": "husky add {{.husky/pre-commit}} \"{{command}} {{command_arguments}}\""}, {"task": "Uninstall Husky hooks from the current directory:", "command": "husky uninstall"}, {"task": "Display help:", "command": "husky"}]}
{"command": "hx", "tasks": [{"task": "View documentation for the original command:", "command": "tldr helix"}]}
{"command": "hydra", "tasks": [{"task": "Start Hydra's wizard:", "command": "hydra-wizard"}, {"task": "Guess SSH credentials using a given username and a list of passwords:", "command": "hydra -l {{username}} -P {{path/to/wordlist.txt}} {{host_ip}} {{ssh}}"}, {"task": "Guess HTTPS webform credentials using two specific lists of usernames and passwords (\"https_post_request\" can be like \"username=^USER^&password=^PASS^\"):", "command": "hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} {{host_ip}} {{https-post-form}} \"{{url_without_host}}:{{https_post_request}}:{{login_failed_string}}\""}, {"task": "Guess FTP credentials using usernames and passwords lists, specifying the number of threads:", "command": "hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -t {{n_tasks}} {{host_ip}} {{ftp}}"}, {"task": "Guess MySQL credentials using a username and a passwords list, exiting when a username/password pair is found:", "command": "hydra -l {{username}} -P {{path/to/wordlist.txt}} -f {{host_ip}} {{mysql}}"}, {"task": "Guess RDP credentials using a username and a passwords list, showing each attempt:", "command": "hydra -l {{username}} -P {{path/to/wordlist.txt}} -V {{rdp://host_ip}}"}, {"task": "Guess IMAP credentials on a range of hosts using a list of colon-separated username/password pairs:", "command": "hydra -C {{path/to/username_password_pairs.txt}} {{imap://[host_range_cidr]}}"}, {"task": "Guess POP3 credentials on a list of hosts using usernames and passwords lists, exiting when a username/password pair is found:", "command": "hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -M {{path/to/hosts.txt}} -F {{pop3}}"}]}
{"command": "hyperfine", "tasks": [{"task": "Run a basic benchmark, performing at least 10 runs:", "command": "hyperfine '{{make}}'"}, {"task": "Run a comparative benchmark:", "command": "hyperfine '{{make target1}}' '{{make target2}}'"}, {"task": "Change minimum number of benchmarking runs:", "command": "hyperfine --min-runs {{7}} '{{make}}'"}, {"task": "Perform benchmark with warmup:", "command": "hyperfine --warmup {{5}} '{{make}}'"}, {"task": "Run a command before each benchmark run (to clear caches, etc.):", "command": "hyperfine --prepare '{{make clean}}' '{{make}}'"}, {"task": "Run a benchmark where a single parameter changes for each run:", "command": "hyperfine --prepare '{{make clean}}' --parameter-scan {{num_threads}} {{1}} {{10}} '{{make -j {num_threads}}}'"}]}
{"command": "ia", "tasks": [{"task": "Configure `ia` with API keys (some functions won't work without this step):", "command": "ia configure"}, {"task": "Upload one or more items to `archive.org`:", "command": "ia upload {{identifier}} {{path/to/file}} --metadata=\"{{mediatype:data}}\" --metadata=\"{{title:example}}\""}, {"task": "Download one or more items from `archive.org`:", "command": "ia download {{item}}"}, {"task": "Delete one or more items from `archive.org`:", "command": "ia delete {{identifier}} {{file}}"}, {"task": "Search on `archive.org`, returning results as JSON:", "command": "ia search '{{subject:\"subject\" collection:collection}}'"}]}
{"command": "ibmcloud login", "tasks": [{"task": "Log in by using an interactive prompt:", "command": "ibmcloud login"}, {"task": "Log in to a specific API endpoint (default is `cloud.ibm.com`):", "command": "ibmcloud login -a {{api_endpoint}}"}, {"task": "Log in by providing username, password and the targeted region as parameters:", "command": "ibmcloud login -u {{username}} -p {{password}} -r {{us-south}}"}, {"task": "Log in with an API key, passing it as an argument:", "command": "ibmcloud login --apikey {{api_key_string}}"}, {"task": "Log in with an API key, passing it as a file:", "command": "ibmcloud login --apikey @{{path/to/api_key_file}}"}, {"task": "Log in with a federated ID (single sign-on):", "command": "ibmcloud login --sso"}]}
{"command": "ibmcloud", "tasks": [{"task": "Update `ibmcloud` to the latest version:", "command": "ibmcloud update"}, {"task": "Install the Cloud Foundry module for accessing Cloud Foundry services:", "command": "ibmcloud cf install"}, {"task": "List all available IBM Cloud regions:", "command": "ibmcloud regions"}, {"task": "Display `ibmcloud` version:", "command": "ibmcloud version"}, {"task": "Display help:", "command": "ibmcloud help"}, {"task": "Display help for a subcommand:", "command": "ibmcloud help {{subcommand}}"}]}
{"command": "ical", "tasks": [{"task": "Display the current month's calendar:", "command": "ical"}, {"task": "Convert a Gregorian date to a Hijri date:", "command": "ical --gregorian {{yyyymmdd}}"}, {"task": "Convert a Hirji date to a Gregorian date:", "command": "ical --hijri {{yyyymmdd}}"}]}
{"command": "iconv", "tasks": [{"task": "Convert file to a specific encoding, and print to `stdout`:", "command": "iconv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}"}, {"task": "Convert file to the current locale's encoding, and output to a file:", "command": "iconv -f {{from_encoding}} {{input_file}} > {{output_file}}"}, {"task": "List supported encodings:", "command": "iconv -l"}]}
{"command": "id", "tasks": [{"task": "Display current user's ID (UID), group ID (GID) and groups to which they belong:", "command": "id"}, {"task": "Display the current user identity as a number:", "command": "id -u"}, {"task": "Display the current group identity as a number:", "command": "id -g"}, {"task": "Display an arbitrary user's ID (UID), group ID (GID) and groups to which they belong:", "command": "id {{username}}"}]}
{"command": "id3tag", "tasks": [{"task": "Set artist and title tag of an MP3 file:", "command": "id3tag --artist={{artist}} --title={{title}} {{path/to/file.mp3}}"}, {"task": "Set album title of all MP3 files in the current directory:", "command": "id3tag --album={{album}} {{*.mp3}}"}, {"task": "Get more help:", "command": "id3tag --help"}]}
{"command": "identify", "tasks": [{"task": "Describe the format and basic characteristics of an image:", "command": "identify {{path/to/image}}"}, {"task": "Describe the format and verbose characteristics of an image:", "command": "identify -verbose {{path/to/image}}"}, {"task": "Collect dimensions of all JPEG files under current directory:", "command": "identify -format \"%f,%w,%h\\n\" *.{{jpg}} > {{path/to/filelist.csv}}"}]}
{"command": "idnits", "tasks": [{"task": "Check a file for nits:", "command": "idnits {{path/to/file.txt}}"}, {"task": "Count nits without displaying them:", "command": "idnits --nitcount {{path/to/file.txt}}"}, {"task": "Show extra information about offending lines:", "command": "idnits --verbose {{path/to/file.txt}}"}, {"task": "Expect the specified year in the boilerplate instead of the current year:", "command": "idnits --year {{2021}} {{path/to/file.txt}}"}, {"task": "Assume the document is of the specified status:", "command": "idnits --doctype {{standard|informational|experimental|bcp|ps|ds}} {{path/to/file.txt}}"}]}
{"command": "iex", "tasks": [{"task": "Start an interactive session:", "command": "iex"}, {"task": "Start a session that remembers history:", "command": "iex --erl \"-kernel shell_history enabled\""}, {"task": "Start and load Mix project files:", "command": "iex -S mix"}]}
{"command": "if", "tasks": [{"task": "Execute the specified commands if the condition command's exit status is zero:", "command": "if {{condition_command}}; then {{echo \"Condition is true\"}}; fi"}, {"task": "Execute the specified commands if the condition command's exit status is not zero:", "command": "if ! {{condition_command}}; then {{echo \"Condition is true\"}}; fi"}, {"task": "Execute the first specified commands if the condition command's exit status is zero otherwise execute the second specified commands:", "command": "if {{condition_command}}; then {{echo \"Condition is true\"}}; else {{echo \"Condition is false\"}}; fi"}, {"task": "Check whether a [f]ile exists:", "command": "if [[ -f {{path/to/file}} ]]; then {{echo \"Condition is true\"}}; fi"}, {"task": "Check whether a [d]irectory exists:", "command": "if [[ -d {{path/to/directory}} ]]; then {{echo \"Condition is true\"}}; fi"}, {"task": "Check whether a file or directory [e]xists:", "command": "if [[ -e {{path/to/file_or_directory}} ]]; then {{echo \"Condition is true\"}}; fi"}, {"task": "Check whether a variable is defined:", "command": "if [[ -n \"${{variable}}\" ]]; then {{echo \"Condition is true\"}}; fi"}, {"task": "List all possible conditions (`test` is an alias to `[`; both are commonly used with `if`):", "command": "man ["}]}
{"command": "ifconfig", "tasks": [{"task": "View network settings of an Ethernet adapter:", "command": "ifconfig eth0"}, {"task": "Display details of all interfaces, including disabled interfaces:", "command": "ifconfig -a"}, {"task": "Disable eth0 interface:", "command": "ifconfig eth0 down"}, {"task": "Enable eth0 interface:", "command": "ifconfig eth0 up"}, {"task": "Assign IP address to eth0 interface:", "command": "ifconfig eth0 {{ip_address}}"}]}
{"command": "ignite", "tasks": [{"task": "Create a new React Native project:", "command": "ignite new {{project_name}}"}, {"task": "Generate file from a plugin:", "command": "ignite generate {{plugin_name}} {{path/to/file}}"}, {"task": "Add an Ignite plugin to the project:", "command": "ignite add {{plugin_name}}"}, {"task": "Remove an Ignite plugin from the project:", "command": "ignite remove {{plugin_name}}"}]}
{"command": "imapsync", "tasks": [{"task": "Synchronize IMAP account between host1 and host2:", "command": "imapsync --host1 {{host1}} --user1 {{user1}} --password1 {{secret1}} --host2 {{host2}} --user2 {{user2}} --password2 {{secret2}}"}]}
{"command": "img2pdf", "tasks": [{"task": "Convert multiple images to a single PDF, each image being on its own page:", "command": "img2pdf {{path/to/image1.jpg}} {{path/to/image2.jpg}} --output {{path/to/file.pdf}}"}, {"task": "Convert only the first frame of a multi-frame image to PDF:", "command": "img2pdf {{path/to/file.gif}} --first-frame-only --output {{path/to/file.pdf}}"}, {"task": "Auto orient the image, use a page size of A4 in landscape mode, and set a border of 2cm horizontally and 5.1cm vertically:", "command": "img2pdf {{path/to/file.jpg}} --auto-orient --pagesize {{A4^T}} --border {{2cm}}:{{5.1cm}} --output {{path/to/file.pdf}}"}, {"task": "Shrink only larger images to a 10cm by 15cm rectangle inside a 30x20cm page:", "command": "img2pdf {{path/to/file.tiff}} --pagesize {{30cm}}x{{20cm}} --imgsize {{10cm}}x{{15cm}} --fit {{shrink}} --output {{path/to/file.pdf}}"}, {"task": "Convert an image to PDF, and specify metadata for the resulting file:", "command": "img2pdf {{path/to/file.png}} --title {{title}} --author {{author}} --creationdate {{1970-01-31}} --keywords {{keyword1 keyword2}} --subject {{subject}} --output {{path/to/file.pdf}}"}]}
{"command": "imgcat", "tasks": [{"task": "Display an image on the command-line:", "command": "imgcat {{path/to/file}}"}]}
{"command": "import", "tasks": [{"task": "Capture the entire X server screen in the PostScript image format:", "command": "import -window root {{output.postscript}}"}, {"task": "Capture contents of a remote X server screen in the PNG format:", "command": "import -window root -display {{remote_host}}:{{screen}}.{{display}} {{output.png}}"}, {"task": "Capture a specific window, given its ID as displayed by `xwininfo`, into the JPEG format:", "command": "import -window {{window_id}} {{output.jpg}}"}]}
{"command": "in-toto-record", "tasks": [{"task": "Start the record (creates a preliminary link file):", "command": "in-toto-record start -n {{edit-files}} -k {{path/to/key_file}} -m {{.}}"}, {"task": "Stop the record (expects a preliminary link file):", "command": "in-toto-record stop -n {{edit-files}} -k {{path/to/key_file}} -p {{.}}"}]}
{"command": "in-toto-run", "tasks": [{"task": "Tag a git repo and signing the resulting link file:", "command": "in-toto-run -n {{tag}} --products {{.}} -k {{key_file}} -- {{git tag v1.0}}"}, {"task": "Create a tarball, storing files as materials and the tarball as product:", "command": "in-toto-run -n {{package}} -m {{project}} -p {{project.tar.gz}} -- {{tar czf project.tar.gz project}}"}, {"task": "Generate signed attestations for review work:", "command": "in-toto-run -n {{review}} -k {{key_file}} -m {{document.pdf}} -x"}, {"task": "Scan the image using Trivy and generate link file:", "command": "in-toto-run -n {{scan}} -k {{key_file}} -p {{report.json}} -- {{/bin/sh -c \"trivy -o report.json -f json <IMAGE>\"}}"}]}
{"command": "in-toto-sign", "tasks": [{"task": "Sign 'unsigned.layout' with two keys and write it to 'root.layout':", "command": "in-toto-sign -f {{unsigned.layout}} -k {{priv_key1}} {{priv_key2}} -o {{root.layout}}"}, {"task": "Replace signature in link file and write to default filename:", "command": "in-toto-sign -f {{package.2f89b927.link}} -k {{priv_key}}"}, {"task": "Verify a layout signed with 3 keys:", "command": "in-toto-sign -f {{root.layout}} -k {{pub_key0}} {{pub_key1}} {{pub_key2}} --verify"}, {"task": "Sign a layout with the default GPG key in default GPG keyring:", "command": "in-toto-sign -f {{root.layout}} --gpg"}, {"task": "Verify a layout with a GPG key identified by keyid '...439F3C2':", "command": "in-toto-sign -f {{root.layout}} --verify --gpg {{...439F3C2}}"}]}
{"command": "in2csv", "tasks": [{"task": "Convert an XLS file to CSV:", "command": "in2csv {{data.xls}}"}, {"task": "Convert a DBF file to a CSV file:", "command": "in2csv {{data.dbf}} > {{data.csv}}"}, {"task": "Convert a specific sheet from an XLSX file to CSV:", "command": "in2csv --sheet={{sheet_name}} {{data.xlsx}}"}, {"task": "Pipe a JSON file to in2csv:", "command": "cat {{data.json}} | in2csv -f json > {{data.csv}}"}]}
{"command": "indent", "tasks": [{"task": "Format C/C++ source according to the Linux style guide, automatically back up the original files, and replace with the indented versions:", "command": "indent --linux-style {{path/to/source.c}} {{path/to/another_source.c}}"}, {"task": "Format C/C++ source according to the GNU style, saving the indented version to a different file:", "command": "indent --gnu-style {{path/to/source.c}} -o {{path/to/indented_source.c}}"}, {"task": "Format C/C++ source according to the style of Kernighan & Ritchie (K&R), no tabs, 3 spaces per indent, and wrap lines at 120 characters:", "command": "indent --k-and-r-style --indent-level3 --no-tabs --line-length120 {{path/to/source.c}} -o {{path/to/indented_source.c}}"}]}
{"command": "infection", "tasks": [{"task": "Analyze code using the configuration file (or create one if it does not exist):", "command": "infection"}, {"task": "Use a specific number of threads:", "command": "infection --threads {{number_of_threads}}"}, {"task": "Specify a minimum Mutation Score Indicator (MSI):", "command": "infection --min-msi {{percentage}}"}, {"task": "Specify a minimum covered code MSI:", "command": "infection --min-covered-msi {{percentage}}"}, {"task": "Use a specific test framework (defaults to PHPUnit):", "command": "infection --test-framework {{phpunit|phpspec}}"}, {"task": "Only mutate lines of code that are covered by tests:", "command": "infection --only-covered"}, {"task": "Display the mutation code that has been applied:", "command": "infection --show-mutations"}, {"task": "Specify the log verbosity:", "command": "infection --log-verbosity {{default|all|none}}"}]}
{"command": "influx", "tasks": [{"task": "Connect to an InfluxDB running on localhost with no credentials:", "command": "influx"}, {"task": "Connect with a specific username (will prompt for a password):", "command": "influx -username {{username}} -password \"\""}, {"task": "Connect to a specific host:", "command": "influx -host {{hostname}}"}, {"task": "Use a specific database:", "command": "influx -database {{database_name}}"}, {"task": "Execute a given command:", "command": "influx -execute \"{{influxql_command}}\""}, {"task": "Return output in a specific format:", "command": "influx -execute \"{{influxql_command}}\" -format {{json|csv|column}}"}]}
{"command": "info", "tasks": [{"task": "Start reading top-level directory menu:", "command": "info"}, {"task": "Start reading at given menu item node from top-level directory:", "command": "info {{menu_item}}"}, {"task": "Start reading at second menu item within first menu item manual:", "command": "info {{first_menu_item}} {{second_menu_item}}"}]}
{"command": "initdb", "tasks": [{"task": "Create a database at `/usr/local/var/postgres`:", "command": "initdb -D /usr/local/var/postgres"}]}
{"command": "inkmake", "tasks": [{"task": "Export an SVG file executing the specified Inkfile:", "command": "inkmake {{path/to/Inkfile}}"}, {"task": "Execute an Inkfile and show detailed information:", "command": "inkmake --verbose {{path/to/Inkfile}}"}, {"task": "Execute an Inkfile, specifying SVG input file(s) and an output file:", "command": "inkmake --svg {{path/to/file.svg}} --out {{path/to/output_image}} {{path/to/Inkfile}}"}, {"task": "Specify a custom Inkscape binary to use as the backend:", "command": "inkmake --inkscape {{/Applications/Inkscape.app/Contents/Resources/bin/inkscape}} {{path/to/Inkfile}}"}, {"task": "Display help:", "command": "inkmake --help"}]}
{"command": "inkscape", "tasks": [{"task": "Open an SVG file in the Inkscape GUI:", "command": "inkscape {{filename.svg}}"}, {"task": "Export an SVG file into a bitmap with the default format (PNG) and the default resolution (96 DPI):", "command": "inkscape {{filename.svg}} -o {{filename.png}}"}, {"task": "Export an SVG file into a bitmap of 600x400 pixels (aspect ratio distortion may occur):", "command": "inkscape {{filename.svg}} -o {{filename.png}} -w {{600}} -h {{400}}"}, {"task": "Export the drawing (bounding box of all objects) of an SVG file into a bitmap:", "command": "inkscape {{filename.svg}} -o {{filename.png}} -D"}, {"task": "Export a single object, given its ID, into a bitmap:", "command": "inkscape {{filename.svg}} -i {{id}} -o {{object.png}}"}, {"task": "Export an SVG document to PDF, converting all texts to paths:", "command": "inkscape {{filename.svg}} -o {{filename.pdf}} --export-text-to-path"}, {"task": "Duplicate the object with id=\"path123\", rotate the duplicate 90 degrees, save the file, and quit Inkscape:", "command": "inkscape {{filename.svg}} --select=path123 --verb=\"{{EditDuplicate;ObjectRotate90;FileSave;FileQuit}}\""}]}
{"command": "inkview", "tasks": [{"task": "Preview an SVG:", "command": "inkview {{path/to/file.svg}}"}, {"task": "Preview multiple SVGs (use arrow keys to navigate):", "command": "inkview {{path/to/file_a.svg}} {{path/to/file_b.svg}} {{path/to/file_c.svg}}"}]}
{"command": "install-tl", "tasks": [{"task": "Start the text-based installer (default on Unix systems):", "command": "install-tl -no-gui"}, {"task": "Start the GUI installer (default on macOS and Windows, requires Tcl/Tk):", "command": "install-tl -gui"}, {"task": "Install TeX Live as defined in a specific profile file:", "command": "install-tl -profile {{path/to/texlive.profile}}"}, {"task": "Start the installer with the settings from a specific profile file:", "command": "install-tl -init-from-file {{path/to/texlive.profile}}"}, {"task": "Start the installer for installation on a portable device, like a USB stick:", "command": "install-tl -portable"}, {"task": "Show help for `install-tl`:", "command": "install-tl -help"}]}
{"command": "install", "tasks": [{"task": "Copy files to the destination:", "command": "install {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}, {"task": "Copy files to the destination, setting their ownership:", "command": "install --owner {{user}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}, {"task": "Copy files to the destination, setting their group ownership:", "command": "install --group {{user}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}, {"task": "Copy files to the destination, setting their `mode`:", "command": "install --mode {{+x}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}, {"task": "Copy files and apply access/modification times of source to the destination:", "command": "install --preserve-timestamps {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}, {"task": "Copy files and create the directories at the destination if they don't exist:", "command": "install -D {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}"}]}
{"command": "interdiff", "tasks": [{"task": "Compare diff files:", "command": "interdiff {{old_file}} {{new_file}}"}, {"task": "Compare diff files, ignoring whitespace:", "command": "interdiff -w {{old_file}} {{new_file}}"}]}
{"command": "ionic", "tasks": [{"task": "Create a new project:", "command": "ionic start"}, {"task": "Start a local dev server for app dev/testing:", "command": "ionic serve"}, {"task": "Generate new app component, directive, page, pipe, provider or tabs:", "command": "ionic g {{page}}"}, {"task": "Show versions of Ionic, Cordova, environment, etc.:", "command": "ionic info"}, {"task": "Run app on an Android/iOS device:", "command": "ionic cordova run {{android|ios}} --device"}, {"task": "Check the health of an Ionic app:", "command": "ionic doctor {{check}}"}]}
{"command": "ionice", "tasks": [{"task": "Set I/O scheduling class of a running process:", "command": "ionice -c {{scheduling_class}} -p {{pid}}"}, {"task": "Run a command with custom I/O scheduling class and priority:", "command": "ionice -c {{scheduling_class}} -n {{priority}} {{command}}"}, {"task": "Print the I/O scheduling class and priority of a running process:", "command": "ionice -p {{pid}}"}]}
{"command": "ioping", "tasks": [{"task": "Show disk I/O latency using the default values and the current directory:", "command": "ioping ."}, {"task": "Measure latency on /tmp using 10 requests of 1 megabyte each:", "command": "ioping -c 10 -s 1M /tmp"}, {"task": "Measure disk seek rate on `/dev/sdX`:", "command": "ioping -R {{/dev/sdX}}"}, {"task": "Measure disk sequential speed on `/dev/sdX`:", "command": "ioping -RL {{/dev/sdX}}"}]}
{"command": "iotop", "tasks": [{"task": "Start top-like I/O monitor:", "command": "sudo iotop"}, {"task": "Show only processes or threads actually doing I/O:", "command": "sudo iotop --only"}, {"task": "Show I/O usage in non-interactive mode:", "command": "sudo iotop --batch"}, {"task": "Show only I/O usage of processes (default is to show all threads):", "command": "sudo iotop --processes"}, {"task": "Show I/O usage of given PID(s):", "command": "sudo iotop --pid={{PID}}"}, {"task": "Show I/O usage of a given user:", "command": "sudo iotop --user={{user}}"}, {"task": "Show accumulated I/O instead of bandwidth:", "command": "sudo iotop --accumulated"}]}
{"command": "ipaggcreate", "tasks": [{"task": "Count the number of packets sent from each source address appearing in a pcap file:", "command": "ipaggcreate --src {{path/to/file.pcap}}"}, {"task": "Group and count packets read from a network interface by IP packet length:", "command": "ipaggcreate --interface {{eth0}} --length"}, {"task": "Count the number of bytes sent between each address pair appearing in a pcap file:", "command": "ipaggcreate --address-pairs --bytes {{path/to/file.pcap}}"}]}
{"command": "ipaggmanip", "tasks": [{"task": "Combine labels equal in their high-order bits:", "command": "ipaggmanip --prefix {{16}} {{path/to/file}}"}, {"task": "Remove labels with a count smaller than a given number of bytes and output a random sample of such labels:", "command": "ipaggmanip --cut-smaller {{100}} --cull-labels {{5}} {{path/to/file}}"}, {"task": "Replace each label's count with 1 if it is non-zero:", "command": "ipaggmanip --posterize {{path/to/file}}"}]}
{"command": "ipcs", "tasks": [{"task": "Specific information about the Message Queue which has the ID 32768:", "command": "ipcs -qi 32768"}, {"task": "General information about all the IPC:", "command": "ipcs -a"}]}
{"command": "iperf", "tasks": [{"task": "Run on server:", "command": "iperf -s"}, {"task": "Run on server using UDP mode and set server port to listen on 5001:", "command": "iperf -u -s -p {{5001}}"}, {"task": "Run on client:", "command": "iperf -c {{server_address}}"}, {"task": "Run on client every 2 seconds:", "command": "iperf -c {{server_address}} -i {{2}}"}, {"task": "Run on client with 5 parallel threads:", "command": "iperf -c {{server_address}} -P {{5}}"}, {"task": "Run on client using UDP mode:", "command": "iperf -u -c {{server_address}} -p {{5001}}"}]}
{"command": "iperf3", "tasks": [{"task": "Run iperf3 as a server:", "command": "iperf3 -s"}, {"task": "Run an iperf3 server on a specific port:", "command": "iperf3 -s -p {{port}}"}, {"task": "Start bandwidth test:", "command": "iperf3 -c {{server}}"}, {"task": "Run iperf3 in multiple parallel streams:", "command": "iperf3 -c {{server}} -P {{streams}}"}, {"task": "Reverse direction of the test. Server sends data to the client:", "command": "iperf3 -c {{server}} -R"}]}
{"command": "ipfs", "tasks": [{"task": "Add a file from local to the filesystem, pin it and print the relative hash:", "command": "ipfs add {{path/to/file}}"}, {"task": "Add a directory and its files recursively from local to the filesystem and print the relative hash:", "command": "ipfs add -r {{path/to/directory}}"}, {"task": "Save a remote file and give it a name but not pin it:", "command": "ipfs get {{hash}} -o {{path/to/file}}"}, {"task": "Pin a remote file locally:", "command": "ipfs pin add {{hash}}"}, {"task": "Display pinned files:", "command": "ipfs pin ls"}, {"task": "Unpin a file from the local storage:", "command": "ipfs pin rm {{hash}}"}, {"task": "Remove unpinned files from local storage:", "command": "ipfs repo gc"}]}
{"command": "ipsumdump", "tasks": [{"task": "Print the source and destination IP addresses of all packets in a pcap file:", "command": "ipsumdump --src --dst {{path/to/file.pcap}}"}, {"task": "Print the timestamps, source address, source port, destination address, destination port and protocol of all packets read from a given network interface:", "command": "ipsumdump --interface {{eth0}} -tsSdDp"}, {"task": "Print the anonymised source address, anonymised destination address, and IP packet length of all packets in a pcap file:", "command": "ipsumdump --src --dst --length --anonymize {{path/to/file.pcap}}"}]}
{"command": "IPython", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "ipython"}, {"task": "Enter an interactive IPython session after running a Python script:", "command": "ipython -i {{script.py}}"}, {"task": "Create default IPython profile:", "command": "ipython profile create"}, {"task": "Print the path to the directory for the default IPython profile:", "command": "ipython locate profile"}, {"task": "Clear the IPython history database, deleting all entries:", "command": "ipython history clear"}]}
{"command": "irb", "tasks": [{"task": "Start the interactive shell:", "command": "irb"}]}
{"command": "irssi", "tasks": [{"task": "Open Irssi and connect to a server with a nickname:", "command": "irssi -n {{nickname}} -c {{irc.example.com}}"}, {"task": "Open Irssi and connect with a specific server on a given port:", "command": "irssi -c {{irc.example.com}} -p {{port}}"}, {"task": "View the help:", "command": "irssi --help"}, {"task": "Join a channel:", "command": "/join {{#channelname}}"}, {"task": "Change active window (starts at 1):", "command": "/win {{window_number}}"}, {"task": "Exit the application cleanly and quitting any server(s):", "command": "/quit"}]}
{"command": "is-up", "tasks": [{"task": "Check the status of the specified website:", "command": "is-up {{example.com}}"}]}
{"command": "isisdl", "tasks": [{"task": "Start the synchronization process:", "command": "isisdl"}, {"task": "Limit the download rate to 20 MiB/s and download with 5 threads:", "command": "isisdl --download-rate {{20}} --max-num-threads {{5}}"}, {"task": "Run the initialization configuration wizard:", "command": "isisdl --init"}, {"task": "Run the additional configuration wizard:", "command": "isisdl --config"}, {"task": "Initiate a full synchronization of the database and compute the checksum of every file:", "command": "isisdl --sync"}, {"task": "Start ffmpeg to compress downloaded videos:", "command": "isisdl --compress"}]}
{"command": "iverilog", "tasks": [{"task": "Compile a source file into an executable:", "command": "iverilog {{path/to/source.v}} -o {{path/to/executable}}"}, {"task": "Compile a source file into an executable while displaying all warnings:", "command": "iverilog {{path/to/source.v}} -Wall -o {{path/to/executable}}"}, {"task": "Compile and run explicitly using the VVP runtime:", "command": "iverilog -o {{path/to/executable}} -tvvp {{path/to/source.v}}"}, {"task": "Compile using Verilog library files from a different path:", "command": "iverilog {{path/to/source.v}} -o {{path/to/executable}} -I{{path/to/library_directory}}"}, {"task": "Preprocess Verilog code without compiling:", "command": "iverilog -E {{path/to/source.v}}"}]}
{"command": "ivpn", "tasks": [{"task": "Print the current state of IVPN, including the connection and firewall status:", "command": "ivpn status"}, {"task": "Print a list of available servers to connect to:", "command": "ivpn servers"}]}
{"command": "jadx", "tasks": [{"task": "Decompile a Dex file into a directory:", "command": "jadx {{path/to/file}}"}, {"task": "Decompile a Dex file into a specific directory:", "command": "jadx --output-dir {{path/to/directory}} {{path/to/file}}"}]}
{"command": "jar", "tasks": [{"task": "Recursively archive all files in the current directory into a .jar file:", "command": "jar cf {{file.jar}} *"}, {"task": "Unzip .jar/.war file to the current directory:", "command": "jar -xvf {{file.jar}}"}, {"task": "List a .jar/.war file content:", "command": "jar tf {{path/to/file.jar}}"}, {"task": "List a .jar/.war file content with verbose output:", "command": "jar tvf {{path/to/file.jar}}"}]}
{"command": "jarsigner", "tasks": [{"task": "Sign a JAR file:", "command": "jarsigner {{path/to/file.jar}} {{keystore_alias}}"}, {"task": "Sign a JAR file with a specific algorithm:", "command": "jarsigner -sigalg {{algorithm}} {{path/to/file.jar}} {{keystore_alias}}"}, {"task": "Verify the signature of a JAR file:", "command": "jarsigner -verify {{path/to/file.jar}}"}]}
{"command": "java", "tasks": [{"task": "Execute a java `.class` file that contains a main method by using just the class name:", "command": "java {{classname}}"}, {"task": "Execute a java program and use additional third-party or user-defined classes:", "command": "java -classpath {{path/to/classes1}}:{{path/to/classes2}}:. {{classname}}"}, {"task": "Execute a `.jar` program:", "command": "java -jar {{filename.jar}}"}, {"task": "Execute a `.jar` program with debug waiting to connect on port 5005:", "command": "java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -jar {{filename.jar}}"}, {"task": "Display JDK, JRE and HotSpot versions:", "command": "java -version"}, {"task": "Display usage information for the java command:", "command": "java -help"}]}
{"command": "javac", "tasks": [{"task": "Compile a `.java` file:", "command": "javac {{file.java}}"}, {"task": "Compile several `.java` files:", "command": "javac {{file1.java}} {{file2.java}} {{file3.java}}"}, {"task": "Compile all `.java` files in current directory:", "command": "javac {{*.java}}"}, {"task": "Compile a `.java` file and place the resulting class file in a specific directory:", "command": "javac -d {{path/to/directory}} {{file.java}}"}]}
{"command": "javadoc", "tasks": [{"task": "Generate documentation for Java source code and save the result in a directory:", "command": "javadoc -d {{path/to/directory/}} {{path/to/java_source_code}}"}, {"task": "Generate documentation with a specific encoding:", "command": "javadoc -docencoding {{UTF-8}} {{path/to/java_source_code}}"}, {"task": "Generate documentation excluding some packages:", "command": "javadoc -exclude {{package_list}} {{path/to/java_source_code}}"}]}
{"command": "javap", "tasks": [{"task": "Disassemble and list a `.class` file:", "command": "javap {{path/to/file.class}}"}, {"task": "Disassemble and list multiple `.class` files:", "command": "javap {{path/to/file1.class path/to/file2.class ...}}"}, {"task": "Disassemble and list a built-in class file:", "command": "javap java.{{package}}.{{class}}"}, {"task": "Display help:", "command": "javap -help"}, {"task": "Display version:", "command": "javap -version"}]}
{"command": "jc", "tasks": [{"task": "Convert command output to JSON via pipe:", "command": "{{ifconfig}} | jc {{--ifconfig}}"}, {"task": "Convert command output to JSON via magic syntax:", "command": "jc {{ifconfig}}"}, {"task": "Output pretty JSON via pipe:", "command": "{{ifconfig}} | jc {{--ifconfig}} -p"}, {"task": "Output pretty JSON via magic syntax:", "command": "jc -p {{ifconfig}}"}]}
{"command": "jcal", "tasks": [{"task": "Display a calendar for the current month:", "command": "jcal"}, {"task": "Display the previous, current, and next months:", "command": "jcal -3"}, {"task": "Display a calendar for a specific year (4 digits):", "command": "jcal {{year}}"}, {"task": "Display a calendar for a specific month and year:", "command": "jcal {{year}} {{month}}"}]}
{"command": "jdeps", "tasks": [{"task": "Analyze the dependencies of a `.jar` or `.class` file:", "command": "jdeps {{path/to/filename.class}}"}, {"task": "Print a summary of all dependencies of a specific `.jar` file:", "command": "jdeps {{path/to/filename.jar}} -summary"}, {"task": "Print all class-level dependencies of a `.jar` file:", "command": "jdeps {{path/to/filename.jar}} -verbose"}, {"task": "Output the results of the analysis in a DOT file into a specific directory:", "command": "jdeps {{path/to/filename.jar}} -dotoutput {{path/to/directory}}"}, {"task": "Display help:", "command": "jdeps --help"}]}
{"command": "jdupes", "tasks": [{"task": "Search a single directory:", "command": "jdupes {{path/to/directory}}"}, {"task": "Search multiple directories:", "command": "jdupes {{directory1}} {{directory2}}"}, {"task": "Search all directories recursively:", "command": "jdupes --recurse {{path/to/directory}}"}, {"task": "Search directory recursively and let user choose files to preserve:", "command": "jdupes --delete --recurse {{path/to/directory}}"}, {"task": "Search multiple directories and follow subdirectores under directory2, not directory1:", "command": "jdupes {{directory1}} --recurse: {{directory2}}"}, {"task": "Search multiple directories and keep the directory order in result:", "command": "jdupes -O {{directory1}} {{directory2}} {{directory3}}"}]}
{"command": "jekyll", "tasks": [{"task": "Generate a development server that will run at http://localhost:4000/:", "command": "jekyll serve"}, {"task": "Enable incremental regeneration:", "command": "jekyll serve --incremental"}, {"task": "Enable verbose output:", "command": "jekyll serve --verbose"}, {"task": "Generate the current directory into `./_site`:", "command": "jekyll build"}, {"task": "Clean the site (removes site output and `cache` directory) without building:", "command": "jekyll clean"}]}
{"command": "jello", "tasks": [{"task": "Pretty-print JSON or JSON-Lines data from `stdin` to `stdout`:", "command": "cat {{file.json}} | jello"}, {"task": "Output a schema of JSON or JSON Lines data from `stdin` to `stdout` (useful for grep):", "command": "cat {{file.json}} | jello -s"}, {"task": "Output all elements from arrays (or all the values from objects) in JSON or JSON-Lines data from `stdin` to `stdout`:", "command": "cat {{file.json}} | jello -l"}, {"task": "Output the first element in JSON or JSON-Lines data from `stdin` to `stdout`:", "command": "cat {{file.json}} | jello _[0]"}, {"task": "Output the value of a given key of each element in JSON or JSON-Lines data from `stdin` to `stdout`:", "command": "cat {{file.json}} | jello '[i.{{key_name}} for i in _]'"}, {"task": "Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name` and `other_key_name`):", "command": "cat {{file.json}} | jello '{\"{{my_new_key}}\": _.{{key_name}}, \"{{my_other_key}}\": _.{{other_key_name}}}'"}, {"task": "Output the value of a given key to a string (and disable JSON output):", "command": "cat {{file.json}} | jello -r '\"{{some text}}: \" + _.{{key_name}}'"}]}
{"command": "jenv", "tasks": [{"task": "Add a Java version to jEnv:", "command": "jenv add {{path/to/jdk_home}}"}, {"task": "Display the current JDK version used:", "command": "jenv version"}, {"task": "Display all managed JDKs:", "command": "jenv versions"}, {"task": "Set the global JDK version:", "command": "jenv global {{java_version}}"}, {"task": "Set the JDK version for the current shell session:", "command": "jenv shell {{java_version}}"}, {"task": "Enable a jEnv plugin:", "command": "jenv enable-plugin {{plugin_name}}"}]}
{"command": "jest", "tasks": [{"task": "Run all available tests:", "command": "jest"}, {"task": "Run the test suites from the given files:", "command": "jest {{path/to/file1}} {{path/to/file2}}"}, {"task": "Run the test suites from files within the current and subdirectories, whose paths match the given regular expression:", "command": "jest {{regular_expression1}} {{regular_expression2}}"}, {"task": "Run the tests whose names match the given regular expression:", "command": "jest --testNamePattern {{regular_expression}}"}, {"task": "Run test suites related to a given source file:", "command": "jest --findRelatedTests {{path/to/source_file.js}}"}, {"task": "Run test suites related to all uncommitted files:", "command": "jest --onlyChanged"}, {"task": "Watch files for changes and automatically re-run related tests:", "command": "jest --watch"}, {"task": "Show help:", "command": "jest --help"}]}
{"command": "jetifier", "tasks": [{"task": "Migrate project dependencies to the AndroidX format:", "command": "jetifier"}, {"task": "Migrate project dependencies from the AndroidX format:", "command": "jetifier reverse"}]}
{"command": "jf", "tasks": [{"task": "Add a new configuration:", "command": "jf config add"}, {"task": "Show the current configuration:", "command": "jf config show"}, {"task": "Search for artifacts within the given repository and directory:", "command": "jf rt search --recursive {{repostiory_name}}/{{path}}/"}]}
{"command": "jhat", "tasks": [{"task": "Analyze a heap dump (from `jmap`), view via HTTP on port 7000:", "command": "jhat {{dump_file.bin}}"}, {"task": "Analyze a heap dump, specifying an alternate port for the http server:", "command": "jhat -p {{port}} {{dump_file.bin}}"}, {"task": "Analyze a dump letting `jhat` use up to 8 GB RAM (2-4x dump size recommended):", "command": "jhat -J-mx8G {{dump_file.bin}}"}]}
{"command": "jhipster", "tasks": [{"task": "Generate a simple full-stack project (monolithic or microservices):", "command": "jhipster"}, {"task": "Generate a simple frontend project:", "command": "jhipster --skip-server"}, {"task": "Generate a simple backend project:", "command": "jhipster --skip-client"}, {"task": "Apply latest JHipster updates to the project:", "command": "jhipster upgrade"}, {"task": "Add a new entity to a generated project:", "command": "jhipster entity {{entity_name}}"}, {"task": "Import a JDL file to configure your application (see: https://start.jhipster.tech/jdl-studio/):", "command": "jhipster import-jdl {{first_file.jh second_file.jh ... n_file.jh}}"}, {"task": "Generate a CI/CD pipeline for your application:", "command": "jhipster ci-cd"}, {"task": "Generate a Kubernetes configuration for your application:", "command": "jhipster kubernetes"}]}
{"command": "jhsdb", "tasks": [{"task": "Print stack and locks information of a Java process:", "command": "jhsdb jstack --pid {{pid}}"}, {"task": "Open a core dump in interactive debug mode:", "command": "jhsdb clhsdb --core {{path/to/core_dump}} --exe {{path/to/jdk/bin/java}}"}, {"task": "Start a remote debug server:", "command": "jhsdb debugd --pid {{pid}} --serverid {{optional_unique_id}}"}, {"task": "Connect to a process in interactive debug mode:", "command": "jhsdb clhsdb --pid {{pid}}"}]}
{"command": "jigsaw", "tasks": [{"task": "Initialize a project:", "command": "jigsaw init"}, {"task": "Initialize a project using a starter template:", "command": "jigsaw init {{template_name}}"}, {"task": "Build the site for development:", "command": "jigsaw build"}, {"task": "Preview the site from the \"build_local\" directory:", "command": "jigsaw serve"}, {"task": "Build the site for production:", "command": "jigsaw build production"}, {"task": "Preview the site from the \"build_production\" directory:", "command": "jigsaw serve {{build_production}}"}]}
{"command": "jmap", "tasks": [{"task": "Print shared object mappings for a Java process (output like pmap):", "command": "jmap {{java_pid}}"}, {"task": "Print heap summary information:", "command": "jmap -heap {{filename.jar}} {{java_pid}}"}, {"task": "Print histogram of heap usage by type:", "command": "jmap -histo {{java_pid}}"}, {"task": "Dump contents of the heap into a binary file for analysis with jhat:", "command": "jmap -dump:format=b,file={{path/to/file}} {{java_pid}}"}, {"task": "Dump live objects of the heap into a binary file for analysis with jhat:", "command": "jmap -dump:live,format=b,file={{path/to/file}} {{java_pid}}"}]}
{"command": "jmeter", "tasks": [{"task": "Run a specific test plan in nongui mode:", "command": "jmeter --nongui --testfile {{path/to/file}}.jmx"}, {"task": "Run a test plan in nongui mode using a specific log file:", "command": "jmeter --nogui --testfile {{path/to/file}}.jmx --logfile {{path/to/logfile}}.jtl"}, {"task": "Run a test plan in nongui mode using a specific proxy:", "command": "jmeter --nongui --testfile {{path/to/file}}.jmx --proxyHost {{127.0.0.1}} --proxyPort {{8888}}"}, {"task": "Run a test plan in nongui mode using a specific JMeter property:", "command": "jmeter --jmeterproperty {{key}}='{{value}}' --nongui --testfile {{path/to/file}}.jmx"}]}
{"command": "jmtpfs", "tasks": [{"task": "Mount an MTP device to a directory:", "command": "jmtpfs {{path/to/directory}}"}, {"task": "Set mount options:", "command": "jmtpfs -o {{allow_other,auto_unmount}} {{path/to/directory}}"}, {"task": "List available MTP devices:", "command": "jmtpfs --listDevices"}, {"task": "If multiple devices are present, mount a specific device:", "command": "jmtpfs -device={{bus_id}},{{device_id}} {{path/to/directory}}"}, {"task": "Unmount MTP device:", "command": "fusermount -u {{path/to/directory}}"}]}
{"command": "jobs", "tasks": [{"task": "Show status of all jobs:", "command": "jobs"}, {"task": "Show status of a particular job:", "command": "jobs %{{job_id}}"}, {"task": "Show status and process IDs of all jobs:", "command": "jobs -l"}, {"task": "Show process IDs of all jobs:", "command": "jobs -p"}]}
{"command": "joe", "tasks": [{"task": "Open a new file in JOE:", "command": "joe"}, {"task": "Open a specific file:", "command": "joe {{path/to/file}}"}, {"task": "Open a specific file, positioning the cursor at the specified line:", "command": "joe +{{line}} {{path/to/file}}"}, {"task": "Open a specific file in read-only mode:", "command": "joe -rdonly {{path/to/file}}"}]}
{"command": "john", "tasks": [{"task": "Crack password hashes:", "command": "john {{path/to/hashes.txt}}"}, {"task": "Show passwords cracked:", "command": "john --show {{path/to/hashes.txt}}"}, {"task": "Display users' cracked passwords by user identifier from multiple files:", "command": "john --show --users={{user_ids}} {{path/to/hashes*}} {{path/to/other/hashes*}}"}, {"task": "Crack password hashes, using a custom wordlist:", "command": "john --wordlist={{path/to/wordlist.txt}} {{path/to/hashes.txt}}"}, {"task": "List available hash formats:", "command": "john --list=formats"}, {"task": "Crack password hashes, using a specific hash format:", "command": "john --format={{md5crypt}} {{path/to/hashes.txt}}"}, {"task": "Crack password hashes, enabling word mangling rules:", "command": "john --rules {{path/to/hashes.txt}}"}, {"task": "Restore an interrupted cracking session from a state file, e.g. `mycrack.rec`:", "command": "john --restore={{path/to/mycrack.rec}}"}]}
{"command": "join", "tasks": [{"task": "Join two files on the first (default) field:", "command": "join {{file1}} {{file2}}"}, {"task": "Join two files using a comma (instead of a space) as the field separator:", "command": "join -t {{','}} {{file1}} {{file2}}"}, {"task": "Join field3 of file1 with field1 of file2:", "command": "join -1 {{3}} -2 {{1}} {{file1}} {{file2}}"}, {"task": "Produce a line for each unpairable line for file1:", "command": "join -a {{1}} {{file1}} {{file2}}"}, {"task": "Join a file from `stdin`:", "command": "cat {{path/to/file1}} | join - {{path/to/file2}}"}]}
{"command": "josm", "tasks": [{"task": "Launch JOSM:", "command": "josm"}, {"task": "Launch JOSM in maximized mode:", "command": "josm --maximize"}, {"task": "Launch JOSM and set a specific language:", "command": "josm --language {{de}}"}, {"task": "Launch JOSM and reset all preferences to their default values:", "command": "josm --reset-preferences"}, {"task": "Launch JOSM and download a specific bounding box:", "command": "josm --download {{minlat,minlon,maxlat,maxlon}}"}, {"task": "Launch JOSM and download a specific bounding box as raw GPS:", "command": "josm --downloadgps {{minlat,minlon,maxlat,maxlon}}"}, {"task": "Launch JOSM without plugins:", "command": "josm --skip-plugins"}]}
{"command": "jp2a", "tasks": [{"task": "Read JPEG image from a file and print in ASCII:", "command": "jp2a {{path/to/image.jpeg}}"}, {"task": "Read JPEG image from a URL and print in ASCII:", "command": "jp2a {{www.example.com/image.jpeg}}"}, {"task": "Colorize the ASCII output:", "command": "jp2a --colors {{path/to/image.jpeg}}"}, {"task": "Specify characters to be used for the ASCII output:", "command": "jp2a --chars='{{..-ooxx@@}}' {{path/to/image.jpeg}}"}, {"task": "Write the ASCII output into a file:", "command": "jp2a --output={{path/to/output_file.txt}} {{path/to/image.jpeg}}"}, {"task": "Write the ASCII output in HTML file format, suitable for viewing in web browsers:", "command": "jp2a --html --output={{path/to/output_file.html}} {{path/to/image.jpeg}}"}]}
{"command": "jpegoptim", "tasks": [{"task": "Optimise a set of JPEG images, retaining all associated data:", "command": "jpegoptim {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}"}, {"task": "Optimise JPEG images, stripping all non-essential data:", "command": "jpegoptim --strip-all {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}"}, {"task": "Force the output images to be progressive:", "command": "jpegoptim --all-progressive {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}"}, {"task": "Force the output images to have a fixed maximum filesize:", "command": "jpegoptim --size={{250k}} {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}"}]}
{"command": "jps", "tasks": [{"task": "List all JVM processes:", "command": "jps"}, {"task": "List all JVM processes with only PID:", "command": "jps -q"}, {"task": "Display the arguments passed to the processes:", "command": "jps -m"}, {"task": "Display the full package name of all processes:", "command": "jps -l"}, {"task": "Display the arguments passed to the JVM:", "command": "jps -v"}]}
{"command": "jq", "tasks": [{"task": "Execute a specific expression (print a colored and formatted json):", "command": "{{cat path/to/file.json}} | jq '.'"}, {"task": "Execute a specific script:", "command": "{{cat path/to/file.json}} | jq --from-file {{path/to/script.jq}}"}, {"task": "Pass specific arguments:", "command": "{{cat path/to/file.json}} | jq {{--arg \"name1\" \"value1\" --arg \"name2\" \"value2\" ...}} '{{. + $ARGS.named}}'"}, {"task": "Print specific keys:", "command": "{{cat path/to/file.json}} | jq '{{.key1, .key2, ...}}'"}, {"task": "Print specific array items:", "command": "{{cat path/to/file.json}} | jq '{{.[index1], .[index2], ...}}'"}, {"task": "Print all array items/object keys:", "command": "{{cat path/to/file.json}} | jq '.[]'"}, {"task": "Add/remove specific keys:", "command": "{{cat path/to/file.json}} | jq '. {{+|-}} {{{\"key1\": \"value1\", \"key2\": \"value2\", ...}}}'"}]}
{"command": "jrnl", "tasks": [{"task": "Insert a new entry with your editor:", "command": "jrnl"}, {"task": "Quickly insert a new entry:", "command": "jrnl {{today at 3am}}: {{title}}. {{content}}"}, {"task": "View the last ten entries:", "command": "jrnl -n {{10}}"}, {"task": "View everything that happened from the start of last year to the start of last march:", "command": "jrnl -from \"{{last year}}\" -until {{march}}"}, {"task": "Edit all entries tagged with \"texas\" and \"history\":", "command": "jrnl {{@texas}} -and {{@history}} --edit"}]}
{"command": "json5", "tasks": [{"task": "Convert JSON5 `stdin` to JSON `stdout`:", "command": "echo {{input}} | json5"}, {"task": "Convert a JSON5 file to JSON and output to `stdout`:", "command": "json5 {{path/to/input_file.json5}}"}, {"task": "Convert a JSON5 file to the specified JSON file:", "command": "json5 {{path/to/input_file.json5}} --out-file {{path/to/output_file.json}}"}, {"task": "Validate a JSON5 file:", "command": "json5 {{path/to/input_file.json5}} --validate"}, {"task": "Specify the number of spaces to indent by (or \"t\" for tabs):", "command": "json5 --space {{indent_amount}}"}, {"task": "View available options:", "command": "json5 --help"}]}
{"command": "jstack", "tasks": [{"task": "Print Java stack traces for all threads in a Java process:", "command": "jstack {{java_pid}}"}, {"task": "Print mixed mode (Java/C++) stack traces for all threads in a Java process:", "command": "jstack -m {{java_pid}}"}, {"task": "Print stack traces from Java core dump:", "command": "jstack {{/usr/bin/java}} {{file.core}}"}]}
{"command": "jtbl", "tasks": [{"task": "Print a table from JSON or JSON Lines input:", "command": "cat {{file.json}} | jtbl"}, {"task": "Print a table and specify the column width for wrapping:", "command": "cat {{file.json}} | jtbl --cols={{width}}"}, {"task": "Print a table and truncate rows instead of wrapping:", "command": "cat {{file.json}} | jtbl -t"}, {"task": "Print a table and don't wrap or truncate rows:", "command": "cat {{file.json}} | jtbl -n"}]}
{"command": "julia", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "julia"}, {"task": "Execute a Julia program and exit:", "command": "julia {{program.jl}}"}, {"task": "Execute a Julia program that takes arguments:", "command": "julia {{program.jl}} {{arguments}}"}, {"task": "Evaluate a string containing Julia code:", "command": "julia -e '{{julia_code}}'"}, {"task": "Evaluate a string of Julia code, passing arguments to it:", "command": "julia -e '{{for x in ARGS; println(x); end}}' {{arguments}}"}, {"task": "Evaluate an expression and print the result:", "command": "julia -E '{{(1 - cos(pi/4))/2}}'"}, {"task": "Start Julia in parallel mode, using N worker processes:", "command": "julia -p {{N}}"}]}
{"command": "jupyter", "tasks": [{"task": "Start a Jupyter notebook server in the current directory:", "command": "jupyter notebook"}, {"task": "Open a specific Jupyter notebook:", "command": "jupyter notebook {{example.ipynb}}"}, {"task": "Export a specific Jupyter notebook into another format:", "command": "jupyter nbconvert --to {{html|markdown|pdf|script}} {{example.ipynb}}"}, {"task": "Start a server on a specific port:", "command": "jupyter notebook --port={{port}}"}, {"task": "List currently running notebook servers:", "command": "jupyter notebook list"}, {"task": "Stop the currently running server:", "command": "jupyter notebook stop"}, {"task": "Start JupyterLab, if installed, in the current directory:", "command": "jupyter lab"}]}
{"command": "jupytext", "tasks": [{"task": "Turn a notebook into a paired `.ipynb`/`.py` notebook:", "command": "jupytext --set-formats ipynb,py {{notebook.ipynb}}"}, {"task": "Convert a notebook to a `.py` file:", "command": "jupytext --to py {{notebook.ipynb}}"}, {"task": "Convert a `.py` file to a notebook with no outputs:", "command": "jupytext --to notebook {{notebook.py}}"}, {"task": "Convert a `.md` file to a notebook and run it:", "command": "jupytext --to notebook --execute {{notebook.md}}"}, {"task": "Update the input cells in a notebook and preserve outputs and metadata:", "command": "jupytext --update --to notebook {{notebook.py}}"}, {"task": "Update all paired representations of a notebook:", "command": "jupytext --sync {{notebook.ipynb}}"}]}
{"command": "just", "tasks": [{"task": "Run a recipe specified in the justfile:", "command": "just {{recipe}}"}, {"task": "Initialize new justfile in project root:", "command": "just --init"}, {"task": "Edit justfile in the default editor:", "command": "just -e"}, {"task": "List available recipes in the justfile:", "command": "just -l"}, {"task": "Print justfile:", "command": "just --dump"}]}
{"command": "jwt", "tasks": [{"task": "Decode a JWT:", "command": "jwt decode {{jwt_string}}"}, {"task": "Decode a JWT as a JSON string:", "command": "jwt decode -j {{jwt_string}}"}, {"task": "Encode a JSON string to a JWT:", "command": "jwt encode --alg {{HS256}} --secret {{1234567890}} '{{json_string}}'"}, {"task": "Encode key pair payload to JWT:", "command": "jwt encode --alg {{HS256}} --secret {{1234567890}} -P key=value"}]}
{"command": "k3d", "tasks": [{"task": "Create a cluster:", "command": "k3d cluster create {{cluster_name}}"}, {"task": "Delete a cluster:", "command": "k3d cluster delete {{cluster_name}}"}, {"task": "Create a new containerized k3s node:", "command": "k3d node create {{node_name}}"}, {"task": "Import an image from Docker into a k3d cluster:", "command": "k3d image import {{image_name}} --cluster {{cluster_name}}"}, {"task": "Create a new registry:", "command": "k3d registry create {{registry_name}}"}]}
{"command": "k6", "tasks": [{"task": "Run load test locally:", "command": "k6 run {{script.js}}"}, {"task": "Run load test locally with a given number of virtual users and duration:", "command": "k6 run --vus {{10}} --duration {{30s}} {{script.js}}"}, {"task": "Run load test locally with a given environment variable:", "command": "k6 run -e {{HOSTNAME=example.com}} {{script.js}}"}, {"task": "Run load test locally using InfluxDB to store results:", "command": "k6 run --out influxdb={{http://localhost:8086/k6db}} {{script.js}}"}, {"task": "Run load test locally and discard response bodies (significantly faster):", "command": "k6 run --discard-response-bodies {{script.js}}"}, {"task": "Run load test locally using the base JavaScript compatibility mode (significantly faster):", "command": "k6 run --compatibility-mode=base {{script.js}}"}, {"task": "Log in to cloud service using secret token:", "command": "k6 login cloud --token {{secret}}"}, {"task": "Run load test on cloud infrastructure:", "command": "k6 cloud {{script.js}}"}]}
{"command": "k8s-unused-secret-detector", "tasks": [{"task": "Detect unused secrets:", "command": "k8s-unused-secret-detector"}, {"task": "Detect unused secrets in a specific namespace:", "command": "k8s-unused-secret-detector -n {{namespace}}"}, {"task": "Delete unused secrets in a specific namespace:", "command": "k8s-unused-secret-detector -n {{namespace}} | kubectl delete secret -n {{namespace}}"}]}
{"command": "k8sec", "tasks": [{"task": "List all secrets:", "command": "k8sec list"}, {"task": "List a specific secret as a base64-encoded string:", "command": "k8sec list {{secret_name}} --base64"}, {"task": "Set a secret's value:", "command": "k8sec set {{secret_name}} {{key=value}}"}, {"task": "Set a base64-encoded value:", "command": "k8sec set --base64 {{secret_name}} {{key=encoded_value}}"}, {"task": "Unset a secret:", "command": "k8sec unset {{secret_name}}"}, {"task": "Load secrets from a file:", "command": "k8sec load -f {{path/to/file}} {{secret_name}}"}, {"task": "Dump secrets to a file:", "command": "k8sec dump -f {{path/to/file}} {{secret_name}}"}]}
{"command": "kafkacat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr kcat"}]}
{"command": "kaggle", "tasks": [{"task": "View current configuration values:", "command": "kaggle config view"}, {"task": "Download a specific file from a competition dataset:", "command": "kaggle competitions download {{competition}} -f {{filename}}"}]}
{"command": "kahlan", "tasks": [{"task": "Run all specifications in the \"spec\" directory:", "command": "kahlan"}, {"task": "Run specifications using a specific configuration file:", "command": "kahlan --config={{path/to/configuration_file}}"}, {"task": "Run specifications and output using a reporter:", "command": "kahlan --reporter={{dot|bar|json|tap|verbose}}"}, {"task": "Run specifications with code coverage (detail can be between 0 and 4):", "command": "kahlan --coverage={{detail_level}}"}]}
{"command": "kak", "tasks": [{"task": "Open a file and enter normal mode, to execute commands:", "command": "kak {{path/to/file}}"}, {"task": "Enter insert mode from normal mode, to write text into the file:", "command": "i"}, {"task": "Escape insert mode, to go back to normal mode:", "command": "<Escape>"}, {"task": "Replace all instances of \"foo\" in the current file with \"bar\":", "command": "%s{{foo}}<Enter>c{{bar}}<Escape>"}, {"task": "Unselect all secondary selections, and keep only the main one:", "command": "<Space>"}, {"task": "Search for numbers and select the first two:", "command": "/\\d+<Enter>N"}, {"task": "Insert the contents of a file:", "command": "!cat {{path/to/file}}<Enter>"}, {"task": "Save the current file:", "command": ":w<Enter>"}]}
{"command": "kate", "tasks": [{"task": "Open specific files:", "command": "kate {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open specific remote files:", "command": "kate {{https://example.com/path/to/file1 https://example.com/path/to/file2 ...}}"}, {"task": "Create a new editor instance even if one is already open:", "command": "kate --new"}, {"task": "Open a file with the cursor at the specific line:", "command": "kate --line {{line_number}} {{path/to/file}}"}, {"task": "Open a file with the cursor at the specific line and column:", "command": "kate --line {{line_number}} --column {{column_number}} {{path/to/file}}"}, {"task": "Create a file from `stdin`:", "command": "cat {{path/to/file}} | kate --stdin"}, {"task": "Display help:", "command": "kate --help"}]}
{"command": "kcadm.sh", "tasks": [{"task": "Start an authenticated session:", "command": "kcadm.sh config credentials --server {{host}} --realm {{realm_name}} --user {{username}} --password {{password}}"}, {"task": "Create a user:", "command": "kcadm.sh create users -s username={{username}} -r {{realm_name}}"}, {"task": "List all realms:", "command": "kcadm.sh get realms"}, {"task": "Update a realm with JSON config:", "command": "kcadm.sh update realms/{{realm_name}} -f {{path/to/file.json}}"}]}
{"command": "kcat", "tasks": [{"task": "Consume messages starting with the newest offset:", "command": "kcat -C -t {{topic}} -b {{brokers}}"}, {"task": "Consume messages starting with the oldest offset and exit after the last message is received:", "command": "kcat -C -t {{topic}} -b {{brokers}} -o beginning -e"}, {"task": "Consume messages as a Kafka consumer group:", "command": "kcat -G {{group_id}} {{topic}} -b {{brokers}}"}, {"task": "Publish message by reading from `stdin`:", "command": " echo {{message}} | kcat -P -t {{topic}} -b {{brokers}}"}, {"task": "Publish messages by reading from a file:", "command": "kcat -P -t {{topic}} -b {{brokers}} {{path/to/file}}"}, {"task": "List metadata for all topics and brokers:", "command": "kcat -L -b {{brokers}}"}, {"task": "List metadata for a specific topic:", "command": "kcat -L -t {{topic}} -b {{brokers}}"}, {"task": "Get offset for a topic/partition for a specific point in time:", "command": "kcat -Q -t {{topic}}:{{partition}}:{{unix_timestamp}} -b {{brokers}}"}]}
{"command": "kdeconnect-cli", "tasks": [{"task": "List all devices:", "command": "kdeconnect-cli --list-devices"}, {"task": "List available (paired and reachable) devices:", "command": "kdeconnect-cli --list-available"}, {"task": "Request pairing with a specific device, specifying its ID:", "command": "kdeconnect-cli --pair --device {{device_id}}"}, {"task": "Ring a device, specifying its name:", "command": "kdeconnect-cli --ring --name \"{{device_name}}\""}, {"task": "Share an URL or file with a paired device, specifying its ID:", "command": "kdeconnect-cli --share {{url|path/to/file}} --device {{device_id}}"}, {"task": "Send an SMS with an optional attachment to a specific number:", "command": "kdeconnect-cli --name \"{{device_name}}\" --send-sms \"{{message}}\" --destination {{phone_number}} --attachment {{path/to/file}}"}, {"task": "Unlock a specific device:", "command": "kdeconnect-cli --name \"{{device_name}}\" --unlock"}, {"task": "Simulate a key press on a specific device:", "command": "kdeconnect-cli --name \"{{device_name}}\" --send-keys {{key}}"}]}
{"command": "kdenlive", "tasks": [{"task": "Start the video editor:", "command": "kdenlive"}, {"task": "Open a specific file:", "command": "kdenlive {{path/to/file}}.kdenlive"}, {"task": "Set a specific path for an MLT environment:", "command": "kdenlive --mlt-path {{path/to/directory}}"}, {"task": "Set a specific log level for an MLT environment:", "command": "kdenlive --mlt-log {{verbose|debug}}"}, {"task": "Display help:", "command": "kdenlive --help"}, {"task": "Display version:", "command": "kdenlive --version"}]}
{"command": "kdig", "tasks": [{"task": "Lookup the IP(s) associated with a hostname (A records):", "command": "kdig {{example.com}}"}, {"task": "Specify a specific DNS server to query (e.g. Google DNS):", "command": "kdig {{example.com}} @{{8.8.8.8}}"}, {"task": "Query a specific DNS record type associated with a given domain name:", "command": "kdig {{example.com}} {{A|AAAA|NS|SOA|DNSKEY|ANY}}"}, {"task": "Lookup the IP(s) associated with a hostname (A records) using DNS over TLS (DoT):", "command": "kdig -d @{{8.8.8.8}} +tls-ca +tls-host={{dns.google}} {{example.com}}"}, {"task": "Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH):", "command": "kdig -d @{{1.1.1.1}} +https +tls-hostname={{1dot1dot1dot1.cloudflare-dns.com}} {{example.com}}"}]}
{"command": "keep-header", "tasks": [{"task": "Sort a file and keep the first line at the top:", "command": "keep-header {{path/to/file}} -- sort"}, {"task": "Output first line directly to `stdout`, passing the remainder of the file through the specified command:", "command": "keep-header {{path/to/file}} -- {{command}}"}, {"task": "Read from `stdin`, sorting all except the first line:", "command": "cat {{path/to/file}} | keep-header -- {{command}}"}, {"task": "Grep a file, keeping the first line regardless of the search pattern:", "command": "keep-header {{path/to/file}} -- grep {{pattern}}"}]}
{"command": "keepass2", "tasks": [{"task": "Start KeePass 2, opening the most recently opened password database:", "command": "keepass2"}, {"task": "Start KeePass 2, opening a specific password database:", "command": "keepass2 {{path/to/database.kbdx}}"}, {"task": "Use a specific key file to open a password database:", "command": "keepass2 {{path/to/database.kbdx}} -keyfile:{{path/to/key/file.key}}"}]}
{"command": "keepassxc-cli", "tasks": [{"task": "Search entries:", "command": "keepassxc-cli lookup {{path/to/database_file}} {{name}}"}, {"task": "List the contents of a folder:", "command": "keepassxc-cli ls {{path/to/database_file}} {{/path/to/directory}}"}, {"task": "Add an entry with an auto-generated password:", "command": "keepassxc-cli add --generate {{path/to/database_file}} {{entry_name}}"}, {"task": "Delete an entry:", "command": "keepassxc-cli rm {{path/to/database_file}} {{entry_name}}"}, {"task": "Copy an entry's password to the clipboard:", "command": "keepassxc-cli clip {{path/to/database_file}} {{entry_name}}"}, {"task": "Copy a TOTP code to the clipboard:", "command": "keepassxc-cli clip --totp {{path/to/database_file}} {{entry_name}}"}, {"task": "Generate a passphrase with 7 words:", "command": "keepassxc-cli diceware --words {{7}}"}, {"task": "Generate a password with 16 printable ASCII characters:", "command": "keepassxc-cli generate --lower --upper --numeric --special --length {{16}}"}]}
{"command": "keybase", "tasks": [{"task": "Follow another user:", "command": "keybase follow {{username}}"}, {"task": "Add a new proof:", "command": "keybase prove {{service}} {{service_username}}"}, {"task": "Sign a file:", "command": "keybase sign --infile {{input_file}} --outfile {{output_file}}"}, {"task": "Verify a signed file:", "command": "keybase verify --infile {{input_file}} --outfile {{output_file}}"}, {"task": "Encrypt a file:", "command": "keybase encrypt --infile {{input_file}} --outfile {{output_file}} {{receiver}}"}, {"task": "Decrypt a file:", "command": "keybase decrypt --infile {{input_file}} --outfile {{output_file}}"}, {"task": "Revoke current device, log out, and delete local data:", "command": "keybase deprovision"}]}
{"command": "keychain", "tasks": [{"task": "Check for a running ssh-agent, and start one if needed:", "command": "keychain"}, {"task": "Also check for gpg-agent:", "command": "keychain --agents \"{{gpg,ssh}}\""}, {"task": "List signatures of all active keys:", "command": "keychain --list"}, {"task": "List fingerprints of all active keys:", "command": "keychain --list-fp"}, {"task": "Add a timeout for identities added to the agent, in minutes:", "command": "keychain --timeout {{minutes}}"}]}
{"command": "keytool", "tasks": [{"task": "Create a keystore:", "command": "keytool -genkeypair -v -keystore {{path/to/file.keystore}} -alias {{key_name}}"}, {"task": "Change a keystore password:", "command": "keytool -storepasswd -keystore {{path/to/file.keystore}}"}, {"task": "Change a key's password inside a specific keystore:", "command": "keytool -keypasswd -alias {{key_name}} -keystore {{path/to/file.keystore}}"}]}
{"command": "khal", "tasks": [{"task": "Start Khal on interactive mode:", "command": "ikhal"}, {"task": "Print all events scheduled in personal calendar for the next seven days:", "command": "khal list -a {{personal}} {{today}} {{7d}}"}, {"task": "Print all events scheduled not in personal calendar for tomorrow at 10:00:", "command": "khal at -d {{personal}} {{tomorrow}} {{10:00}}"}, {"task": "Print a calendar with a list of events for the next three months:", "command": "khal calendar"}, {"task": "Add new event to personal calendar:", "command": "khal new -a {{personal}} {{2020-09-08}} {{18:00}} {{18:30}} \"{{Dentist appointment}}\""}]}
{"command": "kill", "tasks": [{"task": "Terminate a program using the default SIGTERM (terminate) signal:", "command": "kill {{process_id}}"}, {"task": "List available signal names (to be used without the `SIG` prefix):", "command": "kill -l"}, {"task": "Terminate a background job:", "command": "kill %{{job_id}}"}, {"task": "Terminate a program using the SIGHUP (hang up) signal. Many daemons will reload instead of terminating:", "command": "kill -{{1|HUP}} {{process_id}}"}, {"task": "Terminate a program using the SIGINT (interrupt) signal. This is typically initiated by the user pressing `Ctrl + C`:", "command": "kill -{{2|INT}} {{process_id}}"}, {"task": "Signal the operating system to immediately terminate a program (which gets no chance to capture the signal):", "command": "kill -{{9|KILL}} {{process_id}}"}, {"task": "Signal the operating system to pause a program until a SIGCONT (\"continue\") signal is received:", "command": "kill -{{17|STOP}} {{process_id}}"}, {"task": "Send a `SIGUSR1` signal to all processes with the given GID (group id):", "command": "kill -{{SIGUSR1}} -{{group_id}}"}]}
{"command": "killall", "tasks": [{"task": "Terminate a process using the default SIGTERM (terminate) signal:", "command": "killall {{process_name}}"}, {"task": "[l]ist available signal names (to be used without the 'SIG' prefix):", "command": "killall -l"}, {"task": "Interactively ask for confirmation before termination:", "command": "killall -i {{process_name}}"}, {"task": "Terminate a process using the SIGINT (interrupt) signal, which is the same signal sent by pressing `Ctrl + C`:", "command": "killall -INT {{process_name}}"}, {"task": "Force kill a process:", "command": "killall -KILL {{process_name}}"}]}
{"command": "kind", "tasks": [{"task": "Create a local Kubernetes cluster:", "command": "kind create cluster --name {{cluster_name}}"}, {"task": "Delete one or more clusters:", "command": "kind delete clusters {{cluster_name}}"}, {"task": "Get details about clusters, nodes, or the kubeconfig:", "command": "kind get {{clusters|nodes|kubeconfig}}"}, {"task": "Export the kubeconfig or the logs:", "command": "kind export {{kubeconfig|logs}}"}]}
{"command": "kinit", "tasks": [{"task": "Authenticate a user and obtain a ticket-granting ticket:", "command": "kinit {{username}}"}, {"task": "Renew a ticket-granting ticket:", "command": "kinit -R"}, {"task": "Specify a lifetime for the ticket:", "command": "kinit -l {{5h}}"}, {"task": "Specify a total renewable lifetime for the ticket:", "command": "kinit -r {{1w}}"}, {"task": "Specify a different principal name to authenticate as:", "command": "kinit -p {{principal@REALM}}"}, {"task": "Specify a different keytab file to authenticate with:", "command": "kinit -t {{path/to/keytab}}"}]}
{"command": "kismet", "tasks": [{"task": "Capture packets from a specific wireless interface:", "command": "sudo kismet -c {{wlan0}}"}, {"task": "Monitor multiple channels on a wireless interface:", "command": "sudo kismet -c {{wlan0,wlan1}} -m"}, {"task": "Capture packets and save them to a specific directory:", "command": "sudo kismet -c {{wlan0}} -d {{path/to/output}}"}, {"task": "Start Kismet with a specific configuration file:", "command": "sudo kismet -c {{wlan0}} -f {{path/to/config.conf}}"}, {"task": "Monitor and log data to an SQLite database:", "command": "sudo kismet -c {{wlan0}} --log-to-db"}, {"task": "Monitor using a specific data source:", "command": "sudo kismet -c {{wlan0}} --data-source={{rtl433}}"}, {"task": "Enable alerts for specific events:", "command": "sudo kismet -c {{wlan0}} --enable-alert={{new_ap}}"}, {"task": "Display detailed information about a specific AP's packets:", "command": "sudo kismet -c {{wlan0}} --info {{BSSID}}"}]}
{"command": "kitex", "tasks": [{"task": "Generate client codes when a project is in `$GOPATH`:", "command": "kitex {{path/to/IDL_file.thrift}}"}, {"task": "Generate client codes when a project is not in `$GOPATH`:", "command": " kitex -module {{github.com/xx-org/xx-name}} {{path/to/IDL_file.thrift}}"}, {"task": "Generate client codes with protobuf IDL:", "command": "kitex -type protobuf {{path/to/IDL_file.proto}}"}, {"task": "Generate server codes:", "command": "kitex -service {{svc_name}} {{path/to/IDL_file.thrift}}"}]}
{"command": "kitty", "tasks": [{"task": "Open a new terminal:", "command": "kitty"}, {"task": "Open a terminal with the specified title for the window:", "command": "kitty --title \"{{title}}\""}, {"task": "Start the theme-chooser builtin:", "command": "kitty +kitten themes"}, {"task": "Display an image in the terminal:", "command": "kitty +kitten icat {{path/to/image}}"}, {"task": "Copy the contents of `stdin` to the clipboard:", "command": "echo {{example}} | kitty +kitten clipboard"}]}
{"command": "kiwi-ng", "tasks": [{"task": "Build an appliance:", "command": "kiwi-ng system build --description={{path/to/directory}} --target-dir={{path/to/directory}}"}, {"task": "Show build result of built appliance:", "command": "kiwi-ng result list --target-dir={{path/to/directory}}"}, {"task": "Display help:", "command": "kiwi-ng help"}, {"task": "Display version:", "command": "kiwi-ng -v"}]}
{"command": "knife", "tasks": [{"task": "Bootstrap a new node:", "command": "knife bootstrap {{fqdn_or_ip}}"}, {"task": "List all registered nodes:", "command": "knife node list"}, {"task": "Show a node:", "command": "knife node show {{node_name}}"}, {"task": "Edit a node:", "command": "knife node edit {{node_name}}"}, {"task": "Edit a role:", "command": "knife role edit {{role_name}}"}, {"task": "View a data bag:", "command": "knife data bag show {{data_bag_name}} {{data_bag_item}}"}, {"task": "Upload a local cookbook to the Chef server:", "command": "knife cookbook upload {{cookbook_name}}"}]}
{"command": "kompose", "tasks": [{"task": "Deploy a dockerized application to Kubernetes:", "command": "kompose up -f {{docker-compose.yml}}"}, {"task": "Delete instantiated services/deployments from Kubernetes:", "command": "kompose down -f {{docker-compose.yml}}"}, {"task": "Convert a docker-compose file into Kubernetes resources file:", "command": "kompose convert -f {{docker-compose.yml}}"}]}
{"command": "kool", "tasks": [{"task": "Create a project using a specific preset:", "command": "kool create {{preset}} {{project_name}}"}, {"task": "Run a specific script defined in the `kool.yml` file in the current directory:", "command": "kool run {{script}}"}, {"task": "Start/stop services in the current directory:", "command": "kool {{start|stop}}"}, {"task": "Display status of the services in the current directory:", "command": "kool status"}, {"task": "Update to the latest version:", "command": "kool self-update"}, {"task": "Print the completion script for the specified shell:", "command": "kool completion {{bash|fish|powershell|zsh}}"}]}
{"command": "kops", "tasks": [{"task": "Create a cluster from the configuration specification:", "command": "kops create cluster -f {{cluster_name.yaml}}"}, {"task": "Create a new ssh public key:", "command": "kops create secret sshpublickey {{key_name}} -i {{~/.ssh/id_rsa.pub}}"}, {"task": "Export the cluster configuration to the `~/.kube/config` file:", "command": "kops export kubecfg {{cluster_name}}"}, {"task": "Get the cluster configuration as YAML:", "command": "kops get cluster {{cluster_name}} -o yaml"}, {"task": "Delete a cluster:", "command": "kops delete cluster {{cluster_name}} --yes"}]}
{"command": "kosmorro", "tasks": [{"task": "Get ephemerides for Paris, France:", "command": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}}"}, {"task": "Get ephemerides for Paris, France, in the UTC+2 timezone:", "command": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --timezone={{2}}"}, {"task": "Get ephemerides for Paris, France, on June 9th, 2020:", "command": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --date={{2020-06-09}}"}, {"task": "Generate a PDF (note: TeXLive must be installed):", "command": "kosmorro --format={{pdf}} --output={{path/to/file.pdf}}"}]}
{"command": "kotlin", "tasks": [{"task": "Run a jar file:", "command": "kotlin {{filename.jar}}"}, {"task": "Display Kotlin and JVM version:", "command": "kotlin -version"}]}
{"command": "kotlinc", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "kotlinc"}, {"task": "Compile a Kotlin file:", "command": "kotlinc {{path/to/file.kt}}"}, {"task": "Compile several Kotlin files:", "command": "kotlinc {{path/to/file1.kt path/to/file2.kt ...}}"}, {"task": "Execute a specific Kotlin Script file:", "command": "kotlinc -script {{path/to/file.kts}}"}, {"task": "Compile a Kotlin file into a self contained jar file with the Kotlin runtime library included:", "command": "kotlinc {{path/to/file.kt}} -include-runtime -d {{path/to/file.jar}}"}]}
{"command": "krunvm", "tasks": [{"task": "Create MicroVM based on Fedora:", "command": "krunvm create {{docker.io/fedora}} --cpus {{number_of_vcpus}} --mem {{memory_in_megabytes}} --name \"{{name}}\""}, {"task": "Start a specific image:", "command": "krunvm start \"{{image_name}}\""}, {"task": "List images:", "command": "krunvm list"}, {"task": "Change a specific image:", "command": "krunvm changevm --cpus {{number_of_vcpus}} --mem {{memory_in_megabytes}} --name \"{{new_vm_name}}\" \"{{current_vm_name}}\""}, {"task": "Delete a specific image:", "command": "krunvm delete \"{{image_name}}\""}]}
{"command": "ksh", "tasks": [{"task": "Start an interactive shell session:", "command": "ksh"}, {"task": "Execute specific [c]ommands:", "command": "ksh -c \"{{echo 'ksh is executed'}}\""}, {"task": "Execute a specific script:", "command": "ksh {{path/to/script.ksh}}"}, {"task": "Check a specific script for syntax errors without executing it:", "command": "ksh -n {{path/to/script.ksh}}"}, {"task": "Execute a specific script, printing each command in the script before executing it:", "command": "ksh -x {{path/to/script.ksh}}"}]}
{"command": "kube-capacity", "tasks": [{"task": "Output a list of nodes with the total CPU and Memory resource requests and limits:", "command": "kube-capacity"}, {"task": "Include pods:", "command": "kube-capacity -p"}, {"task": "Include utilization:", "command": "kube-capacity -u"}]}
{"command": "kube-fzf", "tasks": [{"task": "Get pod details (from current namespace):", "command": "findpod"}, {"task": "Get pod details (from all namespaces):", "command": "findpod -a"}, {"task": "Describe a pod:", "command": "describepod"}, {"task": "Tail pod logs:", "command": "tailpod"}, {"task": "Exec into a pod's container:", "command": "execpod {{shell_command}}"}, {"task": "Port-forward a pod:", "command": "pfpod {{port_number}}"}]}
{"command": "kubeadm", "tasks": [{"task": "Create a Kubernetes master node:", "command": "kubeadm init"}, {"task": "Bootstrap a Kubernetes worker node and join it to a cluster:", "command": "kubeadm join --token {{token}}"}, {"task": "Create a new bootstrap token with a TTL of 12 hours:", "command": "kubeadm token create --ttl {{12h0m0s}}"}, {"task": "Check if the Kubernetes cluster is upgradeable and which versions are available:", "command": "kubeadm upgrade plan"}, {"task": "Upgrade Kubernetes cluster to a specified version:", "command": "kubeadm upgrade apply {{version}}"}, {"task": "View the kubeadm ConfigMap containing the cluster's configuration:", "command": "kubeadm config view"}, {"task": "Revert changes made to the host by 'kubeadm init' or 'kubeadm join':", "command": "kubeadm reset"}]}
{"command": "kubectl delete", "tasks": [{"task": "Delete a specific pod:", "command": "kubectl delete pod {{pod_name}}"}, {"task": "Delete a specific deployment:", "command": "kubectl delete deployment {{deployment_name}}"}, {"task": "Delete a specific node:", "command": "kubectl delete node {{node_name}}"}, {"task": "Delete all pods in a specified namespace:", "command": "kubectl delete pods --all --namespace {{namespace}}"}, {"task": "Delete all deployments and services in a specified namespace:", "command": "kubectl delete deployments,services --all --namespace {{namespace}}"}, {"task": "Delete all nodes:", "command": "kubectl delete nodes --all"}, {"task": "Delete resources defined in a YAML manifest:", "command": "kubectl delete --filename {{path/to/manifest.yaml}}"}]}
{"command": "kubectl describe", "tasks": [{"task": "Show details of pods in a namespace:", "command": "kubectl describe pods -n {{namespace}}"}, {"task": "Show details of nodes in a namespace:", "command": "kubectl describe nodes -n {{namespace}}"}, {"task": "Show the details of a specific pod in a namespace:", "command": "kubectl describe pods {{pod_name}} -n {{namespace}}"}, {"task": "Show the details of a specific node in a namespace:", "command": "kubectl describe nodes {{node_name}} -n {{namespace}}"}, {"task": "Show details of Kubernetes objects defined in a YAML manifest:", "command": "kubectl describe -f {{path/to/manifest.yaml}}"}]}
{"command": "kubectl edit", "tasks": [{"task": "Edit a pod:", "command": "kubectl edit pod/{{pod_name}}"}, {"task": "Edit a deployment:", "command": "kubectl edit deployment/{{deployment_name}}"}, {"task": "Edit a service:", "command": "kubectl edit svc/{{service_name}}"}, {"task": "Edit a resource using a specific editor:", "command": "KUBE_EDITOR={{nano}} kubectl edit {{resource}}/{{resource_name}}"}, {"task": "Edit a resource in JSON format:", "command": "kubectl edit {{resource}}/{{resource_name}} --output json"}]}
{"command": "kubectl get", "tasks": [{"task": "Get all namespaces in the current cluster:", "command": "kubectl get namespaces"}, {"task": "Get nodes in a specified namespace:", "command": "kubectl get nodes -n {{namespace}}"}, {"task": "Get pods in a specified namespace:", "command": "kubectl get pods -n {{namespace}}"}, {"task": "Get deployments in a specified namespace:", "command": "kubectl get deployments -n {{namespace}}"}, {"task": "Get services in a specified namespace:", "command": "kubectl get services -n {{namespace}}"}, {"task": "Get all resources in a specified namespace:", "command": "kubectl get all -n {{namespace}}"}, {"task": "Get Kubernetes objects defined in a YAML manifest:", "command": "kubectl get -f {{path/to/manifest.yaml}}"}]}
{"command": "kubectl logs", "tasks": [{"task": "Show logs for a single-container pod:", "command": "kubectl logs {{pod_name}}"}, {"task": "Show logs for a specified container in a pod:", "command": "kubectl logs --container {{container_name}} {{pod_name}}"}, {"task": "Show logs for all containers in a pod:", "command": "kubectl logs --all-containers={{true}} {{pod_name}}"}, {"task": "Stream pod logs:", "command": "kubectl logs --follow {{pod_name}}"}, {"task": "Stream logs for a specified container in a pod:", "command": "kubectl logs --follow --container {{container_name}} {{pod_name}}"}, {"task": "Show pod logs newer than a relative time like `10s`, `5m`, or `1h`:", "command": "kubectl logs --since={{relative_time}} {{pod_name}}"}, {"task": "Show the 10 most recent logs in a pod:", "command": "kubectl logs --tail={{10}} {{pod_name}}"}]}
{"command": "kubectl rollout", "tasks": [{"task": "Start a rolling restart of a resource:", "command": "kubectl rollout restart {{resource_type}}/{{resource_name}}"}, {"task": "Watch the rolling update status of a resource:", "command": "kubectl rollout status {{resource_type}}/{{resource_name}}"}, {"task": "Roll back a resource to the previous revision:", "command": "kubectl rollout undo {{resource_type}}/{{resource_name}}"}, {"task": "View the rollout history of a resource:", "command": "kubectl rollout history {{resource_type}}/{{resource_name}}"}]}
{"command": "kubectl run", "tasks": [{"task": "Run an nginx pod and expose port 80:", "command": "kubectl run --generator=run-pod/v1 nginx --image=nginx --port 80"}, {"task": "Run an nginx pod, setting the TEST_VAR environment variable:", "command": "kubectl run --generator=run-pod/v1 nginx --image=nginx --env=\"TEST_VAR=testing\""}, {"task": "Show API calls that would be made to create an nginx container:", "command": "kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run"}, {"task": "Run an Ubuntu pod interactively, never restart it, and remove it when it exits:", "command": "kubectl run --generator=run-pod/v1 -it temp-ubuntu --image=ubuntu:20.04 --restart=Never --rm -- /bin/bash"}, {"task": "Run an Ubuntu pod, overriding the default command with echo, and specifying custom arguments:", "command": "kubectl run --generator=run-pod/v1 temp-ubuntu --image=ubuntu:20.04 --command -- echo arg1 arg2 arg3"}]}
{"command": "kubectl", "tasks": [{"task": "List information about a resource with more details:", "command": "kubectl get {{pod|service|deployment|ingress|...}} -o wide"}, {"task": "Update specified pod with the label 'unhealthy' and the value 'true':", "command": "kubectl label pods {{name}} unhealthy=true"}, {"task": "List all resources with different types:", "command": "kubectl get all"}, {"task": "Display resource (CPU/Memory/Storage) usage of nodes or pods:", "command": "kubectl top {{pod|node}}"}, {"task": "Print the address of the master and cluster services:", "command": "kubectl cluster-info"}, {"task": "Display an explanation of a specific field:", "command": "kubectl explain {{pods.spec.containers}}"}, {"task": "Print the logs for a container in a pod or specified resource:", "command": "kubectl logs {{pod_name}}"}, {"task": "Run command in an existing pod:", "command": "kubectl exec {{pod_name}} -- {{ls /}}"}]}
{"command": "kubectx", "tasks": [{"task": "List the contexts:", "command": "kubectx"}, {"task": "Switch to a named context:", "command": "kubectx {{name}}"}, {"task": "Switch to the previous context:", "command": "kubectx -"}, {"task": "Delete a named context:", "command": "kubectx -d {{name}}"}]}
{"command": "kubens", "tasks": [{"task": "List the namespaces:", "command": "kubens"}, {"task": "Change the active namespace:", "command": "kubens {{name}}"}, {"task": "Switch to the previous namespace:", "command": "kubens -"}]}
{"command": "kubetail", "tasks": [{"task": "Tail the logs of multiple pods (whose name starts with \"my_app\") in one go:", "command": "kubetail {{my_app}}"}, {"task": "Tail only a specific container from multiple pods:", "command": "kubetail {{my_app}} -c {{my_container}}"}, {"task": "To tail multiple containers from multiple pods:", "command": "kubetail {{my_app}} -c {{my_container_1}} -c {{my_container_2}}"}, {"task": "To tail multiple applications at the same time separate them by comma:", "command": "kubetail {{my_app_1}},{{my_app_2}}"}]}
{"command": "kustomize", "tasks": [{"task": "Create kustomization file with resources and namespace:", "command": "kustomize create --resources {{deployment.yaml,service.yaml}} --namespace {{staging}}"}, {"task": "Build kustomization file and deploy it with `kubectl`:", "command": "kustomize build . | kubectl apply -f -"}, {"task": "Set an image in the kustomization file:", "command": "kustomize edit set image {{busybox=alpine:3.6}}"}, {"task": "Search for Kubernetes resources in the current directory to be added to the kustomization file:", "command": "kustomize create --autodetect"}]}
{"command": "lambo new", "tasks": [{"task": "Create a new Laravel application:", "command": "lambo new {{app_name}}"}, {"task": "Install the application in a specific path:", "command": "lambo new --path={{path/to/directory}} {{app_name}}"}, {"task": "Include authentication scaffolding:", "command": "lambo new --auth {{app_name}}"}, {"task": "Include a specific frontend:", "command": "lambo new --{{vue|bootstrap|react}} {{app_name}}"}, {"task": "Install npm dependencies after the project has been created:", "command": "lambo new --node {{app_name}}"}, {"task": "Create a Valet site after the project has been created:", "command": "lambo new --link {{app_name}}"}, {"task": "Create a new MySQL database with the same name as the project:", "command": "lambo new --create-db --dbuser={{user}} --dbpassword={{password}} {{app_name}}"}, {"task": "Open a specific editor after the project has been created:", "command": "lambo new --editor=\"{{editor}}\" {{app_name}}"}]}
{"command": "lambo", "tasks": [{"task": "Create a new Laravel application:", "command": "lambo new {{app_name}}"}, {"task": "Open the configuration in your default editor:", "command": "lambo edit-config"}, {"task": "Open the configuration in a specific editor:", "command": "lambo edit-config --editor=\"{{path/to/editor}}\""}, {"task": "Open the configuration file that is run after new applications have been scaffolded:", "command": "lambo edit-after"}]}
{"command": "lando", "tasks": [{"task": "Initialize code for use with `lando`:", "command": "lando init"}, {"task": "Print information about your app:", "command": "lando info"}, {"task": "Start your app:", "command": "lando start"}, {"task": "Stop your app:", "command": "lando stop"}, {"task": "Restart your app:", "command": "lando restart"}, {"task": "Rebuild your app from scratch, preserving data:", "command": "lando rebuild"}, {"task": "Display logs for your app:", "command": "lando logs"}, {"task": "Destroy your app:", "command": "lando destroy"}]}
{"command": "laravel-zero", "tasks": [{"task": "Create a new Laravel Zero application:", "command": "laravel-zero new {{name}}"}, {"task": "Update the installer to the latest version:", "command": "laravel-zero self-update"}, {"task": "List the available installer commands:", "command": "laravel-zero list"}]}
{"command": "laravel", "tasks": [{"task": "Create a new Laravel application:", "command": "laravel new {{name}}"}, {"task": "Use the latest development release:", "command": "laravel new {{name}} --dev"}, {"task": "Overwrite if the directory already exists:", "command": "laravel new {{name}} --force"}, {"task": "Install the Laravel Jetstream scaffolding:", "command": "laravel new {{name}} --jet"}, {"task": "Install the Laravel Jetstream scaffolding with a specific stack:", "command": "laravel new {{name}} --jet --stack {{livewire|inertia}}"}, {"task": "Install the Laravel Jetstream scaffolding with support for teams:", "command": "laravel new {{name}} --jet --teams"}, {"task": "List the available installer commands:", "command": "laravel list"}]}
{"command": "last", "tasks": [{"task": "View last logins, their duration and other information as read from `/var/log/wtmp`:", "command": "last"}, {"task": "Specify how many of the last logins to show:", "command": "last -n {{login_count}}"}, {"task": "Print the full date and time for entries and then display the hostname column last to prevent truncation:", "command": "last -F -a"}, {"task": "View all logins by a specific user and show the IP address instead of the hostname:", "command": "last {{username}} -i"}, {"task": "View all recorded reboots (i.e., the last logins of the pseudo user \"reboot\"):", "command": "last reboot"}, {"task": "View all recorded shutdowns (i.e., the last logins of the pseudo user \"shutdown\"):", "command": "last shutdown"}]}
{"command": "latex", "tasks": [{"task": "Compile a DVI document:", "command": "latex {{source.tex}}"}, {"task": "Compile a DVI document, specifying an output directory:", "command": "latex -output-directory={{path/to/directory}} {{source.tex}}"}, {"task": "Compile a DVI document, exiting on each error:", "command": "latex -halt-on-error {{source.tex}}"}]}
{"command": "latexdiff", "tasks": [{"task": "Determine changes between different versions of a LaTeX file (the resulting LaTeX file can be compiled to show differences underlined):", "command": "latexdiff {{old.tex}} {{new.tex}} > {{diff.tex}}"}, {"task": "Determine changes between different versions of a LaTeX file by highlighting differences in boldface:", "command": "latexdiff --type=BOLD {{old.tex}} {{new.tex}} > {{diff.tex}}"}, {"task": "Determine changes between different versions of a LaTeX file, and display minor changes in equations with both added and deleted graphics:", "command": "latexdiff --math-markup=fine --graphics-markup=both {{old.tex}} {{new.tex}} > {{diff.tex}}"}]}
{"command": "latexmk", "tasks": [{"task": "Compile a DVI (Device Independent file) document from every source:", "command": "latexmk"}, {"task": "Compile a DVI document from a specific source file:", "command": "latexmk {{source.tex}}"}, {"task": "Compile a PDF document:", "command": "latexmk -pdf {{source.tex}}"}, {"task": "Force the generation of a document even if there are errors:", "command": "latexmk -f {{source.tex}}"}, {"task": "Clean up temporary TEX files created for a specific TEX file:", "command": "latexmk -c {{source.tex}}"}, {"task": "Clean up all temporary TEX files in the current directory:", "command": "latexmk -c"}]}
{"command": "laydown", "tasks": [{"task": "Add an item to DID section:", "command": "laydown did {{item}}"}, {"task": "Add an item to DOING section:", "command": "laydown doing {{item}}"}, {"task": "Clear all items:", "command": "laydown clear"}, {"task": "Use an editor to edit current data:", "command": "laydown edit"}, {"task": "Archive and clear current data:", "command": "laydown archive"}]}
{"command": "lb", "tasks": [{"task": "Make a new draft:", "command": "lb new"}, {"task": "Edit a draft:", "command": "lb edit"}, {"task": "Delete a draft:", "command": "lb trash"}, {"task": "Publish a draft:", "command": "lb publish"}, {"task": "Delete a published post:", "command": "lb delete"}, {"task": "Unpublish a published post to edit it as a draft again:", "command": "lb revise"}]}
{"command": "ld", "tasks": [{"task": "Link a specific object file with no dependencies into an executable:", "command": "ld {{path/to/file.o}} --output {{path/to/output_executable}}"}, {"task": "Link two object files together:", "command": "ld {{path/to/file1.o}} {{path/to/file2.o}} --output {{path/to/output_executable}}"}, {"task": "Dynamically link an x86_64 program to glibc (file paths change depending on the system):", "command": "ld --output {{path/to/output_executable}} --dynamic-linker /lib/ld-linux-x86-64.so.2 /lib/crt1.o /lib/crti.o -lc {{path/to/file.o}} /lib/crtn.o"}]}
{"command": "ldapsearch", "tasks": [{"task": "Query an LDAP server for all items that are a member of the given group and return the object's displayName value:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName"}, {"task": "Query an LDAP server with a no-newline password file for all items that are a member of the given group and return the object's displayName value:", "command": "ldapsearch -D '{{admin_DN}}' -y '{{password_file}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName"}, {"task": "Return 5 items that match the given filter:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -z 5 displayName"}, {"task": "Wait up to 7 seconds for a response:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -l 7 displayName"}, {"task": "Invert the filter:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '(!(memberOf={{group1}}))' displayName"}, {"task": "Return all items that are part of multiple groups, returning the display name for each item:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})({{memberOf=group3}}))' \"displayName\""}, {"task": "Return all items that are members of at least 1 of the specified groups:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(|({{memberOf=group1}})({{memberOf=group1}})({{memberOf=group3}}))' displayName"}, {"task": "Combine multiple boolean logic filters:", "command": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})(!({{memberOf=group3}})))' displayName"}]}
{"command": "leave", "tasks": [{"task": "Set a reminder at a given time:", "command": "leave {{time_to_leave}}"}, {"task": "Set a reminder to leave at noon:", "command": "leave {{1200}}"}, {"task": "Set a reminder in a specific amount of time:", "command": "leave +{{amount_of_time}}"}, {"task": "Set a reminder to leave in 4 hours and 4 minutes:", "command": "leave +{{0404}}"}]}
{"command": "lebab", "tasks": [{"task": "Display a list of the available transformations:", "command": "lebab --help"}, {"task": "Transpile using one or more comma-separated transformations:", "command": "lebab --transform {{transformation}}"}, {"task": "Transpile a file to `stdout`:", "command": "lebab {{path/to/input_file}}"}, {"task": "Transpile a file to the specified output file:", "command": "lebab {{path/to/input_file}} --out-file {{path/to/output_file}}"}, {"task": "Replace all `.js` files in-place in the specified directory, glob or file:", "command": "lebab --replace {{directory|glob|file}}"}]}
{"command": "ledger", "tasks": [{"task": "Print a balance report showing totals:", "command": "ledger balance --file {{path/to/ledger.journal}}"}, {"task": "List all postings in Expenses ordered by amount:", "command": "ledger register {{expenses}} --sorted {{amount}}"}, {"task": "Print total Expenses other than Drinks and Food:", "command": "ledger balance {{Expenses}} and not ({{Drinks}} or {{Food}})"}, {"task": "Print a budget report:", "command": "ledger budget"}, {"task": "Print summary information about all the postings:", "command": "ledger stats"}]}
{"command": "lein", "tasks": [{"task": "Generate scaffolding for a new project based on a template:", "command": "lein new {{template_name}} {{project_name}}"}, {"task": "Start a REPL session either with the project or standalone:", "command": "lein repl"}, {"task": "Run the project's `-main` function with optional args:", "command": "lein run {{args}}"}, {"task": "Run the project's tests:", "command": "lein test"}, {"task": "Package up the project files and all its dependencies into a jar file:", "command": "lein uberjar"}]}
{"command": "lerna", "tasks": [{"task": "Initialize project files (`lerna.json`, `package.json`, `.git`, etc.):", "command": "lerna init"}, {"task": "Install all external dependencies of each package and symlink together local dependencies:", "command": "lerna bootstrap"}, {"task": "Run a specific script for every package that contains it in its `package.json`:", "command": "lerna run {{script}}"}, {"task": "Execute an arbitrary shell command in every package:", "command": "lerna exec -- {{ls}}"}, {"task": "Publish all packages that have changed since the last release:", "command": "lerna publish"}]}
{"command": "less", "tasks": [{"task": "Open a file:", "command": "less {{source_file}}"}, {"task": "Page down/up:", "command": "<Space> (down), b (up)"}, {"task": "Go to end/start of file:", "command": "G (end), g (start)"}, {"task": "Forward search for a string (press `n`/`N` to go to next/previous match):", "command": "/{{something}}"}, {"task": "Backward search for a string (press `n`/`N` to go to next/previous match):", "command": "?{{something}}"}, {"task": "Follow the output of the currently opened file:", "command": "F"}, {"task": "Open the current file in an editor:", "command": "v"}, {"task": "Exit:", "command": "q"}]}
{"command": "lex", "tasks": [{"task": "Generate an analyzer from a Lex file:", "command": "lex {{analyzer.l}}"}, {"task": "Specify the output file:", "command": "lex -t {{analyzer.l}} > {{analyzer.c}}"}, {"task": "Compile a C file generated by Lex:", "command": "c99 {{path/to/lex.yy.c}} -o {{executable}}"}]}
{"command": "license", "tasks": [{"task": "Print a license to `stdout`, using the defaults (auto-detected author name, and current year):", "command": "license {{license_name}}"}, {"task": "Generate a license and save it to a file:", "command": "license -o {{path/to/file}} {{license_name}}"}, {"task": "List all available licenses:", "command": "license ls"}, {"task": "Generate a license with custom author name and year:", "command": "license --name {{author}} --year {{release_year}} {{license_name}}"}]}
{"command": "licensor", "tasks": [{"task": "Write the MIT license to a file named `LICENSE`:", "command": "licensor {{MIT}} > {{LICENSE}}"}, {"task": "Write the MIT license with a [p]laceholder copyright notice to a file named `LICENSE`:", "command": "licensor -p {{MIT}} > {{LICENSE}}"}, {"task": "Specify a copyright holder named Bobby Tables:", "command": "licensor {{MIT}} {{\"Bobby Tables\"}} > {{LICENSE}}"}, {"task": "Specify licence exceptions with a WITH expression:", "command": "licensor \"{{Apache-2.0 WITH LLVM-exception}}\" > {{LICENSE}}"}, {"task": "List all available licenses:", "command": "licensor --licenses"}, {"task": "List all available exceptions:", "command": "licensor --exceptions"}]}
{"command": "light-arionum-cli", "tasks": [{"task": "Generate a new public/private key pair:", "command": "light-arionum-cli"}, {"task": "Display the balance of the current address:", "command": "light-arionum-cli balance"}, {"task": "Display the balance of the specified address:", "command": "light-arionum-cli balance {{address}}"}, {"task": "Send a transaction with an optional message:", "command": "light-arionum-cli send {{address}} {{value}} {{optional_message}}"}, {"task": "Export the current wallet information:", "command": "light-arionum-cli export"}, {"task": "Display information about the current block:", "command": "light-arionum-cli block"}, {"task": "Display information about the current address' transactions:", "command": "light-arionum-cli transactions"}, {"task": "Display information about a specific transaction:", "command": "light-arionum-cli transaction {{transaction_id}}"}]}
{"command": "lighthouse", "tasks": [{"task": "Generate an HTML report for a specific website and save it to a file in the current directory:", "command": "lighthouse {{https://example.com}}"}, {"task": "Generate a JSON report and print it:", "command": "lighthouse --output {{json}} {{https://example.com}}"}, {"task": "Generate a JSON report and save it to a specific file:", "command": "lighthouse --output {{json}} --output-path {{path/to/file.json}} {{https://example.com}}"}, {"task": "Generate a report using the browser in headless mode without logging to `stdout`:", "command": "lighthouse --quiet --chrome-flags=\"{{--headless}}\" {{https://example.com}}"}, {"task": "Generate a report, using the HTTP header key/value pairs in the specified JSON file for all requests:", "command": "lighthouse --extra-headers={{path/to/file.json}} {{https://example.com}}"}, {"task": "Generate a report for specific categories only:", "command": "lighthouse --only-categories={{performance,accessibility,best-practices,seo,pwa}} {{https://example.com}}"}, {"task": "Generate a report with device emulation and all throttling disabled:", "command": "lighthouse --screenEmulation.disabled --throttling-method={{provided}} --no-emulatedUserAgent {{https://example.com}}"}, {"task": "Display help:", "command": "lighthouse --help"}]}
{"command": "lilypond", "tasks": [{"task": "Compile a lilypond file into a PDF:", "command": "lilypond {{path/to/file}}"}, {"task": "Compile into the specified format:", "command": "lilypond --formats={{format_dump}} {{path/to/file}}"}, {"task": "Compile the specified file, suppressing progress updates:", "command": "lilypond -s {{path/to/file}}"}, {"task": "Compile the specified file, and also specify the output filename:", "command": "lilypond --output={{path/to/output_file}} {{path/to/input_file}}"}, {"task": "Show the current version of lilypond:", "command": "lilypond --version"}]}
{"command": "link", "tasks": [{"task": "Create a hard link from a new file to an existing file:", "command": "link {{path/to/existing_file}} {{path/to/new_file}}"}]}
{"command": "linkchecker", "tasks": [{"task": "Find broken links on https://example.com/:", "command": "linkchecker {{https://example.com/}}"}, {"task": "Also check URLs that point to external domains:", "command": "linkchecker --check-extern {{https://example.com/}}"}, {"task": "Ignore URLs that match a specific regular expression:", "command": "linkchecker --ignore-url {{regular_expression}} {{https://example.com/}}"}, {"task": "Output results to a CSV file:", "command": "linkchecker --file-output {{csv}}/{{path/to/file}} {{https://example.com/}}"}]}
{"command": "live-server", "tasks": [{"task": "Serve an `index.html` file and reload on changes:", "command": "live-server"}, {"task": "Specify a port (default is 8080) from which to serve a file:", "command": "live-server --port={{8081}}"}, {"task": "Specify a given file to serve:", "command": "live-server --open={{about.html}}"}, {"task": "Proxy all requests for ROUTE to URL:", "command": "live-server --proxy={{/}}:{{http:localhost:3000}}"}]}
{"command": "llc", "tasks": [{"task": "Compile a bitcode or IR file to an assembly file with the same base name:", "command": "llc {{path/to/file.ll}}"}, {"task": "Enable all optimizations:", "command": "llc -O3 {{path/to/input.ll}}"}, {"task": "Output assembly to a specific file:", "command": "llc --output {{path/to/output.s}}"}, {"task": "Emit fully relocatable, position independent code:", "command": "llc -relocation-model=pic {{path/to/input.ll}}"}]}
{"command": "lldb", "tasks": [{"task": "Debug an executable:", "command": "lldb {{executable}}"}, {"task": "Attach `lldb` to a running process with a given PID:", "command": "lldb -p {{pid}}"}, {"task": "Wait for a new process to launch with a given name, and attach to it:", "command": "lldb -w -n {{process_name}}"}]}
{"command": "lli", "tasks": [{"task": "Execute a bitcode or IR file:", "command": "lli {{path/to/file.ll}}"}, {"task": "Execute with command-line arguments:", "command": "lli {{path/to/file.ll}} {{argument1 argument2 ...}}"}, {"task": "Enable all optimizations:", "command": "lli -O3 {{path/to/file.ll}}"}, {"task": "Load a dynamic library before linking:", "command": "lli --dlopen={{path/to/library.dll}} {{path/to/file.ll}}"}]}
{"command": "llvd", "tasks": [{"task": "Download a [c]ourse using cookie-based authentication:", "command": "llvd -c {{course-slug}} --cookies"}, {"task": "Download a course at a specific [r]esolution:", "command": "llvd -c {{course-slug}} -r 720"}, {"task": "Download a course with [ca]ptions (subtitles):", "command": "llvd -c {{course-slug}} --caption"}, {"task": "Download a course [p]ath with [t]hrottling between 10 to 30 seconds:", "command": "llvd -p {{path-slug}} -t {{10,30}} --cookies"}]}
{"command": "llvm-ar", "tasks": [{"task": "View documentation for the original command:", "command": "tldr ar"}]}
{"command": "llvm-as", "tasks": [{"task": "Assemble an IR file:", "command": "llvm-as -o {{path/to/out.bc}} {{path/to/source.ll}}"}, {"task": "Assemble an IR file and include a module hash in the produced Bitcode file:", "command": "llvm-as --module-hash -o {{path/to/out.bc}} {{path/to/source.ll}}"}, {"task": "Read an IR file from `stdin` and assemble it:", "command": "cat {{path/to/source.ll}} | llvm-as -o {{path/to/out.bc}}"}]}
{"command": "llvm-bcanalyzer", "tasks": [{"task": "Print statistics about a Bitcode file:", "command": "llvm-bcanalyzer {{path/to/file.bc}}"}, {"task": "Print an SGML representation and statistics about a Bitcode file:", "command": "llvm-bcanalyzer -dump {{path/to/file.bc}}"}, {"task": "Read a Bitcode file from `stdin` and analyze it:", "command": "cat {{path/to/file.bc}} | llvm-bcanalyzer"}]}
{"command": "llvm-cat", "tasks": [{"task": "Concatenate Bitcode files:", "command": "llvm-cat {{path/to/file1.bc}} {{path/to/file2.bc}} -o {{path/to/out.bc}}"}]}
{"command": "llvm-config", "tasks": [{"task": "Compile and link an LLVM based program:", "command": "clang++ $(llvm-config --cxxflags --ldflags --libs) --output {{path/to/output_executable}} {{path/to/source.cc}}"}, {"task": "Print the `PREFIX` of your LLVM installation:", "command": "llvm-config --prefix"}, {"task": "Print all targets supported by your LLVM build:", "command": "llvm-config --targets-built"}]}
{"command": "llvm-dis", "tasks": [{"task": "Convert a bitcode file as LLVM IR and write the result to `stdout`:", "command": "llvm-dis {{path/to/input.bc}} -o -"}, {"task": "Convert a bitcode file to an LLVM IR file with the same filename:", "command": "llvm-dis {{path/to/file.bc}}"}, {"task": "Convert a bitcode file to LLVM IR, writing the result to the specified file:", "command": "llvm-dis {{path/to/input.bc}} -o {{path/to/output.ll}}"}]}
{"command": "llvm-g++", "tasks": [{"task": "View documentation for the original command:", "command": "tldr clang++"}]}
{"command": "llvm-gcc", "tasks": [{"task": "View documentation for the original command:", "command": "tldr clang"}]}
{"command": "llvm-nm", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nm"}]}
{"command": "llvm-objdump", "tasks": [{"task": "View documentation for the original command:", "command": "tldr objdump"}]}
{"command": "llvm-strings", "tasks": [{"task": "View documentation for the original command:", "command": "tldr strings"}]}
{"command": "lmms", "tasks": [{"task": "Start the GUI:", "command": "lmms"}, {"task": "Start the GUI and load external config:", "command": "lmms --config {{path/to/config.xml}}"}, {"task": "Start the GUI and import MIDI or Hydrogen file:", "command": "lmms --import {{path/to/midi/or/hydrogen/file}}"}, {"task": "Start the GUI with a specified window size:", "command": "lmms --geometry {{x_size}}x{{y_size}}+{{x_offset}}+{{y_offset}}"}, {"task": "Dump a `.mmpz` file:", "command": "lmms dump {{path/to/mmpz/file.mmpz}}"}, {"task": "Render a project file:", "command": "lmms render {{path/to/mmpz_or_mmp/file}}"}, {"task": "Render the individual tracks of a project file:", "command": "lmms rendertracks {{path/to/mmpz_or_mmp/file}} {{path/to/dump/directory}}"}, {"task": "Render with custom samplerate, format, and as a loop:", "command": "lmms render --samplerate {{88200}} --format {{ogg}} --loop --output {{path/to/output/file.ogg}}"}]}
{"command": "ln", "tasks": [{"task": "Create a symbolic link to a file or directory:", "command": "ln -s {{/path/to/file_or_directory}} {{path/to/symlink}}"}, {"task": "Overwrite an existing symbolic link to point to a different file:", "command": "ln -sf {{/path/to/new_file}} {{path/to/symlink}}"}, {"task": "Create a hard link to a file:", "command": "ln {{/path/to/file}} {{path/to/hardlink}}"}]}
{"command": "loadtest", "tasks": [{"task": "Run with concurrent users and a specified amount of requests per second:", "command": "loadtest --concurrency {{10}} --rps {{200}} {{https://example.com}}"}, {"task": "Run with a custom HTTP header:", "command": "loadtest --headers \"{{accept:text/plain;text-html}}\" {{https://example.com}}"}, {"task": "Run with a specific HTTP method:", "command": "loadtest --method {{GET}} {{https://example.com}}"}]}
{"command": "loc", "tasks": [{"task": "Print lines of code in the current directory:", "command": "loc"}, {"task": "Print lines of code in the target directory:", "command": "loc {{path/to/directory}}"}, {"task": "Print lines of code with stats for individual files:", "command": "loc --files"}, {"task": "Print lines of code without .gitignore (etc.) files (e.g. two -u flags will additionally count hidden files and dirs):", "command": "loc -u"}]}
{"command": "local", "tasks": [{"task": "Declare a string variable with the specified value:", "command": "local {{variable}}=\"{{value}}\""}, {"task": "Declare an integer variable with the specified value:", "command": "local -i {{variable}}=\"{{value}}\""}, {"task": "Declare an array variable with the specified value:", "command": "local {{variable}}=({{item_a item_b item_c}})"}, {"task": "Declare an associative array variable with the specified value:", "command": "local -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})"}, {"task": "Declare a readonly variable with the specified value:", "command": "local -r {{variable}}=\"{{value}}\""}]}
{"command": "locust", "tasks": [{"task": "Load-test \"example.com\" with web interface using locustfile.py:", "command": "locust --host={{http://example.com}}"}, {"task": "Use a different test file:", "command": "locust --locustfile={{test_file.py}} --host={{http://example.com}}"}, {"task": "Run test without web interface, spawning 1 user a second until there are 100 users:", "command": "locust --no-web --clients={{100}} --hatch-rate={{1}} --host={{http://example.com}}"}, {"task": "Start Locust in master mode:", "command": "locust --master --host={{http://example.com}}"}, {"task": "Connect Locust slave to master:", "command": "locust --slave --host={{http://example.com}}"}, {"task": "Connect Locust slave to master on a different machine:", "command": "locust --slave --master-host={{master_hostname}} --host={{http://example.com}}"}]}
{"command": "logger", "tasks": [{"task": "Log a message to syslog:", "command": "logger {{message}}"}, {"task": "Take input from `stdin` and log to syslog:", "command": "echo {{log_entry}} | logger"}, {"task": "Send the output to a remote syslog server running at a given port. Default port is 514:", "command": "echo {{log_entry}} | logger --server {{hostname}} --port {{port}}"}, {"task": "Use a specific tag for every line logged. Default is the name of logged in user:", "command": "echo {{log_entry}} | logger --tag {{tag}}"}, {"task": "Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options:", "command": "echo {{log_entry}} | logger --priority {{user.warning}}"}]}
{"command": "logname", "tasks": [{"task": "Display the currently logged in user's name:", "command": "logname"}]}
{"command": "logstash", "tasks": [{"task": "Check validity of a Logstash configuration:", "command": "logstash --configtest --config {{logstash_config.conf}}"}, {"task": "Run Logstash using configuration:", "command": "sudo logstash --config {{logstash_config.conf}}"}, {"task": "Run Logstash with the most basic inline configuration string:", "command": "sudo logstash -e 'input {} filter {} output {}'"}]}
{"command": "lolcat", "tasks": [{"task": "Print a file to the console in rainbow colors:", "command": "lolcat {{path/to/file}}"}, {"task": "Print the result of a text-producing command in rainbow colors:", "command": "{{fortune}} | lolcat"}, {"task": "Print a file to the console with animated rainbow colors:", "command": "lolcat -a {{path/to/file}}"}, {"task": "Print a file to the console with 24-bit (truecolor) rainbow colors:", "command": "lolcat -t {{path/to/file}}"}]}
{"command": "lorem", "tasks": [{"task": "Print the specified number of words:", "command": "lorem -n {{20}}"}, {"task": "Print 10 lines of Goethe's Faust:", "command": "lorem -l {{10}} --faust"}, {"task": "Print 5 sentences of Poe's Raven:", "command": "lorem -s {{5}} --raven"}, {"task": "Print 40 random characters from Boccaccio's Decameron:", "command": "lorem --randomize -c {{40}} --decamerone"}]}
{"command": "lp", "tasks": [{"task": "Print the output of a command to the default printer (see `lpstat` command):", "command": "echo \"test\" | lp"}, {"task": "Print a file to the default printer:", "command": "lp {{path/to/filename}}"}, {"task": "Print a file to a named printer (see `lpstat` command):", "command": "lp -d {{printer_name}} {{path/to/filename}}"}, {"task": "Print N copies of file to default printer (replace N with desired number of copies):", "command": "lp -n {{N}} {{path/to/filename}}"}, {"task": "Print only certain pages to the default printer (print pages 1, 3-5, and 16):", "command": "lp -P 1,3-5,16 {{path/to/filename}}"}, {"task": "Resume printing a job:", "command": "lp -i {{job_id}} -H resume"}]}
{"command": "lpass", "tasks": [{"task": "Log in to your LastPass account, by entering your master password when prompted:", "command": "lpass login {{username}}"}, {"task": "Show login status:", "command": "lpass status"}, {"task": "List all sites grouped by category:", "command": "lpass ls"}, {"task": "Generate a new password for gmail.com with the identifier `myinbox` and add to LastPass:", "command": "lpass generate --username {{username}} --url {{gmail.com}} {{myinbox}} {{password_length}}"}, {"task": "Show password for a specified entry:", "command": "lpass show {{myinbox}} --password"}]}
{"command": "lpinfo", "tasks": [{"task": "List all the currently connected printers:", "command": "lpinfo -v"}, {"task": "List all the currently installed printer drivers:", "command": "lpinfo -m"}, {"task": "Search installed printer drivers by make and model:", "command": "lpinfo --make-and-model \"{{printer_model}}\" -m"}]}
{"command": "lpr", "tasks": [{"task": "Print a file to the default printer:", "command": "lpr {{path/to/file}}"}, {"task": "Print 2 copies:", "command": "lpr -# {{2}} {{path/to/file}}"}, {"task": "Print to a named printer:", "command": "lpr -P {{printer}} {{path/to/file}}"}, {"task": "Print either a single page (e.g. 2) or a range of pages (e.g. 2–16):", "command": "lpr -o page-ranges={{2|2-16}} {{path/to/file}}"}, {"task": "Print double-sided either in portrait (long) or in landscape (short):", "command": "lpr -o sides={{two-sided-long-edge|two-sided-short-edge}} {{path/to/file}}"}, {"task": "Set page size (more options may be available depending on setup):", "command": "lpr -o media={{a4|letter|legal}} {{path/to/file}}"}, {"task": "Print multiple pages per sheet:", "command": "lpr -o number-up={{2|4|6|9|16}} {{path/to/file}}"}]}
{"command": "lpstat", "tasks": [{"task": "List printers present on the machine and whether they are enabled for printing:", "command": "lpstat -p"}, {"task": "Show the default printer:", "command": "lpstat -d"}, {"task": "Display all available status information:", "command": "lpstat -t"}, {"task": "Show a list of print jobs queued by the specified user:", "command": "lpstat -u {{user}}"}]}
{"command": "ls", "tasks": [{"task": "List files one per line:", "command": "ls -1"}, {"task": "List all files, including hidden files:", "command": "ls -a"}, {"task": "List all files, with trailing `/` added to directory names:", "command": "ls -F"}, {"task": "Long format list (permissions, ownership, size, and modification date) of all files:", "command": "ls -la"}, {"task": "Long format list with size displayed using human-readable units (KiB, MiB, GiB):", "command": "ls -lh"}, {"task": "Long format list sorted by size (descending):", "command": "ls -lS"}, {"task": "Long format list of all files, sorted by modification date (oldest first):", "command": "ls -ltr"}, {"task": "Only list directories:", "command": "ls -d */"}]}
{"command": "lsd", "tasks": [{"task": "List files and directories, one per line:", "command": "lsd -1"}, {"task": "List all files and directories, including hidden ones, in the current directory:", "command": "lsd -a"}, {"task": "List all files and directories with trailing `/` added to directory names:", "command": "lsd -F"}, {"task": "List all files and directories in long format (permissions, ownership, size, and modification date):", "command": "lsd -la"}, {"task": "List all files and directories in long format with size displayed using human-readable units (KiB, MiB, GiB):", "command": "lsd -lh"}, {"task": "List all files and directories in long format, sorted by size (descending):", "command": "lsd -lS"}, {"task": "List all files and directories in long format, sorted by modification date (oldest first):", "command": "lsd -ltr"}, {"task": "Only list directories:", "command": "lsd -d {{*/}}"}]}
{"command": "lsof", "tasks": [{"task": "Find the processes that have a given file open:", "command": "lsof {{path/to/file}}"}, {"task": "Find the process that opened a local internet port:", "command": "lsof -i :{{port}}"}, {"task": "Only output the process ID (PID):", "command": "lsof -t {{path/to/file}}"}, {"task": "List files opened by the given user:", "command": "lsof -u {{username}}"}, {"task": "List files opened by the given command or process:", "command": "lsof -c {{process_or_command_name}}"}, {"task": "List files opened by a specific process, given its PID:", "command": "lsof -p {{PID}}"}, {"task": "List open files in a directory:", "command": "lsof +D {{path/to/directory}}"}, {"task": "Find the process that is listening on a local IPv6 TCP port and don't convert network or port numbers:", "command": "lsof -i6TCP:{{port}} -sTCP:LISTEN -n -P"}]}
{"command": "lspath", "tasks": [{"task": "Print the contents of the system `PATH` variable, with one element per line:", "command": "lspath"}, {"task": "Print the current contents of the system `PATH` variable, with one element per line, with the output paged:", "command": "lspath --page"}]}
{"command": "lt", "tasks": [{"task": "Start tunnel from a specific port:", "command": "lt --port {{8000}}"}, {"task": "Specify the upstream server doing the forwarding:", "command": "lt --port {{8000}} --host {{host}}"}, {"task": "Request a specific subdomain:", "command": "lt --port {{8000}} --subdomain {{subdomain}}"}, {"task": "Print basic request info:", "command": "lt --port {{8000}} --print-requests"}, {"task": "Open the tunnel URL in the default web browser:", "command": "lt --port {{8000}} --open"}]}
{"command": "lua", "tasks": [{"task": "Start an interactive Lua shell:", "command": "lua"}, {"task": "Execute a Lua script:", "command": "lua {{path/to/script.lua}} {{--optional-argument}}"}, {"task": "Execute a Lua expression:", "command": "lua -e '{{print(\"Hello World\")}}'"}]}
{"command": "luac", "tasks": [{"task": "Compile a Lua source file to Lua bytecode:", "command": "luac -o {{byte_code.luac}} {{source.lua}}"}, {"task": "Do not include debug symbols in the output:", "command": "luac -s -o {{byte_code.luac}} {{source.lua}}"}]}
{"command": "luajit", "tasks": [{"task": "Start an interactive Lua shell:", "command": "luajit"}, {"task": "Execute a Lua script:", "command": "luajit {{path/to/script.lua}} {{--optional-argument}}"}, {"task": "Execute a Lua expression:", "command": "luajit -e '{{print(\"Hello World\")}}'"}]}
{"command": "lualatex", "tasks": [{"task": "Start `texlua` to act as a Lua interpreter:", "command": "lualatex"}, {"task": "Compile a Tex file to PDF:", "command": "lualatex {{path/to/file.tex}}"}, {"task": "Compile a Tex file without error interruption:", "command": "lualatex -interaction nonstopmode {{path/to/file.tex}}"}, {"task": "Compile a Tex file with a specific output file name:", "command": "lualatex -jobname={{filename}} {{path/to/file.tex}}"}]}
{"command": "lumen", "tasks": [{"task": "Create a new Lumen application:", "command": "lumen new {{application_name}}"}, {"task": "List the available installer commands:", "command": "lumen list"}]}
{"command": "lwp-request", "tasks": [{"task": "Make a simple GET request:", "command": "lwp-request -m GET {{http://example.com/some/path}}"}, {"task": "Upload a file with a POST request:", "command": "lwp-request -m POST {{http://example.com/some/path}} < {{path/to/file}}"}, {"task": "Make a request with a custom user agent:", "command": "lwp-request -H 'User-Agent: {{user_agent}} -m {{METHOD}} {{http://example.com/some/path}}"}, {"task": "Make a request with HTTP authentication:", "command": "lwp-request -C {{username}}:{{password}} -m {{METHOD}} {{http://example.com/some/path}}"}, {"task": "Make a request and print request headers:", "command": "lwp-request -U -m {{METHOD}} {{http://example.com/some/path}}"}, {"task": "Make a request and print response headers and status chain:", "command": "lwp-request -E -m {{METHOD}} {{http://example.com/some/path}}"}]}
{"command": "lynx", "tasks": [{"task": "Visit a website:", "command": "lynx {{example.com}}"}, {"task": "Apply restrictions for anonymous account:", "command": "lynx -anonymous {{example.com}}"}, {"task": "Turn on mouse support, if available:", "command": "lynx -use_mouse {{example.com}}"}, {"task": "Force color mode on, if available:", "command": "lynx -color {{example.com}}"}, {"task": "Open a link, using a specific file to read and write cookies:", "command": "lynx -cookie_file={{path/to/file}} {{example.com}}"}, {"task": "Navigate forwards and backwards through the links on a page:", "command": "Up arrow key, Down arrow key"}, {"task": "Go back to the previously displayed page:", "command": "Left arrow key or u"}, {"task": "Exit:", "command": "q then y"}]}
{"command": "lz4", "tasks": [{"task": "Compress a file:", "command": "lz4 {{path/to/file}}"}, {"task": "Decompress a file:", "command": "lz4 -d {{file.lz4}}"}, {"task": "Decompress a file and write to `stdout`:", "command": "lz4 -dc {{file.lz4}}"}, {"task": "Package and compress a directory and its contents:", "command": "tar cvf - {{path/to/directory}} | lz4 - {{dir.tar.lz4}}"}, {"task": "Decompress and unpack a directory and its contents:", "command": "lz4 -dc {{dir.tar.lz4}} | tar -xv"}, {"task": "Compress a file using the best compression:", "command": "lz4 -9 {{path/to/file}}"}]}
{"command": "lzcat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xz"}]}
{"command": "lzcmp", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzcmp"}]}
{"command": "lzegrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzgrep"}]}
{"command": "lzfgrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzgrep"}]}
{"command": "lzgrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzgrep"}]}
{"command": "lzip", "tasks": [{"task": "Archive a file, replacing it with with a compressed version:", "command": "lzip {{path/to/file}}"}, {"task": "Archive a file, keeping the input file:", "command": "lzip -k {{path/to/file}}"}, {"task": "Archive a file with the best compression (level=9):", "command": "lzip -k {{path/to/file}} --best"}, {"task": "Archive a file at the fastest speed (level=0):", "command": "lzip -k {{path/to/file}} --fast"}, {"task": "Test the integrity of compressed file:", "command": "lzip --test {{path/to/archive.lz}}"}, {"task": "Decompress a file, replacing it with the original uncompressed version:", "command": "lzip -d {{path/to/archive.lz}}"}, {"task": "Decompress a file, keeping the archive:", "command": "lzip -d -k {{path/to/archive.lz}}"}, {"task": "List files which are in an archive and show compression stats:", "command": "lzip --list {{path/to/archive.lz}}"}]}
{"command": "lzless", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzless"}]}
{"command": "lzma", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xz"}]}
{"command": "lzmore", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzmore"}]}
{"command": "lzop", "tasks": [{"task": "Compress a file into a new file with the `.lzo` suffix:", "command": "lzop {{path/to/file}}"}, {"task": "Decompress a file:", "command": "lzop -d {{path/to/file}}.lzo"}, {"task": "Compress a file, while specifying the compression level. 0 = Worst, 9 = Best (Default level is 3):", "command": "lzop -{{level}} {{path/to/file}}"}]}
{"command": "m4", "tasks": [{"task": "Process macros in a file:", "command": "m4 {{path/to/file}}"}, {"task": "Define a macro before processing files:", "command": "m4 -D{{macro_name}}={{macro_value}} {{path/to/file}}"}]}
{"command": "macchina", "tasks": [{"task": "List out system information, with either default settings or those specified in your configuration file:", "command": "macchina"}, {"task": "Specify a custom configuration file path:", "command": "macchina --config {{path/to/configuration_file}}"}, {"task": "List system information, but lengthen uptime, shell and kernel output:", "command": "macchina --long-uptime --long-shell --long-kernel"}, {"task": "Check for any errors/system failures encountered when trying to fetch system information:", "command": "macchina --doctor"}, {"task": "List original artists of all the ASCII art:", "command": "macchina --ascii-artists"}]}
{"command": "maestral", "tasks": [{"task": "Start the GUI:", "command": "maestral gui"}, {"task": "Print current status of Maestral:", "command": "maestral status"}, {"task": "Pause syncing:", "command": "maestral pause"}, {"task": "Resume syncing:", "command": "maestral resume"}, {"task": "Print sync status of a specific file or folder:", "command": "maestral filestatus {{path/to/file_or_directory}}"}]}
{"command": "magento", "tasks": [{"task": "Enable one or more space-separated modules:", "command": "magento module:enable {{module(s)}}"}, {"task": "Disable one or more space-separated modules:", "command": "magento module:disable {{module(s)}}"}, {"task": "Update the database after enabling modules:", "command": "magento setup:upgrade"}, {"task": "Update code and dependency injection configuration:", "command": "magento setup:di:compile"}, {"task": "Deploy static assets:", "command": "magento setup:static-content:deploy"}, {"task": "Enable maintenance mode:", "command": "magento maintenance:enable"}, {"task": "Disable maintenance mode:", "command": "magento maintenance:disable"}, {"task": "List all available commands:", "command": "magento list"}]}
{"command": "magick", "tasks": [{"task": "Convert file type:", "command": "magick {{image.png}} {{image.jpg}}"}, {"task": "Resize an image, making a new copy:", "command": "magick convert -resize {{100x100}} {{image.jpg}} {{image.jpg}}"}, {"task": "Create a GIF using images:", "command": "magick {{*.jpg}} {{images.gif}}"}, {"task": "Create checkerboard pattern:", "command": "magick -size {{640x480}} pattern:checkerboard {{checkerboard.png}}"}, {"task": "Convert images to individual PDF pages:", "command": "magick {{*.jpg}} +adjoin {{page-%d.pdf}}"}]}
{"command": "mail", "tasks": [{"task": "Send a typed email message. The command-line below continues after pressing Enter key. Input CC email-id (optional) press Enter key. Input message text (can be multiline). Press Ctrl-D key to complete the message text:", "command": "mail --subject=\"{{subject line}}\" {{to_user@example.com}}"}, {"task": "Send an email that contains file content:", "command": "mail --subject=\"{{$HOSTNAME filename.txt}}\" {{to_user@example.com}} < {{path/to/filename.txt}}"}, {"task": "Send a `tar.gz` file as an attachment:", "command": "tar cvzf - {{path/to/directory1 path/to/directory2}} | uuencode {{data.tar.gz}} | mail --subject=\"{{subject_line}}\" {{to_user@example.com}}"}]}
{"command": "mailx", "tasks": [{"task": "Send mail (the content should be typed after the command, and ended with `Ctrl+D`):", "command": "mailx -s \"{{subject}}\" {{to_addr}}"}, {"task": "Send mail with content passed from another command:", "command": "echo \"{{content}}\" | mailx -s \"{{subject}}\" {{to_addr}}"}, {"task": "Send mail with content read from a file:", "command": "mailx -s \"{{subject}}\" {{to_addr}} < {{content.txt}}"}, {"task": "Send mail to a recipient and CC to another address:", "command": "mailx -s \"{{subject}}\" -c {{cc_addr}} {{to_addr}}"}, {"task": "Send mail specifying the sender address:", "command": "mailx -s \"{{subject}}\" -r {{from_addr}} {{to_addr}}"}, {"task": "Send mail with an attachment:", "command": "mailx -a {{path/to/file}} -s \"{{subject}}\" {{to_addr}}"}]}
{"command": "make", "tasks": [{"task": "Call the first target specified in the Makefile (usually named \"all\"):", "command": "make"}, {"task": "Call a specific target:", "command": "make {{target}}"}, {"task": "Call a specific target, executing 4 jobs at a time in parallel:", "command": "make -j{{4}} {{target}}"}, {"task": "Use a specific Makefile:", "command": "make --file {{path/to/file}}"}, {"task": "Execute make from another directory:", "command": "make --directory {{path/to/directory}}"}, {"task": "Force making of a target, even if source files are unchanged:", "command": "make --always-make {{target}}"}, {"task": "Override a variable defined in the Makefile:", "command": "make {{target}} {{variable}}={{new_value}}"}, {"task": "Override variables defined in the Makefile by the environment:", "command": "make --environment-overrides {{target}}"}]}
{"command": "makebuildserver", "tasks": [{"task": "Create a new virtual machine or update an existing one (if available):", "command": "makebuildserver"}, {"task": "Force creating a fresh virtual machine:", "command": "makebuildserver --clean"}]}
{"command": "makensis", "tasks": [{"task": "Compile a NSIS script:", "command": "makensis {{path/to/file.nsi}}"}, {"task": "Compile a NSIS script in strict mode (treat warnings as errors):", "command": "makensis -WX {{path/to/file.nsi}}"}, {"task": "Print help for a specific command:", "command": "makensis -CMDHELP {{command}}"}]}
{"command": "makepasswd", "tasks": [{"task": "Generate a random password (8 to 10 characters long, containing letters and numbers):", "command": "makepasswd"}, {"task": "Generate a 10 characters long password:", "command": "makepasswd --chars {{10}}"}, {"task": "Generate a 5 to 10 characters long password:", "command": "makepasswd --minchars {{5}} --maxchars {{10}}"}, {"task": "Generate a password containing only the characters \"b\", \"a\" or \"r\":", "command": "makepasswd --string {{bar}}"}]}
{"command": "mamba repoquery", "tasks": [{"task": "Search for all available versions of a particular package:", "command": "mamba repoquery search {{package_name}}"}, {"task": "Search for all packages satisfying specific constraints:", "command": "mamba repoquery search {{sphinx<5}}"}, {"task": "List the dependencies of a package installed in the currently activated environment, in a tree format:", "command": "mamba repoquery depends --tree {{scipy}}"}, {"task": "Print packages in the current environment that require a particular package to be installed (i.e. inverse of `depends`):", "command": "mamba repoquery whoneeds {{ipython}}"}]}
{"command": "mamba", "tasks": [{"task": "Create a new environment, installing the specified packages into it:", "command": "mamba create --name {{environment_name}} {{python=3.10 matplotlib}}"}, {"task": "Install packages into the current environment, specifying the package [c]hannel:", "command": "mamba install -c {{conda-forge}} {{python=3.6 numpy}}"}, {"task": "Update all packages in the current environment:", "command": "mamba update --all"}, {"task": "Search for a specific package across repositories:", "command": "mamba repoquery search {{numpy}}"}, {"task": "List all environments:", "command": "mamba info --envs"}, {"task": "Remove unused [p]ackages and [t]arballs from the cache:", "command": "mamba clean -pt"}, {"task": "Activate an environment:", "command": "mamba activate {{environment_name}}"}, {"task": "List all installed packages in the currently activated environment:", "command": "mamba list"}]}
{"command": "man", "tasks": [{"task": "Display the man page for a command:", "command": "man {{command}}"}, {"task": "Display the man page for a command from section 7:", "command": "man {{7}} {{command}}"}, {"task": "List all available sections for a command:", "command": "man -f {{command}}"}, {"task": "Display the path searched for manpages:", "command": "man --path"}, {"task": "Display the location of a manpage rather than the manpage itself:", "command": "man -w {{command}}"}, {"task": "Display the man page using a specific locale:", "command": "man {{command}} --locale={{locale}}"}, {"task": "Search for manpages containing a search string:", "command": "man -k \"{{search_string}}\""}]}
{"command": "masscan", "tasks": [{"task": "Scan an IP or network subnet for port 80:", "command": "masscan {{ip_address|network_prefix}} --ports {{80}}"}, {"task": "Scan a class B subnet for the top 100 ports at 100,000 packets per second:", "command": "masscan {{10.0.0.0/16}} --top-ports {{100}} --rate {{100000}}"}, {"task": "Scan a class B subnet avoiding ranges from a specific exclude file:", "command": "masscan {{10.0.0.0/16}} --top-ports {{100}} --excludefile {{path/to/file}}"}, {"task": "Scan the Internet for port 443:", "command": "masscan {{0.0.0.0/0}} --ports {{443}} --rate {{10000000}}"}, {"task": "Scan the Internet for a specific port range and export to a file:", "command": "masscan {{0.0.0.0/0}} --ports {{0-65535}} -output-format {{binary|grepable|json|list|xml}} --output-filename {{path/to/file}}"}]}
{"command": "mat2", "tasks": [{"task": "List supported file formats:", "command": "mat2 --list"}, {"task": "Remove metadata from a file:", "command": "mat2 {{path/to/file}}"}, {"task": "Remove metadata from a file and print detailed output to the console:", "command": "mat2 --verbose {{path/to/file}}"}, {"task": "Show metadata in a file without removing it:", "command": "mat2 --show {{path/to/file}}"}, {"task": "Partially remove metadata from a file:", "command": "mat2 --lightweight {{path/to/file}}"}]}
{"command": "mate-dictionary", "tasks": [{"task": "Print a specific word definition:", "command": "mate-dictionary --no-window --look-up '{{word}}'"}, {"task": "Show similar words for a specific one in a new window:", "command": "mate-dictionary --match '{{word}}'"}]}
{"command": "matlab", "tasks": [{"task": "Run without splash screen during startup:", "command": "matlab -nosplash"}, {"task": "Execute a MATLAB statement:", "command": "matlab -r \"{{matlab_statement}}\""}, {"task": "Run a MATLAB script:", "command": "matlab -r \"run({{path/to/script.m}})\""}]}
{"command": "maza", "tasks": [{"task": "Update the Maza database:", "command": "maza update"}, {"task": "Start Maza:", "command": "sudo maza start"}, {"task": "Stop Maza:", "command": "sudo maza stop"}, {"task": "Show the status of Maza:", "command": "maza status"}]}
{"command": "mc", "tasks": [{"task": "Start Midnight Commander:", "command": "mc"}, {"task": "Start Midnight Commander in black and white:", "command": "mc -b"}]}
{"command": "mcfly", "tasks": [{"task": "Print the mcfly integration code for the specified shell:", "command": "mcfly init {{bash|fish|zsh}}"}, {"task": "Search the history for a command, with 20 results:", "command": "mcfly search --results {{20}} \"{{search_terms}}\""}, {"task": "Add a new command to the history:", "command": "mcfly add \"{{command}}\""}, {"task": "Record that a directory has moved and transfer the historical records from the old path to the new one:", "command": "mcfly move \"{{path/to/old_directory}}\" \"{{path/to/new_directory}}\""}, {"task": "Train the suggestion engine (developer tool):", "command": "mcfly train"}, {"task": "Display help for a specific subcommand:", "command": "mcfly help {{subcommand}}"}]}
{"command": "mcs", "tasks": [{"task": "Compile the specified files:", "command": "mcs {{path/to/input_file1.cs path/to/input_file2.cs ...}}"}, {"task": "Specify the output program name:", "command": "mcs -out:{{path/to/file.exe}} {{path/to/input_file1.cs path/to/input_file2.cs ...}}"}, {"task": "Specify the output program type:", "command": "mcs -target:{{exe|winexe|library|module}} {{path/to/input_file1.cs path/to/input_file2.cs ...}}"}]}
{"command": "md-to-clip", "tasks": [{"task": "Convert tldr-pages files and save into the same directories:", "command": "md-to-clip {{path/to/page1.md path/to/page2.md ...}}"}, {"task": "Convert tldr-pages files and save into a specific directory:", "command": "md-to-clip --output-directory {{path/to/directory}} {{path/to/page1.md path/to/page2.md ...}}"}, {"task": "Convert a tldr-page file to `stdout`:", "command": "md-to-clip --no-file-save <(echo '{{page-content}}')"}, {"task": "Convert tldr-pages files while recognizing additional placeholders from a specific config:", "command": "md-to-clip --special-placeholder-config {{path/to/config.yaml}} {{path/to/page1.md path/to/page2.md ...}}"}, {"task": "Display help:", "command": "md-to-clip --help"}, {"task": "Display version:", "command": "md-to-clip --version"}]}
{"command": "md5sum", "tasks": [{"task": "Calculate the MD5 checksum for one or more files:", "command": "md5sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of MD5 checksums to a file:", "command": "md5sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.md5}}"}, {"task": "Calculate an MD5 checksum from `stdin`:", "command": "{{command}} | md5sum"}, {"task": "Read a file of MD5 sums and filenames and verify all files have matching checksums:", "command": "md5sum --check {{path/to/file.md5}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "md5sum --check --quiet {{path/to/file.md5}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "md5sum --ignore-missing --check --quiet {{path/to/file.md5}}"}]}
{"command": "mdp", "tasks": [{"task": "Launch a presentation in the terminal from a Markdown file:", "command": "mdp {{presentation.md}}"}, {"task": "Disable fading transitions:", "command": "mdp --nofade {{presentation.md}}"}, {"task": "Invert font colors to use in terminals with light background:", "command": "mdp --invert {{presentation.md}}"}, {"task": "Disable transparency in transparent terminals:", "command": "mdp --notrans {{presentation.md}}"}]}
{"command": "mediainfo", "tasks": [{"task": "Display metadata for a given file in the console:", "command": "mediainfo {{file}}"}, {"task": "Store the output to a given file along with displaying in the console:", "command": "mediainfo --Logfile={{out.txt}} {{file}}"}, {"task": "Display the list of metadata attributes that can be extracted:", "command": "mediainfo --Info-Parameters"}]}
{"command": "meld", "tasks": [{"task": "Start `meld`:", "command": "meld"}, {"task": "Compare 2 files:", "command": "meld {{path/to/file_1}} {{path/to/file_2}}"}, {"task": "Compare 2 directories:", "command": "meld {{path/to/directory_1}} {{path/to/directory_2}}"}, {"task": "Compare 3 files:", "command": "meld {{path/to/file_1}} {{path/to/file_2}} {{path/to/file_3}}"}, {"task": "Open a comparison as a new tab in a pre-existing meld instance:", "command": "meld --newtab {{path/to/file_1}} {{path/to/file_2}}"}, {"task": "Compare multiple sets of files:", "command": "meld --diff {{path/to/file_1}} {{path/to/file_2}} --diff {{path/to/file_3}} {{path/to/file_4}}"}]}
{"command": "mesg", "tasks": [{"task": "Check terminal's openness to write messages:", "command": "mesg"}, {"task": "Disable receiving messages from the write command:", "command": "mesg n"}, {"task": "Enable receiving messages from the write command:", "command": "mesg y"}]}
{"command": "meshlabserver", "tasks": [{"task": "Convert an STL file to an OBJ file:", "command": "meshlabserver -i {{input.stl}} -o {{output.obj}}"}, {"task": "Convert a WRL file to a OFF file, including the vertex and face normals in the output mesh:", "command": "meshlabserver -i {{input.wrl}} -o {{output.off}} -om vn fn"}, {"task": "Dump a list of all the available processing filters into a file:", "command": "meshlabserver -d {{path/to/file}}"}, {"task": "Process a 3D file using a filter script created in the MeshLab GUI (Filters > Show current filter script > Save Script):", "command": "meshlabserver -i {{input.ply}} -o {{output.ply}} -s {{filter_script.mlx}}"}, {"task": "Process a 3D file using a filter script, writing the output of the filters into a log file:", "command": "meshlabserver -i {{input.x3d}} -o {{output.x3d}} -s {{filter_script.mlx}} -l {{logfile}}"}]}
{"command": "meson", "tasks": [{"task": "Generate a C project with a given name and version:", "command": "meson init --language={{c}} --name={{myproject}} --version={{0.1}}"}, {"task": "Configure the `builddir` with default values:", "command": "meson setup {{build_dir}}"}, {"task": "Build the project:", "command": "meson compile -C {{path/to/build_dir}}"}, {"task": "Run all tests in the project:", "command": "meson test"}, {"task": "Show the help:", "command": "meson --help"}, {"task": "Show version info:", "command": "meson --version"}]}
{"command": "meteor", "tasks": [{"task": "Run a meteor project from its root directory in development mode:", "command": "meteor"}, {"task": "Create a project under the given directory:", "command": "meteor create {{path/to/directory}}"}, {"task": "Display the list of packages the project is currently using:", "command": "meteor list"}, {"task": "Add a package to the project:", "command": "meteor add {{package_name}}"}, {"task": "Remove a package from the project:", "command": "meteor remove {{package_name}}"}, {"task": "Create a production build of the project as a tarball under the given directory:", "command": "meteor build {{path/to/directory}}"}]}
{"command": "mg", "tasks": [{"task": "Open a file for editing:", "command": "mg {{path/to/file}}"}, {"task": "Open a file at a specified line number:", "command": "mg +{{line_number}} {{path/to/file}}"}, {"task": "Open files in a read-only mode:", "command": "mg -R {{path/to/file1 path/to/file2 ...}}"}, {"task": "Disable `~` backup files while editing:", "command": "mg -n {{path/to/file}}"}]}
{"command": "mh_copyright", "tasks": [{"task": "Update the year (range) to include the current year for the specified files:", "command": "mh_copyright --primary-entity=\"{{entity}}\" --update-year {{path/to/file_or_directory1.m path/to/file_or_director2.m ...}}"}, {"task": "Update the year (range) to include the current year for all files:", "command": "mh_copyright --primary-entity=\"{{entity}}\" --update-year"}]}
{"command": "mh_lint", "tasks": [{"task": "Check the current directory:", "command": "mh_lint"}, {"task": "Check a specific directory recursively:", "command": "mh_lint {{path/to/directory}}"}, {"task": "Check a MATLAB file:", "command": "mh_lint {{path/to/file.m}}"}, {"task": "Check an Octave file:", "command": "mh_lint --octave {{path/to/file.m}}"}]}
{"command": "mh_metric", "tasks": [{"task": "Print the code metrics for the specified files:", "command": "mh_metric {{path/to/file1.m path/to/file2.m ...}}"}, {"task": "Print the code metrics for the specified Octave files:", "command": "mh_metric --octave {{path/to/file1.m path/to/file2.m ...}}"}, {"task": "Print the code metrics for the specified directory recursively:", "command": "mh_metric {{path/to/directory}}"}, {"task": "Print the code metrics for the current directory:", "command": "mh_metric"}, {"task": "Print the code metrics report in HTML or JSON format:", "command": "mh_metric --{{html|json}} {{path/to/output_file}}"}]}
{"command": "micro", "tasks": [{"task": "Open a file:", "command": "micro {{path/to/file}}"}, {"task": "Save a file:", "command": "Ctrl + S"}, {"task": "Cut the entire line:", "command": "Ctrl + K"}, {"task": "Search for a pattern in the file (press `Ctrl + N`/`Ctrl + P` to go to next/previous match):", "command": "Ctrl + F \"{{pattern}}\" <Enter>"}, {"task": "Execute a command:", "command": "Ctrl + E {{command}} <Enter>"}, {"task": "Perform a substitution in the whole file:", "command": "Ctrl + E replaceall \"{{pattern}}\" \"{{replacement}}\" <Enter>"}, {"task": "Quit:", "command": "Ctrl + Q"}]}
{"command": "mid3v2", "tasks": [{"task": "List all supported ID3v2.3 or ID3v2.4 frames and their meanings:", "command": "id3v2 --list-frames {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "List all supported ID3v1 numeric genres:", "command": "id3v2 --list-genres {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "List all tags in specific files:", "command": "id3v2 --list {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "Set specific artist, album, or song information:", "command": "id3v2 {{--artist|--album|--song}}={{string}} {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "Set specific picture information:", "command": "id3v2 --picture={{filename:description:image_type:mime_type}} {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "Set specific year information:", "command": "id3v2 --year={{YYYY}} {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "Set specific date information:", "command": "id3v2 --date={{YYYY-MM-DD}} {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}]}
{"command": "middleman", "tasks": [{"task": "Create a new Middleman project:", "command": "middleman init \"{{project_name}}\""}, {"task": "Start local server for current project on port 4567:", "command": "middleman server"}, {"task": "Start local server for current project on a specified port:", "command": "middleman server -p \"{{port}}\""}, {"task": "Build the project in the current directory to prepare for deployment:", "command": "bundle exec middleman build"}, {"task": "Deploy the Middleman project in the current directory:", "command": "middleman deploy"}]}
{"command": "minetest", "tasks": [{"task": "Start Minetest in client mode:", "command": "minetest"}, {"task": "Start Minetest in server mode by hosting a specific world:", "command": "minetest --server --world {{name}}"}, {"task": "Write logs to a specific file:", "command": "minetest --logfile {{path/to/file}}"}, {"task": "Only write errors to the console:", "command": "minetest --quiet"}]}
{"command": "minetestserver", "tasks": [{"task": "Start the server:", "command": "minetestserver"}, {"task": "List available worlds:", "command": "minetestserver --world list"}, {"task": "Specify the world name to load:", "command": "minetestserver --world {{world_name}}"}, {"task": "List the available game IDs:", "command": "minetestserver --gameid list"}, {"task": "Specify a game to use:", "command": "minetestserver --gameid {{game_id}}"}, {"task": "Listen on a specific port:", "command": "minetestserver --port {{34567}}"}, {"task": "Migrate to a different data backend:", "command": "minetestserver --migrate {{sqlite3|leveldb|redis}}"}, {"task": "Start an interactive terminal after starting the server:", "command": "minetestserver --terminal"}]}
{"command": "mingle", "tasks": [{"task": "Bundle the edges of one or more graph layouts (that already have layout information):", "command": "mingle {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Perform layout, bundling, and output to a picture with one command:", "command": "dot {{path/to/input.gv}} | mingle | dot -T {{png}} > {{path/to/output.png}}"}, {"task": "Display help for `mingle`:", "command": "mingle -?"}]}
{"command": "minifab", "tasks": [{"task": "Bring up the default Hyperledger Fabric network:", "command": "minifab up -i {{minifab_version}}"}, {"task": "Bring down the Hyperledger Fabric network:", "command": "minifab down"}, {"task": "Install chaincode onto a specified channel:", "command": "minifab install -n {{chaincode_name}}"}, {"task": "Install a specific chaincode version onto a channel:", "command": "minifab install -n {{chaincode_name}} -v {{chaincode_version}}"}, {"task": "Initialize the chaincode after installation/upgrade:", "command": "minifab approve,commit,initialize,discover"}, {"task": "Invoke a chaincode method with the specified arguments:", "command": "minifab invoke -n {{chaincode_name}} -p '\"{{method_name}}\", \"{{arg0}}\", \"{{arg1}}\", ...'"}, {"task": "Make a query on the ledger:", "command": "minifab blockquery {{block_number}}"}, {"task": "Quickly run an application:", "command": "minifab apprun -l {{app_programming_language}}"}]}
{"command": "minikube", "tasks": [{"task": "Start the cluster:", "command": "minikube start"}, {"task": "Get the IP address of the cluster:", "command": "minikube ip"}, {"task": "Access a service named my_service exposed via a node port and get the URL:", "command": "minikube service {{my_service}} --url"}, {"task": "Open the Kubernetes dashboard in a browser:", "command": "minikube dashboard"}, {"task": "Stop the running cluster:", "command": "minikube stop"}, {"task": "Delete the cluster:", "command": "minikube delete"}, {"task": "Connect to LoadBalancer services:", "command": "minikube tunnel"}]}
{"command": "miniserve", "tasks": [{"task": "Serve a directory:", "command": "miniserve {{path/to/directory}}"}, {"task": "Serve a single file:", "command": "miniserve {{path/to/file}}"}, {"task": "Serve a directory using HTTP basic authentication:", "command": "miniserve --auth {{username}}:{{password}} {{path/to/directory}}"}]}
{"command": "minisign", "tasks": [{"task": "Generate a new keypair at the default location:", "command": "minisign -G"}, {"task": "Sign a file:", "command": "minisign -Sm {{path/to/file}}"}, {"task": "Sign a file, adding a trusted (signed) and an untrusted (unsigned) comment in the signature:", "command": "minisign -Sm {{path/to/file}} -c \"{{Untrusted comment}}\" -t \"{{Trusted comment}}\""}, {"task": "Verify a file and the trusted comments in its signature using the specified public key file:", "command": "minisign -Vm {{path/to/file}} -p {{path/to/publickey.pub}}"}, {"task": "Verify a file and the trusted comments in its signature, specifying a public key as a Base64 encoded literal:", "command": "minisign -Vm {{path/to/file}} -P \"{{public_key_base64}}\""}]}
{"command": "mitmdump", "tasks": [{"task": "Start a proxy and save all output to a file:", "command": "mitmdump -w {{path/to/file}}"}, {"task": "Filter a saved traffic file to just POST requests:", "command": "mitmdump -nr {{input_filename}} -w {{output_filename}} \"{{~m post}}\""}, {"task": "Replay a saved traffic file:", "command": "mitmdump -nc {{path/to/file}}"}]}
{"command": "mitmproxy", "tasks": [{"task": "Start `mitmproxy` with default settings:", "command": "mitmproxy"}, {"task": "Start `mitmproxy` bound to a custom address and port:", "command": "mitmproxy --listen-host {{ip_address}} --listen-port {{port}}"}, {"task": "Start `mitmproxy` using a script to process traffic:", "command": "mitmproxy --scripts {{path/to/script.py}}"}, {"task": "Export the logs with SSL/TLS master keys to external programs (wireshark, etc.):", "command": "SSLKEYLOGFILE=\"{{path/to/file}}\" mitmproxy"}]}
{"command": "mitmweb", "tasks": [{"task": "Start `mitmweb` with default settings:", "command": "mitmweb"}, {"task": "Start `mitmweb` bound to a custom address and port:", "command": "mitmweb --listen-host {{ip_address}} --listen-port {{port}}"}, {"task": "Start `mitmweb` using a script to process traffic:", "command": "mitmweb --scripts {{path/to/script.py}}"}]}
{"command": "mix", "tasks": [{"task": "Execute a particular file:", "command": "mix run {{my_script.exs}}"}, {"task": "Create a new project:", "command": "mix new {{project_name}}"}, {"task": "Compile project:", "command": "mix compile"}, {"task": "Run project tests:", "command": "mix test"}, {"task": "List all mix commands:", "command": "mix help"}]}
{"command": "mixxx", "tasks": [{"task": "Start the Mixxx GUI in fullscreen:", "command": "mixxx --fullScreen"}, {"task": "Start in safe developer mode to debug a crash:", "command": "mixxx --developer --safeMode"}, {"task": "Debug a malfunction:", "command": "mixxx --debugAssertBreak --developer --loglevel trace"}, {"task": "Start Mixxx using the specified settings file:", "command": "mixxx --resourcePath {{mixxx/res/controllers}} --settingsPath {{path/to/settings-file}}"}, {"task": "Debug a custom controller mapping:", "command": "mixxx --controllerDebug --resourcePath {{path/to/mapping-directory}}"}, {"task": "Show command-line help:", "command": "mixxx --help"}]}
{"command": "mk", "tasks": [{"task": "Call the first target specified in the Mkfile (usually named \"all\"):", "command": "mk"}, {"task": "Call a specific target:", "command": "mk {{target}}"}, {"task": "Call a specific target, executing 4 jobs at a time in parallel:", "command": "NPROC=4 mk {{target}}"}, {"task": "Force mking of a target, even if source files are unchanged:", "command": "mk -w{{target}} {{target}}"}, {"task": "Assume all targets to be out of date. Thus, update `target` and all of its dependencies:", "command": "mk -a {{target}}"}, {"task": "Keep going as far as possible on error:", "command": "mk -k"}]}
{"command": "mkcert", "tasks": [{"task": "Install the local CA in the system trust store:", "command": "mkcert -install"}, {"task": "Generate certificate and private key for a given domain:", "command": "mkcert {{example.org}}"}, {"task": "Generate certificate and private key for multiple domains:", "command": "mkcert {{example.org}} {{myapp.dev}} {{127.0.0.1}}"}, {"task": "Generate wildcard certificate and private key for a given domain and its subdomains:", "command": "mkcert \"{{*.example.it}}\""}, {"task": "Uninstall the local CA:", "command": "mkcert -uninstall"}]}
{"command": "mkdir", "tasks": [{"task": "Create specific directories:", "command": "mkdir {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Create specific directories and their [p]arents if needed:", "command": "mkdir -p {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Create directories with specific permissions:", "command": "mkdir -m {{rwxrw-r--}} {{path/to/directory1 path/to/directory2 ...}}"}]}
{"command": "mkdocs", "tasks": [{"task": "Create a new mkdocs project:", "command": "mkdocs new {{project_name}}"}, {"task": "Serve the project in the current directory using the mkdocs dev-server:", "command": "mkdocs serve"}, {"task": "Build the documentation in the current directory:", "command": "mkdocs build"}, {"task": "Deploy the documentation in the current directory to GitHub pages:", "command": "mkdocs gh-deploy"}]}
{"command": "mkfifo", "tasks": [{"task": "Create a named pipe at a given path:", "command": "mkfifo {{path/to/pipe}}"}]}
{"command": "mkfile", "tasks": [{"task": "Create an empty file of 15 kilobytes:", "command": "mkfile -n {{15k}} {{path/to/file}}"}, {"task": "Create a file of a given size and unit (bytes, KB, MB, GB):", "command": "mkfile -n {{size}}{{b|k|m|g}} {{path/to/file}}"}, {"task": "Create two files of 4 megabytes each:", "command": "mkfile -n {{4m}} {{first_filename}} {{second_filename}}"}]}
{"command": "mktemp", "tasks": [{"task": "Create an empty temporary file and print the absolute path to it:", "command": "mktemp"}, {"task": "Create an empty temporary file with a given suffix and print the absolute path to file:", "command": "mktemp --suffix \"{{.ext}}\""}, {"task": "Create a temporary directory and print the absolute path to it:", "command": "mktemp -d"}]}
{"command": "mktorrent", "tasks": [{"task": "Create a torrent with 2^21 KB as the piece size:", "command": "mktorrent -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"}, {"task": "Create a private torrent with a 2^21 KB piece size:", "command": "mktorrent -p -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"}, {"task": "Create a torrent with a comment:", "command": "mktorrent -c \"{{comment}}\" -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"}, {"task": "Create a torrent with multiple trackers:", "command": "mktorrent -a {{tracker_announce_url,tracker_announce_url_2}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"}, {"task": "Create a torrent with web seed URLs:", "command": "mktorrent -a {{tracker_announce_url}} -w {{web_seed_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"}]}
{"command": "mkvmerge", "tasks": [{"task": "Display information about a Matroska file:", "command": "mkvmerge --identify {{path/to/file.mkv}}"}, {"task": "Extract the audio from track 1 of a specific file:", "command": "mkvextract tracks {{path/to/file.mkv}} {{1}}:{{path/to/output.webm}}"}, {"task": "Extract the subtitle from track 3 of a specific file:", "command": "mkvextract tracks {{path/to/file.mkv}} {{3}}:{{path/to/subs.srt}}"}, {"task": "Add a subtitle track to a file:", "command": "mkvmerge --output {{path/to/output.mkv}} {{path/to/file.mkv}} {{path/to/subs.srt}}"}]}
{"command": "mlr", "tasks": [{"task": "Pretty-print a CSV file in a tabular format:", "command": "mlr --icsv --opprint cat {{example.csv}}"}, {"task": "Receive JSON data and pretty print the output:", "command": "echo '{\"hello\":\"world\"}' | mlr --ijson --opprint cat"}, {"task": "Sort alphabetically on a field:", "command": "mlr --icsv --opprint sort -f {{field}} {{example.csv}}"}, {"task": "Sort in descending numerical order on a field:", "command": "mlr --icsv --opprint sort -nr {{field}} {{example.csv}}"}, {"task": "Convert CSV to JSON, performing calculations and display those calculations:", "command": "mlr --icsv --ojson put '${{newField1}} = ${{oldFieldA}}/${{oldFieldB}}' {{example.csv}}"}, {"task": "Receive JSON and format the output as vertical JSON:", "command": "echo '{\"hello\":\"world\", \"foo\":\"bar\"}' | mlr --ijson --ojson --jvstack cat"}, {"task": "Filter lines of a compressed CSV file treating numbers as strings:", "command": "mlr --prepipe 'gunzip' --csv filter -S '${{fieldName}} =~ \"{{regular_expression}}\"' {{example.csv.gz}}"}]}
{"command": "mm2gv", "tasks": [{"task": "Convert a graph from `mm` to `gv` format:", "command": "mm2gv -o {{output.gv}} {{input.mm}}"}, {"task": "Convert a graph using `stdin` and `stdout`:", "command": "cat {{input.mm}} | mm2gv > {{output.gv}}"}, {"task": "Display help:", "command": "mm2gv -?"}]}
{"command": "mmdc", "tasks": [{"task": "Convert a file to the specified format (automatically determined from the file extension):", "command": "mmdc --input {{input.mmd}} --output {{output.svg}}"}, {"task": "Specify the theme of the chart:", "command": "mmdc --input {{input.mmd}} --output {{output.svg}} --theme {{forest|dark|neutral|default}}"}, {"task": "Specify the background color of the chart (e.g. `lime`, `\"#D8064F\"`, or `transparent`):", "command": "mmdc --input {{input.mmd}} --output {{output.svg}} --backgroundColor {{color}}"}]}
{"command": "mmls", "tasks": [{"task": "Display the partition table stored in an image file:", "command": "mmls {{path/to/image_file}}"}, {"task": "Display the partition table with an additional column for the partition size:", "command": "mmls -B -i {{path/to/image_file}}"}, {"task": "Display the partition table in a split EWF image:", "command": "mmls -i ewf {{image.e01}} {{image.e02}}"}, {"task": "Display nested partition tables:", "command": "mmls -t {{nested_table_type}} -o {{offset}} {{path/to/image_file}}"}]}
{"command": "mmv", "tasks": [{"task": "Rename all files with a certain extension to a different extension:", "command": "mmv \"*{{.old_extension}}\" \"#1{{.new_extension}}\""}, {"task": "Copy `report6part4.txt` to `./french/rapport6partie4.txt` along with all similarly named files:", "command": "mmv -c \"{{report*part*.txt}}\" \"{{./french/rapport#1partie#2.txt}}\""}, {"task": "Append all `.txt` files into one file:", "command": "mmv -a \"{{*.txt}}\" \"{{all.txt}}\""}, {"task": "Convert dates in filenames from \"M-D-Y\" format to \"D-M-Y\" format:", "command": "mmv \"{{[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9].txt}}\" \"{{#3#4-#1#2-#5#6#7#8.txt}}\""}]}
{"command": "mocha", "tasks": [{"task": "Run tests with default configuration or as configured in `mocha.opts`:", "command": "mocha"}, {"task": "Run tests contained at a specific location:", "command": "mocha {{directory/with/tests}}"}, {"task": "Run tests that match a specific grep pattern:", "command": "mocha --grep {{regular_expression}}"}, {"task": "Run tests on changes to JavaScript files in the current directory and once initially:", "command": "mocha --watch"}, {"task": "Run tests with a specific reporter:", "command": "mocha --reporter {{reporter}}"}]}
{"command": "mods", "tasks": [{"task": "Ask a generic question:", "command": "mods \"{{write me a poem about platypuses}}\""}, {"task": "Open settings in your `$EDITOR`:", "command": "mods --settings"}, {"task": "Ask for comments on your code, in markdown format:", "command": "mods --format \"{{what are your thoughts on improving this code?}}\" < {{path/to/file}}"}, {"task": "Ask for help with your documentation, in markdown format:", "command": "mods --format \"{{write a new section to this readme for a feature that sends you a free rabbit if you hit r}}\" < {{README.md}}"}, {"task": "Organize your videos, in markdown format:", "command": "ls {{path/to/videos}} | mods --format \"{{organize these by decade and summarize}}\""}, {"task": "Read through raw HTML and summarize the contents, in markdown format:", "command": "curl \"{{https://api.open-meteo.com/v1/forecast?latitude=29.00&longitude=-90.00&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m}}\" | mods --format \"{{summarize this weather data for a human}}\""}, {"task": "Display help and exit:", "command": "mods --help"}]}
{"command": "moe", "tasks": [{"task": "Open moe and create a backup file (file~) when saving edits:", "command": "moe {{path/to/file}}"}, {"task": "Open a file as read-only:", "command": "moe --read-only {{path/to/file}}"}, {"task": "Edit a file without creating backups:", "command": "moe --no-backup {{path/to/file}}"}, {"task": "Edit a file ignoring case in searches:", "command": "moe --ignore-case {{path/to/file}}"}, {"task": "Save and Quit:", "command": "Ctrl + X"}]}
{"command": "mogrify", "tasks": [{"task": "Resize all JPEG images in the directory to 50% of their initial size:", "command": "mogrify -resize {{50%}} {{*.jpg}}"}, {"task": "Resize all images starting with \"DSC\" to 800x600:", "command": "mogrify -resize {{800x600}} {{DSC*}}"}, {"task": "Convert all PNGs in the directory to JPEG:", "command": "mogrify -format {{jpg}} {{*.png}}"}, {"task": "Halve the saturation of all image files in the current directory:", "command": "mogrify -modulate {{100,50}} {{*}}"}, {"task": "Double the brightness of all image files in the current directory:", "command": "mogrify -modulate {{200}} {{*}}"}]}
{"command": "molecule", "tasks": [{"task": "Create a new Ansible role:", "command": "molecule init role --role-name {{role_name}}"}, {"task": "Run tests:", "command": "molecule test"}, {"task": "Start the instance:", "command": "molecule create"}, {"task": "Configure the instance:", "command": "molecule converge"}, {"task": "List scenarios of the instance:", "command": "molecule matrix converge"}, {"task": "Log in into the instance:", "command": "molecule login"}]}
{"command": "mongo", "tasks": [{"task": "Connect to a local database on the default port (`mongodb://localhost:27017`):", "command": "mongo"}, {"task": "Connect to a database:", "command": "mongo --host {{host}} --port {{port}} {{db_name}}"}, {"task": "Authenticate using the specified username on the specified database (you will be prompted for a password):", "command": "mongo --host {{host}} --port {{port}} --username {{username}} --authenticationDatabase {{authdb_name}} {{db_name}}"}, {"task": "Evaluate a JavaScript expression on a database:", "command": "mongo --eval '{{JSON.stringify(db.foo.findOne())}}' {{db_name}}"}]}
{"command": "mongod", "tasks": [{"task": "Specify the storage directory (default: `/data/db` on Linux and MacOS, `C:\\data\\db` on Windows):", "command": "mongod --dbpath {{path/to/directory}}"}, {"task": "Specify a config file:", "command": "mongod --config {{path/to/file}}"}, {"task": "Specify the port to listen on (default: 27017):", "command": "mongod --port {{port}}"}, {"task": "Specify the database profiling level. 0 is off, 1 is only slow operations, 2 is all (default: 0):", "command": "mongod --profile {{0|1|2}}"}]}
{"command": "mongodump", "tasks": [{"task": "Create a dump of all databases (this will place the files inside a directory called \"dump\"):", "command": "mongodump"}, {"task": "Specify an output location for the dump:", "command": "mongodump --out {{path/to/directory}}"}, {"task": "Create a dump of a given database:", "command": "mongodump --db {{database_name}}"}, {"task": "Create a dump of a given collection within a given database:", "command": "mongodump --collection {{collection_name}} --db {{database_name}}"}, {"task": "Connect to a given host running on a given port, and create a dump:", "command": "mongodump --host {{host}} --port {{port}}"}, {"task": "Create a dump of a given database with a given username; user will be prompted for password:", "command": "mongodump --username {{username}} {{database}} --password"}, {"task": "Create a dump from a specific instance; host, user, password and database will be defined in the connection string:", "command": "mongodump --uri {{connection_string}}"}]}
{"command": "mongoexport", "tasks": [{"task": "Export a collection to `stdout`, formatted as JSON:", "command": "mongoexport --uri={{connection_string}} --collection={{collection_name}}"}, {"task": "Export the documents in the specified collection that match a query to a JSON file:", "command": "mongoexport --db={{database_name}} --collection={{collection_name}} --query=\"{{query_object}}\" --out={{path/to/file.json}}"}, {"task": "Export documents as a JSON array instead of one object per line:", "command": "mongoexport --collection={{collection_name}} --jsonArray"}, {"task": "Export documents to a CSV file:", "command": "mongoexport --collection={{collection_name}} --type={{csv}} --fields=\"{{field1,field2,...}}\" --out={{path/to/file.csv}}"}, {"task": "Export documents that match the query in the specified file to a CSV file, omitting the list of field names on the first line:", "command": "mongoexport --collection={{collection_name}} --type={{csv}} --fields=\"{{field1,field2,...}}\" --queryFile={{path/to/file}} --noHeaderLine --out={{path/to/file.csv}}"}, {"task": "Export documents to `stdout`, formatted as human-readable JSON:", "command": "mongoexport --uri={{mongodb_uri}} --collection={{collection_name}} --pretty"}, {"task": "Display help:", "command": "mongoexport --help"}]}
{"command": "mongoimport", "tasks": [{"task": "Import a JSON file into a specific collection:", "command": "mongoimport --file={{path/to/file.json}} --uri={{mongodb_uri}} --collection={{collection_name}}"}, {"task": "Import a CSV file, using the first line of the file to determine field names:", "command": "mongoimport --type={{csv}} --file={{path/to/file.csv}} --db={{database_name}} --collection={{collection_name}}"}, {"task": "Import a JSON array, using each element as a separate document:", "command": "mongoimport --jsonArray --file={{path/to/file.json}}"}, {"task": "Import a JSON file using a specific mode and a query to match existing documents:", "command": "mongoimport --file={{path/to/file.json}} --mode={{delete|merge|upsert}} --upsertFields=\"{{field1,field2,...}}\""}, {"task": "Import a CSV file, reading field names from a separate CSV file and ignoring fields with empty values:", "command": "mongoimport --type={{csv}} --file={{path/to/file.csv}} --fieldFile={{path/to/field_file.csv}} --ignoreBlanks"}, {"task": "Display help:", "command": "mongoimport --help"}]}
{"command": "mongorestore", "tasks": [{"task": "Import a BSON data dump from a directory to a MongoDB database:", "command": "mongorestore --db {{database_name}} {{path/to/directory}}"}, {"task": "Import a BSON data dump from a directory to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password):", "command": "mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/directory}} --password"}, {"task": "Import a collection from a BSON file to a MongoDB database:", "command": "mongorestore --db {{database_name}} {{path/to/file}}"}, {"task": "Import a collection from a BSON file to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password):", "command": "mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/file}} --password"}]}
{"command": "mongosh", "tasks": [{"task": "Connect to a local database on the default port (`mongodb://localhost:27017`):", "command": "mongosh"}, {"task": "Connect to a database:", "command": "mongosh --host {{host}} --port {{port}} {{db_name}}"}, {"task": "Authenticate using the specified username on the specified database (you will be prompted for a password):", "command": "mongosh --host {{host}} --port {{port}} --username {{username}} --authenticationDatabase {{authdb_name}} {{db_name}}"}, {"task": "Evaluate a JavaScript expression on a database:", "command": "mongosh --eval '{{JSON.stringify(db.foo.findOne())}}' {{db_name}}"}]}
{"command": "monodevelop", "tasks": [{"task": "Start MonoDevelop:", "command": "monodevelop"}, {"task": "Open a specific file:", "command": "monodevelop {{path/to/file}}"}, {"task": "Open a specific file with the caret at a specific position:", "command": "monodevelop {{path/to/file}};{{line_number}};{{column_number}}"}, {"task": "Force opening a new window instead of switching to an existing one:", "command": "monodevelop --new-window"}, {"task": "Disable redirection of `stdout` and `stderr` to a log file:", "command": "monodevelop --no-redirect"}, {"task": "Enable performance monitoring:", "command": "monodevelop --perf-log"}]}
{"command": "monodis", "tasks": [{"task": "Disassemble an assembly to textual CIL:", "command": "monodis {{path/to/assembly.exe}}"}, {"task": "Save the output to a file:", "command": "monodis --output={{path/to/output.il}} {{path/to/assembly.exe}}"}, {"task": "Show information about an assembly:", "command": "monodis --assembly {{path/to/assembly.dll}}"}, {"task": "List the references of an assembly:", "command": "monodis --assemblyref {{path/to/assembly.exe}}"}, {"task": "List all the methods in an assembly:", "command": "monodis --method {{path/to/assembly.exe}}"}, {"task": "Show a list of resources embedded within an assembly:", "command": "monodis --manifest {{path/to/assembly.dll}}"}, {"task": "Extract all the embedded resources to the current directory:", "command": "monodis --mresources {{path/to/assembly.dll}}"}]}
{"command": "monop", "tasks": [{"task": "Show the structure of a Type built-in of the .NET Framework:", "command": "monop {{System.String}}"}, {"task": "List the types in an assembly:", "command": "monop -r:{{path/to/assembly.exe}}"}, {"task": "Show the structure of a Type in a specific assembly:", "command": "monop -r:{{path/to/assembly.dll}} {{Namespace.Path.To.Type}}"}, {"task": "Only show members defined in the specified Type:", "command": "monop -r:{{path/to/assembly.dll}} --only-declared {{Namespace.Path.To.Type}}"}, {"task": "Show private members:", "command": "monop -r:{{path/to/assembly.dll}} --private {{Namespace.Path.To.Type}}"}, {"task": "Hide obsolete members:", "command": "monop -r:{{path/to/assembly.dll}} --filter-obsolete {{Namespace.Path.To.Type}}"}, {"task": "List the other assemblies that a specified assembly references:", "command": "monop -r:{{path/to/assembly.dll}} --refs"}]}
{"command": "montage", "tasks": [{"task": "Tile images into a grid, automatically resizing images larger than the grid cell size:", "command": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} montage.jpg"}, {"task": "Tile images into a grid, automatically calculating the grid cell size from the largest image:", "command": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 montage.jpg"}, {"task": "Set the grid cell size and resize images to fit it before tiling:", "command": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry 640x480+0+0 montage.jpg"}, {"task": "Limit the number of rows and columns in the grid, causing input images to overflow into multiple output montages:", "command": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -tile 2x3 montage_%d.jpg"}, {"task": "Resize and crop images to fill their grid cells before tiling:", "command": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -resize 640x480^ -gravity center -crop 640x480+0+0 montage.jpg"}]}
{"command": "more", "tasks": [{"task": "Open a file:", "command": "more {{path/to/file}}"}, {"task": "Open a file displaying from a specific line:", "command": "more +{{line_number}} {{path/to/file}}"}, {"task": "Display help:", "command": "more --help"}, {"task": "Go to the next page:", "command": "<Space>"}, {"task": "Search for a string (press `n` to go to the next match):", "command": "/{{something}}"}, {"task": "Exit:", "command": "q"}, {"task": "Display help about interactive commands:", "command": "h"}]}
{"command": "moro", "tasks": [{"task": "Invoke `moro` without parameters, to set the current time as the start of the working day:", "command": "moro"}, {"task": "Specify a custom time for the start of the working day:", "command": "moro hi {{09:30}}"}, {"task": "Invoke `moro` without parameters a second time, to set the current time at the end of the working day:", "command": "moro"}, {"task": "Specify a custom time for the end of the working day:", "command": "moro bye {{17:30}}"}, {"task": "Add a note on the current working day:", "command": "moro note {{3 hours on project Foo}}"}, {"task": "Show a report of time logs and notes for the current working day:", "command": "moro report"}, {"task": "Show a report of time logs and notes for all working days on record:", "command": "moro report --all"}]}
{"command": "mosh", "tasks": [{"task": "Connect to a remote server:", "command": "mosh {{username}}@{{remote_host}}"}, {"task": "Connect to a remote server with a specific identity (private key):", "command": "mosh --ssh=\"ssh -i {{path/to/key_file}}\" {{username}}@{{remote_host}}"}, {"task": "Connect to a remote server using a specific port:", "command": "mosh --ssh=\"ssh -p {{2222}}\" {{username}}@{{remote_host}}"}, {"task": "Run a command on a remote server:", "command": "mosh {{remote_host}} -- {{command -with -flags}}"}, {"task": "Select Mosh UDP port (useful when `{{remote_host}}` is behind a NAT):", "command": "mosh -p {{124}} {{username}}@{{remote_host}}"}, {"task": "Usage when `mosh-server` binary is outside standard path:", "command": "mosh --server={{path/to/bin/}}mosh-server {{remote_host}}"}]}
{"command": "mosquitto", "tasks": [{"task": "Start Mosquitto:", "command": "mosquitto"}, {"task": "Specify a configuration file to use:", "command": "mosquitto --config-file {{path/to/file.conf}}"}, {"task": "Listen on a specific port:", "command": "mosquitto --port {{8883}}"}, {"task": "Daemonize by forking into the background:", "command": "mosquitto --daemon"}]}
{"command": "mosquitto_passwd", "tasks": [{"task": "Add a new user to a password file (will prompt to enter the password):", "command": "mosquitto_passwd {{path/to/password_file}} {{username}}"}, {"task": "Create the password file if it doesn't already exist:", "command": "mosquitto_passwd -c {{path/to/password_file}} {{username}}"}, {"task": "Delete the specified username instead:", "command": "mosquitto_passwd -D {{path/to/password_file}} {{username}}"}, {"task": "Upgrade an old plain-text password file to a hashed password file:", "command": "mosquitto_passwd -U {{path/to/password_file}}"}]}
{"command": "mosquitto_pub", "tasks": [{"task": "Publish a temperature value of 32 on the topic `sensors/temperature` to 192.168.1.1 (defaults to `localhost`) with Quality of Service (`QoS`) set to 1:", "command": "mosquitto_pub -h {{192.168.1.1}} -t {{sensors/temperature}} -m {{32}} -q {{1}}"}, {"task": "Publish timestamp and temperature data on the topic `sensors/temperature` to a remote host on a non-standard port:", "command": "mosquitto_pub -h {{192.168.1.1}} -p {{1885}} -t {{sensors/temperature}} -m \"{{1266193804 32}}\""}, {"task": "Publish light switch status and retain the message on the topic `switches/kitchen_lights/status` to a remote host because there may be a long period of time between light switch events:", "command": "mosquitto_pub -r -h \"{{iot.eclipse.org}}\" -t {{switches/kitchen_lights/status}} -m \"{{on}}\""}, {"task": "Send the contents of a file (`data.txt`) as a message and publish it to `sensors/temperature` topic:", "command": "mosquitto_pub -t {{sensors/temperature}} -f {{data.txt}}"}, {"task": "Send the contents of a file (`data.txt`), by reading from `stdin` and send the entire input as a message and publish it to `sensors/temperature` topic:", "command": "mosquitto_pub -t {{sensors/temperature}} -s < {{data.txt}}"}, {"task": "Read newline delimited data from `stdin` as a message and publish it to `sensors/temperature` topic:", "command": "{{echo data.txt}} | mosquitto_pub -t {{sensors/temperature}} -l"}]}
{"command": "mosquitto_sub", "tasks": [{"task": "Subscribe to the topic `sensors/temperature` information with Quality of Service (`QoS`) set to 1. (The default hostname is `localhost` and port 1883):", "command": "mosquitto_sub -t {{sensors/temperature}} -q {{1}}"}, {"task": "Subscribe to all broker status messages publishing on `iot.eclipse.org` port 1885 and print published messages verbosely:", "command": "mosquitto_sub -v -h \"iot.eclipse.org\" -p 1885 -t {{\\$SYS/#}}"}, {"task": "Subscribe to multiple topics matching a given pattern. (+ takes any metric name):", "command": "mosquitto_sub -t {{sensors/machines/+/temperature/+}}"}]}
{"command": "most", "tasks": [{"task": "Open a file:", "command": "most {{path/to/file}}"}, {"task": "Open several files:", "command": "most {{path/to/file1}} {{path/to/file2}}"}, {"task": "Open a file at the first occurrence of \"string\":", "command": "most {{path/to/file}} +/{{string}}"}, {"task": "Move through opened files:", "command": ":O n"}, {"task": "Jump to the 100th line:", "command": "{{100}}j"}, {"task": "Edit current file:", "command": "e"}, {"task": "Split the current window in half:", "command": "<CTRL-x> o"}, {"task": "Exit:", "command": "Q"}]}
{"command": "mount", "tasks": [{"task": "Show all mounted filesystems:", "command": "mount"}, {"task": "Mount a device to a directory:", "command": "mount -t {{filesystem_type}} {{path/to/device_file}} {{path/to/target_directory}}"}, {"task": "Create a specific directory if it does not exist and mount a device to it:", "command": "mount --mkdir {{path/to/device_file}} {{path/to/target_directory}}"}, {"task": "Mount a device to a directory for a specific user:", "command": "mount -o uid={{user_id}},gid={{group_id}} {{path/to/device_file}} {{path/to/target_directory}}"}, {"task": "Mount a CD-ROM device (with the filetype ISO9660) to `/cdrom` (readonly):", "command": "mount -t {{iso9660}} -o ro {{/dev/cdrom}} {{/cdrom}}"}, {"task": "Mount all the filesystem defined in `/etc/fstab`:", "command": "mount -a"}, {"task": "Mount a specific filesystem described in `/etc/fstab` (e.g. `/dev/sda1 /my_drive ext2 defaults 0 2`):", "command": "mount {{/my_drive}}"}, {"task": "Mount a directory to another directory:", "command": "mount --bind {{path/to/old_dir}} {{path/to/new_dir}}"}]}
{"command": "mozillavpn", "tasks": [{"task": "Log in with an interactive prompt:", "command": "mozillavpn login"}, {"task": "Connect to Mozilla VPN:", "command": "mozillavpn activate"}, {"task": "Display the connection status:", "command": "mozillavpn status"}, {"task": "List available servers:", "command": "mozillavpn servers"}, {"task": "Select a specific server:", "command": "mozillavpn select {{server_name}}"}, {"task": "Disconnect from Mozilla VPN:", "command": "mozillavpn deactivate"}, {"task": "Log out:", "command": "mozillavpn logout"}, {"task": "Display help for a subcommand:", "command": "mozillavpn {{subcommand}} --help"}]}
{"command": "mp3info", "tasks": [{"task": "Show all ID3v1 tags of a specific MP3 file:", "command": "mp3info {{path/to/file.mp3}}"}, {"task": "Edit ID3v1 tags interactively:", "command": "mp3info -i {{path/to/file.mp3}}"}, {"task": "Set values for ID3v1 tags in a specific MP3 file:", "command": "mp3info -a \"{{artist_name}}\" -t \"{{song_title}}\" -l \"{{album_title}}\" -y {{year}} -c \"{{comment_text}}\" {{path/to/file.mp3}}"}, {"task": "Set the number of the track in the album for a specific MP3 file:", "command": "mp3info -n {{track_number}} {{path/to/file.mp3}}"}, {"task": "Print a list of valid genres and their numeric codes:", "command": "mp3info -G"}, {"task": "Set the music genre for a specific MP3 file:", "command": "mp3info -g {{genre_number}} {{path/to/file.mp3}}"}]}
{"command": "mp4box", "tasks": [{"task": "Display information about an existing MP4 file:", "command": "mp4box -info {{path/to/file}}"}, {"task": "Add an SRT subtitle file into an MP4 file:", "command": "mp4box -add {{input_subs.srt}}:lang=eng -add {{input.mp4}} {{output.mp4}}"}, {"task": "Combine audio from one file and video from another:", "command": "mp4box -add {{input1.mp4}}#audio -add {{input2.mp4}}#video {{output.mp4}}"}]}
{"command": "mpc", "tasks": [{"task": "Toggle play/pause:", "command": "mpc toggle"}, {"task": "Stop playing:", "command": "mpc stop"}, {"task": "Show information about the currently playing song:", "command": "mpc status"}, {"task": "Play next song:", "command": "mpc next"}, {"task": "Play previous song:", "command": "mpc prev"}, {"task": "Forward or rewind the currently playing song:", "command": "mpc [+-]{{seconds}}"}]}
{"command": "mpd", "tasks": [{"task": "Start MPD:", "command": "mpd"}, {"task": "Start MPD but don't read from the configuration file:", "command": "mpd --no-config"}, {"task": "Start MPD and don't detach it from the console:", "command": "mpd --no-daemon"}, {"task": "Kill the currently running MPD session:", "command": "mpd --kill"}]}
{"command": "mpg321", "tasks": [{"task": "Play an audio source exactly N times (N=0 means forever):", "command": "mpg321 -l {{N}} {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}"}, {"task": "Play a directory recursively:", "command": "mpg321 -B {{path/to/directory}}"}, {"task": "Enable Basic Keys ( `*` or `/` - Increase or decrease volume, `n` - Skip song, `m` - Mute/unmute.) while playing:", "command": "mpg321 -K {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}"}, {"task": "Play files randomly until interrupted:", "command": "mpg321 -Z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}"}, {"task": "Shuffle the files before playing them once:", "command": "mpg321 -z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}"}, {"task": "Play all files in the current directory and subdirectories, randomly (until interrupted), with Basic Keys enabled:", "command": "mpg321 -B -Z -K ."}]}
{"command": "mplayer", "tasks": [{"task": "Play the specified file or URL:", "command": "mplayer {{path/to/file|url}}"}, {"task": "Play multiple files:", "command": "mplayer {{path/to/file1 path/to/file2 ...}}"}, {"task": "Play a specific file repeatedly:", "command": "mplayer -loop {{0}} {{path/to/file}}"}, {"task": "Pause playback:", "command": "<Space>"}, {"task": "Quit mplayer:", "command": "<Escape>"}, {"task": "Seek backward or forward 10 seconds:", "command": "<Left> or <Right>"}]}
{"command": "mpv", "tasks": [{"task": "Play a video or audio file:", "command": "mpv {{path/to/file}}"}, {"task": "Play a video or audio file from a URL:", "command": "mpv '{{https://www.youtube.com/watch?v=dQw4w9WgXcQ}}'"}, {"task": "Jump backward/forward 5 seconds:", "command": "LEFT <or> RIGHT"}, {"task": "Jump backward/forward 1 minute:", "command": "DOWN <or> UP"}, {"task": "Decrease or increase playback speed by 10%:", "command": "[ <or> ]"}, {"task": "Play a file at a specified speed (0.01 to 100, default 1):", "command": "mpv --speed {{speed}} {{path/to/file}}"}, {"task": "Play a file using a profile defined in the `mpv.conf` file:", "command": "mpv --profile {{profile_name}} {{path/to/file}}"}, {"task": "Display the output of webcam or other video input device:", "command": "mpv /dev/{{video0}}"}]}
{"command": "mr", "tasks": [{"task": "Register a repository:", "command": "mr register"}, {"task": "Update repositories in 5 concurrent jobs:", "command": "mr -j{{5}} update"}, {"task": "Print the status of all repositories:", "command": "mr status"}, {"task": "Checkout all repositories to the latest version:", "command": "mr checkout"}]}
{"command": "msbuild", "tasks": [{"task": "Build the first project file in the current directory:", "command": "msbuild"}, {"task": "Build a specific project file:", "command": "msbuild {{path/to/project_file}}"}, {"task": "Set one or more semicolon-separated targets to build:", "command": "msbuild {{path/to/project_file}} /target:{{targets}}"}, {"task": "Set one or more semicolon-separated properties:", "command": "msbuild {{path/to/project_file}} /property:{{name=value}}"}, {"task": "Set the build tools version to use:", "command": "msbuild {{path/to/project_file}} /toolsversion:{{version}}"}, {"task": "Display detailed information at the end of the log about how the project was configured:", "command": "msbuild {{path/to/project_file}} /detailedsummary"}, {"task": "Display detailed help information:", "command": "msbuild /help"}]}
{"command": "mscore", "tasks": [{"task": "View documentation for the original command:", "command": "tldr musescore"}]}
{"command": "msfvenom", "tasks": [{"task": "List payloads:", "command": "msfvenom -l payloads"}, {"task": "List formats:", "command": "msfvenom -l formats"}, {"task": "Show payload options:", "command": "msfvenom -p {{payload}} --list-options"}, {"task": "Create an ELF binary with a reverse TCP handler:", "command": "msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f elf -o {{path/to/binary}}"}, {"task": "Create an EXE binary with a reverse TCP handler:", "command": "msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f exe -o {{path/to/binary.exe}}"}, {"task": "Create a raw bash with a reverse TCP handler:", "command": "msfvenom -p cmd/unix/reverse_bash LHOST={{local_ip}} LPORT={{local_port}} -f raw"}]}
{"command": "msmtp", "tasks": [{"task": "Send an email using the default account configured in `~/.msmtprc`:", "command": "echo \"{{Hello world}}\" | msmtp {{to@example.org}}"}, {"task": "Send an email using a specific account configured in `~/.msmtprc`:", "command": "echo \"{{Hello world}}\" | msmtp --account={{account_name}} {{to@example.org}}"}, {"task": "Send an email without a configured account. The password should be specified in the `~/.msmtprc` file:", "command": "echo \"{{Hello world}}\" | msmtp --host={{localhost}} --port={{999}} --from={{from@example.org}} {{to@example.org}}"}]}
{"command": "mtr", "tasks": [{"task": "Traceroute to a host and continuously ping all intermediary hops:", "command": "mtr {{example.com}}"}, {"task": "Disable IP address and host name mapping:", "command": "mtr --no-dns {{example.com}}"}, {"task": "Generate output after pinging each hop 10 times:", "command": "mtr --report-wide {{example.com}}"}, {"task": "Force IP IPv4 or IPV6:", "command": "mtr -4 {{example.com}}"}, {"task": "Wait for a given time (in seconds) before sending another packet to the same hop:", "command": "mtr --interval {{10}} {{example.com}}"}, {"task": "Display the Autonomous System Number (ASN) for each hop:", "command": "mtr --aslookup {{example.com}}"}, {"task": "Display both IP address and reverse DNS name:", "command": "mtr --show-ips {{example.com}}"}]}
{"command": "mu", "tasks": [{"task": "Initialize the email database, optionally specifying the Maildir directory and email addresses:", "command": "mu init --maildir={{path/to/directory}} --my-address={{name@example.com}}"}, {"task": "Index new emails:", "command": "mu index"}, {"task": "Find messages using a specific keyword (in message body, subject, sender, ...):", "command": "mu find {{keyword}}"}, {"task": "Find messages to Alice with subject `jellyfish` containing the words `apples` or `oranges`:", "command": "mu find to:{{alice}} subject:{{jellyfish}} {{apples}} OR {{oranges}}"}, {"task": "Find unread messages about words starting with `soc` (the `*` only works at the end of the search term) in the Sent Items folder:", "command": "mu find 'subject:{{soc}}*' flag:{{unread}} maildir:'/{{Sent Items}}'"}, {"task": "Find messages from Sam with attached images, between 2 KiB and 2 MiB, written in 2021:", "command": "mu find 'mime:{{image/*}} size:{{2k..2m}} date:{{20210101..20211231}} from:{{sam}}"}, {"task": "List contacts with `Bob` in either name or email address:", "command": "mu cfind {{Bob}}"}]}
{"command": "mullvad", "tasks": [{"task": "Link your mullvad account with the specified account number:", "command": "mullvad account set {{account_number}}"}, {"task": "Enable LAN access while VPN is on:", "command": "mullvad lan set allow"}, {"task": "Establish the VPN tunnel:", "command": "mullvad connect"}, {"task": "Check status of VPN tunnel:", "command": "mullvad status"}]}
{"command": "multipass", "tasks": [{"task": "List the aliases that can be used to launch an instance:", "command": "multipass find"}, {"task": "Launch a new instance, set its name and use a cloud-init configuration file:", "command": "multipass launch -n {{instance_name}} --cloud-init {{configuration_file}}"}, {"task": "List all the created instances and some of their properties:", "command": "multipass list"}, {"task": "Start a specific instance by name:", "command": "multipass start {{instance_name}}"}, {"task": "Show the properties of an instance:", "command": "multipass info {{instance_name}}"}, {"task": "Open a shell prompt on a specific instance by name:", "command": "multipass shell {{instance_name}}"}, {"task": "Delete an instance by name:", "command": "multipass delete {{instance_name}}"}, {"task": "Mount a directory into a specific instance:", "command": "multipass mount {{path/to/local/directory}} {{instance_name}}:{{path/to/target/directory}}"}]}
{"command": "multitail", "tasks": [{"task": "Tail all files matching a pattern in a single stream:", "command": "multitail -Q 1 '{{pattern}}'"}, {"task": "Tail all files in a directory in a single stream:", "command": "multitail -Q 1 '{{path/to/directory}}/*'"}, {"task": "Automatically add new files to a window:", "command": "multitail -Q {{pattern}}"}, {"task": "Show 5 logfiles while merging 2 and put them in 2 columns with only one in the left column:", "command": "multitail -s 2 -sn 1,3 {{mergefile}} -I {{file1}} {{file2}} {{file3}} {{file4}}"}]}
{"command": "mumble", "tasks": [{"task": "Open Mumble:", "command": "mumble"}, {"task": "Open Mumble and immediately connect to a server:", "command": "mumble mumble://{{username}}@{{example.com}}"}, {"task": "Open Mumble and immediately connect to a password protected server:", "command": "mumble mumble://{{username}}:{{password}}@{{example.com}}"}, {"task": "Mute/unmute the microphone in a running Mumble instance:", "command": "mumble rpc {{mute|unmute}}"}, {"task": "Mute/unmute the microphone and the audio output of Mumble:", "command": "mumble rpc {{deaf|undeaf}}"}]}
{"command": "mupdf", "tasks": [{"task": "Open a PDF on the first page:", "command": "mupdf {{path/to/file}}"}, {"task": "Open a PDF on page 3:", "command": "mupdf {{path/to/file}} {{3}}"}, {"task": "Open a password secured PDF:", "command": "mupdf -p {{password}} {{path/to/file}}"}, {"task": "Open a PDF with an initial zoom level, specified as DPI, of 72:", "command": "mupdf -r {{72}} {{path/to/file}}"}, {"task": "Open a PDF with inverted color:", "command": "mupdf -I {{path/to/file}}"}, {"task": "Open a PDF tinted red #FF0000 (hexadecimal color syntax RRGGBB):", "command": "mupdf -C {{FF0000}}"}, {"task": "Open a PDF without anti-aliasing (0 = off, 8 = best):", "command": "mupdf -A {{0}}"}]}
{"command": "musescore", "tasks": [{"task": "Use a specific audio driver:", "command": "musescore --audio-driver {{jack|alsa|portaudio|pulse}}"}, {"task": "Set the MP3 output bitrate in kbit/s:", "command": "musescore --bitrate {{bitrate}}"}, {"task": "Start MuseScore in debug mode:", "command": "musescore --debug"}, {"task": "Enable experimental features, such as layers:", "command": "musescore --experimental"}, {"task": "Export the given file to the specified output file. The file type depends on the given extension:", "command": "musescore --export-to {{output_file}} {{input_file}}"}, {"task": "Print a diff between the given scores:", "command": "musescore --diff {{path/to/file1}} {{path/to/file2}}"}, {"task": "Specify a MIDI import operations file:", "command": "musescore --midi-operations {{path/to/file}}"}]}
{"command": "musl-gcc", "tasks": [{"task": "View documentation for `gcc`:", "command": "tldr gcc"}]}
{"command": "mutagen", "tasks": [{"task": "Start a synchronization session between a local directory and a remote host:", "command": "mutagen sync create --name={{session_name}} {{/path/to/local/directory/}} {{user}}@{{host}}:{{/path/to/remote/directory/}}"}, {"task": "Start a synchronization session between a local directory and a Docker container:", "command": "mutagen sync create --name={{session_name}} {{/path/to/local/directory/}} docker://{{user}}@{{container_name}}{{/path/to/remote/directory/}}"}, {"task": "Stop a running session:", "command": "mutagen sync terminate {{session_name}}"}, {"task": "Start a project:", "command": "mutagen project start"}, {"task": "Stop a project:", "command": "mutagen project terminate"}, {"task": "List running sessions for the current project:", "command": "mutagen project list"}]}
{"command": "mutool", "tasks": [{"task": "Convert pages 1-10 into 10 PNGs (Note: `%nd` in the output placeholder must be replaced with a print modifier like `%d` or `%2d`):", "command": "mutool convert -o {{path/to/output%nd.png}} {{path/to/input.pdf}} {{1-10}}"}, {"task": "Convert pages 2, 3 and 5 of a PDF into text in `stdout`:", "command": "mutool draw -F {{txt}} {{path/to/input.pdf}} {{2,3,5}}"}, {"task": "Concatenate multiple PDF files:", "command": "mutool merge -o {{path/to/output.pdf}} {{path/to/input1.pdf path/to/input2.pdf ...}}"}, {"task": "Query information about all content embedded in a PDF:", "command": "mutool info {{path/to/input.pdf}}"}, {"task": "Extract all images, fonts and resources embedded in a PDF out into the current directory:", "command": "mutool extract {{path/to/input.pdf}}"}, {"task": "Print the outline (table of contents) of a PDF:", "command": "mutool show {{path/to/input.pdf}} outline"}]}
{"command": "mutt", "tasks": [{"task": "Open the specified mailbox:", "command": "mutt -f {{mailbox}}"}, {"task": "Send an email and specify a subject and a cc recipient:", "command": "mutt -s {{subject}} -c {{cc@example.com}} {{recipient@example.com}}"}, {"task": "Send an email with files attached:", "command": "mutt -a {{file1}} {{file2}} -- {{recipient@example.com}}"}, {"task": "Specify a file to include as the message body:", "command": "mutt -i {{path/to/file}} {{recipient@example.com}}"}, {"task": "Specify a draft file containing the header and the body of the message, in RFC 5322 format:", "command": "mutt -H {{path/to/file}} {{recipient@example.com}}"}]}
{"command": "mv", "tasks": [{"task": "Rename a file or directory when the target is not an existing directory:", "command": "mv {{path/to/source}} {{path/to/target}}"}, {"task": "Move a file or directory into an existing directory:", "command": "mv {{path/to/source}} {{path/to/existing_directory}}"}, {"task": "Move multiple files into an existing directory, keeping the filenames unchanged:", "command": "mv {{path/to/source1 path/to/source2 ...}} {{path/to/existing_directory}}"}, {"task": "Do not prompt for confirmation before overwriting existing files:", "command": "mv -f {{path/to/source}} {{path/to/target}}"}, {"task": "Prompt for confirmation before overwriting existing files, regardless of file permissions:", "command": "mv -i {{path/to/source}} {{path/to/target}}"}, {"task": "Do not overwrite existing files at the target:", "command": "mv -n {{path/to/source}} {{path/to/target}}"}, {"task": "Move files in verbose mode, showing files after they are moved:", "command": "mv -v {{path/to/source}} {{path/to/target}}"}]}
{"command": "mvn", "tasks": [{"task": "Compile a project:", "command": "mvn compile"}, {"task": "Compile and package the compiled code in its distributable format, such as a `jar`:", "command": "mvn package"}, {"task": "Compile and package, skipping unit tests:", "command": "mvn package -DskipTests"}, {"task": "Install the built package in local maven repository. (This will invoke the compile and package commands too):", "command": "mvn install"}, {"task": "Delete build artifacts from the target directory:", "command": "mvn clean"}, {"task": "Do a clean and then invoke the package phase:", "command": "mvn clean package"}, {"task": "Clean and then package the code with a given build profile:", "command": "mvn clean -P{{profile}} package"}, {"task": "Run a class with a main method:", "command": "mvn exec:java -Dexec.mainClass=\"{{com.example.Main}}\" -Dexec.args=\"{{arg1 arg2}}\""}]}
{"command": "mycli", "tasks": [{"task": "Connect to a local database on port 3306, using the current user's username:", "command": "mycli {{database_name}}"}, {"task": "Connect to a database (user will be prompted for a password):", "command": "mycli -u {{username}} {{database_name}}"}, {"task": "Connect to a database on another host:", "command": "mycli -h {{database_host}} -P {{port}} -u {{username}} {{database_name}}"}]}
{"command": "mysql", "tasks": [{"task": "Connect to a database:", "command": "mysql {{database_name}}"}, {"task": "Connect to a database, user will be prompted for a password:", "command": "mysql -u {{user}} --password {{database_name}}"}, {"task": "Connect to a database on another host:", "command": "mysql -h {{database_host}} {{database_name}}"}, {"task": "Connect to a database through a Unix socket:", "command": "mysql --socket {{path/to/socket.sock}}"}, {"task": "Execute SQL statements in a script file (batch file):", "command": "mysql -e \"source {{filename.sql}}\" {{database_name}}"}, {"task": "Restore a database from a backup created with `mysqldump` (user will be prompted for a password):", "command": "mysql --user {{user}} --password {{database_name}} < {{path/to/backup.sql}}"}, {"task": "Restore all databases from a backup (user will be prompted for a password):", "command": "mysql --user {{user}} --password < {{path/to/backup.sql}}"}]}
{"command": "mysqlbinlog", "tasks": [{"task": "Show events from a specific binary log file:", "command": "mysqlbinlog {{path/to/binlog}}"}, {"task": "Show entries from a binary log for a specific database:", "command": "mysqlbinlog --database {{database_name}} {{path/to/binlog}}"}, {"task": "Show events from a binary log between specific dates:", "command": "mysqlbinlog --start-datetime='{{2022-01-01 01:00:00}}' --stop-datetime='{{2022-02-01 01:00:00}}' {{path/to/binlog}}"}, {"task": "Show events from a binary log between specific positions:", "command": "mysqlbinlog --start-position={{100}} --stop-position={{200}} {{path/to/binlog}}"}, {"task": "Show binary log from a MySQL server on the given host:", "command": "mysqlbinlog --host={{hostname}} {{path/to/binlog}}"}]}
{"command": "mysqlcheck", "tasks": [{"task": "Check a table:", "command": "mysqlcheck --check {{table}}"}, {"task": "Check a table and provide credentials to access it:", "command": "mysqlcheck --check {{table}} --user {{username}} --password {{password}}"}, {"task": "Repair a table:", "command": "mysqlcheck --repair {{table}}"}, {"task": "Optimize a table:", "command": "mysqlcheck --optimize {{table}}"}]}
{"command": "mysqld", "tasks": [{"task": "Start the MySQL database server:", "command": "mysqld"}, {"task": "Start the server, printing error messages to the console:", "command": "mysqld --console"}, {"task": "Start the server, saving logging output to a custom log file:", "command": "mysqld --log={{path/to/file.log}}"}, {"task": "Print the default arguments and their values and exit:", "command": "mysqld --print-defaults"}, {"task": "Start the server, reading arguments and values from a file:", "command": "mysqld --defaults-file={{path/to/file}}"}, {"task": "Start the server and listen on a custom port:", "command": "mysqld --port={{port}}"}, {"task": "Show all help options and exit:", "command": "mysqld --verbose --help"}]}
{"command": "mysqldump", "tasks": [{"task": "Create a backup (user will be prompted for a password):", "command": "mysqldump --user {{user}} --password {{database_name}} --result-file={{path/to/file.sql}}"}, {"task": "Backup a specific table redirecting the output to a file (user will be prompted for a password):", "command": "mysqldump --user {{user}} --password {{database_name}} {{table_name}} > {{path/to/file.sql}}"}, {"task": "Backup all databases redirecting the output to a file (user will be prompted for a password):", "command": "mysqldump --user {{user}} --password --all-databases > {{path/to/file.sql}}"}, {"task": "Backup all databases from a remote host, redirecting the output to a file (user will be prompted for a password):", "command": "mysqldump --host={{ip_or_hostname}} --user {{user}} --password --all-databases > {{path/to/file.sql}}"}]}
{"command": "mytop", "tasks": [{"task": "Start `mytop`:", "command": "mytop"}, {"task": "Connect with a specified username and password:", "command": "mytop -u {{user}} -p {{password}}"}, {"task": "Connect with a specified username (the user will be prompted for a password):", "command": "mytop -u {{user}} --prompt"}, {"task": "Do not show any idle (sleeping) threads:", "command": "mytop -u {{user}} -p {{password}} --noidle"}]}
{"command": "n", "tasks": [{"task": "Install a given version of node. If the version is already installed, it will be activated:", "command": "n {{version}}"}, {"task": "Display installed versions and interactively activate one of them:", "command": "n"}, {"task": "Remove a version:", "command": "n rm {{version}}"}, {"task": "Execute a file with a given version:", "command": "n use {{version}} {{file.js}}"}, {"task": "Output binary path for a version:", "command": "n bin {{version}}"}]}
{"command": "nano", "tasks": [{"task": "Start the editor:", "command": "nano"}, {"task": "Start the editor without using configuration files:", "command": "nano --ignorercfiles"}, {"task": "Open specific files, moving to the next file when closing the previous one:", "command": "nano {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open a file and position the cursor at a specific line and column:", "command": "nano +{{line}},{{column}} {{path/to/file}}"}, {"task": "Open a file and enable soft wrapping:", "command": "nano --softwrap {{path/to/file}}"}, {"task": "Open a file and indent new lines to the previous line's indentation:", "command": "nano --autoindent {{path/to/file}}"}, {"task": "Open a file and create a backup file (`path/to/file~`) on save:", "command": "nano --backup {{path/to/file}}"}]}
{"command": "nasm", "tasks": [{"task": "Assemble `source.asm` into a binary file `source`, in the (default) raw binary format:", "command": "nasm {{source.asm}}"}, {"task": "Assemble `source.asm` into a binary file `output_file`, in the specified format:", "command": "nasm -f {{format}} {{source.asm}} -o {{output_file}}"}, {"task": "List valid output formats (along with basic nasm help):", "command": "nasm -hf"}, {"task": "Assemble and generate an assembly listing file:", "command": "nasm -l {{list_file}} {{source.asm}}"}, {"task": "Add a directory (must be written with trailing slash) to the include file search path before assembling:", "command": "nasm -i {{path/to/include_dir/}} {{source.asm}}"}]}
{"command": "nativefier", "tasks": [{"task": "Make a desktop app for a website:", "command": "nativefier {{url}}"}, {"task": "Create a desktop app with a custom name:", "command": "nativefier --name {{name}} {{url}}"}, {"task": "Use a custom icon, should be a PNG:", "command": "nativefier --icon {{path/to/icon.png}} {{url}}"}]}
{"command": "nbtscan", "tasks": [{"task": "Scan a network for NetBIOS names:", "command": "nbtscan {{192.168.0.1/24}}"}, {"task": "Scan a single IP address:", "command": "nbtscan {{192.168.0.1}}"}, {"task": "Display verbose output:", "command": "nbtscan -v {{192.168.0.1/24}}"}, {"task": "Display output in `/etc/hosts` format:", "command": "nbtscan -e {{192.168.0.1/24}}"}, {"task": "Read IP addresses/networks to scan from a file:", "command": "nbtscan -f {{path/to/file.txt}}"}]}
{"command": "nc", "tasks": [{"task": "Start a listener on the specified TCP port and send a file into it:", "command": "nc -l -p {{port}} < {{filename}}"}, {"task": "Connect to a target listener on the specified port and receive a file from it:", "command": "nc {{host}} {{port}} > {{received_filename}}"}, {"task": "Scan the open TCP ports of a specified host:", "command": "nc -v -z -w {{timeout_in_seconds}} {{host}} {{start_port}}-{{end_port}}"}, {"task": "Start a listener on the specified TCP port and provide your local shell access to the connected party (this is dangerous and can be abused):", "command": "nc -l -p {{port}} -e {{shell_executable}}"}, {"task": "Connect to a target listener and provide your local shell access to the remote party (this is dangerous and can be abused):", "command": "nc {{host}} {{port}} -e {{shell_executable}}"}, {"task": "Act as a proxy and forward data from a local TCP port to the given remote host:", "command": "nc -l -p {{local_port}} | nc {{host}} {{remote_port}}"}, {"task": "Send an HTTP GET request:", "command": "echo -e \"GET / HTTP/1.1\\nHost: {{host}}\\n\\n\" | nc {{host}} 80"}]}
{"command": "ncc", "tasks": [{"task": "Bundle a Node.js application:", "command": "ncc build {{path/to/file.js}}"}, {"task": "Bundle and minify a Node.js application:", "command": "ncc build --minify {{path/to/file.js}}"}, {"task": "Bundle and minify a Node.js application and generate source maps:", "command": "ncc build --source-map {{path/to/file.js}}"}, {"task": "Automatically recompile on changes to source files:", "command": "ncc build --watch {{path/to/file.js}}"}, {"task": "Bundle a Node.js application into a temporary directory and run it for testing:", "command": "ncc run {{path/to/file.js}}"}, {"task": "Clean the `ncc` cache:", "command": "ncc clean cache"}]}
{"command": "ncdu", "tasks": [{"task": "Analyze the current working directory:", "command": "ncdu"}, {"task": "Colorize output:", "command": "ncdu --color {{dark|off}}"}, {"task": "Analyze a given directory:", "command": "ncdu {{path/to/directory}}"}, {"task": "Save results to a file:", "command": "ncdu -o {{path/to/file}}"}, {"task": "Exclude files that match a pattern, argument can be given multiple times to add more patterns:", "command": "ncdu --exclude '{{*.txt}}'"}]}
{"command": "ncmpcpp", "tasks": [{"task": "Connect to a music player daemon on a given host and port:", "command": "ncmpcpp --host {{ip}} --port {{port}}"}, {"task": "Display metadata of the current song to console:", "command": "ncmpcpp --current-song"}, {"task": "Use a specified configuration file:", "command": "ncmpcpp --config {{file}}"}, {"task": "Use a different set of key bindings from a file:", "command": "ncmpcpp --bindings {{file}}"}]}
{"command": "ncu", "tasks": [{"task": "List outdated dependencies in the current directory:", "command": "ncu"}, {"task": "List outdated global npm packages:", "command": "ncu -g"}, {"task": "Upgrade all dependencies in the current directory:", "command": "ncu -u"}, {"task": "Interactively upgrade dependencies in the current directory:", "command": "ncu -i"}, {"task": "Display help:", "command": "ncu -h"}]}
{"command": "neato", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "neato -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "neato -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "neato -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{graph {this -- that} }}\" | neato -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "neato -?"}]}
{"command": "ned", "tasks": [{"task": "Recursively search starting in the current directory, ignoring case:", "command": "ned --ignore-case --recursive '{{^[dl]og}}' {{.}}"}, {"task": "Search always showing colored output:", "command": "ned --colors '{{^[dl]og}}' {{.}}"}, {"task": "Search never showing colored output:", "command": "ned --colors=never '{{^[dl]og}}' {{.}}"}, {"task": "Search ignoring certain files:", "command": "ned --recursive --exclude '{{*.htm}}' '{{^[dl]og}}' {{.}}"}, {"task": "Simple replace:", "command": "ned '{{dog}}' --replace '{{cat}}' {{.}}"}, {"task": "Replace using numbered group references:", "command": "ned '{{the ([a-z]+) dog and the ([a-z]+) dog}}' --replace '{{the $2 dog and the $1 dog}}' {{.}}"}, {"task": "Replace changing case:", "command": "ned '{{([a-z]+) dog}}' --case-replacements --replace '{{\\U$1\\E! dog}}' --stdout {{.}}"}, {"task": "Preview results of a find and replace without updating the target files:", "command": "ned '{{^[sb]ad}}' --replace '{{happy}}' --stdout {{.}}"}]}
{"command": "neofetch", "tasks": [{"task": "Return the default config, and create it if it's the first time the program runs:", "command": "neofetch"}, {"task": "Trigger an info line from appearing in the output, where 'infoname' is the function name in the config file, e.g. memory:", "command": "neofetch --{{enable|disable}} {{infoname}}"}, {"task": "Hide/Show OS architecture:", "command": "neofetch --os_arch {{on|off}}"}, {"task": "Enable/Disable CPU brand in output:", "command": "neofetch --cpu_brand {{on|off}}"}]}
{"command": "neomutt", "tasks": [{"task": "Open the specified mailbox:", "command": "neomutt -f {{path/to/mailbox}}"}, {"task": "Start writing an email and specify a subject and a `cc` recipient:", "command": "neomutt -s \"{{subject}}\" -c {{cc@example.com}} {{recipient@example.com}}"}, {"task": "Send an email with files attached:", "command": "neomutt -a {{path/to/file1 path/to/file2 ...}} -- {{recipient@example.com}}"}, {"task": "Specify a file to include as the message body:", "command": "neomutt -i {{path/to/file}} {{recipient@example.com}}"}, {"task": "Specify a draft file containing the header and the body of the message, in RFC 5322 format:", "command": "neomutt -H {{path/to/file}} {{recipient@example.com}}"}]}
{"command": "nest", "tasks": [{"task": "Display information about installed nest version:", "command": "nest info"}, {"task": "Create a new NestJS project in a directory of the same name:", "command": "nest new {{project_name}}"}, {"task": "Build a specific NestJS project:", "command": "nest build {{project_name}}"}, {"task": "Run a specific NestJS project:", "command": "nest start {{project_name}}"}, {"task": "Import a library into the current NestJS project:", "command": "nest add {{library_name}}"}]}
{"command": "netcat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nc"}]}
{"command": "netlify", "tasks": [{"task": "Log in to the Netlify account:", "command": "netlify login"}, {"task": "Deploy the contents of a directory to Netlify:", "command": "netlify deploy"}, {"task": "Configure continuous deployment for a new or an existing site:", "command": "netlify init"}, {"task": "Start a local dev server:", "command": "netlify dev"}]}
{"command": "netstat", "tasks": [{"task": "List all ports:", "command": "netstat --all"}, {"task": "List all listening ports:", "command": "netstat --listening"}, {"task": "List listening TCP ports:", "command": "netstat --tcp"}, {"task": "Display PID and program names:", "command": "netstat --program"}, {"task": "List information continuously:", "command": "netstat --continuous"}, {"task": "List routes and do not resolve IP addresses to hostnames:", "command": "netstat --route --numeric"}, {"task": "List listening TCP and UDP ports (+ user and process if you're root):", "command": "netstat --listening --program --numeric --tcp --udp --extend"}]}
{"command": "newman", "tasks": [{"task": "Run a collection (from a file):", "command": "newman run {{path/to/collection.json}}"}, {"task": "Run a collection (from a URL):", "command": "newman run {{https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv}}"}]}
{"command": "newsboat", "tasks": [{"task": "First import feed URLs from an OPML file:", "command": "newsboat -i {{my-feeds.xml}}"}, {"task": "Alternatively, add feeds manually:", "command": "echo {{http://example.com/path/to/feed}} >> \"${HOME}/.newsboat/urls\""}, {"task": "Start Newsboat and refresh all feeds on startup:", "command": "newsboat -r"}, {"task": "Execute a space-separated list of commands in non-interactive mode:", "command": "newsboat -x {{reload print-unread ...}}"}, {"task": "See keyboard shortcuts (the most relevant are visible in the status line):", "command": "?"}]}
{"command": "next", "tasks": [{"task": "Start the current application in development mode:", "command": "next dev"}, {"task": "Start the current application and listen on a specific port:", "command": "next dev --port {{port}}"}, {"task": "Build the current application optimized for production:", "command": "next build"}, {"task": "Start the compiled application in production mode:", "command": "next start"}, {"task": "Start the compiled application and listen on a specific port:", "command": "next start --port {{port}}"}, {"task": "Export the current application to static HTML pages:", "command": "next export"}, {"task": "Display the Next.js telemetry status:", "command": "next telemetry"}, {"task": "Display help for a subcommand:", "command": "next {{build|dev|export|start|telemetry}} --help"}]}
{"command": "nextclade", "tasks": [{"task": "Create a TSV report, auto-downloading the latest [d]ataset:", "command": "nextclade run -d {{dataset_name}} {{path/to/fasta}} -t {{path/to/output_tsv}}"}, {"task": "List all available datasets:", "command": "nextclade dataset list"}, {"task": "Download the latest SARS-CoV-2 dataset:", "command": "nextclade dataset get --name sars-cov-2 --output-dir {{path/to/directory}}"}, {"task": "Use a downloaded [D]ataset, producing all [O]utputs:", "command": "nextclade run -D {{path/to/dataset_dir}} -O {{path/to/output_dir}} {{path/to/dataset_dir/sequences.fasta}}"}, {"task": "Run on multiple files:", "command": "nextclade run -d {{dataset_name}} -t {{path/to/output_tsv}} -- {{path/to/input_fasta_1 path/to/input_fasta_2 ...}}"}, {"task": "Try reverse complement if sequence does not align:", "command": "nextclade run --retry-reverse-complement -d {{dataset_name}} -t {{path/to/output_tsv}} {{path/to/input_fasta}}"}]}
{"command": "nextflow", "tasks": [{"task": "Run a pipeline, use cached results from previous runs:", "command": "nextflow run {{main.nf}} -resume"}, {"task": "Run a specific release of a remote workflow from GitHub:", "command": "nextflow run {{user/repo}} -revision {{release_tag}}"}, {"task": "Run with a given work directory for intermediate files, save execution report:", "command": "nextflow run {{workflow}} -work-dir {{path/to/directory}} -with-report {{report.html}}"}, {"task": "Show details of previous runs in current directory:", "command": "nextflow log"}, {"task": "Remove cache and intermediate files for a specific run:", "command": "nextflow clean -force {{run_name}}"}, {"task": "List all downloaded projects:", "command": "nextflow list"}, {"task": "Pull the latest version of a remote workflow from Bitbucket:", "command": "nextflow pull {{user/repo}} -hub bitbucket"}, {"task": "Update Nextflow:", "command": "nextflow self-update"}]}
{"command": "nf-core", "tasks": [{"task": "List existing pipelines on nf-core:", "command": "nf-core list"}, {"task": "Create a new pipeline skeleton:", "command": "nf-core create"}, {"task": "Lint the pipeline code:", "command": "nf-core lint {{path/to/directory}}"}, {"task": "Bump software versions in pipeline recipe:", "command": "nf-core bump-version {{path/to/directory}} {{new_version}}"}, {"task": "Launch an nf-core pipeline:", "command": "nf-core launch {{pipeline_name}}"}, {"task": "Download an nf-core pipeline for offline use:", "command": "nf-core download {{pipeline_name}}"}]}
{"command": "ng", "tasks": [{"task": "Create a new Angular application inside a directory:", "command": "ng new {{project_name}}"}, {"task": "Add a new component to one's application:", "command": "ng generate component {{component_name}}"}, {"task": "Add a new class to one's application:", "command": "ng generate class {{class_name}}"}, {"task": "Add a new directive to one's application:", "command": "ng generate directive {{directive_name}}"}, {"task": "Run the application with the following command in its root directory:", "command": "ng serve"}, {"task": "Build the application:", "command": "ng build"}, {"task": "Run unit tests:", "command": "ng test"}, {"task": "Check the version of your current Angular installation:", "command": "ng version"}]}
{"command": "nginx", "tasks": [{"task": "Start server with the default config file:", "command": "nginx"}, {"task": "Start server with a custom configuration file:", "command": "nginx -c {{configuration_file}}"}, {"task": "Start server with a prefix for all relative paths in the configuration file:", "command": "nginx -c {{configuration_file}} -p {{prefix/for/relative/paths}}"}, {"task": "Test the configuration without affecting the running server:", "command": "nginx -t"}, {"task": "Reload the configuration by sending a signal with no downtime:", "command": "nginx -s reload"}]}
{"command": "ngrep", "tasks": [{"task": "Capture traffic of all interfaces:", "command": "ngrep -d any"}, {"task": "Capture traffic of a specific interface:", "command": "ngrep -d {{eth0}}"}, {"task": "Capture traffic crossing port 22 of interface eth0:", "command": "ngrep -d {{eth0}} port {{22}}"}, {"task": "Capture traffic from or to a host:", "command": "ngrep host {{www.example.com}}"}, {"task": "Filter keyword 'User-Agent:' of interface eth0:", "command": "ngrep -d {{eth0}} '{{User-Agent:}}'"}]}
{"command": "ngrok", "tasks": [{"task": "Expose a local HTTP service on a given port:", "command": "ngrok http {{80}}"}, {"task": "Expose a local HTTP service on a specific host:", "command": "ngrok http {{foo.dev}}:{{80}}"}, {"task": "Expose a local HTTPS server:", "command": "ngrok http https://localhost"}, {"task": "Expose TCP traffic on a given port:", "command": "ngrok tcp {{22}}"}, {"task": "Expose TLS traffic for a specific host and port:", "command": "ngrok tls -hostname={{foo.com}} {{443}}"}]}
{"command": "ngs", "tasks": [{"task": "Execute a code snippet:", "command": "ngs -e \"{{echo('ngs is executed')}}\""}, {"task": "Execute a script:", "command": "ngs {{path/to/script.ngs}}"}, {"task": "Print the version:", "command": "ngs --version"}]}
{"command": "nice", "tasks": [{"task": "Launch a program with altered priority:", "command": "nice -n {{niceness_value}} {{command}}"}]}
{"command": "nikto", "tasks": [{"task": "Perform a basic Nikto scan against a target host:", "command": "perl nikto.pl -h {{192.168.0.1}}"}, {"task": "Specify the port number when performing a basic scan:", "command": "perl nikto.pl -h {{192.168.0.1}} -p {{443}}"}, {"task": "Scan ports and protocols with full URL syntax:", "command": "perl nikto.pl -h {{https://192.168.0.1:443/}}"}, {"task": "Scan multiple ports in the same scanning session:", "command": "perl nikto.pl -h {{192.168.0.1}} -p {{80,88,443}}"}, {"task": "Update to the latest plugins and databases:", "command": "perl nikto.pl -update"}]}
{"command": "nim", "tasks": [{"task": "Compile a source file:", "command": "nim compile {{path/to/file.nim}}"}, {"task": "Compile and run a source file:", "command": "nim compile -r {{path/to/file.nim}}"}, {"task": "Compile a source file with release optimizations enabled:", "command": "nim compile -d:release {{path/to/file.nim}}"}, {"task": "Build a release binary optimized for low file size:", "command": "nim compile -d:release --opt:size {{path/to/file.nim}}"}, {"task": "Generate HTML documentation for a module (output will be placed in the current directory):", "command": "nim doc {{path/to/file.nim}}"}, {"task": "Check a file for syntax and semantics:", "command": "nim check {{path/to/file.nim}}"}]}
{"command": "nimble", "tasks": [{"task": "Search for packages:", "command": "nimble search {{search_string}}"}, {"task": "Install a package:", "command": "nimble install {{package_name}}"}, {"task": "List installed packages:", "command": "nimble list -i"}, {"task": "Create a new Nimble package in the current directory:", "command": "nimble init"}, {"task": "Build a Nimble package:", "command": "nimble build"}, {"task": "Install a Nimble package:", "command": "nimble install"}]}
{"command": "ninja", "tasks": [{"task": "Build in the current directory:", "command": "ninja"}, {"task": "Build in the current directory, executing 4 jobs at a time in parallel:", "command": "ninja -j {{4}}"}, {"task": "Build a program in a given directory:", "command": "ninja -C {{path/to/directory}}"}, {"task": "Show targets (e.g. `install` and `uninstall`):", "command": "ninja -t targets"}, {"task": "Show help:", "command": "ninja -h"}]}
{"command": "nix-build", "tasks": [{"task": "Build a Nix expression:", "command": "nix-build '<nixpkgs>' --attr {{firefox}}"}, {"task": "Build a sandboxed Nix expression (on non-NixOS):", "command": "nix-build '<nixpkgs>' --attr {{firefox}} --option sandbox true"}]}
{"command": "Nix classic interface", "tasks": [{"task": "Search for a package in nixpkgs via its name:", "command": "nix-env -qaP {{search_term_regexp}}"}, {"task": "Start a shell with the specified packages available:", "command": "nix-shell -p {{pkg1 pkg2 pkg3...}}"}, {"task": "Install some packages permanently:", "command": "nix-env -iA {{nixpkgs.pkg1 nixpkgs.pkg2...}}"}, {"task": "Show all dependencies of a store path (package), in a tree format:", "command": "nix-store --query --tree {{/nix/store/...}}"}, {"task": "Update the channels (repositories):", "command": "nix-channel --update"}, {"task": "Remove unused paths from Nix store:", "command": "nix-collect-garbage"}]}
{"command": "nix-collect-garbage", "tasks": [{"task": "Delete all store paths unused by current generations of each profile:", "command": "sudo nix-collect-garbage --delete-old"}, {"task": "Simulate the deletion of old store paths:", "command": "sudo nix-collect-garbage --delete-old --dry-run"}, {"task": "Delete all store paths older than 30 days:", "command": "sudo nix-collect-garbage --delete-older-than 30d"}]}
{"command": "nix-env", "tasks": [{"task": "List all installed packages:", "command": "nix-env -q"}, {"task": "Query installed packages:", "command": "nix-env -q {{search_term}}"}, {"task": "Query available packages:", "command": "nix-env -qa {{search_term}}"}, {"task": "Install package:", "command": "nix-env -iA nixpkgs.{{pkg_name}}"}, {"task": "Install a package from a URL:", "command": "nix-env -i {{pkg_name}} --file {{example.com}}"}, {"task": "Uninstall package:", "command": "nix-env -e {{pkg_name}}"}, {"task": "Upgrade one package:", "command": "nix-env -u {{pkg_name}}"}, {"task": "Upgrade all packages:", "command": "nix-env -u"}]}
{"command": "nix-shell", "tasks": [{"task": "Start with nix expression in `shell.nix` or `default.nix` in the current directory:", "command": "nix-shell"}, {"task": "Run shell command in non-interactive shell and exit:", "command": "nix-shell --run \"{{command}} {{arg1 arg2 ...}}\""}, {"task": "Start with expression in `default.nix` in the current directory:", "command": "nix-shell {{default.nix}}"}, {"task": "Start with packages loaded from nixpkgs:", "command": "nix-shell --packages {{package_name_1 package_name_2 ...}}"}, {"task": "Start with packages loaded from specific nixpkgs revision:", "command": "nix-shell --packages {{package_name_1 package_name_2 ...}} -I nixpkgs={{https://github.com/NixOS/nixpkgs/archive/nixpkgs_revision.tar.gz}}"}, {"task": "Evaluate rest of file in specific interpreter, for use in `#!-scripts` (see <https://nixos.org/manual/nix/stable/#use-as-a-interpreter>):", "command": "nix-shell -i {{interpreter}} --packages {{package_name_1 package_name_2 ...}}"}]}
{"command": "nix-store", "tasks": [{"task": "Collect garbage, such as removing unused paths:", "command": "nix-store --gc"}, {"task": "Hard-link identical files together to reduce space usage:", "command": "nix-store --optimise"}, {"task": "Delete a specific store path (must be unused):", "command": "nix-store --delete {{/nix/store/...}}"}, {"task": "Show all dependencies of a store path (package), in a tree format:", "command": "nix-store --query --tree {{/nix/store/...}}"}, {"task": "Calculate the total size of a certain store path with all the dependencies:", "command": "du -cLsh $(nix-store --query --references {{/nix/store/...}})"}, {"task": "Show all dependents of a particular store path:", "command": "nix-store --query --referrers {{/nix/store/...}}"}]}
{"command": "nix", "tasks": [{"task": "Enable the `nix` command:", "command": "mkdir -p ~/.config/nix; echo 'experimental-features = nix-command flakes' > ~/.config/nix/nix.conf"}, {"task": "Display help for the `nix` subcommand:", "command": "nix help {{subcommand}}"}, {"task": "Search for a package in nixpkgs via its name or description:", "command": "nix search nixpkgs {{search_term}}"}, {"task": "Start a shell with the specified packages from nixpkgs available:", "command": "nix shell {{nixpkgs#pkg1 nixpkgs#pkg2 nixpkgs#pkg3 ...}}"}, {"task": "Install some packages from nixpkgs permanently:", "command": "nix profile install {{nixpkgs#pkg1 nixpkgs#pkg2 nixpkgs#pkg3 ...}}"}, {"task": "Remove unused paths from Nix store to free up space:", "command": "nix store gc"}, {"task": "Start an interactive environment for evaluating Nix expressions:", "command": "nix repl"}]}
{"command": "nix build", "tasks": [{"task": "Build a package from nixpkgs, symlinking the result to `./result`:", "command": "nix build {{nixpkgs#pkg}}"}, {"task": "Build a package from a flake in the current directory, showing the build logs in the process:", "command": "nix build -L {{.#pkg}}"}, {"task": "Build the default package from a flake in some directory:", "command": "nix build {{./path/to/directory}}"}, {"task": "Build a package without making the `result` symlink, instead printing the store path to the `stdout`:", "command": "nix build --no-link --print-out-paths"}]}
{"command": "nix develop", "tasks": [{"task": "Start a shell with all dependencies of a package from nixpkgs available:", "command": "nix develop {{nixpkgs#pkg}}"}, {"task": "Start a development shell for the default package in a flake in the current directory:", "command": "nix develop"}, {"task": "In that shell, configure and build the sources:", "command": "configurePhase; buildPhase"}]}
{"command": "nix edit", "tasks": [{"task": "Open the source of the Nix expression of a package from nixpkgs in your `$EDITOR`:", "command": "nix edit {{nixpkgs#pkg}}"}, {"task": "Dump the source of a package to `stdout`:", "command": "EDITOR=cat nix edit {{nixpkgs#pkg}}"}]}
{"command": "nix flake", "tasks": [{"task": "See documentation about what Nix flakes are:", "command": "nix flake --help"}, {"task": "Create a new flake (just the `flake.nix` file) from the default template, in the current directory:", "command": "nix flake init"}, {"task": "Update all inputs (dependencies) of the flake in the current directory:", "command": "nix flake update"}, {"task": "Update a specific input (dependency) of the flake in the current directory:", "command": "nix flake lock --update-input {{input}}"}, {"task": "Show all the outputs of a flake on github:", "command": "nix flake show {{github:owner/repo}}"}]}
{"command": "nix profile", "tasks": [{"task": "Install some packages from nixpkgs into the default profile:", "command": "nix profile install {{nixpkgs#pkg1 nixpkgs#pkg2 ...}}"}, {"task": "Install a package from a flake on GitHub into a custom profile:", "command": "nix profile install {{github:owner/repo/pkg}} --profile {{./path/to/directory}}"}, {"task": "List packages currently installed in the default profile:", "command": "nix profile list"}, {"task": "Remove a package installed from nixpkgs from the default profile, by name:", "command": "nix profile remove {{legacyPackages.x86_64-linux.pkg}}"}, {"task": "Upgrade packages in the default to the latest available versions:", "command": "nix profile upgrade"}, {"task": "Rollback (cancel) the latest action on the default profile:", "command": "nix profile rollback"}]}
{"command": "nix registry", "tasks": [{"task": "Pin the `nixpkgs` revision to the current version of the upstream repository:", "command": "nix registry pin {{nixpkgs}}"}, {"task": "Pin an entry to the latest version of the branch, or a particular reivision of a github repository:", "command": "nix registry pin {{entry}} {{github:owner/repo/branch_or_revision}}"}, {"task": "Add a new entry that always points to the latest version of a github repository, updating automatically:", "command": "nix registry add {{entry}} {{github:owner/repo}}"}, {"task": "Remove a registry entry:", "command": "nix registry remove {{entry}}"}, {"task": "See documentation about what Nix flake registries are:", "command": "nix registry --help"}]}
{"command": "nix repl", "tasks": [{"task": "Start an interactive environment for evaluating Nix expressions:", "command": "nix repl"}, {"task": "Load all packages from a flake (e.g. `nixpkgs`) into scope:", "command": ":lf {{nixpkgs}}"}, {"task": "Build a package from an expression:", "command": ":b {{expression}}"}, {"task": "Start a shell with package from the expression available:", "command": ":u {{expression}}"}, {"task": "Start a shell with dependencies of the package from the expression available:", "command": ":s {{expression}}"}]}
{"command": "nix run", "tasks": [{"task": "Run the default application in the flake in the current directory:", "command": "nix run"}, {"task": "Run a command whose name matches the package name from nixpkgs (if you want a different command from that package, see `tldr nix3 shell`):", "command": "nix run nixpkgs#{{pkg}}"}, {"task": "Run a command with provided arguments:", "command": "nix run nixpkgs#{{vim}} -- {{path/to/file}}"}, {"task": "Run from a remote repository:", "command": "nix run {{remote_name}}:{{owner}}/{{repo}}"}, {"task": "Run from a remote repository using a specific tag, revision or branch:", "command": "nix run {{remote_name}}:{{owner}}/{{repo}}/{{reference}}"}, {"task": "Run from a remote repository specifying a subdirectory and a program:", "command": "nix run \"{{remote_name}}:{{owner}}/{{repo}}?dir={{dir_name}}#{{app}}\""}, {"task": "Run the flake of a GitHub pull request:", "command": "nix run github:{{owner}}/{{repo}}/pull/{{number}}/head"}]}
{"command": "nix search", "tasks": [{"task": "Search `nixpkgs` for a package based on its name or description:", "command": "nix search {{nixpkgs}} {{search_term...}}"}, {"task": "Show description of a package from nixpkgs:", "command": "nix search {{nixpkgs#pkg}}"}, {"task": "Show all packages available from a flake on github:", "command": "nix search {{github:owner/repo}}"}]}
{"command": "nix shell", "tasks": [{"task": "Start an interactive shell with some packages from `nixpkgs`:", "command": "nix shell {{nixpkgs#pkg1 nixpkgs#packageSet.pkg2 ...}}"}, {"task": "Start a shell providing a package from an older version of `nixpkgs` (21.05):", "command": "nix shell {{nixpkgs/nixos-21.05#pkg}}"}, {"task": "Start a shell with the \"default package\" from a flake in the current directory, printing build logs if any builds happen:", "command": "nix shell -L"}, {"task": "Start a shell with a package from a flake on GitHub:", "command": "nix shell {{github:owner/repo#pkg}}"}, {"task": "Run a command in a shell with a package:", "command": "nix shell {{nixpkgs#pkg}} -c {{some-cmd --someflag 'Some other arguments'}}"}]}
{"command": "nix store", "tasks": [{"task": "Collect garbage, i.e. remove unused paths to reduce space usage:", "command": "nix store gc"}, {"task": "Hard-link identical files together to reduce space usage:", "command": "nix store optimise"}, {"task": "Delete a specific store path (most be unused):", "command": "nix store delete {{/nix/store/...}}"}, {"task": "List a contents of the store path, on a remote store:", "command": "nix store --store {{https://cache.nixos.org}} ls {{/nix/store/...}}"}, {"task": "Show the differences in versions between two store paths, with their respective dependencies:", "command": "nix store diff-closures {{/nix/store/...}} {{/nix/store/...}}"}]}
{"command": "nix why-depends", "tasks": [{"task": "Show why the currently running NixOS system requires a certain store path:", "command": "nix why-depends {{/run/current-system}} {{/nix/store/...}}"}, {"task": "Show why a package from nixpkgs requires another package as a _build-time_ dependency:", "command": "nix why-depends --derivation {{nixpkgs#dependent}} {{nixpkgs#dependency}}"}]}
{"command": "nkf", "tasks": [{"task": "Convert to UTF-8 encoding:", "command": "nkf -w {{path/to/file.txt}}"}, {"task": "Convert to SHIFT_JIS encoding:", "command": "nkf -s {{path/to/file.txt}}"}, {"task": "Convert to UTF-8 encoding and overwrite the file:", "command": "nkf -w --overwrite {{path/to/file.txt}}"}, {"task": "Set new line code to LF and overwrite (UNIX type):", "command": "nkf -d --overwrite {{path/to/file.txt}}"}, {"task": "Set new line code to CRLF and overwrite (windows type):", "command": "nkf -c --overwrite {{path/to/file.txt}}"}, {"task": "Decrypt mime file and overwrite:", "command": "nkf -m --overwrite {{path/to/file.txt}}"}]}
{"command": "nl", "tasks": [{"task": "Number non-blank lines in a file:", "command": "nl {{path/to/file}}"}, {"task": "Read from `stdout`:", "command": "cat {{path/to/file}} | nl {{options}} -"}, {"task": "Number only the lines with printable text:", "command": "nl -t {{path/to/file}}"}, {"task": "Number all lines including blank lines:", "command": "nl -b a {{path/to/file}}"}, {"task": "Number only the body lines that match a basic regular expression (BRE) pattern:", "command": "nl -b p'FooBar[0-9]' {{path/to/file}}"}]}
{"command": "nload", "tasks": [{"task": "View all network traffic (use the arrow keys to switch interfaces):", "command": "nload"}, {"task": "View network traffic on specific interfaces (use the arrow keys to switch interfaces):", "command": "nload device {{interface_one}} {{interface_two}}"}]}
{"command": "nm-classic", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nm"}]}
{"command": "nm", "tasks": [{"task": "List global (extern) functions in a file (prefixed with T):", "command": "nm -g {{path/to/file.o}}"}, {"task": "List only undefined symbols in a file:", "command": "nm -u {{path/to/file.o}}"}, {"task": "List all symbols, even debugging symbols:", "command": "nm -a {{path/to/file.o}}"}, {"task": "Demangle C++ symbols (make them readable):", "command": "nm --demangle {{path/to/file.o}}"}]}
{"command": "nmap", "tasks": [{"task": "Check if an IP address is up, and guess the remote host's operating system:", "command": "nmap -O {{ip_or_hostname}}"}, {"task": "Try to determine whether the specified hosts are up (ping scan) and what their names and MAC addresses are:", "command": "sudo nmap -sn {{ip_or_hostname}} {{optional_another_address}}"}, {"task": "Also enable scripts, service detection, OS fingerprinting and traceroute:", "command": "nmap -A {{address_or_addresses}}"}, {"task": "Scan a specific list of ports (use '-p-' for all ports from 1 to 65535):", "command": "nmap -p {{port1,port2,...,portN}} {{address_or_addresses}}"}, {"task": "Perform service and version detection of the top 1000 ports using default NSE scripts; writing results ('-oN') to output file:", "command": "nmap -sC -sV -oN {{top-1000-ports.txt}} {{address_or_addresses}}"}, {"task": "Scan target(s) carefully using 'default and safe' NSE scripts:", "command": "nmap --script \"default and safe\" {{address_or_addresses}}"}, {"task": "Scan web server running on standard ports 80 and 443 using all available 'http-*' NSE scripts:", "command": "nmap --script \"http-*\" {{address_or_addresses}} -p 80,443"}, {"task": "Perform a stealthy very slow scan ('-T0') trying to avoid detection by IDS/IPS and use decoy ('-D') source IP addresses:", "command": "nmap -T0 -D {{decoy1_ipaddress,decoy2_ipaddress,...,decoyN_ipaddress}} {{address_or_addresses}}"}]}
{"command": "nmblookup", "tasks": [{"task": "Find hosts in the local network with SMB shares:", "command": "nmblookup -S '*'"}, {"task": "Find hosts in the local network with SMB shares run by SAMBA:", "command": "nmblookup --status __SAMBA__"}]}
{"command": "nms", "tasks": [{"task": "Decrypt text after a keystroke:", "command": "echo \"{{Hello, World!}}\" | nms"}, {"task": "Decrypt output immediately, without waiting for a keystroke:", "command": "{{ls -la}} | nms -a"}, {"task": "Decrypt the content of a file, with a custom output color:", "command": "cat {{path/to/file}} | nms -a -f {{blue|white|yellow|black|magenta|green|red}}"}, {"task": "Clear the screen before decrypting:", "command": "{{command}} | nms -a -c"}]}
{"command": "node", "tasks": [{"task": "Run a JavaScript file:", "command": "node {{path/to/file}}"}, {"task": "Start a REPL (interactive shell):", "command": "node"}, {"task": "Execute the specified file restarting the process when an imported file is changed (requires Node.js version 18.11+):", "command": "node --watch {{path/to/file}}"}, {"task": "Evaluate JavaScript code by passing it as an argument:", "command": "node -e \"{{code}}\""}, {"task": "Evaluate and print the result, useful to print node's dependencies versions:", "command": "node -p \"process.versions\""}, {"task": "Activate inspector, pausing execution until a debugger is connected once source code is fully parsed:", "command": "node --no-lazy --inspect-brk {{path/to/file}}"}]}
{"command": "nodemon", "tasks": [{"task": "Execute the specified file and watch a specific file for changes:", "command": "nodemon {{path/to/file.js}}"}, {"task": "Manually restart nodemon (note nodemon must already be active for this to work):", "command": "rs"}, {"task": "Ignore specific files:", "command": "nodemon --ignore {{path/to/file_or_directory}}"}, {"task": "Pass arguments to the node application:", "command": "nodemon {{path/to/file.js}} {{arguments}}"}, {"task": "Pass arguments to node itself if they're not nodemon arguments already (e.g. `--inspect`):", "command": "nodemon {{arguments}} {{path/to/file.js}}"}, {"task": "Run an arbitrary non-node script:", "command": "nodemon --exec \"{{command_to_run_script}} {{options}}\" {{path/to/script}}"}, {"task": "Run a Python script:", "command": "nodemon --exec \"python {{options}}\" {{path/to/file.py}}"}]}
{"command": "nodenv", "tasks": [{"task": "Install a specific version of Node.js:", "command": "nodenv install {{version}}"}, {"task": "Display a list of available versions:", "command": "nodenv install --list"}, {"task": "Use a specific version of Node.js across the whole system:", "command": "nodenv global {{version}}"}, {"task": "Use a specific version of Node.js with a directory:", "command": "nodenv local {{version}}"}, {"task": "Display the Node.js version for the current directory:", "command": "nodenv version"}, {"task": "Display the location of a Node.js installed command (e.g. `npm`):", "command": "nodenv which {{command}}"}]}
{"command": "nohup", "tasks": [{"task": "Run a process that can live beyond the terminal:", "command": "nohup {{command}} {{argument1 argument2 ...}}"}, {"task": "Launch `nohup` in background mode:", "command": "nohup {{command}} {{argument1 argument2 ...}} &"}, {"task": "Run a shell script that can live beyond the terminal:", "command": "nohup {{path/to/script.sh}} &"}, {"task": "Run a process and write the output to a specific file:", "command": "nohup {{command}} {{argument1 argument2 ...}} > {{path/to/output_file}} &"}]}
{"command": "nokogiri", "tasks": [{"task": "Parse the contents of a URL or file:", "command": "nokogiri {{url|path/to/file}}"}, {"task": "Parse as a specific type:", "command": "nokogiri {{url|path/to/file}} --type {{xml|html}}"}, {"task": "Load a specific initialization file before parsing:", "command": "nokogiri {{url|path/to/file}} -C {{path/to/config_file}}"}, {"task": "Parse using a specific encoding:", "command": "nokogiri {{url|path/to/file}} --encoding {{encoding}}"}, {"task": "Validate using a RELAX NG file:", "command": "nokogiri {{url|path/to/file}} --rng {{url|path/to/file}}"}]}
{"command": "nomad", "tasks": [{"task": "Show the status of nodes in the cluster:", "command": "nomad node status"}, {"task": "Validate a job file:", "command": "nomad job validate {{path/to/file.nomad}}"}, {"task": "Plan a job for execution on the cluster:", "command": "nomad job plan {{path/to/file.nomad}}"}, {"task": "Run a job on the cluster:", "command": "nomad job run {{path/to/file.nomad}}"}, {"task": "Show the status of jobs currently running on the cluster:", "command": "nomad job status"}, {"task": "Show the detailed status information about a specific job:", "command": "nomad job status {{job_name}}"}, {"task": "Follow the logs of a specific allocation:", "command": "nomad alloc logs {{alloc_id}}"}, {"task": "Show the status of storage volumes:", "command": "nomad volume status"}]}
{"command": "nop", "tasks": [{"task": "Pretty-print one or more graphs in canonical format:", "command": "nop {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Check one or more graphs for validity, producing no output graph:", "command": "nop -p {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Display help for `nop`:", "command": "nop -?"}]}
{"command": "noti", "tasks": [{"task": "Display a notification when tar finishes compressing files:", "command": "noti {{tar -cjf example.tar.bz2 example/}}"}, {"task": "Display a notification even when you put it after the command to watch:", "command": "{{command_to_watch}}; noti"}, {"task": "Monitor a process by PID and trigger a notification when the PID disappears:", "command": "noti -w {{process_id}}"}]}
{"command": "notmuch", "tasks": [{"task": "Configure for first use:", "command": "notmuch setup"}, {"task": "Add a tag for all messages matching a search term:", "command": "notmuch tag +{{custom_tag}} \"{{search_term}}\""}, {"task": "Remove a tag for all messages matching a search term:", "command": "notmuch tag -{{custom_tag}} \"{{search_term}}\""}, {"task": "Count messages matching the given search term:", "command": "notmuch count --output={{messages|threads}} \"{{search_term}}\""}, {"task": "Search for messages matching the given search term:", "command": "notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} \"{{search_term}}\""}, {"task": "Limit the number of search results to X:", "command": "notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} --limit={{X}} \"{{search_term}}\""}, {"task": "Create a reply template for a set of messages:", "command": "notmuch reply --format={{default|headers-only}} --reply-to={{sender|all}} \"{{search_term}}\""}]}
{"command": "now", "tasks": [{"task": "Deploy the current directory:", "command": "now"}, {"task": "Display a list of deployments:", "command": "now list"}, {"task": "Display information related to a deployment:", "command": "now inspect {{deployment_url}}"}, {"task": "Remove a deployment:", "command": "now remove {{deployment_id}}"}, {"task": "Log in into an account or create a new one:", "command": "now login"}, {"task": "Initialize an example project (a new directory will be created):", "command": "now init"}]}
{"command": "nping", "tasks": [{"task": "Ping a specified host using ICMP if the user is allowed to, otherwise using TCP:", "command": "nping {{example.com}}"}, {"task": "Ping a specified host using ICMP assuming that the user is allowed to do so:", "command": "nping --icmp --privileged {{example.com}}"}, {"task": "Ping a specified host using UDP:", "command": "nping --udp {{example.com}}"}, {"task": "Ping a specified host on a given port using TCP:", "command": "nping --tcp --dest-port {{443}} {{example.com}}"}, {"task": "Ping a certain number of times:", "command": "nping --count {{10}} {{example.com}}"}, {"task": "Wait a certain amount of time between each ping:", "command": "nping --delay {{5s}} {{example.com}}"}, {"task": "Send the request over a specified interface:", "command": "nping --interface {{eth0}} {{example.com}}"}, {"task": "Set the Reserved/Evil bit in sent packets:", "command": "nping --evil {{example.com}}"}]}
{"command": "npm-check", "tasks": [{"task": "Display a report of outdated, incorrect, and unused dependencies:", "command": "npm-check"}, {"task": "Interactively update out-of-date packages:", "command": "npm-check --update"}, {"task": "Update everything without prompting:", "command": "npm-check --update-all"}, {"task": "Don't check for unused packages:", "command": "npm-check --skip-unused"}]}
{"command": "npm fund", "tasks": [{"task": "List dependencies with funding URL for the project in the current directory:", "command": "npm fund"}, {"task": "Open the funding URL for a specific package in the default web browser:", "command": "npm fund {{package}}"}, {"task": "List dependencies with a funding URL for a specific [w]orkspace for the project in the current directory:", "command": "npm fund -w {{workspace}}"}]}
{"command": "npm-home", "tasks": [{"task": "Open the npm page of a specific package in the web browser:", "command": "npm-home {{package}}"}, {"task": "Open the GitHub repository of a specific package in the web browser:", "command": "npm-home -g {{package}}"}, {"task": "Open the Yarn page of a specific package in the web browser:", "command": "npm-home -y {{package}}"}]}
{"command": "npm-name", "tasks": [{"task": "Check if a specific package name is available in the npm registry:", "command": "npm-name {{package}}"}, {"task": "Find similar package names in the npm registry:", "command": "npm-name --similar {{package}}"}]}
{"command": "npm query", "tasks": [{"task": "Print direct dependencies:", "command": "npm query ':root > *'"}, {"task": "Print all direct production/development dependencies:", "command": "npm query ':root > .{{prod|dev}}'"}, {"task": "Print dependencies with a specific name:", "command": "npm query '#{{package_name}}'"}, {"task": "Print dependencies with a specific name and within a semantic versioning range:", "command": "npm query #{{package_name}}@{{semantic_version}}"}, {"task": "Print dependencies which have no dependencies:", "command": "npm query ':empty'"}, {"task": "Find all dependencies with postinstall scripts and uninstall them:", "command": "npm query \":attr(scripts, [postinstall])\" | jq 'map(.name) | join(\"\\n\")' -r | xargs -I {} npm uninstall {}"}, {"task": "Find all Git dependencies and print which application requires them:", "command": "npm query \":type(git)\" | jq 'map(.name)' | xargs -I {} npm why {}"}]}
{"command": "npm-why", "tasks": [{"task": "Show why an npm package is installed:", "command": "npm-why {{package_name}}"}]}
{"command": "npm", "tasks": [{"task": "Interactively create a `package.json` file:", "command": "npm init"}, {"task": "Download all the packages listed as dependencies in package.json:", "command": "npm install"}, {"task": "Download a specific version of a package and add it to the list of dependencies in `package.json`:", "command": "npm install {{module_name}}@{{version}}"}, {"task": "Download a package and add it to the list of dev dependencies in `package.json`:", "command": "npm install {{module_name}} --save-dev"}, {"task": "Download a package and install it globally:", "command": "npm install --global {{module_name}}"}, {"task": "Uninstall a package and remove it from the list of dependencies in `package.json`:", "command": "npm uninstall {{module_name}}"}, {"task": "Print a tree of locally installed dependencies:", "command": "npm list"}, {"task": "List top-level globally installed modules:", "command": "npm list --global --depth={{0}}"}]}
{"command": "nproc", "tasks": [{"task": "Display the number of available processing units:", "command": "nproc"}, {"task": "Display the number of installed processing units, including any inactive ones:", "command": "nproc --all"}, {"task": "If possible, subtract a given number of units from the returned value:", "command": "nproc --ignore {{count}}"}]}
{"command": "npx", "tasks": [{"task": "Execute the command from a local or remote `npm` package:", "command": "npx {{command}} {{arg1 arg2 ...}}"}, {"task": "In case multiple commands with the same name exist, it is possible to specify the package name:", "command": "npx --package {{package_name}} {{command}}"}, {"task": "Run a command if it exists in the current path or in `node_modules/.bin`:", "command": "npx --no-install {{command}} {{command_arguments}}"}, {"task": "Execute a specific command suppressing any output from `npx` itself:", "command": "npx --quiet {{command}} {{arg1 arg2 ...}}"}, {"task": "Display help:", "command": "npx --help"}]}
{"command": "nrm", "tasks": [{"task": "List all registries:", "command": "nrm ls"}, {"task": "Change to a particular registry:", "command": "nrm use {{registry}}"}, {"task": "Show the response time for all registries:", "command": "nrm test"}, {"task": "Add a custom registry:", "command": "nrm add {{registry}} {{url}}"}, {"task": "Delete a registry:", "command": "nrm del {{registry}}"}]}
{"command": "nslookup", "tasks": [{"task": "Query your system's default name server for an IP address (A record) of the domain:", "command": "nslookup {{example.com}}"}, {"task": "Query a given name server for a NS record of the domain:", "command": "nslookup -type=NS {{example.com}} {{8.8.8.8}}"}, {"task": "Query for a reverse lookup (PTR record) of an IP address:", "command": "nslookup -type=PTR {{54.240.162.118}}"}, {"task": "Query for ANY available records using TCP protocol:", "command": "nslookup -vc -type=ANY {{example.com}} "}, {"task": "Query a given name server for the whole zone file (zone transfer) of the domain using TCP protocol:", "command": "nslookup -vc -type=AXFR {{example.com}} {{name_server}}"}, {"task": "Query for a mail server (MX record) of the domain, showing details of the transaction:", "command": "nslookup -type=MX -debug {{example.com}}"}, {"task": "Query a given name server on a specific port number for a TXT record of the domain:", "command": "nslookup -port={{port_number}} -type=TXT {{example.com}} {{name_server}}"}]}
{"command": "nth", "tasks": [{"task": "Name a hash:", "command": "nth -t {{5f4dcc3b5aa765d61d8327deb882cf99}}"}, {"task": "Name hashes in a file:", "command": "nth -f {{path/to/hashes}}"}, {"task": "Output in json format:", "command": "nth -t {{5f4dcc3b5aa765d61d8327deb882cf99}} -g"}, {"task": "Decode hash in Base64 before naming it:", "command": "nth -t {{NWY0ZGNjM2I1YWE3NjVkNjFkODMyN2RlYjg4MmNmOTkK}} -b64"}]}
{"command": "ntl", "tasks": [{"task": "View documentation for the original command:", "command": "tldr netlify"}]}
{"command": "nu", "tasks": [{"task": "Start an interactive shell session:", "command": "nu"}, {"task": "Execute specific commands:", "command": "nu --commands \"{{echo 'nu is executed'}}\""}, {"task": "Execute a specific script:", "command": "nu {{path/to/script.nu}}"}, {"task": "Execute a specific script with logging:", "command": "nu --log-level {{error|warn|info|debug|trace}} {{path/to/script.nu}}"}]}
{"command": "nudoku", "tasks": [{"task": "Start a sudoku game:", "command": "nudoku"}, {"task": "Choose the difficulty of the game:", "command": "nudoku -d {{easy|normal|hard}}"}, {"task": "Navigate the board:", "command": "{{h|j|k|l}} OR {{Left|Down|Up|Right}} arrow key"}, {"task": "Delete a number:", "command": "{{Backspace|x}}"}, {"task": "Get a hint:", "command": "H"}, {"task": "See the complete solution:", "command": "S"}, {"task": "Create a new puzzle:", "command": "N"}, {"task": "Quit the game:", "command": "Q"}]}
{"command": "numfmt", "tasks": [{"task": "Convert 1.5K (SI Units) to 1500:", "command": "numfmt --from={{si}} {{1.5K}}"}, {"task": "Convert 5th field (1-indexed) to IEC Units without converting header:", "command": "ls -l | numfmt --header={{1}} --field={{5}} --to={{iec}}"}, {"task": "Convert to IEC units, pad with 5 characters, left aligned:", "command": "du -s * | numfmt --to={{iec}} --format=\"{{%-5f}}\""}]}
{"command": "nvidia-smi", "tasks": [{"task": "Display information on all available GPUs and processes using them:", "command": "nvidia-smi"}, {"task": "Display more detailed GPU information:", "command": "nvidia-smi --query"}, {"task": "Monitor overall GPU usage with 1-second update interval:", "command": "nvidia-smi dmon"}]}
{"command": "nvim", "tasks": [{"task": "Open a file:", "command": "nvim {{path/to/file}}"}, {"task": "Enter text editing mode (insert mode):", "command": "<Esc>i"}, {"task": "Copy (\"yank\") or cut (\"delete\") the current line (paste it with `P`):", "command": "<Esc>{{yy|dd}}"}, {"task": "Enter normal mode and undo the last operation:", "command": "<Esc>u"}, {"task": "Search for a pattern in the file (press `n`/`N` to go to next/previous match):", "command": "<Esc>/{{search_pattern}}<Enter>"}, {"task": "Perform a regular expression substitution in the whole file:", "command": "<Esc>:%s/{{regular_expression}}/{{replacement}}/g<Enter>"}, {"task": "Enter normal mode and save (write) the file, and quit:", "command": "<Esc>:wq<Enter>"}, {"task": "Quit without saving:", "command": "<Esc>:q!<Enter>"}]}
{"command": "nvm", "tasks": [{"task": "Install a specific version of Node.js:", "command": "nvm install {{node_version}}"}, {"task": "Use a specific version of Node.js in the current shell:", "command": "nvm use {{node_version}}"}, {"task": "Set the default Node.js version:", "command": "set nvm_default_version {{node_version}}"}, {"task": "List all available Node.js versions and highlight the default one:", "command": "nvm list"}, {"task": "Uninstall a given Node.js version:", "command": "nvm uninstall {{node_version}}"}]}
{"command": "nvm", "tasks": [{"task": "Install a specific version of Node.js:", "command": "nvm install {{node_version}}"}, {"task": "Use a specific version of Node.js in the current shell:", "command": "nvm use {{node_version}}"}, {"task": "Set the default Node.js version:", "command": "nvm alias default {{node_version}}"}, {"task": "List all available Node.js versions and highlight the default one:", "command": "nvm list"}, {"task": "Uninstall a given Node.js version:", "command": "nvm uninstall {{node_version}}"}, {"task": "Launch the REPL of a specific version of Node.js:", "command": "nvm run {{node_version}} --version"}, {"task": "Execute a script in a specific version of Node.js:", "command": "nvm exec {{node_version}} node {{app.js}}"}]}
{"command": "nvme", "tasks": [{"task": "List all nvme devices:", "command": "sudo nvme list"}, {"task": "Show device information:", "command": "sudo nvme smart-log {{device}}"}]}
{"command": "nx", "tasks": [{"task": "Build a specific project:", "command": "nx build {{project}}"}, {"task": "Test a specific project:", "command": "nx test {{project}}"}, {"task": "Execute a target on a specific project:", "command": "nx run {{project}}:{{target}}"}, {"task": "Execute a target on multiple projects:", "command": "nx run-many --target {{target}} --projects {{project1}},{{project2}}"}, {"task": "Execute a target on all projects in the workspace:", "command": "nx run-many --target {{target}} --all"}, {"task": "Execute a target only on projects that have been changed:", "command": "nx affected --target {{target}}"}]}
{"command": "nyxt", "tasks": [{"task": "List all profiles:", "command": "nyxt --list-data-profiles"}, {"task": "Set the `init.lisp` file path:", "command": "nyxt --init {{path/to/file}}"}, {"task": "Change the path to the auto-config file:", "command": "nyxt --auto-config {{path/to/file}}"}, {"task": "Print system information:", "command": "nyxt --system-information"}]}
{"command": "oathtool", "tasks": [{"task": "Generate TOTP token (behaves like Google Authenticator):", "command": "oathtool --totp --base32 \"{{secret}}\""}, {"task": "Generate a TOTP token for a specific time:", "command": "oathtool --totp --now \"{{2004-02-29 16:21:42}}\" --base32 \"{{secret}}\""}, {"task": "Validate a TOTP token:", "command": "oathtool --totp --base32 \"{{secret}}\" \"{{token}}\""}]}
{"command": "objdump", "tasks": [{"task": "Display the file header information:", "command": "objdump -f {{binary}}"}, {"task": "Display the disassembled output of executable sections:", "command": "objdump -d {{binary}}"}, {"task": "Display the disassembled executable sections in intel syntax:", "command": "objdump -M intel -d {{binary}}"}, {"task": "Display a complete binary hex dump of all sections:", "command": "objdump -s {{binary}}"}]}
{"command": "obs", "tasks": [{"task": "Launch OBS:", "command": "obs"}, {"task": "Launch OBS in portable mode:", "command": "obs --portable"}, {"task": "Automatically start recording a video on launch:", "command": "obs --startrecording"}, {"task": "Automatically start the replay buffer on launch:", "command": "obs --startreplaybuffer"}, {"task": "Automatically start streaming on launch:", "command": "obs --startstreaming"}, {"task": "Minimise to the system tray on launch:", "command": "obs --minimize-to-tray"}, {"task": "Make the log more verbose (for debugging):", "command": "obs --verbose"}]}
{"command": "oc", "tasks": [{"task": "Log in to the OpenShift Container Platform server:", "command": "oc login"}, {"task": "Create a new project:", "command": "oc new-project {{project_name}}"}, {"task": "Switch to an existing project:", "command": "oc project {{project_name}}"}, {"task": "Add a new application to a project:", "command": "oc new-app {{repo_url}} --name {{application}}"}, {"task": "Open a remote shell session to a container:", "command": "oc rsh {{pod_name}}"}, {"task": "List pods in a project:", "command": "oc get pods"}, {"task": "Log out from the current session:", "command": "oc logout"}]}
{"command": "ocaml", "tasks": [{"task": "Read OCaml commands from the user and execute them:", "command": "ocaml"}, {"task": "Read OCaml commands from a file and execute them:", "command": "ocaml {{path/to/file.ml}}"}, {"task": "Run OCaml script with modules:", "command": "ocaml {{module1}} {{module2}} {{path/to/file.ml}}"}]}
{"command": "ocamlc", "tasks": [{"task": "Create a binary from a source file:", "command": "ocamlc {{path/to/source_file.ml}}"}, {"task": "Create a named binary from a source file:", "command": "ocamlc -o {{path/to/binary}} {{path/to/source_file.ml}}"}, {"task": "Automatically generate a module signature (interface) file:", "command": "ocamlc -i {{path/to/source_file.ml}}"}]}
{"command": "ocamlfind", "tasks": [{"task": "Compile a source file to a native binary and link with packages:", "command": "ocamlfind ocamlopt -package {{package1}},{{package2}} -linkpkg -o {{path/to/executable}} {{path/to/source.ml}}"}, {"task": "Compile a source file to a bytecode binary and link with packages:", "command": "ocamlfind ocamlc -package {{package1}},{{package2}} -linkpkg -o {{path/to/executable}} {{path/to/source.ml}}"}, {"task": "Cross-compile for a different platform:", "command": "ocamlfind -toolchain {{cross-toolchain}} ocamlopt -o {{path/to/executable}} {{path/to/source.ml}}"}]}
{"command": "ocamlopt", "tasks": [{"task": "Compile a source file:", "command": "ocamlopt -o {{path/to/binary}} {{path/to/source_file.ml}}"}, {"task": "Compile with debugging enabled:", "command": "ocamlopt -g -o {{path/to/binary}} {{path/to/source_file.ml}}"}]}
{"command": "ocrmypdf", "tasks": [{"task": "Create a new searchable PDF/A file from a scanned PDF or image file:", "command": "ocrmypdf {{path/to/input_file}} {{path/to/output.pdf}}"}, {"task": "Replace a scanned PDF file with a searchable PDF file:", "command": "ocrmypdf {{path/to/file.pdf}} {{path/to/file.pdf}}"}, {"task": "Skip pages of a mixed-format input PDF file that already contain text:", "command": "ocrmypdf --skip-text {{path/to/input.pdf}} {{path/to/output.pdf}}"}, {"task": "Clean, de-skew, and rotate pages of a poor scan:", "command": "ocrmypdf --clean --deskew --rotate-pages {{path/to/input_file}} {{path/to/output.pdf}}"}, {"task": "Set the metadata of the searchable PDF file:", "command": "ocrmypdf --title \"{{title}}\" --author \"{{author}}\" --subject \"{{subject}}\" --keywords \"{{keyword; key phrase; ...}}\" {{path/to/input_file}} {{path/to/output.pdf}}"}, {"task": "Display help:", "command": "ocrmypdf --help"}]}
{"command": "octave", "tasks": [{"task": "Start an interactive session:", "command": "octave"}, {"task": "Execute a specific script file:", "command": "octave {{path/to/script.m}}"}, {"task": "Execute a script file with specific arguments:", "command": "octave {{path/to/script.m}} {{argument1 argument2 ...}}"}, {"task": "Start an interactive session with a GUI:", "command": "octave --gui"}, {"task": "Display help:", "command": "octave --help"}, {"task": "Display version:", "command": "octave --version"}]}
{"command": "od", "tasks": [{"task": "Display file using default settings: octal format, 8 bytes per line, byte offsets in octal, and duplicate lines replaced with `*`:", "command": "od {{path/to/file}}"}, {"task": "Display file in verbose mode, i.e. without replacing duplicate lines with `*`:", "command": "od -v {{path/to/file}}"}, {"task": "Display file in hexadecimal format (2-byte units), with byte offsets in decimal format:", "command": "od --format={{x}} --address-radix={{d}} -v {{path/to/file}}"}, {"task": "Display file in hexadecimal format (1-byte units), and 4 bytes per line:", "command": "od --format={{x1}} --width={{4}} -v {{path/to/file}}"}, {"task": "Display file in hexadecimal format along with its character representation, and do not print byte offsets:", "command": "od --format={{xz}} --address-radix={{n}} -v {{path/to/file}}"}, {"task": "Read only 100 bytes of a file starting from the 500th byte:", "command": "od --read-bytes {{100}} --skip-bytes={{500}} -v {{path/to/file}}"}]}
{"command": "odps auth", "tasks": [{"task": "Add a user to the current project:", "command": "add user {{username}};"}, {"task": "Grant a set of authorities to a user:", "command": "grant {{action_list}} on {{object_type}} {{object_name}} to user {{username}};"}, {"task": "Show authorities of a user:", "command": "show grants for {{username}};"}, {"task": "Create a user role:", "command": "create role {{role_name}};"}, {"task": "Grant a set of authorities to a role:", "command": "grant {{action_list}} on {{object_type}} {{object_name}} to role {{role_name}};"}, {"task": "Describe authorities of a role:", "command": "desc role {{role_name}};"}, {"task": "Grant a role to a user:", "command": "grant {{role_name}} to {{username}};"}]}
{"command": "odps func", "tasks": [{"task": "Show functions in the current project:", "command": "list functions;"}, {"task": "Create a Java function using a `.jar` resource:", "command": "create function {{func_name}} as {{path.to.package.Func}} using '{{package.jar}}';"}, {"task": "Create a Python function using a `.py` resource:", "command": "create function {{func_name}} as {{script.Func}} using '{{script.py}}';"}, {"task": "Delete a function:", "command": "drop function {{func_name}};"}]}
{"command": "odps inst", "tasks": [{"task": "Show instances created by current user:", "command": "show instances;"}, {"task": "Describe the details of an instance:", "command": "desc instance {{instance_id}};"}, {"task": "Check the status of an instance:", "command": "status {{instance_id}};"}, {"task": "Wait on the termination of an instance, printing log and progress information until then:", "command": "wait {{instance_id}};"}, {"task": "Kill an instance:", "command": "kill {{instance_id}};"}]}
{"command": "odps resource", "tasks": [{"task": "Show resources in the current project:", "command": "list resources;"}, {"task": "Add file resource:", "command": "add file {{filename}} as {{alias}};"}, {"task": "Add archive resource:", "command": "add archive {{archive.tar.gz}} as {{alias}};"}, {"task": "Add .jar resource:", "command": "add jar {{package.jar}};"}, {"task": "Add .py resource:", "command": "add py {{script.py}};"}, {"task": "Delete resource:", "command": "drop resource {{resource_name}};"}]}
{"command": "odps table", "tasks": [{"task": "Create a table with partition and lifecycle:", "command": "create table {{table_name}} ({{col}} {{type}}) partitioned by ({{col}} {{type}}) lifecycle {{days}};"}, {"task": "Create a table based on the definition of another table:", "command": "create table {{table_name}} like {{another_table}};"}, {"task": "Add partition to a table:", "command": "alter table {{table_name}} add partition ({{partition_spec}});"}, {"task": "Delete partition from a table:", "command": "alter table {{table_name}} drop partition ({{partition_spec}});"}, {"task": "Delete table:", "command": "drop table {{table_name}};"}]}
{"command": "odps tunnel", "tasks": [{"task": "Download table to local file:", "command": "tunnel download {{table_name}} {{path/to/file}};"}, {"task": "Upload local file to a table partition:", "command": "tunnel upload {{path/to/file}} {{table_name}}/{{partition_spec}};"}, {"task": "Upload table specifying field and record delimiters:", "command": "tunnel upload {{path/to/file}} {{table_name}} -fd {{field_delim}} -rd {{record_delim}};"}, {"task": "Upload table using multiple threads:", "command": "tunnel upload {{path/to/file}} {{table_name}} -threads {{num}};"}]}
{"command": "odps", "tasks": [{"task": "Start the command-line with a custom configuration file:", "command": "odpscmd --config={{odps_config.ini}}"}, {"task": "Switch current project:", "command": "use {{project_name}};"}, {"task": "Show tables in the current project:", "command": "show tables;"}, {"task": "Describe a table:", "command": "desc {{table_name}};"}, {"task": "Show table partitions:", "command": "show partitions {{table_name}};"}, {"task": "Describe a partition:", "command": "desc {{table_name}} partition ({{partition_spec}});"}]}
{"command": "offlineimap", "tasks": [{"task": "Synchronize once, without enabling autorefresh:", "command": "offlineimap -o"}, {"task": "Synchronize a specific account:", "command": "offlineimap -a {{account}}"}, {"task": "Synchronize a specific folder:", "command": "offlineimap -f {{folder}}"}]}
{"command": "ogr2ogr", "tasks": [{"task": "Convert a Shapefile into a GeoPackage:", "command": "ogr2ogr -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.shp"}, {"task": "Reduce a GeoJSON to features matching a condition:", "command": "ogr2ogr -where '{{myProperty > 42}}' -f {{GeoJSON}} {{path/to/output.geojson}} {{path/to/input.geojson}}"}, {"task": "Change coordinate reference system of a GeoPackage from `EPSG:4326` to `EPSG:3857`:", "command": "ogr2ogr -s_srs {{EPSG:4326}} -t_srs {{EPSG:3857}} -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.gpkg"}, {"task": "Convert a CSV file into a GeoPackage, specifying the names of the coordinate columns and assigning a coordinate reference system:", "command": "ogr2ogr -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.csv -oo X_POSSIBLE_NAMES={{longitude}} -oo Y_POSSIBLE_NAMES={{latitude}} -a_srs {{EPSG:4326}}"}, {"task": "Load a GeoPackage into a PostGIS database:", "command": "ogr2ogr -f PostgreSQL PG:dbname=\"{{database_name}}\" {{path/to/input}}.gpkg"}, {"task": "Clip layers of a GeoPackage file to the given bounding box:", "command": "ogr2ogr -spat {{min_x}} {{min_y}} {{max_x}} {{max_y}} -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.gpkg"}]}
{"command": "ogrinfo", "tasks": [{"task": "List supported formats:", "command": "ogrinfo --formats"}, {"task": "List layers of a data source:", "command": "ogrinfo {{path/to/input.gpkg}}"}, {"task": "Get detailed information about a specific layer of a data source:", "command": "ogrinfo {{path/to/input.gpkg}} {{layer_name}}"}, {"task": "Show summary information about a specific layer of a data source:", "command": "ogrinfo -so {{path/to/input.gpkg}} {{layer_name}}"}, {"task": "Show summary of all layers of the data source:", "command": "ogrinfo -so -al {{path/to/input.gpkg}}"}, {"task": "Show detailed information of features matching a condition:", "command": "ogrinfo -where '{{attribute_name > 42}}' {{path/to/input.gpkg}} {{layer_name}}"}, {"task": "Update a layer in the data source with SQL:", "command": "ogrinfo {{path/to/input.geojson}} -dialect SQLite -sql \"{{UPDATE input SET attribute_name = 'foo'}}\""}]}
{"command": "ogrmerge.py", "tasks": [{"task": "Create a GeoPackage with a layer for each input Shapefile:", "command": "ogrmerge.py -f {{GPKG}} -o {{path/to/output.gpkg}} {{path/to/input1.shp path/to/input2.shp ...}}"}, {"task": "Create a virtual datasource (VRT) with a layer for each input GeoJSON:", "command": "ogrmerge.py -f {{VRT}} -o {{path/to/output.vrt}} {{path/to/input1.geojson path/to/input2.geojson ...}}"}, {"task": "Concatenate two vector datasets and store source name of dataset in attribute 'source_name':", "command": "ogrmerge.py -single -f {{GeoJSON}} -o {{path/to/output.geojson}} -src_layer_field_name country {{source_name}} {{path/to/input1.shp path/to/input2.shp ...}}"}]}
{"command": "ohdear-cli", "tasks": [{"task": "Display details about the currently authenticated user:", "command": "ohdear-cli me"}, {"task": "Add a new site to Oh Dear:", "command": "ohdear-cli sites:add {{url}}"}, {"task": "Display a list of sites and their current status:", "command": "ohdear-cli sites:list"}, {"task": "Display details about a specific site:", "command": "ohdear-cli sites:show {{site_id}}"}]}
{"command": "okular", "tasks": [{"task": "Launch document viewer:", "command": "okular"}, {"task": "Open specific documents:", "command": "okular {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open a document at a specific page:", "command": "okular --page {{page_number}} {{path/to/file}}"}, {"task": "Open a specific document in presentation mode:", "command": "okular --presentation {{path/to/file}}"}, {"task": "Open a specific document and start a print dialog:", "command": "okular --print {{path/to/file}}"}, {"task": "Open a document and search for a specific string:", "command": "okular --find {{search_string}} {{path/to/file}}"}]}
{"command": "omf", "tasks": [{"task": "Install one or more packages:", "command": "omf install {{name}}"}, {"task": "List installed packages:", "command": "omf list"}, {"task": "List available themes:", "command": "omf theme"}, {"task": "Apply a theme:", "command": "omf theme {{name}}"}, {"task": "Remove a theme or package:", "command": "omf remove {{name}}"}, {"task": "Uninstall Oh My Fish:", "command": "omf destroy"}]}
{"command": "omz", "tasks": [{"task": "Update Oh My Zsh:", "command": "omz update"}, {"task": "Print the changes from the latest update of Oh My Zsh:", "command": "omz changelog"}, {"task": "Restart the current Zsh session and Oh My Zsh:", "command": "omz reload"}, {"task": "List all available plugins:", "command": "omz plugin list"}, {"task": "Enable/Disable an Oh My Zsh plugin:", "command": "omz plugin {{enable|disable}} {{plugin}}"}, {"task": "List all available themes:", "command": "omz theme list"}, {"task": "Set an Oh My Zsh theme in `~/.zshrc`:", "command": "omz theme set {{theme}}"}]}
{"command": "ooniprobe", "tasks": [{"task": "List all tests performed:", "command": "ooniprobe list"}, {"task": "Show information about a specific test:", "command": "ooniprobe list {{7}}"}, {"task": "Run all available tests:", "command": "ooniprobe run all"}, {"task": "Perform a specific test:", "command": "ooniprobe run {{performance}}"}, {"task": "Check the availability of a specific website:", "command": "ooniprobe run websites --input {{https://ooni.org/}}"}, {"task": "Check the availability of all websites listed in a file:", "command": "ooniprobe run websites --input-file {{path/to/my-websites.txt}}"}, {"task": "Display detailed information about a test in JSON format:", "command": "ooniprobe show {{9}}"}]}
{"command": "opam", "tasks": [{"task": "Initialize opam for first use:", "command": "opam init"}, {"task": "Search for packages:", "command": "opam search {{package_name}}"}, {"task": "Install a package and all of its dependencies:", "command": "opam install {{package_name}}"}, {"task": "Display detailed information about a package:", "command": "opam show {{package_name}}"}, {"task": "List all installed packages:", "command": "opam list"}, {"task": "Update the local package database:", "command": "opam update"}, {"task": "Upgrade all installed packages:", "command": "opam upgrade"}, {"task": "Display all commands:", "command": "opam help"}]}
{"command": "openai", "tasks": [{"task": "List models:", "command": "openai api models.list"}, {"task": "Create a completion:", "command": "openai api completions.create --model {{ada}} --prompt {{\"Hello world\"}}"}, {"task": "Create a chat completion:", "command": "openai api chat_completions.create --model {{gpt-3.5-turbo}} --message {{user \"Hello world\"}}"}, {"task": "Generate images via DALL·E API:", "command": "openai api image.create --prompt {{\"two dogs playing chess, cartoon\"}} --num-images {{1}}"}]}
{"command": "openconnect", "tasks": [{"task": "Connect to a server:", "command": "openconnect {{vpn.example.org}}"}, {"task": "Connect to a server, forking into the background:", "command": "openconnect --background {{vpn.example.org}}"}, {"task": "Terminate the connection that is running in the background:", "command": "killall -SIGINT openconnect"}, {"task": "Connect to a server, reading options from a config file:", "command": "openconnect --config={{path/to/file}} {{vpn.example.org}}"}, {"task": "Connect to a server and authenticate with a specific SSL client certificate:", "command": "openconnect --certificate={{path/to/file}} {{vpn.example.org}}"}]}
{"command": "openscad", "tasks": [{"task": "Open a file:", "command": "openscad {{path/to/button.scad}}"}, {"task": "Convert a file to STL:", "command": "openscad -o {{path/to/button.stl}} {{path/to/button.scad}}"}, {"task": "Render a file to PNG in a specific colorscheme:", "command": "openscad -o {{path/to/button.png}} --colorscheme {{Sunset}} {{path/to/button.scad}}"}]}
{"command": "openssl dgst", "tasks": [{"task": "Calculate the SHA256 digest for a file, saving the result to a specific file:", "command": "openssl dgst -sha256 -binary -out {{output_file}} {{input_file}}"}, {"task": "Sign a file using an RSA key, saving the result to a specific file:", "command": "openssl dgst -sign {{private_key_file}} -sha256 -sigopt rsa_padding_mode:pss -out {{output_file}} {{input_file}}"}, {"task": "Verify an RSA signature:", "command": "openssl dgst -verify {{public_key_file}} -signature {{signature_file}} -sigopt rsa_padding_mode:pss {{signature_message_file}}"}, {"task": "Sign a file using and ECDSA key:", "command": "openssl dgst -sign {{private_key_file}} -sha256 -out {{output_file}} {{input_file}}"}, {"task": "Verify an ECDSA signature:", "command": "openssl dgst -verify {{public_key_file}} -signature {{signature_file}} {{signature_message_file}}"}]}
{"command": "openssl genpkey", "tasks": [{"task": "Generate an RSA private key of 2048 bits, saving it to a specific file:", "command": "openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:{{2048}} -out {{filename.key}}"}, {"task": "Generate an elliptic curve private key using the curve `prime256v1`, saving it to a specific file:", "command": "openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:{{prime256v1}} -out {{filename.key}}"}, {"task": "Generate an `ED25519` elliptic curve private key, saving it to a specific file:", "command": "openssl genpkey -algorithm {{ED25519}} -out {{filename.key}}"}]}
{"command": "openssl genrsa", "tasks": [{"task": "Generate an RSA private key of 2048 bits to `stdout`:", "command": "openssl genrsa"}, {"task": "Save an RSA private key of an arbitrary number of bits to the output file:", "command": "openssl genrsa -out {{output_file.key}} {{1234}}"}, {"task": "Generate an RSA private key and encrypt it with AES256 (you will be prompted for a passphrase):", "command": "openssl genrsa {{-aes256}}"}]}
{"command": "openssl prime", "tasks": [{"task": "Generate a 2048bit prime number and display it in hexadecimal:", "command": "openssl prime -generate -bits 2048 -hex"}, {"task": "Check if a given number is prime:", "command": "openssl prime {{number}}"}]}
{"command": "openssl req", "tasks": [{"task": "Generate a certificate signing request to be sent to a certificate authority:", "command": "openssl req -new -sha256 -key {{filename.key}} -out {{filename.csr}}"}, {"task": "Generate a self-signed certificate and a corresponding key-pair, storing both in a file:", "command": "openssl req -new -x509 -newkey {{rsa}}:{{4096}} -keyout {{filename.key}} -out {{filename.cert}} -subj \"{{/C=XX/CN=foobar}}\" -days {{365}}"}]}
{"command": "openssl s_client", "tasks": [{"task": "Display the start and expiry dates for a domain's certificate:", "command": "openssl s_client -connect {{host}}:{{port}} 2>/dev/null | openssl x509 -noout -dates"}, {"task": "Display the certificate presented by an SSL/TLS server:", "command": "openssl s_client -connect {{host}}:{{port}} </dev/null"}, {"task": "Set the Server Name Indicator (SNI) when connecting to the SSL/TLS server:", "command": "openssl s_client -connect {{host}}:{{port}} -servername {{hostname}}"}, {"task": "Display the complete certificate chain of an HTTPS server:", "command": "openssl s_client -connect {{host}}:443 -showcerts </dev/null"}]}
{"command": "openssl ts", "tasks": [{"task": "Generate a SHA-512 timestamp request of a specific file and output to `file.tsq`:", "command": "openssl ts -query -data {{path/to/file}} -sha512 -out {{path/to/file.tsq}}"}, {"task": "Check the date and metadata of a specific timestamp response file:", "command": "openssl ts -reply -in {{path/to/file.tsr}} -text"}, {"task": "Verify a timestamp request file and a timestamp response file from the server with an SSL certificate file:", "command": "openssl ts -verify -in {{path/to/file.tsr}} -queryfile {{path/to/file.tsq}} -partial_chain -CAfile {{path/to/cert.pem}}"}, {"task": "Create a timestamp response for request using key and signing certificate and output it to `file.tsr`:", "command": "openssl ts -reply -queryfile {{path/to/file.tsq}} -inkey {{path/to/tsakey.pem}} -signer tsacert.pem -out {{path/to/file.tsr}}"}]}
{"command": "openssl x509", "tasks": [{"task": "Display certificate information:", "command": "openssl x509 -in {{filename.crt}} -noout -text"}, {"task": "Display a certificate's expiration date:", "command": "openssl x509 -enddate -noout -in {{filename.pem}}"}, {"task": "Convert a certificate between binary DER encoding and textual PEM encoding:", "command": "openssl x509 -inform {{der}} -outform {{pem}} -in {{original_certificate_file}} -out {{converted_certificate_file}}"}, {"task": "Store a certificate's public key in a file:", "command": "openssl x509 -in {{certificate_file}} -noout -pubkey -out {{output_file}}"}]}
{"command": "openssl", "tasks": [{"task": "Print a list of available subcommands:", "command": "openssl help"}, {"task": "Print options for a specific subcommand:", "command": "openssl help {{x509}}"}, {"task": "Print the version of OpenSSL:", "command": "openssl version"}]}
{"command": "openttd", "tasks": [{"task": "Start a new game:", "command": "openttd -g"}, {"task": "Load save game at start:", "command": "openttd -g {{path/to/file}}"}, {"task": "Start with the specified window resolution:", "command": "openttd -r {{1920x1080}}"}, {"task": "Start with a custom configuration file:", "command": "openttd -c {{path/to/file}}"}, {"task": "Start with selected video, sound, and music drivers:", "command": "openttd -v {{video_driver}} -s {{sound_driver}} -m {{music_driver}}"}, {"task": "Start a dedicated server, forked in the background:", "command": "openttd -f -D {{host}}:{{port}}"}, {"task": "Join a server with a password:", "command": "openttd -n {{host}}:{{port}}#{{player_name}} -p {{password}}"}]}
{"command": "openvpn", "tasks": [{"task": "Connect to server using a config file:", "command": "sudo openvpn {{path/to/client.conf}}"}, {"task": "Try to set up an insecure peer-to-peer tunnel on bob.example.com host:", "command": "sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}}"}, {"task": "Connect to the awaiting bob.example.com host without encryption:", "command": "sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}}"}, {"task": "Create a cryptographic key and save it to file:", "command": "openvpn --genkey secret {{path/to/key}}"}, {"task": "Try to set up a peer-to-peer tunnel on bob.example.com host with a static key:", "command": "sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}} --secret {{path/to/key}}"}, {"task": "Connect to the awaiting bob.example.com host with the same static key as on bob.example.com:", "command": "sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}} --secret {{path/to/key}}"}]}
{"command": "opt", "tasks": [{"task": "Run an optimization or analysis on a bitcode file:", "command": "opt -{{passname}} {{path/to/file.bc}} -S -o {{file_opt.bc}}"}, {"task": "Output the Control Flow Graph of a function to a `.dot` file:", "command": "opt {{-dot-cfg}} -S {{path/to/file.bc}} -disable-output"}, {"task": "Optimize the program at level 2 and output the result to another file:", "command": "opt -O2 {{path/to/file.bc}} -S -o {{path/to/output_file.bc}}"}]}
{"command": "optipng", "tasks": [{"task": "Compress a PNG with default settings:", "command": "optipng {{path/to/file.png}}"}, {"task": "Compress a PNG with the best compression:", "command": "optipng -o{{7}} {{path/to/file.png}}"}, {"task": "Compress a PNG with the fastest compression:", "command": "optipng -o{{0}} {{path/to/file.png}}"}, {"task": "Compress a PNG and add interlacing:", "command": "optipng -i {{1}} {{path/to/file.png}}"}, {"task": "Compress a PNG and preserve all metadata (including file timestamps):", "command": "optipng -preserve {{path/to/file.png}}"}, {"task": "Compress a PNG and remove all metadata:", "command": "optipng -strip all {{path/to/file.png}}"}]}
{"command": "opusenc", "tasks": [{"task": "Convert WAV to Opus using default options:", "command": "opusenc {{path/to/input.wav}} {{path/to/output}}.opus"}, {"task": "Convert stereo audio at the highest quality level:", "command": "opusenc --bitrate {{512}} {{path/to/input.wav}} {{path/to/output}}.opus"}, {"task": "Convert 5.1 surround sound audio at the highest quality level:", "command": "opusenc --bitrate {{1536}} {{path/to/input.flac}} {{path/to/output}}.opus"}, {"task": "Convert speech audio at the lowest quality level:", "command": "opusenc {{path/to/input.wav}} --downmix-mono --bitrate {{6}} {{path/to/out}}.opus"}]}
{"command": "orca-c", "tasks": [{"task": "Start ORCA with an empty workspace:", "command": "orca-c"}, {"task": "Start ORCA and open a specific file:", "command": "orca-c {{path/to/file.orca}}"}, {"task": "Start ORCA and set a specific tempo (defaults to 120):", "command": "orca-c --bpm {{beats_per_minute}}"}, {"task": "Start ORCA and set the size of the grid:", "command": "orca-c --initial-size {{columns}}x{{rows}}"}, {"task": "Start ORCA and set the maximum number of undo steps (defaults to 100):", "command": "orca-c --undo-limit {{limit}}"}, {"task": "Show the main menu inside of ORCA:", "command": "F1"}, {"task": "Show all shortcuts inside of ORCA:", "command": "?"}, {"task": "Show all ORCA operators inside of ORCA:", "command": "Ctrl + g"}]}
{"command": "osage", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "osage -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "osage -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "osage -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | osage -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "osage -?"}]}
{"command": "osmium", "tasks": [{"task": "Show file information:", "command": "osmium fileinfo {{path/to/input.osm}}"}, {"task": "Display contents:", "command": "osmium show {{path/to/input.osm}}"}, {"task": "Convert file format from PBF into XML:", "command": "osmium cat {{path/to/input.osm.pbf}} -o {{path/to/output.osm}}"}, {"task": "Extract a geographic region by the given [b]ounding box:", "command": "osmium extract -b {{min_longitude}},{{min_latitude}},{{max_longitude}},{{max_latitude}} {{path/to/input.pbf}} -o {{path/to/output.pbf}}"}, {"task": "Extract a geographic region by a GeoJSON file:", "command": "osmium extract -p {{path/to/polygon.geojson}} {{path/to/input.pbf}} -o {{path/to/output.pbf}}"}, {"task": "Filter all objects tagged as \"restaurant\":", "command": "osmium tags-filter {{path/to/input.pbf}} amenity=restaurant -o {{path/to/output.pbf}}"}, {"task": "Filter for \"way\" objects tagged as \"highway\":", "command": "osmium tags-filter {{path/to/input.pbf}} w/highway -o {{path/to/output.pbf}}"}, {"task": "Filter \"way\" and \"relation\" objects tagged as \"building\":", "command": "osmium tags-filter {{path/to/input.pbf}} wr/building -o {{path/to/output.pbf}}"}]}
{"command": "osv-scanner", "tasks": [{"task": "Scan a docker image:", "command": "osv-scanner -D {{docker_image_name}}"}, {"task": "Scan a package lockfile:", "command": "osv-scanner -L {{path/to/lockfile}}"}, {"task": "Scan an SBOM file:", "command": "osv-scanner -S {{path/to/sbom_file}}"}, {"task": "Scan multiple directories recursively:", "command": "osv-scanner -r {{directory1 directory2 ...}}"}, {"task": "Skip scanning git repositories:", "command": "osv-scanner --skip-git {{-r|-D}} {{target}}"}, {"task": "Output result in JSON format:", "command": "osv-scanner --json {{-D|-L|-S|-r}} {{target}}"}]}
{"command": "ouch", "tasks": [{"task": "Decompress a specific file:", "command": "ouch decompress {{path/to/archive.tar.xz}}"}, {"task": "Decompress a file to a specific location:", "command": "ouch decompress {{path/to/archive.tar.xz}} --dir {{path/to/directory}}"}, {"task": "Decompress multiple files:", "command": "ouch decompress {{path/to/archive1.tar path/to/archive2.tar.gz ...}}"}, {"task": "Compress files:", "command": "ouch compress {{path/to/file1 path/to/file2 ...}} {{path/to/archive.zip}}"}]}
{"command": "p10k", "tasks": [{"task": "Configure powerlevel10k interactively:", "command": "p10k configure"}, {"task": "Reload powerlevel10k:", "command": "p10k reload"}, {"task": "Display help:", "command": "p10k help"}]}
{"command": "p4", "tasks": [{"task": "Log in to the Perforce service:", "command": "p4 login -a"}, {"task": "Create a client:", "command": "p4 client"}, {"task": "Copy files from depot into the client workspace:", "command": "p4 sync"}, {"task": "Create or edit changelist description:", "command": "p4 change"}, {"task": "Open a file to edit:", "command": "p4 edit -c {{changelist_number}} {{path/to/file}}"}, {"task": "Open a new file to add it to the depot:", "command": "p4 add"}, {"task": "Display list of files modified by changelist:", "command": "p4 describe -c {{changelist_number}}"}, {"task": "Submit a changelist to the depot:", "command": "p4 submit -c {{changelist_number}}"}]}
{"command": "p5", "tasks": [{"task": "Create a new p5 collection:", "command": "p5 new {{collection_name}}"}, {"task": "Generate a new p5 project (should be run from collection directory):", "command": "p5 generate {{project_name}}"}, {"task": "Run the p5 manager server:", "command": "p5 server"}, {"task": "Update libraries to their latest versions:", "command": "p5 update"}]}
{"command": "p7zip", "tasks": [{"task": "Archive a file, replacing it with a 7zipped compressed version:", "command": "p7zip {{path/to/file}}"}, {"task": "Archive a file keeping the input file:", "command": "p7zip -k {{path/to/file}}"}, {"task": "Decompress a file, replacing it with the original uncompressed version:", "command": "p7zip -d {{compressed.ext}}.7z"}, {"task": "Decompress a file keeping the input file:", "command": "p7zip -d -k {{compressed.ext}}.7z"}, {"task": "Skip some checks and force compression or decompression:", "command": "p7zip -f {{path/to/file}}"}]}
{"command": "paci", "tasks": [{"task": "Update the list of available packages and versions (it's recommended to run this before other `paci` commands):", "command": "paci refresh"}, {"task": "Configure its behaviour:", "command": "paci configure"}, {"task": "Search for a given package:", "command": "paci search {{package}}"}, {"task": "Install a package:", "command": "paci install {{package}}"}, {"task": "Update a package:", "command": "paci update {{package}}"}]}
{"command": "packer", "tasks": [{"task": "Build an image:", "command": "packer build {{path/to/config.json}}"}, {"task": "Check the syntax of a Packer image config:", "command": "packer validate {{path/to/config.json}}"}]}
{"command": "packtpub", "tasks": [{"task": "Download the daily offer book into the current directory with the specified book format (defaults to `pdf`):", "command": "packtpub download --type {{pdf|ebup|mobi}}"}, {"task": "Download the daily offer book into the specified directory:", "command": "packtpub download --dir {{path/to/directory}}"}, {"task": "Start an interactive login to packtpub.com:", "command": "packtpub login"}, {"task": "Log out from packtpub.com:", "command": "packtpub logout"}, {"task": "Display the daily offer:", "command": "packtpub view-offer"}, {"task": "Open the daily offer in the default web browser:", "command": "packtpub view-offer"}, {"task": "Display the currently logged-in user:", "command": "packtpub whoami"}]}
{"command": "pactl", "tasks": [{"task": "List all sinks (or other types - sinks are outputs and sink-inputs are active audio streams):", "command": "pactl list {{sinks}} short"}, {"task": "Change the default sink (output) to 1 (the number can be retrieved via the `list` subcommand):", "command": "pactl set-default-sink {{1}}"}, {"task": "Move sink-input 627 to sink 1:", "command": "pactl move-sink-input {{627}} {{1}}"}, {"task": "Set the volume of sink 1 to 75%:", "command": "pactl set-sink-volume {{1}} {{0.75}}"}, {"task": "Toggle mute on the default sink (using the special name `@DEFAULT_SINK@`):", "command": "pactl set-sink-mute {{@DEFAULT_SINK@}} toggle"}]}
{"command": "pageres", "tasks": [{"task": "Take multiple screenshots of multiple URLs at different resolutions:", "command": "pageres {{https://example.com/}} {{https://example2.com/}} {{1366x768}} {{1600x900}}"}, {"task": "Provide specific options for a URL, overriding global options:", "command": "pageres [{{https://example.com/}} {{1366x768}} --no-crop] [{{https://example2.com/}} {{1024x768}}] --crop"}, {"task": "Provide a custom filename template:", "command": "pageres {{https://example.com/}} {{1024x768}} --filename={{'<%= date %> - <%= url %>'}}"}, {"task": "Capture a specific element on a page:", "command": "pageres {{https://example.com/}} {{1366x768}} --selector='{{.page-header}}'"}, {"task": "Hide a specific element:", "command": "pageres {{https://example.com/}} {{1366x768}} --hide='{{.page-header}}'"}, {"task": "Capture a screenshot of a local file:", "command": "pageres {{local_file_path.html}} {{1366x768}}"}]}
{"command": "pake", "tasks": [{"task": "Package a web page:", "command": "pake {{https://www.google.com/}}"}, {"task": "Package a web page with a specific window size:", "command": "pake --width {{800}} --height {{600}} {{https://www.google.com/}}"}, {"task": "Package a web page with a custom application name and icon:", "command": "pake --name {{Google}} --icon {{path/to/icon.ico}} {{https://www.google.com/}}"}, {"task": "Package a web page with a non-resizable window:", "command": "pake --no-resizable {{https://www.google.com/}}"}, {"task": "Package a web page with fullscreen mode:", "command": "pake --fullscreen {{https://www.google.com/}}"}, {"task": "Package a web page with a transparent title bar:", "command": "pake --transparent {{https://www.google.com/}}"}]}
{"command": "pamixer", "tasks": [{"task": "List all sinks and sources with their corresponding IDs:", "command": "pamixer --list-sinks --list-sources"}, {"task": "Set the volume to 75% on the default sink:", "command": "pamixer --set-volume {{75}}"}, {"task": "Toggle mute on a sink other than the default:", "command": "pamixer --toggle-mute --sink {{ID}}"}, {"task": "Increase the volume on default sink by 5%:", "command": "pamixer --increase {{5}}"}, {"task": "Decrease the volume on a source by 5%:", "command": "pamixer --decrease {{5}} --source {{ID}}"}, {"task": "Use the allow boost option to increase, decrease, or set the volume above 100%:", "command": "pamixer --set-volume {{105}} --allow-boost"}, {"task": "Mute the default sink (use `--unmute` instead to unmute):", "command": "pamixer --mute"}]}
{"command": "pandoc", "tasks": [{"task": "Convert file to PDF (the output format is determined by file extension):", "command": "pandoc {{input.md}} -o {{output.pdf}}"}, {"task": "Force conversion to use a specific format:", "command": "pandoc {{input.docx}} --to {{gfm}} -o {{output.md}}"}, {"task": "Convert to a standalone file with the appropriate headers/footers (for LaTeX, HTML, etc.):", "command": "pandoc {{input.md}} -s -o {{output.tex}}"}, {"task": "List all supported input formats:", "command": "pandoc --list-input-formats"}, {"task": "List all supported output formats:", "command": "pandoc --list-output-formats"}]}
{"command": "paperkey", "tasks": [{"task": "Take a specific secret key and generate a text file with the secret data:", "command": "paperkey --secret-key {{path/to/secret_key.gpg}} --output {{path/to/secret_data.txt}}"}, {"task": "Take the secret key data in `secret_data.txt` and combine it with the public key to reconstruct the secret key:", "command": "paperkey --pubring {{path/to/public_key.gpg}} --secrets {{path/to/secret_data.txt}} --output {{secret_key.gpg}}"}, {"task": "Export a specific secret key and generate a text file with the secret data:", "command": "gpg --export-secret-key {{key}} | paperkey --output {{path/to/secret_data.txt}}"}]}
{"command": "parallel-lint", "tasks": [{"task": "Lint a specific directory:", "command": "parallel-lint {{path/to/directory}}"}, {"task": "Lint a directory using the specified number of parallel processes:", "command": "parallel-lint -j {{processes}} {{path/to/directory}}"}, {"task": "Lint a directory, excluding the specified directory:", "command": "parallel-lint --exclude {{path/to/excluded_directory}} {{path/to/directory}}"}, {"task": "Lint a directory of files using a comma-separated list of extension(s):", "command": "parallel-lint -e {{php,html,phpt}} {{path/to/directory}}"}, {"task": "Lint a directory and output the results as JSON:", "command": "parallel-lint --json {{path/to/directory}}"}, {"task": "Lint a directory and show Git Blame results for rows containing errors:", "command": "parallel-lint --blame {{path/to/directory}}"}]}
{"command": "parallel", "tasks": [{"task": "Gzip several files at once, using all cores:", "command": "parallel gzip ::: {{file1}} {{file2}} {{file3}}"}, {"task": "Read arguments from `stdin`, run 4 jobs at once:", "command": "ls *.txt | parallel -j4 gzip"}, {"task": "Convert JPG images to PNG using replacement strings:", "command": "parallel convert {} {.}.png ::: *.jpg"}, {"task": "Parallel xargs, cram as many args as possible onto one command:", "command": "{{args}} | parallel -X {{command}}"}, {"task": "Break `stdin` into ~1M blocks, feed each block to `stdin` of new command:", "command": "cat {{big_file.txt}} | parallel --pipe --block 1M {{command}}"}, {"task": "Run on multiple machines via SSH:", "command": "parallel -S {{machine1}},{{machine2}} {{command}} ::: {{arg1}} {{arg2}}"}]}
{"command": "parquet-tools", "tasks": [{"task": "Display the content of a Parquet file:", "command": "parquet-tools cat {{path/to/parquet}}"}, {"task": "Display the first few lines of a Parquet file:", "command": "parquet-tools head {{path/to/parquet}}"}, {"task": "Print the schema of a Parquet file:", "command": "parquet-tools schema {{path/to/parquet}}"}, {"task": "Print the metadata of a Parquet file:", "command": "parquet-tools meta {{path/to/parquet}}"}, {"task": "Print the content and metadata of a Parquet file:", "command": "parquet-tools dump {{path/to/parquet}}"}, {"task": "Concatenate several Parquet files into the target one:", "command": "parquet-tools merge {{path/to/parquet1}} {{path/to/parquet2}} {{path/to/target_parquet}}"}, {"task": "Print the count of rows in a Parquet file:", "command": "parquet-tools rowcount {{path/to/parquet}}"}, {"task": "Print the column and offset indexes of a Parquet file:", "command": "parquet-tools column-index {{path/to/parquet}}"}]}
{"command": "particle", "tasks": [{"task": "Log in or create an account for the Particle CLI:", "command": "particle setup"}, {"task": "Display a list of devices:", "command": "particle list"}, {"task": "Create a new Particle project interactively:", "command": "particle project create"}, {"task": "Compile a Particle project:", "command": "particle compile {{device_type}} {{path/to/source_code.ino}}"}, {"task": "Update a device to use a specific app remotely:", "command": "particle flash {{device_name}} {{path/to/program.bin}}"}, {"task": "Update a device to use the latest firmware via serial:", "command": "particle flash --serial {{path/to/firmware.bin}}"}, {"task": "Execute a function on a device:", "command": "particle call {{device_name}} {{function_name}} {{function_arguments}}"}]}
{"command": "pass otp", "tasks": [{"task": "Prompt for an otpauth URI token and create a new pass file:", "command": "pass otp insert {{path/to/pass}}"}, {"task": "Prompt for an otpauth URI token and append to an existing pass file:", "command": "pass otp append {{path/to/pass}}"}, {"task": "Print a 2FA code using the OTP token in a pass file:", "command": "pass otp {{path/to/pass}}"}, {"task": "Copy and don't print a 2FA code using the OTP token in a pass file:", "command": "pass otp --clip {{path/to/pass}}"}, {"task": "Display a QR code using the OTP token stored in a pass file:", "command": "pass otp uri --qrcode {{path/to/pass}}"}, {"task": "Prompt for an OTP secret value specifying issuer and account (at least one must be specified) and append to existing pass file:", "command": "pass otp append --secret --issuer {{issuer_name}} --account {{account_name}} {{path/to/pass}}"}]}
{"command": "pass", "tasks": [{"task": "Initialize (or re-encrypt) the storage using one or more GPG IDs:", "command": "pass init {{gpg_id_1}} {{gpg_id_2}}"}, {"task": "Save a new password and additional information (press Ctrl + D on a new line to complete):", "command": "pass insert --multiline {{path/to/data}}"}, {"task": "Edit an entry:", "command": "pass edit {{path/to/data}}"}, {"task": "Copy a password (first line of the data file) to the clipboard:", "command": "pass -c {{path/to/data}}"}, {"task": "List the whole store tree:", "command": "pass"}, {"task": "Generate a new random password with a given length, and copy it to the clipboard:", "command": "pass generate -c {{path/to/data}} {{num}}"}, {"task": "Initialize a new Git repository (any changes done by pass will be committed automatically):", "command": "pass git init"}, {"task": "Run a Git command on behalf of the password storage:", "command": "pass git {{command}}"}]}
{"command": "passwd", "tasks": [{"task": "Change the password of the current user interactively:", "command": "passwd"}, {"task": "Change the password of a specific user:", "command": "passwd {{username}}"}, {"task": "Get the current status of the user:", "command": "passwd -S"}, {"task": "Make the password of the account blank (it will set the named account passwordless):", "command": "passwd -d"}]}
{"command": "paste", "tasks": [{"task": "Join all the lines into a single line, using TAB as delimiter:", "command": "paste -s {{path/to/file}}"}, {"task": "Join all the lines into a single line, using the specified delimiter:", "command": "paste -s -d {{delimiter}} {{path/to/file}}"}, {"task": "Merge two files side by side, each in its column, using TAB as delimiter:", "command": "paste {{file1}} {{file2}}"}, {"task": "Merge two files side by side, each in its column, using the specified delimiter:", "command": "paste -d {{delimiter}} {{file1}} {{file2}}"}, {"task": "Merge two files, with lines added alternatively:", "command": "paste -d '\\n' {{file1}} {{file2}}"}]}
{"command": "pastel", "tasks": [{"task": "Convert colors from one format to another. Here from RGB to HSL:", "command": "pastel format {{hsl}} {{ff8000}}"}, {"task": "Show and analyze colors on the terminal:", "command": "pastel color \"{{rgb(255,50,127)}}\""}, {"task": "Pick a color from somewhere on the screen:", "command": "pastel pick"}, {"task": "Generate a set of N visually distinct colors:", "command": "pastel distinct {{8}}"}, {"task": "Get a list of all X11/CSS color names:", "command": "pastel list"}]}
{"command": "patch", "tasks": [{"task": "Apply a patch using a diff file (filenames must be included in the diff file):", "command": "patch < {{patch.diff}}"}, {"task": "Apply a patch to a specific file:", "command": "patch {{path/to/file}} < {{patch.diff}}"}, {"task": "Patch a file writing the result to a different file:", "command": "patch {{path/to/input_file}} -o {{path/to/output_file}} < {{patch.diff}}"}, {"task": "Apply a patch to the current directory:", "command": "patch -p1 < {{patch.diff}}"}, {"task": "Apply the reverse of a patch:", "command": "patch -R < {{patch.diff}}"}]}
{"command": "patchwork", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "patchwork -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "patchwork -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "patchwork -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | patchwork -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "patchwork -?"}]}
{"command": "pathchk", "tasks": [{"task": "Check pathnames for validity in the current system:", "command": "pathchk {{path1 path2 …}}"}, {"task": "Check pathnames for validity on a wider range of POSIX compliant systems:", "command": "pathchk -p {{path1 path2 …}}"}, {"task": "Check pathnames for validity on all POSIX compliant systems:", "command": "pathchk --portability {{path1 path2 …}}"}, {"task": "Only check for empty pathnames or leading dashes (-):", "command": "pathchk -P {{path1 path2 …}}"}]}
{"command": "pax", "tasks": [{"task": "List the contents of an archive:", "command": "pax -f {{archive.tar}}"}, {"task": "List the contents of a gzipped archive:", "command": "pax -zf {{archive.tar.gz}}"}, {"task": "Create an archive from files:", "command": "pax -wf {{target.tar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}, {"task": "Create an archive from files, using output redirection:", "command": "pax -w {{path/to/file1}} {{path/to/file2}} {{path/to/file3}} > {{target.tar}}"}, {"task": "Extract an archive into the current directory:", "command": "pax -rf {{source.tar}}"}, {"task": "Copy to a directory, while keeping the original metadata; `target/` must exist:", "command": "pax -rw {{path/to/file1}} {{path/to/directory1}} {{path/to/directory2}} {{target/}}"}]}
{"command": "pdf-parser", "tasks": [{"task": "Display statistics for a PDF file:", "command": "pdf-parser --stats {{path/to/file.pdf}}"}, {"task": "Display objects of type `/Font` in a PDF file:", "command": "pdf-parser --type={{/Font}} {{path/to/file.pdf}}"}, {"task": "Search for strings in indirect objects:", "command": "pdf-parser --search={{search_string}} {{path/to/file.pdf}}"}]}
{"command": "pdffonts", "tasks": [{"task": "Print PDF file fonts information:", "command": "pdffonts {{path/to/file.pdf}}"}, {"task": "Specify user password for PDF file to bypass security restrictions:", "command": "pdffonts -upw {{password}} {{path/to/file.pdf}}"}, {"task": "Specify owner password for PDF file to bypass security restrictions:", "command": "pdffonts -opw {{password}} {{path/to/file.pdf}}"}, {"task": "Print additional information on location of the font that will be used when the PDF file is rasterized:", "command": "pdffonts -loc {{path/to/file.pdf}}"}, {"task": "Print additional information on location of the font that will be used when the PDF file is converted to PostScript:", "command": "pdffonts -locPS {{path/to/file.pdf}}"}]}
{"command": "pdfgrep", "tasks": [{"task": "Find lines that match pattern in a PDF:", "command": "pdfgrep {{pattern}} {{file.pdf}}"}, {"task": "Include file name and page number for each matched line:", "command": "pdfgrep --with-filename --page-number {{pattern}} {{file.pdf}}"}, {"task": "Do a case-insensitive search for lines that begin with \"foo\" and return the first 3 matches:", "command": "pdfgrep --max-count {{3}} --ignore-case {{'^foo'}} {{file.pdf}}"}, {"task": "Find pattern in files with a `.pdf` extension in the current directory recursively:", "command": "pdfgrep --recursive {{pattern}}"}, {"task": "Find pattern on files that match a specific glob in the current directory recursively:", "command": "pdfgrep --recursive --include {{'*book.pdf'}} {{pattern}}"}]}
{"command": "pdfimages", "tasks": [{"task": "Extract all images from a PDF file and save them as PNGs:", "command": "pdfimages -png {{path/to/file.pdf}} {{filename_prefix}}"}, {"task": "Extract images from pages 3 to 5:", "command": "pdfimages -f {{3}} -l {{5}} {{path/to/file.pdf}} {{filename_prefix}}"}, {"task": "Extract images from a PDF file and include the page number in the output filenames:", "command": "pdfimages -p {{path/to/file.pdf}} {{filename_prefix}}"}, {"task": "List information about all the images in a PDF file:", "command": "pdfimages -list {{path/to/file.pdf}}"}]}
{"command": "pdfinfo", "tasks": [{"task": "Print PDF file information:", "command": "pdfinfo {{path/to/file.pdf}}"}, {"task": "Specify user password for PDF file to bypass security restrictions:", "command": "pdfinfo -upw {{password}} {{path/to/file.pdf}}"}, {"task": "Specify owner password for PDF file to bypass security restrictions:", "command": "pdfinfo -opw {{password}} {{path/to/file.pdf}}"}]}
{"command": "pdfjam", "tasks": [{"task": "Merge two (or more) PDFs:", "command": "pdfjam {{path/to/file1.pdf}} {{path/to/file2.pdf}} --outfile {{path/to/output_file.pdf}}"}, {"task": "Merge the first page of each file together:", "command": "pdfjam {{files...}} 1 --outfile {{path/to/output_file.pdf}}"}, {"task": "Merge subranges from two PDFs:", "command": "pdfjam {{path/to/file1.pdf 3-5,1}} {{path/to/file2.pdf 4-6}} --outfile {{path/to/output_file.pdf}}"}, {"task": "Sign an A4 page (adjust delta to height for other formats) with a scanned signature by overlaying them:", "command": "pdfjam {{path/to/file.pdf}} {{path/to/signature}} --fitpaper true --outfile {{path/to/signed.pdf}} --nup \"{{1x2}}\" --delta \"{{0 -842pt}}\""}, {"task": "Arrange the pages from the input file into a fancy 2x2 grid:", "command": "pdfjam {{path/to/file.pdf}} --nup {{2x2}} --suffix {{4up}} --preamble '{{\\usepackage{fancyhdr} \\pagestyle{fancy}}}'"}, {"task": "Reverse the order of pages within each given file and concatenate them:", "command": "pdfjam {{files...}} {{last-1}} --suffix {{reversed}}"}]}
{"command": "pdfjoin", "tasks": [{"task": "Merge two PDFs into one with the default suffix \"joined\":", "command": "pdfjoin {{path/to/file1.pdf}} {{path/to/file2.pdf}}"}, {"task": "Merge the first page of each given file together:", "command": "pdfjoin {{path/to/file1.pdf path/to/file2.pdf ...}} {{1}} --outfile {{output_file}}"}, {"task": "Save pages 3 to 5 followed by page 1 to a new PDF with custom suffix:", "command": "pdfjoin {{path/to/file.pdf}} {{3-5,1}} --suffix {{rearranged}}"}, {"task": "Merge page subranges from two PDFs:", "command": "pdfjoin {/path/to/file1.pdf}} {{2-}} {{file2}} {{last-3}} --outfile {{output_file}}"}]}
{"command": "pdflatex", "tasks": [{"task": "Compile a PDF document:", "command": "pdflatex {{source.tex}}"}, {"task": "Compile a PDF document specifying an output directory:", "command": "pdflatex -output-directory={{path/to/directory}} {{source.tex}}"}, {"task": "Compile a PDF document, exiting on each error:", "command": "pdflatex -halt-on-error {{source.tex}}"}]}
{"command": "pdfposter", "tasks": [{"task": "Convert an A2 poster into 4 A4 pages:", "command": "pdfposter --poster-size a2 {{input_file.pdf}} {{output_file.pdf}}"}, {"task": "Scale an A4 poster to A3 and then generate 2 A4 pages:", "command": "pdfposter --scale 2 {{input_file.pdf}} {{output_file.pdf}}"}]}
{"command": "pdfseparate", "tasks": [{"task": "Extract pages from PDF file and make a separate PDF file for each page:", "command": "pdfseparate {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}"}, {"task": "Specify the first/start page for extraction:", "command": "pdfseparate -f {{3}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}"}, {"task": "Specify the last page for extraction:", "command": "pdfseparate -l {{10}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}"}]}
{"command": "pdftex", "tasks": [{"task": "Compile a PDF document:", "command": "pdftex {{source.tex}}"}, {"task": "Compile a PDF document, specifying an output directory:", "command": "pdftex -output-directory={{path/to/directory}} {{source.tex}}"}, {"task": "Compile a PDF document, exiting on each error:", "command": "pdftex -halt-on-error {{source.tex}}"}]}
{"command": "pdftk", "tasks": [{"task": "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one:", "command": "pdftk {{input.pdf}} cat {{1-3 5 6-10}} output {{output.pdf}}"}, {"task": "Merge (concatenate) a list of PDF files and save the result as another one:", "command": "pdftk {{file1.pdf file2.pdf ...}} cat output {{output.pdf}}"}, {"task": "Split each page of a PDF file into a separate file, with a given filename output pattern:", "command": "pdftk {{input.pdf}} burst output {{out_%d.pdf}}"}, {"task": "Rotate all pages by 180 degrees clockwise:", "command": "pdftk {{input.pdf}} cat {{1-endsouth}} output {{output.pdf}}"}, {"task": "Rotate third page by 90 degrees clockwise and leave others unchanged:", "command": "pdftk {{input.pdf}} cat {{1-2 3east 4-end}} output {{output.pdf}}"}]}
{"command": "pdftocairo", "tasks": [{"task": "Convert a PDF file to JPEG:", "command": "pdftocairo {{path/to/file.pdf}} -jpeg"}, {"task": "Convert to PDF expanding the output to fill the paper:", "command": "pdftocairo {{path/to/file.pdf}} {{output.pdf}} -pdf -expand"}, {"task": "Convert to SVG specifying the first/last page to convert:", "command": "pdftocairo {{path/to/file.pdf}} {{output.svg}} -svg -f {{first_page}} -l {{last_page}}"}, {"task": "Convert to PNG with 200ppi resolution:", "command": "pdftocairo {{path/to/file.pdf}} {{output.png}} -png -r 200"}, {"task": "Convert to grayscale TIFF setting paper size to A3:", "command": "pdftocairo {{path/to/file.pdf}} -tiff -gray -paper A3"}, {"task": "Convert to PNG cropping x and y pixels from the top-left corner:", "command": "pdftocairo {{path/to/file.pdf}} -png -x {{x_pixels}} -y {{y_pixels}}"}]}
{"command": "pdftotext", "tasks": [{"task": "Convert `filename.pdf` to plain text and print it to `stdout`:", "command": "pdftotext {{filename.pdf}} -"}, {"task": "Convert `filename.pdf` to plain text and save it as `filename.txt`:", "command": "pdftotext {{filename.pdf}}"}, {"task": "Convert `filename.pdf` to plain text and preserve the layout:", "command": "pdftotext -layout {{filename.pdf}}"}, {"task": "Convert `input.pdf` to plain text and save it as `output.txt`:", "command": "pdftotext {{input.pdf}} {{output.txt}}"}, {"task": "Convert pages 2, 3 and 4 of `input.pdf` to plain text and save them as `output.txt`:", "command": "pdftotext -f {{2}} -l {{4}} {{input.pdf}} {{output.txt}}"}]}
{"command": "pdfunite", "tasks": [{"task": "Merge 2 PDFs into a single PDF:", "command": "pdfunite {{path/to/fileA.pdf}} {{path/to/fileB.pdf}} {{path/to/merged_output.pdf}}"}, {"task": "Merge a directory of PDFs into a single PDF:", "command": "pdfunite {{path/to/directory/*.pdf}} {{path/to/merged_output.pdf}}"}]}
{"command": "peco", "tasks": [{"task": "Start `peco` on all files in the specified directory:", "command": "find {{path/to/directory}} -type f | peco"}, {"task": "Start `peco` for running processes:", "command": "ps aux | peco"}, {"task": "Start `peco` with a specified query:", "command": "peco --query \"{{query}}\""}]}
{"command": "peerflix", "tasks": [{"task": "Stream the largest media file in a torrent:", "command": "peerflix \"{{torrent_url|magnet_link}}\""}, {"task": "List all streamable files contained in a torrent (given as a magnet link):", "command": "peerflix \"{{magnet:?xt=urn:btih:0123456789abcdef0123456789abcdef01234567}}\" --list"}, {"task": "Stream the largest file in a torrent, given as a torrent URL, to VLC:", "command": "peerflix \"{{http://example.net/music.torrent}}\" --vlc"}, {"task": "Stream the largest file in a torrent to MPlayer, with subtitles:", "command": "peerflix \"{{torrent_url|magnet_link}}\" --mplayer --subtitles {{subtitle-file.srt}}"}, {"task": "Stream all files from a torrent to Airplay:", "command": "peerflix \"{{torrent_url|magnet_link}}\" --all --airplay"}]}
{"command": "peerindex", "tasks": [{"task": "Output all peers:", "command": "peerindex {{master6.mrt}}"}, {"task": "Display all peers that have provided routing information:", "command": "peerindex -r {{master6.mrt}}"}]}
{"command": "peludna-prognoza", "tasks": [{"task": "Start an interactive search for a city and fetch data for it:", "command": "peludna-prognoza"}, {"task": "Fetch data for a city:", "command": "peludna-prognoza \"{{city}}\""}, {"task": "Display data in a machine-readable format:", "command": "peludna-prognoza \"{{city}}\" --{{json|xml}}"}, {"task": "Display the pollen measurement page for a city at <https://plivazdravlje.hr> in the default web browser:", "command": "peludna-prognoza \"{{city}}\" --web"}]}
{"command": "perl", "tasks": [{"task": "Parse and execute a Perl script:", "command": "perl {{script.pl}}"}, {"task": "Check syntax errors on a Perl script:", "command": "perl -c {{script.pl}}"}, {"task": "Parse and execute a Perl statement:", "command": "perl -e {{perl_statement}}"}, {"task": "Run a Perl script in debug mode, using `perldebug`:", "command": "perl -d {{script.pl}}"}, {"task": "Edit all file lines [i]n-place with a specific replacement [e]xpression, saving a backup with a new extension:", "command": "perl -p -i'.{{extension}}' -e 's/{{regular_expression}}/{{replacement}}/g' {{path/to/file}}"}, {"task": "Run a multi-line replacement [e]xpression on a file, and save the result in a specific file:", "command": "perl -p -e 's/{{foo\\nbar}}/{{foobar}}/g' {{path/to/input_file}} > {{path/to/output_file}}"}, {"task": "Run a regular [e]xpression on `stdin`, printing matching [l]ines:", "command": "cat {{path/to/file}} | perl -n -l -e 'print if /{{regular_expression}}/'"}, {"task": "Run a regular [e]xpression on `stdin`, printing only the first capture group for each matching [l]ine:", "command": "cat {{path/to/file}} | perl -n -l -e 'print $1 if /{{before}}({{regular_expression}}){{after}}/'"}]}
{"command": "pest", "tasks": [{"task": "Initialize a standard Pest configuration in the current directory:", "command": "pest --init"}, {"task": "Run tests in the current directory:", "command": "pest"}, {"task": "Run tests annotated with the given group:", "command": "pest --group {{name}}"}, {"task": "Run tests and print the coverage report to `stdout`:", "command": "pest --coverage"}, {"task": "Run tests with coverage and fail if the coverage is less than the minimum percentage:", "command": "pest --coverage --min={{80}}"}]}
{"command": "pfetch", "tasks": [{"task": "Display the ASCII art and default fields:", "command": "pfetch"}, {"task": "Display only the ASCII art and color palette fields:", "command": "PF_INFO=\"{{ascii palette}}\" pfetch"}, {"task": "Display all possible fields:", "command": "PF_INFO=\"{{ascii title os host kernel uptime pkgs memory shell editor wm de palette}}\" pfetch"}, {"task": "Display a different username and hostname:", "command": "USER=\"{{user}}\" HOSTNAME=\"{{hostname}}\" pfetch"}, {"task": "Display without colors:", "command": "PF_COLOR={{0}} pfetch"}]}
{"command": "pg_ctl", "tasks": [{"task": "Initialize a new PostgreSQL database cluster:", "command": "pg_ctl -D {{data_directory}} init"}, {"task": "Start a PostgreSQL server:", "command": "pg_ctl -D {{data_directory}} start"}, {"task": "Stop a PostgreSQL server:", "command": "pg_ctl -D {{data_directory}} stop"}, {"task": "Restart a PostgreSQL server:", "command": "pg_ctl -D {{data_directory}} restart"}, {"task": "Reload the PostgreSQL server configuration:", "command": "pg_ctl -D {{data_directory}} reload"}]}
{"command": "pg_dump", "tasks": [{"task": "Dump database into an SQL-script file:", "command": "pg_dump {{db_name}} > {{output_file.sql}}"}, {"task": "Same as above, customize username:", "command": "pg_dump -U {{username}} {{db_name}} > {{output_file.sql}}"}, {"task": "Same as above, customize host and port:", "command": "pg_dump -h {{host}} -p {{port}} {{db_name}} > {{output_file.sql}}"}, {"task": "Dump a database into a custom-format archive file:", "command": "pg_dump -Fc {{db_name}} > {{output_file.dump}}"}, {"task": "Dump only database data into an SQL-script file:", "command": "pg_dump -a {{db_name}} > {{path/to/output_file.sql}}"}, {"task": "Dump only schema (data definitions) into an SQL-script file:", "command": "pg_dump -s {{db_name}} > {{path/to/output_file.sql}}"}]}
{"command": "pg_dumpall", "tasks": [{"task": "Dump all databases:", "command": "pg_dumpall > {{path/to/file.sql}}"}, {"task": "Dump all databases using a specific username:", "command": "pg_dumpall --username={{username}} > {{path/to/file.sql}}"}, {"task": "Same as above, customize host and port:", "command": "pg_dumpall -h {{host}} -p {{port}} > {{output_file.sql}}"}, {"task": "Dump all databases into a custom-format archive file with moderate compression:", "command": "pg_dumpall -Fc > {{output_file.dump}}"}, {"task": "Dump only database data into an SQL-script file:", "command": "pg_dumpall --data-only > {{path/to/file.sql}}"}, {"task": "Dump only schema (data definitions) into an SQL-script file:", "command": "pg_dumpall -s > {{output_file.sql}}"}]}
{"command": "pg_isready", "tasks": [{"task": "Check connection:", "command": "pg_isready"}, {"task": "Check connection with a specific hostname and port:", "command": "pg_isready --host={{hostname}} --port={{port}}"}, {"task": "Check connection displaying a message only when the connection fails:", "command": "pg_isready --quiet"}]}
{"command": "pg_restore", "tasks": [{"task": "Restore an archive into an existing database:", "command": "pg_restore -d {{db_name}} {{archive_file.dump}}"}, {"task": "Same as above, customize username:", "command": "pg_restore -U {{username}} -d {{db_name}} {{archive_file.dump}}"}, {"task": "Same as above, customize host and port:", "command": "pg_restore -h {{host}} -p {{port}} -d {{db_name}} {{archive_file.dump}}"}, {"task": "List database objects included in the archive:", "command": "pg_restore --list {{archive_file.dump}}"}, {"task": "Clean database objects before creating them:", "command": "pg_restore --clean -d {{db_name}} {{archive_file.dump}}"}, {"task": "Use multiple jobs to do the restoring:", "command": "pg_restore -j {{2}} -d {{db_name}} {{archive_file.dump}}"}]}
{"command": "pgbench", "tasks": [{"task": "Initialize a database with a scale factor of 50 times the default size:", "command": "pgbench --initialize --scale={{50}} {{database_name}}"}, {"task": "Benchmark a database with 10 clients, 2 worker threads, and 10,000 transactions per client:", "command": "pgbench --client={{10}} --jobs={{2}} --transactions={{10000}} {{database_name}}"}]}
{"command": "pgrep", "tasks": [{"task": "Return PIDs of any running processes with a matching command string:", "command": "pgrep {{process_name}}"}, {"task": "Search for processes including their command-line options:", "command": "pgrep --full \"{{process_name}} {{parameter}}\""}, {"task": "Search for processes run by a specific user:", "command": "pgrep --euid root {{process_name}}"}]}
{"command": "phan", "tasks": [{"task": "Generate a `.phan/config.php` in the current directory:", "command": "phan --init"}, {"task": "Generate a Phan configuration file using a specific level (1 being strictest to 5 being the least strict):", "command": "phan --init --init-level {{level}}"}, {"task": "Analyze the current directory:", "command": "phan"}, {"task": "Analyze one or more directories:", "command": "phan --directory {{path/to/directory}} --directory {{path/to/another_directory}}"}, {"task": "Specify a config file (defaults to `.phan/config.php`):", "command": "phan --config-file {{path/to/config.php}}"}, {"task": "Specify the output mode:", "command": "phan --output-mode {{text|verbose|json|csv|codeclimate|checkstyle|pylint|html}}"}, {"task": "Specify the number of parallel processes:", "command": "phan --processes {{number_of_processes}}"}]}
{"command": "phing", "tasks": [{"task": "Perform the default task in the `build.xml` file:", "command": "phing"}, {"task": "Initialize a new build file:", "command": "phing -i {{path/to/build.xml}}"}, {"task": "Perform a specific task:", "command": "phing {{task_name}}"}, {"task": "Specify a custom build file path:", "command": "phing -f {{path/to/build.xml}} {{task_name}}"}, {"task": "Specify a log file to output to:", "command": "phing -b {{path/to/log_file}} {{task_name}}"}, {"task": "Specify custom properties to use in the build:", "command": "phing -D{{property}}={{value}} {{task_name}}"}, {"task": "Specify a custom listener class:", "command": "phing -listener {{class_name}} {{task_name}}"}, {"task": "Build using verbose output:", "command": "phing -verbose {{task_name}}"}]}
{"command": "phive", "tasks": [{"task": "Display a list of available aliased Phars:", "command": "phive list"}, {"task": "Install a specified Phar to the local directory:", "command": "phive install {{alias|url}}"}, {"task": "Install a specified Phar globally:", "command": "phive install {{alias|url}} --global"}, {"task": "Install a specified Phar to a target directory:", "command": "phive install {{alias|url}} --target {{path/to/directory}}"}, {"task": "Update all Phar files to the latest version:", "command": "phive update"}, {"task": "Remove a specified Phar file:", "command": "phive remove {{alias|url}}"}, {"task": "Remove unused Phar files:", "command": "phive purge"}, {"task": "List all available commands:", "command": "phive help"}]}
{"command": "php artisan", "tasks": [{"task": "Start PHP's built-in web server for the current Laravel application:", "command": "php artisan serve"}, {"task": "Start an interactive PHP command-line interface:", "command": "php artisan tinker"}, {"task": "Generate a new Eloquent model class with a migration, factory and resource controller:", "command": "php artisan make:model {{ModelName}} --all"}, {"task": "Display a list of all available commands:", "command": "php artisan help"}]}
{"command": "php-coveralls", "tasks": [{"task": "Send coverage information to Coveralls:", "command": "php-coveralls"}, {"task": "Send coverage information to Coveralls for a specific directory:", "command": "php-coveralls --root_dir {{path/to/directory}}"}, {"task": "Send coverage information to Coveralls with a specific config:", "command": "php-coveralls --config {{path/to/.coveralls.yml}}"}, {"task": "Send coverage information to Coveralls with verbose output:", "command": "php-coveralls --verbose"}, {"task": "Send coverage information to Coveralls excluding source files with no executable statements:", "command": "php-coveralls --exclude-no-stmt"}, {"task": "Send coverage information to Coveralls with a specific environment name:", "command": "php-coveralls --env {{test|dev|prod}}"}, {"task": "Specify multiple Coverage Clover XML files to upload:", "command": "php-coveralls --coverage_clover {{path/to/first_clover.xml}} --coverage_clover {{path/to/second_clover.xml}}"}, {"task": "Output the JSON that will be sent to Coveralls to a specific file:", "command": "php-coveralls --json_path {{path/to/coveralls-upload.json}}"}]}
{"command": "PHP-CS-Fixer", "tasks": [{"task": "Execute code style fixing in the current directory:", "command": "php-cs-fixer fix"}, {"task": "Execute code style fixing for a specific directory:", "command": "php-cs-fixer fix {{path/to/directory}}"}, {"task": "Execute code style linting without applying changes:", "command": "php-cs-fixer fix --dry-run"}, {"task": "Execute code style fixes using specific rules:", "command": "php-cs-fixer fix --rules={{rules}}"}, {"task": "Display the rules that have been applied:", "command": "php-cs-fixer fix --verbose"}, {"task": "Output the results in a different format:", "command": "php-cs-fixer fix --format={{txt|json|xml|checkstyle|junit|gitlab}}"}, {"task": "Display files that require fixing:", "command": "php-cs-fixer list-files"}, {"task": "Describe a rule or ruleset:", "command": "php-cs-fixer describe {{rule}}"}]}
{"command": "php yii", "tasks": [{"task": "Display a list of all available commands:", "command": "php yii {{help}}"}, {"task": "Start PHP's built-in web server for the current Yii application:", "command": "php yii {{serve}}"}, {"task": "Generate a controller, views and related files for the CRUD actions on the specified model class:", "command": "php yii {{gii/crud}} --modelClass={{ModelName}} --controllerClass={{ControllerName}}"}]}
{"command": "php", "tasks": [{"task": "Parse and execute a PHP script:", "command": "php {{path/to/file}}"}, {"task": "Check syntax on (i.e. lint) a PHP script:", "command": "php -l {{path/to/file}}"}, {"task": "Run PHP interactively:", "command": "php -a"}, {"task": "Run PHP code (Notes: Don't use <? ?> tags; escape double quotes with backslash):", "command": "php -r \"{{code}}\""}, {"task": "Start a PHP built-in web server in the current directory:", "command": "php -S {{host:port}}"}, {"task": "Get a list of installed PHP extensions:", "command": "php -m"}, {"task": "Display information about the current PHP configuration:", "command": "php -i"}, {"task": "Display information about a specific function:", "command": "php --rf {{function_name}}"}]}
{"command": "phpbu", "tasks": [{"task": "Run backups using the default `phpbu.xml` configuration file:", "command": "phpbu"}, {"task": "Run backups using a specific configuration file:", "command": "phpbu --configuration={{path/to/configuration_file.xml}}"}, {"task": "Only run the specified backups:", "command": "phpbu --limit={{backup_task_name}}"}, {"task": "Simulate the actions that would have been performed:", "command": "phpbu --simulate"}]}
{"command": "phpcbf", "tasks": [{"task": "Fix issues in the specified directory (defaults to the PEAR standard):", "command": "phpcbf {{path/to/directory}}"}, {"task": "Display a list of installed coding standards:", "command": "phpcbf -i"}, {"task": "Specify a coding standard to validate against:", "command": "phpcbf {{path/to/directory}} --standard {{standard}}"}, {"task": "Specify comma-separated file extensions to include when sniffing:", "command": "phpcbf {{path/to/directory}} --extensions {{file_extension(s)}}"}, {"task": "A comma-separated list of files to load before processing:", "command": "phpcbf {{path/to/directory}} --bootstrap {{file(s)}}"}, {"task": "Don't recurse into subdirectories:", "command": "phpcbf {{path/to/directory}} -l"}]}
{"command": "phpcpd", "tasks": [{"task": "Analyze duplicated code for a specific file or directory:", "command": "phpcpd {{path/to/file_or_directory}}"}, {"task": "Analyze using fuzzy matching for variable names:", "command": "phpcpd --fuzzy {{path/to/file_or_directory}}"}, {"task": "Specify a minimum number of identical lines (defaults to 5):", "command": "phpcpd --min-lines {{number_of_lines}} {{path/to/file_or_directory}}"}, {"task": "Specify a minimum number of identical tokens (defaults to 70):", "command": "phpcpd --min-tokens {{number_of_tokens}} {{path/to/file_or_directory}}"}, {"task": "Exclude a directory from analysis (must be relative to the source):", "command": "phpcpd --exclude {{path/to/excluded_directory}} {{path/to/file_or_directory}}"}, {"task": "Output the results to a PHP-CPD XML file:", "command": "phpcpd --log-pmd {{path/to/log_file}} {{path/to/file_or_directory}}"}]}
{"command": "phpcs", "tasks": [{"task": "Sniff the specified directory for issues (defaults to the PEAR standard):", "command": "phpcs {{path/to/directory}}"}, {"task": "Display a list of installed coding standards:", "command": "phpcs -i"}, {"task": "Specify a coding standard to validate against:", "command": "phpcs {{path/to/directory}} --standard {{standard}}"}, {"task": "Specify comma-separated file extensions to include when sniffing:", "command": "phpcs {{path/to/directory}} --extensions {{file_extension(s)}}"}, {"task": "Specify the format of the output report (e.g. `full`, `xml`, `json`, `summary`):", "command": "phpcs {{path/to/directory}} --report {{format}}"}, {"task": "Set config variables to be used during the process:", "command": "phpcs {{path/to/directory}} --config-set {{key}} {{value}}"}, {"task": "A comma-separated list of files to load before processing:", "command": "phpcs {{path/to/directory}} --bootstrap {{file(s)}}"}, {"task": "Don't recurse into subdirectories:", "command": "phpcs {{path/to/directory}} -l"}]}
{"command": "phpdox", "tasks": [{"task": "Display an annotated skeleton configuration XML file:", "command": "phpdox --skel"}, {"task": "Generate documentation for the current working directory:", "command": "phpdox"}, {"task": "Generate documentation using a specific configuration file:", "command": "phpdox --file {{path/to/phpdox.xml}}"}, {"task": "Only run the metadata collection process:", "command": "phpdox --collector"}, {"task": "Only run the documentation generator process:", "command": "phpdox --generator"}]}
{"command": "phpenv", "tasks": [{"task": "Install a PHP version globally:", "command": "phpenv install {{version}}"}, {"task": "Refresh shim files for all PHP binaries known to `phpenv`:", "command": "phpenv rehash"}, {"task": "List all installed PHP versions:", "command": "phpenv versions"}, {"task": "Display the currently active PHP version:", "command": "phpenv version"}, {"task": "Set the global PHP version:", "command": "phpenv global {{version}}"}, {"task": "Set the local PHP version, which overrides the global version:", "command": "phpenv local {{version}}"}, {"task": "Unset the local PHP version:", "command": "phpenv local --unset"}]}
{"command": "phpize", "tasks": [{"task": "Prepare the PHP extension in the current directory for compiling:", "command": "phpize"}, {"task": "Delete files previously created by phpize:", "command": "phpize --clean"}]}
{"command": "phploc", "tasks": [{"task": "Analyze a directory and print the result:", "command": "phploc {{path/to/directory}}"}, {"task": "Include only specific files from a comma-separated list (globs are allowed):", "command": "phploc {{path/to/directory}} --names {{files}}"}, {"task": "Exclude specific files from a comma-separated list (globs are allowed):", "command": "phploc {{path/to/directory}} --names-exclude {{files}}"}, {"task": "Exclude a specific directory from analysis:", "command": "phploc {{path/to/directory}} --exclude {{path/to/exclude_directory}}"}, {"task": "Log the results to a specific CSV file:", "command": "phploc {{path/to/directory}} --log-csv {{path/to/file}}"}, {"task": "Log the results to a specific XML file:", "command": "phploc {{path/to/directory}} --log-xml {{path/to/file}}"}, {"task": "Count PHPUnit test case classes and test methods:", "command": "phploc {{path/to/directory}} --count-tests"}]}
{"command": "phpmd", "tasks": [{"task": "Display a list of available rulesets and formats:", "command": "phpmd"}, {"task": "Scan a file or directory for problems using comma-separated rulesets:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}}"}, {"task": "Specify the minimum priority threshold for rules:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --minimumpriority {{priority}}"}, {"task": "Include only the specified extensions in analysis:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --suffixes {{extensions}}"}, {"task": "Exclude the specified comma-separated directories:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --exclude {{directory_patterns}}"}, {"task": "Output the results to a file instead of `stdout`:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --reportfile {{path/to/report_file}}"}, {"task": "Ignore the use of warning-suppressive PHPDoc comments:", "command": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --strict"}]}
{"command": "phpspec", "tasks": [{"task": "Create a specification for a class:", "command": "phpspec describe {{class_name}}"}, {"task": "Run all specifications in the \"spec\" directory:", "command": "phpspec run"}, {"task": "Run a single specification:", "command": "phpspec run {{path/to/class_specification_file}}"}, {"task": "Run specifications using a specific configuration file:", "command": "phpspec run -c {{path/to/configuration_file}}"}, {"task": "Run specifications using a specific bootstrap file:", "command": "phpspec run -b {{path/to/bootstrap_file}}"}, {"task": "Disable code generation prompts:", "command": "phpspec run --no-code-generation"}, {"task": "Enable fake return values:", "command": "phpspec run --fake"}]}
{"command": "phpstan", "tasks": [{"task": "Display available options for analysis:", "command": "phpstan analyse --help"}, {"task": "Analyze the specified space-separated directories:", "command": "phpstan analyse {{path/to/directory}}"}, {"task": "Analyze a directory using a configuration file:", "command": "phpstan analyse {{path/to/directory}} --configuration {{path/to/config}}"}, {"task": "Analyze using a specific rule level (0-7, higher is stricter):", "command": "phpstan analyse {{path/to/directory}} --level {{level}}"}, {"task": "Specify an autoload file to load before analyzing:", "command": "phpstan analyse {{path/to/directory}} --autoload-file {{path/to/autoload_file}}"}, {"task": "Specify a memory limit during analysis:", "command": "phpstan analyse {{path/to/directory}} --memory-limit {{memory_limit}}"}]}
{"command": "phpstorm", "tasks": [{"task": "Open a specific directory:", "command": "phpstorm {{path/to/directory}}"}, {"task": "Open a file:", "command": "phpstorm {{path/to/file}}"}, {"task": "Open a file at a specific line:", "command": "phpstorm --line {{line_number}} {{path/to/file}}"}, {"task": "View the differences between two files:", "command": "phpstorm diff {{path/to/left_file}} {{path/to/right_file}}"}]}
{"command": "phpunit", "tasks": [{"task": "Run tests in the current directory. Note: Expects you to have a 'phpunit.xml':", "command": "phpunit"}, {"task": "Run tests in a specific file:", "command": "phpunit {{path/to/TestFile.php}}"}, {"task": "Run tests annotated with the given group:", "command": "phpunit --group {{name}}"}, {"task": "Run tests and generate a coverage report in HTML:", "command": "phpunit --coverage-html {{path/to/directory}}"}]}
{"command": "piactl", "tasks": [{"task": "Log in to Private Internet Access:", "command": "piactl login {{path/to/login_file}}"}, {"task": "Connect to Private Internet Access:", "command": "piactl connect"}, {"task": "Disconnect from Private Internet Access:", "command": "piactl disconnect"}, {"task": "Enable or disable the Private Internet Access daemon in the background:", "command": "piactl background {{enable|disable}}"}, {"task": "List all available VPN regions:", "command": "piactl get regions"}, {"task": "Display the current VPN region:", "command": "piactl get region"}, {"task": "Set your VPN region:", "command": "piactl set region {{region}}"}, {"task": "Log out of Private Internet Access:", "command": "piactl logout"}]}
{"command": "pic", "tasks": [{"task": "Process input with pictures, saving the output for future typesetting with groff to PostScript:", "command": "pic {{path/to/input.pic}} > {{path/to/output.roff}}"}, {"task": "Typeset input with pictures to PDF using the [me] macro package:", "command": "pic -T {{pdf}} {{path/to/input.pic}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}"}]}
{"command": "picard", "tasks": [{"task": "Start Picard:", "command": "picard"}, {"task": "Open a set of files:", "command": "picard {{path/to/file1.mp3}} {{path/to/file2.mp3}}"}, {"task": "Display the version of Picard installed:", "command": "picard --long-version"}]}
{"command": "pickle", "tasks": [{"task": "Install a specific PHP extension:", "command": "pickle install {{extension_name}}"}, {"task": "Convert an existing PECL extension configuration to a Pickle configuration file:", "command": "pickle convert {{path/to/directory}}"}, {"task": "Validate a PECL extension:", "command": "pickle validate {{path/to/directory}}"}, {"task": "Package a PECL extension for release:", "command": "pickle release {{path/to/directory}}"}]}
{"command": "picom-trans", "tasks": [{"task": "Set the currently focused window opacity to a specific percentage:", "command": "picom-trans --current --opacity {{90}}"}, {"task": "Set the opacity of a window with a specific name:", "command": "picom-trans --name {{Firefox}} --opacity {{90}}"}, {"task": "Set the opacity of a specific window selected via mouse cursor:", "command": "picom-trans --select --opacity {{90}}"}, {"task": "Toggle the opacity of a specific window:", "command": "picom-trans --name {{Firefox}} --toggle"}]}
{"command": "pigz", "tasks": [{"task": "Compress a file with default options:", "command": "pigz {{path/to/file}}"}, {"task": "Compress a file using the best compression method:", "command": "pigz -9 {{path/to/file}}"}, {"task": "Compress a file using no compression and 4 processors:", "command": "pigz -0 -p{{4}} {{path/to/file}}"}, {"task": "Compress a directory using tar:", "command": "tar cf - {{path/to/directory}} | pigz > {{path/to/file}}.tar.gz"}, {"task": "Decompress a file:", "command": "pigz -d {{archive.gz}}"}, {"task": "List the contents of an archive:", "command": "pigz -l {{archive.tar.gz}}"}]}
{"command": "ping", "tasks": [{"task": "Ping host:", "command": "ping {{host}}"}, {"task": "Ping a host only a specific number of times:", "command": "ping -c {{count}} {{host}}"}, {"task": "Ping host, specifying the interval in seconds between requests (default is 1 second):", "command": "ping -i {{seconds}} {{host}}"}, {"task": "Ping host without trying to lookup symbolic names for addresses:", "command": "ping -n {{host}}"}, {"task": "Ping host and ring the bell when a packet is received (if your terminal supports it):", "command": "ping -a {{host}}"}, {"task": "Also display a message if no response was received:", "command": "ping -O {{host}}"}]}
{"command": "ping6", "tasks": [{"task": "Ping a host:", "command": "ping6 {{host}}"}, {"task": "Ping a host only a specific number of times:", "command": "ping6 -c {{count}} {{host}}"}, {"task": "Ping a host, specifying the interval in seconds between requests (default is 1 second):", "command": "ping6 -i {{seconds}} {{host}}"}, {"task": "Ping a host without trying to lookup symbolic names for addresses:", "command": "ping6 -n {{host}}"}, {"task": "Ping a host and ring the bell when a packet is received (if your terminal supports it):", "command": "ping6 -a {{host}}"}]}
{"command": "pinky", "tasks": [{"task": "Display details about the current user:", "command": "pinky"}, {"task": "Display details for a specific user:", "command": "pinky {{user}}"}, {"task": "Display details in the long format:", "command": "pinky {{user}} -l"}, {"task": "Omit the user's home directory and shell in long format:", "command": "pinky {{user}} -lb"}, {"task": "Omit the user's project file in long format:", "command": "pinky {{user}} -lh"}, {"task": "Omit the column headings in short format:", "command": "pinky {{user}} -f"}]}
{"command": "Pint", "tasks": [{"task": "Execute code style fixing:", "command": "pint"}, {"task": "Display all files that are changed:", "command": "pint -v"}, {"task": "Execute code style linting without applying changes:", "command": "pint --test"}, {"task": "Execute code style fixes using a specific config file:", "command": "pint --config {{path/to/pint.json}}"}, {"task": "Execute code style fixes using a specific preset:", "command": "pint --preset {{psr12}}"}]}
{"command": "pinta", "tasks": [{"task": "Start Pinta:", "command": "pinta"}, {"task": "Open specific files:", "command": "pinta {{path/to/image1 path/to/image2 ...}}"}]}
{"command": "pio access", "tasks": [{"task": "Grant a user access to a resource:", "command": "pio access grant {{guest|maintainer|admin}} {{username}} {{resource_urn}}"}, {"task": "Remove a user's access to a resource:", "command": "pio access revoke {{username}} {{resource_urn}}"}, {"task": "Show all resources that a user or team has access to and the access level:", "command": "pio access list {{username}}"}, {"task": "Restrict access to a resource to specific users or team members:", "command": "pio access private {{resource_urn}}"}, {"task": "Allow all users access to a resource:", "command": "pio access public {{resource_urn}}"}]}
{"command": "pio account", "tasks": [{"task": "Register a new PlatformIO account:", "command": "pio account register --username {{username}} --email {{email}} --password {{password}} --firstname {{firstname}} --lastname {{lastname}}"}, {"task": "Permanently delete your PlatformIO account and related data:", "command": "pio account destroy"}, {"task": "Log in to your PlatformIO account:", "command": "pio account login --username {{username}} --password {{password}}"}, {"task": "Log out of your PlatformIO account:", "command": "pio account logout"}, {"task": "Update your PlatformIO profile:", "command": "pio account update --username {{username}} --email {{email}} --firstname {{firstname}} --lastname {{lastname}} --current-password {{password}}"}, {"task": "Show detailed information about your PlatformIO account:", "command": "pio account show"}, {"task": "Reset your password using your username or email:", "command": "pio account forgot --username {{username_or_email}}"}]}
{"command": "pio boards", "tasks": [{"task": "List all available boards:", "command": "pio boards"}, {"task": "List only boards from installed platforms:", "command": "pio boards --installed"}]}
{"command": "pio check", "tasks": [{"task": "Perform a basic analysis check on the current project:", "command": "pio check"}, {"task": "Perform a basic analysis check on a specific project:", "command": "pio check --project-dir {{project_dir}}"}, {"task": "Perform an analysis check for a specific environment:", "command": "pio check --environment {{environment}}"}, {"task": "Perform an analysis check and only report a specified defect severity type:", "command": "pio check --severity {{low|medium|high}}"}, {"task": "Perform an analysis check and show detailed information when processing environments:", "command": "pio check --verbose"}]}
{"command": "pio ci", "tasks": [{"task": "Build a PlatformIO project in the default system temporary directory and delete it afterwards:", "command": "pio ci {{path/to/project}}"}, {"task": "Build a PlatformIO project and specify specific libraries:", "command": "pio ci --lib {{path/to/library_directory}} {{path/to/project}}"}, {"task": "Build a PlatformIO project and specify a specific board (`pio boards` lists all of them):", "command": "pio ci --board {{board}} {{path/to/project}}"}, {"task": "Build a PlatformIO project in a specific directory:", "command": "pio ci --build-dir {{path/to/build_directory}} {{path/to/project}}"}, {"task": "Build a PlatformIO project and don't delete the build directory:", "command": "pio ci --keep-build-dir {{path/to/project}}"}, {"task": "Build a PlatformIO project using a specific configuration file:", "command": "pio ci --project-conf {{path/to/platformio.ini}}"}]}
{"command": "pio debug", "tasks": [{"task": "Debug the PlatformIO project in the current directory:", "command": "pio debug"}, {"task": "Debug a specific PlatformIO project:", "command": "pio debug --project-dir {{path/to/platformio_project}}"}, {"task": "Debug a specific environment:", "command": "pio debug --environment {{environment}}"}, {"task": "Debug a PlatformIO project using a specific configuration file:", "command": "pio debug --project-conf {{path/to/platformio.ini}}"}, {"task": "Debug a PlatformIO project using the `gdb` debugger:", "command": "pio debug --interface={{gdb}} {{gdb_options}}"}]}
{"command": "pio device", "tasks": [{"task": "List all available serial ports:", "command": "pio device list"}, {"task": "List all available logical devices:", "command": "pio device list --logical"}, {"task": "Start an interactive device monitor:", "command": "pio device monitor"}, {"task": "Start an interactive device monitor and listen to a specific port:", "command": "pio device monitor --port {{/dev/ttyUSBX}}"}, {"task": "Start an interactive device monitor and set a specific baud rate (defaults to 9600):", "command": "pio device monitor --baud {{57600}}"}, {"task": "Start an interactive device monitor and set a specific EOL character (defaults to `CRLF`):", "command": "pio device monitor --eol {{CRLF|CR|LF}}"}, {"task": "Go to the menu of the interactive device monitor:", "command": "Ctrl + T"}]}
{"command": "pio home", "tasks": [{"task": "Open PlatformIO Home in the default web browser:", "command": "pio home"}, {"task": "Use a specific HTTP port (defaults to 8008):", "command": "pio home --port {{port}}"}, {"task": "Bind to a specific IP address (defaults to 127.0.0.1):", "command": "pio home --host {{ip_address}}"}, {"task": "Do not automatically open PlatformIO Home in the default web browser:", "command": "pio home --no-open"}, {"task": "Automatically shutdown the server on timeout (in seconds) when no clients are connected:", "command": "pio home --shutdown-timeout {{time}}"}, {"task": "Specify a unique session identifier to keep PlatformIO Home isolated from other instances and protected from 3rd party access:", "command": "pio home --session-id {{id}}"}]}
{"command": "pio init", "tasks": [{"task": "View documentation for the original command:", "command": "tldr pio project"}]}
{"command": "pio lib", "tasks": [{"task": "List installed libraries:", "command": "pio lib list"}, {"task": "List built-in libraries based on installed development platforms and their frameworks:", "command": "pio lib builtin"}, {"task": "Search for existing libraries:", "command": "pio lib search {{keyword}}"}, {"task": "Show details about a library:", "command": "pio lib show {{library}}"}, {"task": "Install a library:", "command": "pio lib install {{library}}"}, {"task": "Update installed libraries:", "command": "pio lib update"}, {"task": "Uninstall a library:", "command": "pio lib uninstall {{library}}"}, {"task": "Show PlatformIO library registry statistics:", "command": "pio lib stats"}]}
{"command": "pio org", "tasks": [{"task": "Create a new organization:", "command": "pio org create {{organization_name}}"}, {"task": "Delete an organization:", "command": "pio org destroy {{organization_name}}"}, {"task": "Add a user to an organization:", "command": "pio org add {{organization_name}} {{username}}"}, {"task": "Remove a user from an organization:", "command": "pio org remove {{organization_name}} {{username}}"}, {"task": "List all organizations the current user is a member of and their owners:", "command": "pio org list"}, {"task": "Update the name, email or display name of an organization:", "command": "pio org update --orgname {{new_organization_name}} --email {{new_email}} --displayname {{new_display_name}} {{organization_name}}"}]}
{"command": "pio package", "tasks": [{"task": "Create a package tarball from the current directory:", "command": "pio package pack --output {{path/to/package.tar.gz}}"}, {"task": "Create and publish a package tarball from the current directory:", "command": "pio package publish"}, {"task": "Publish the current directory and restrict public access to it:", "command": "pio package publish --private"}, {"task": "Publish a package:", "command": "pio package publish {{path/to/package.tar.gz}}"}, {"task": "Publish a package with a custom release date (UTC):", "command": "pio package publish {{path/to/package.tar.gz}} --released-at \"{{2021-04-08 21:15:38}}\""}, {"task": "Remove all versions of a published package from the registry:", "command": "pio package unpublish {{package_name}}"}, {"task": "Remove a specific version of a published package from the registry:", "command": "pio package unpublish {{package_name}}@{{version}}"}, {"task": "Undo the removal, putting all versions or a specific version of the package back into the registry:", "command": "pio package unpublish --undo {{package_name}}@{{version}}"}]}
{"command": "pio platform", "tasks": [{"task": "List all installed development platforms:", "command": "pio platform list"}, {"task": "Search for existing development platforms:", "command": "pio platform search {{platform}}"}, {"task": "Show details about a development platform:", "command": "pio platform show {{platform}}"}, {"task": "Install a development platform:", "command": "pio platform install {{platform}}"}, {"task": "Update installed development platforms:", "command": "pio platform update"}, {"task": "Uninstall a development platform:", "command": "pio platform uninstall {{platform}}"}, {"task": "List all supported frameworks:", "command": "pio platform frameworks"}]}
{"command": "pio project", "tasks": [{"task": "Initialize a new PlatformIO project:", "command": "pio project init"}, {"task": "Initialize a new PlatformIO project in a specific directory:", "command": "pio project init --project-dir {{path/to/project_directory}}"}, {"task": "Initialize a new PlatformIO project, specifying a board ID:", "command": "pio project init --board {{ATmega328P|uno|...}}"}, {"task": "Initialize a new PlatformIO based project, specifying one or more project options:", "command": "pio project init --project-option=\"{{option}}={{value}}\" --project-option=\"{{option}}={{value}}\""}, {"task": "Print the configuration of a project:", "command": "pio project config"}]}
{"command": "pio remote", "tasks": [{"task": "List all active Remote Agents:", "command": "pio remote agent list"}, {"task": "Start a new Remote Agent with a specific name and share it with friends:", "command": "pio remote agent start --name {{agent_name}} --share {{example1@example.com}} --share {{example2@example.com}}"}, {"task": "List devices from specified Agents (omit `--agent` to specify all Agents):", "command": "pio remote --agent {{agent_name1}} --agent {{agent_name2}} device list"}, {"task": "Connect to the serial port of a remote device:", "command": "pio remote --agent {{agent_name}} device monitor"}, {"task": "Run all targets on a specified Agent:", "command": "pio remote --agent {{agent_name}} run"}, {"task": "Update installed core packages, development platforms and global libraries on a specific Agent:", "command": "pio remote --agent {{agent_name}} update"}, {"task": "Run all tests in all environments on a specific Agent:", "command": "pio remote --agent {{agent_name}} test"}]}
{"command": "pio run", "tasks": [{"task": "List all available project targets:", "command": "pio run --list-targets"}, {"task": "List all available project targets of a specific environment:", "command": "pio run --list-targets --environment {{environment}}"}, {"task": "Run all targets:", "command": "pio run"}, {"task": "Run all targets of specified environments:", "command": "pio run --environment {{environment1}} --environment {{environment2}}"}, {"task": "Run specified targets:", "command": "pio run --target {{target1}} --target {{target2}}"}, {"task": "Run the targets of a specified configuration file:", "command": "pio run --project-conf {{path/to/platformio.ini}}"}]}
{"command": "pio settings", "tasks": [{"task": "Display the names, values and descriptions of all PlatformIO settings:", "command": "pio settings get"}, {"task": "Display the name, value and description of a specific PlatformIO setting:", "command": "pio settings get {{setting}}"}, {"task": "Set a specific setting value:", "command": "pio settings set {{setting}} {{value}}"}, {"task": "Reset the values of all modified settings to their factory defaults:", "command": "pio settings reset"}]}
{"command": "pio system", "tasks": [{"task": "Install shell completion for the current shell (supports Bash, Fish, Zsh and PowerShell):", "command": "pio system completion install"}, {"task": "Uninstall shell completion for the current shell:", "command": "pio system completion uninstall"}, {"task": "Display system-wide PlatformIO information:", "command": "pio system info"}, {"task": "Remove unused PlatformIO data:", "command": "pio system prune"}, {"task": "Remove only cached data:", "command": "pio system prune --cache"}, {"task": "List unused PlatformIO data that would be removed but do not actually remove it:", "command": "pio system prune --dry-run"}]}
{"command": "pio team", "tasks": [{"task": "Create a new team with the specified description:", "command": "pio team create --description {{description}} {{organization_name}}:{{team_name}}"}, {"task": "Delete a team:", "command": "pio team destroy {{organization_name}}:{{team_name}}"}, {"task": "Add a new user to a team:", "command": "pio team add {{organization_name}}:{{team_name}} {{username}}"}, {"task": "Remove a user from a team:", "command": "pio team remove {{organization_name}}:{{team_name}} {{username}}"}, {"task": "List all teams that the user is part of and their members:", "command": "pio team list"}, {"task": "List all teams in an organization:", "command": "pio team list {{organization_name}}"}, {"task": "Rename a team:", "command": "pio team update --name {{new_team_name}} {{organization_name}}:{{team_name}}"}, {"task": "Change the description of a team:", "command": "pio team update --description {{new_description}} {{organization_name}}:{{team_name}}"}]}
{"command": "pio test", "tasks": [{"task": "Run all tests in all environments of the current PlatformIO project:", "command": "pio test"}, {"task": "Test only specific environments:", "command": "pio test --environment {{environment1}} --environment {{environment2}}"}, {"task": "Run only tests whose name matches a specific glob pattern:", "command": "pio test --filter \"{{pattern}}\""}, {"task": "Ignore tests whose name matches a specific glob pattern:", "command": "pio test --ignore \"{{pattern}}\""}, {"task": "Specify a port for firmware uploading:", "command": "pio test --upload-port {{upload_port}}"}, {"task": "Specify a custom configuration file for running the tests:", "command": "pio test --project-conf {{path/to/platformio.ini}}"}]}
{"command": "pio update", "tasks": [{"task": "Perform a full update of all packages, development platforms and global libraries:", "command": "pio update"}, {"task": "Update core packages only (skips platforms and libraries):", "command": "pio update --core-packages"}, {"task": "Check for new versions of packages, platforms and libraries but do not actually update them:", "command": "pio update --dry-run"}]}
{"command": "pio upgrade", "tasks": [{"task": "Update PlatformIO to the latest version:", "command": "pio upgrade"}, {"task": "Update PlatformIO to the latest development (unstable) version:", "command": "pio upgrade --dev"}]}
{"command": "pio", "tasks": [{"task": "Show help and list subcommands:", "command": "pio --help"}, {"task": "Print the version number and exit:", "command": "pio --version"}, {"task": "Show help for a specific subcommand:", "command": "pio {{subcommand}} --help"}]}
{"command": "piodebuggdb", "tasks": [{"task": "View documentation for the original command:", "command": "tldr pio debug"}]}
{"command": "pip install", "tasks": [{"task": "Install a package:", "command": "pip install {{package_name}}"}, {"task": "Install a specific version of a package:", "command": "pip install {{package_name}}=={{package_version}}"}, {"task": "Install packages listed in a file:", "command": "pip install --requirement {{path/to/requirements.txt}}"}, {"task": "Install packages from an URL or local file archive (.tar.gz | .whl):", "command": "pip install --find-links {{url|path/to/file}}"}, {"task": "Install the local package in the current directory in develop (editable) mode:", "command": "pip install --editable {{.}}"}]}
{"command": "pip uninstall", "tasks": [{"task": "Uninstall a package:", "command": "pip uninstall {{package_name}}"}, {"task": "Uninstall packages listed in a specific file:", "command": "pip uninstall --requirement {{path/to/requirements.txt}}"}, {"task": "Uninstall package without asking for confirmation:", "command": "pip uninstall --yes {{package_name}}"}]}
{"command": "pip", "tasks": [{"task": "Install a package (see `pip install` for more install examples):", "command": "pip install {{package_name}}"}, {"task": "Install a package to the user's directory instead of the system-wide default location:", "command": "pip install --user {{package}}"}, {"task": "Upgrade a package:", "command": "pip install --upgrade {{package_name}}"}, {"task": "Uninstall a package:", "command": "pip uninstall {{package_name}}"}, {"task": "Save installed packages to file:", "command": "pip freeze > {{requirements.txt}}"}, {"task": "Show installed package info:", "command": "pip show {{package_name}}"}, {"task": "Install packages from a file:", "command": "pip install --requirement {{requirements.txt}}"}]}
{"command": "pip3", "tasks": [{"task": "Find available packages:", "command": "pip3 search {{package_name}}"}, {"task": "Install a package:", "command": "pip3 install {{package_name}}"}, {"task": "Install a specific version of a package:", "command": "pip3 install {{package_name}}=={{package_version}}"}, {"task": "Upgrade a package:", "command": "pip3 install --upgrade {{package_name}}"}, {"task": "Uninstall a package:", "command": "pip3 uninstall {{package_name}}"}, {"task": "Save the list of installed packages to a file:", "command": "pip3 freeze > {{requirements.txt}}"}, {"task": "Install packages from a file:", "command": "pip3 install --requirement {{requirements.txt}}"}, {"task": "Show installed package info:", "command": "pip3 show {{package_name}}"}]}
{"command": "pipenv", "tasks": [{"task": "Create a new project:", "command": "pipenv"}, {"task": "Create a new project using Python 3:", "command": "pipenv --three"}, {"task": "Install a package:", "command": "pipenv install {{package_name}}"}, {"task": "Install all the dependencies for a project:", "command": "pipenv install"}, {"task": "Install all the dependencies for a project (including dev packages):", "command": "pipenv install --dev"}, {"task": "Uninstall a package:", "command": "pipenv uninstall {{package_name}}"}, {"task": "Start a shell within the created virtual environment:", "command": "pipenv shell"}, {"task": "Generate a `requirements.txt` (list of dependencies) for a project:", "command": "pipenv lock --requirements"}]}
{"command": "pipx", "tasks": [{"task": "Run an app in a temporary virtual environment:", "command": "pipx run {{pycowsay}} {{moo}}"}, {"task": "Install a package in a virtual environment and add entry points to path:", "command": "pipx install {{package}}"}, {"task": "List installed packages:", "command": "pipx list"}, {"task": "Run an app in a temporary virtual environment with a package name different from the executable:", "command": "pipx run --spec {{httpx-cli}} {{httpx}} {{http://www.github.com}}"}, {"task": "Inject dependencies into an existing virtual environment:", "command": "pipx inject {{package}} {{dependency1 dependency2 ...}}"}, {"task": "Install a package in a virtual environment with pip arguments:", "command": "pipx install --pip-args='{{pip-args}}' {{package}}"}]}
{"command": "pixiecore", "tasks": [{"task": "Start a PXE boot server which provides a `netboot.xyz` boot image:", "command": "pixiecore {{quick}} xyz --dhcp-no-bind"}, {"task": "Start a new PXE boot server which provides an Ubuntu boot image:", "command": "pixiecore {{quick}} ubuntu --dhcp-no-bind"}, {"task": "Get a list of all available boot images for quick mode:", "command": "pixiecore quick --help"}]}
{"command": "pixterm", "tasks": [{"task": "Render a static image directly in the terminal:", "command": "pixterm {{path/to/file}}"}, {"task": "Use the image's original aspect ratio:", "command": "pixterm -s 2 {{path/to/file}}"}, {"task": "Specify a custom aspect ratio using a specific number of [t]erminal [r]ows and [c]olumns:", "command": "pixterm -tr {{24}} -tc {{80}} {{path/to/file}}"}, {"task": "Filter the output with a [m]atte background color and character [d]ithering:", "command": "pixterm -m {{000000}} -d 2 {{path/to/file}}"}]}
{"command": "pkg-config", "tasks": [{"task": "Get the list of libraries and their dependencies:", "command": "pkg-config --libs {{library1 library2 ...}}"}, {"task": "Get the list of libraries, their dependencies, and proper cflags for gcc:", "command": "pkg-config --cflags --libs {{library1 library2 ...}}"}, {"task": "Compile your code with libgtk-3, libwebkit2gtk-4.0 and all their dependencies:", "command": "c++ example.cpp $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0) -o example"}]}
{"command": "pkill", "tasks": [{"task": "Kill all processes which match:", "command": "pkill \"{{process_name}}\""}, {"task": "Kill all processes which match their full command instead of just the process name:", "command": "pkill -f \"{{command_name}}\""}, {"task": "Force kill matching processes (can't be blocked):", "command": "pkill -9 \"{{process_name}}\""}, {"task": "Send SIGUSR1 signal to processes which match:", "command": "pkill -USR1 \"{{process_name}}\""}, {"task": "Kill the main `firefox` process to close the browser:", "command": "pkill --oldest \"{{firefox}}\""}]}
{"command": "plantuml", "tasks": [{"task": "Render diagrams to default format (PNG):", "command": "plantuml {{diagram1.puml}} {{diagram2.puml}}"}, {"task": "Render a diagram in given format (e.g. `png`, `pdf`, `svg`, `txt`):", "command": "plantuml -t {{format}} {{diagram.puml}}"}, {"task": "Render all diagrams of a directory:", "command": "plantuml {{path/to/diagrams}}"}, {"task": "Render a diagram to the output directory:", "command": "plantuml -o {{path/to/output}} {{diagram.puml}}"}, {"task": "Render a diagram with the configuration file:", "command": "plantuml -config {{config.cfg}} {{diagram.puml}}"}, {"task": "Display help:", "command": "plantuml -help"}]}
{"command": "platformio", "tasks": [{"task": "View documentation for the original command:", "command": "tldr pio"}]}
{"command": "play", "tasks": [{"task": "Play the given audio file:", "command": "play {{audiofile}}"}, {"task": "Play the given audio files:", "command": "play {{audiofile1}} {{audiofile2}}"}, {"task": "Play the given audio at twice the speed:", "command": "play {{audiofile}} speed 2.0"}, {"task": "Play the given audio in reverse:", "command": "play {{audiofile}} reverse"}]}
{"command": "plenv", "tasks": [{"task": "Show the currently selected Perl version and how it was selected:", "command": "plenv version"}, {"task": "List all available installed Perl versions:", "command": "plenv versions"}, {"task": "Set the global Perl version (used unless a local or shell version takes priority):", "command": "plenv global {{version}}"}, {"task": "Set the local application-specific Perl version (used in the current directory and all directories below it):", "command": "plenv local {{version}}"}, {"task": "Set the shell-specific Perl version (used for the current session only):", "command": "plenv shell {{version}}"}, {"task": "Display help:", "command": "plenv"}, {"task": "Display help for a command:", "command": "plenv help {{command}}"}]}
{"command": "plesk", "tasks": [{"task": "Generate an auto login link for the admin user and print it:", "command": "plesk login"}, {"task": "Show product version information:", "command": "plesk version"}, {"task": "List all hosted domains:", "command": "plesk bin domain --list"}, {"task": "Start watching for changes in the `panel.log` file:", "command": "plesk log {{panel.log}}"}, {"task": "Start the interactive MySQL console:", "command": "plesk db"}, {"task": "Open the Plesk main configuration file in the default editor:", "command": "plesk conf {{panel.ini}}"}]}
{"command": "plocate", "tasks": [{"task": "Look for patterns in the database (recomputed periodically):", "command": "plocate {{pattern}}"}, {"task": "Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`):", "command": "plocate */{{filename}}"}]}
{"command": "pm2", "tasks": [{"task": "Start a process with a name that can be used for later operations:", "command": "pm2 start {{app.js}} --name {{application_name}}"}, {"task": "List processes:", "command": "pm2 list"}, {"task": "Monitor all processes:", "command": "pm2 monit"}, {"task": "Stop a process:", "command": "pm2 stop {{application_name}}"}, {"task": "Restart a process:", "command": "pm2 restart {{application_name}}"}, {"task": "Dump all processes for resurrecting them later:", "command": "pm2 save"}, {"task": "Resurrect previously dumped processes:", "command": "pm2 resurrect"}]}
{"command": "pngcheck", "tasks": [{"task": "Print a summary for an image (width, height, and color depth):", "command": "pngcheck {{image.png}}"}, {"task": "Print information for an image with [c]olorized output:", "command": "pngcheck -c {{image.png}}"}, {"task": "Print [v]erbose information for an image:", "command": "pngcheck -cvt {{image.png}}"}, {"task": "Receive an image from `stdin` and display detailed information:", "command": "cat {{path/to/image.png}} | pngcheck -cvt"}, {"task": "[s]earch for PNGs within a specific file and display information about them:", "command": "pngcheck -s {{image.png}}"}, {"task": "Search for PNGs within another file and e[x]tract them:", "command": "pngcheck -x {{image.png}}"}]}
{"command": "pngcrush", "tasks": [{"task": "Compress a PNG file:", "command": "pngcrush {{in.png}} {{out.png}}"}, {"task": "Compress all PNGs and output them to the specified directory:", "command": "pngcrush -d {{path/to/output}} *.png"}, {"task": "Compress PNG file with all 114 available algorithms and pick the best result:", "command": "pngcrush -rem allb -brute -reduce {{in.png}} {{out.png}}"}]}
{"command": "pngquant", "tasks": [{"task": "Compress a specific PNG as much as possible and write result to a new file:", "command": "pngquant {{path/to/file.png}}"}, {"task": "Compress a specific PNG and override original:", "command": "pngquant --ext .png --force {{path/to/file.png}}"}, {"task": "Try to compress a specific PNG with custom quality (skip if below the min value):", "command": "pngquant --quality {{0-100}} {{path/to/file.png}}"}, {"task": "Compress a specific PNG with the number of colors reduced to 64:", "command": "pngquant {{64}} {{path/to/file.png}}"}, {"task": "Compress a specific PNG and skip if the file is larger than the original:", "command": "pngquant --skip-if-larger {{path/to/file.png}}"}, {"task": "Compress a specific PNG and remove metadata:", "command": "pngquant --strip {{path/to/file.png}}"}, {"task": "Compress a specific PNG and save it to the given path:", "command": "pngquant {{path/to/file.png}} --output {{path/to/file.png}}"}, {"task": "Compress a specific PNG and show progress:", "command": "pngquant --verbose {{path/to/file.png}}"}]}
{"command": "pnpm", "tasks": [{"task": "Create a `package.json` file:", "command": "pnpm init"}, {"task": "Download all the packages listed as dependencies in `package.json`:", "command": "pnpm install"}, {"task": "Download a specific version of a package and add it to the list of dependencies in `package.json`:", "command": "pnpm add {{module_name}}@{{version}}"}, {"task": "Download a package and add it to the list of [D]ev dependencies in `package.json`:", "command": "pnpm add -D {{module_name}}"}, {"task": "Download a package and install it [g]lobally:", "command": "pnpm add -g {{module_name}}"}, {"task": "Uninstall a package and remove it from the list of dependencies in `package.json`:", "command": "pnpm remove {{module_name}}"}, {"task": "Print a tree of locally installed modules:", "command": "pnpm list"}, {"task": "List top-level [g]lobally installed modules:", "command": "pnpm list -g --depth={{0}}"}]}
{"command": "pnpx", "tasks": [{"task": "Execute the binary from a given npm module:", "command": "pnpx {{module_name}}"}, {"task": "Execute a specific binary from a given npm module, in case the module has multiple binaries:", "command": "pnpx --package {{package_name}} {{module_name}}"}, {"task": "Display help:", "command": "pnpx --help"}]}
{"command": "podman build", "tasks": [{"task": "Create an image using a `Dockerfile` or `Containerfile` in the specified directory:", "command": "podman build {{path/to/directory}}"}, {"task": "Create an image with a specified tag:", "command": "podman build --tag {{image_name:version}} {{path/to/directory}}"}, {"task": "Create an image from a non-standard file:", "command": "podman build --file {{Containerfile.different}} ."}, {"task": "Create an image without using any previously cached images:", "command": "podman build --no-cache {{path/to/directory}}"}, {"task": "Create an image suppressing all output:", "command": "podman build --quiet {{path/to/directory}}"}]}
{"command": "podman-compose", "tasks": [{"task": "List all running containers:", "command": "podman-compose ps"}, {"task": "Create and start all containers in the background using a local `docker-compose.yml`:", "command": "podman-compose up -d"}, {"task": "Start all containers, building if needed:", "command": "podman-compose up --build"}, {"task": "Start all containers using an alternate compose file:", "command": "podman-compose {{path/to/file}} up"}, {"task": "Stop all running containers:", "command": "podman-compose stop"}, {"task": "Remove all containers, networks, and volumes:", "command": "podman-compose down --volumes"}, {"task": "Follow logs for a container (omit all container names):", "command": "podman-compose logs --follow {{container_name}}"}, {"task": "Run a one-time command in a service with no ports mapped:", "command": "podman-compose run {{service_name}} {{command}}"}]}
{"command": "podman image", "tasks": [{"task": "List local Docker images:", "command": "podman image ls"}, {"task": "Delete unused local Docker images:", "command": "podman image prune"}, {"task": "Delete all unused images (not just those without a tag):", "command": "podman image prune --all"}, {"task": "Show the history of a local Docker image:", "command": "podman image history {{image}}"}]}
{"command": "podman images", "tasks": [{"task": "List all Podman images:", "command": "podman images"}, {"task": "List all Podman images including intermediates:", "command": "podman images --all"}, {"task": "List the output in quiet mode (only numeric IDs):", "command": "podman images --quiet"}, {"task": "List all Podman images not used by any container:", "command": "podman images --filter dangling=true"}, {"task": "List images that contain a substring in their name:", "command": "podman images \"{{*image|image*}}\""}]}
{"command": "podman machine", "tasks": [{"task": "List existing machines:", "command": "podman machine ls"}, {"task": "Create a new default machine:", "command": "podman machine init"}, {"task": "Create a new machine with a specific name:", "command": "podman machine init {{name}}"}, {"task": "Create a new machine with different resources:", "command": "podman machine init --cpus={{4}} --memory={{4096}} --disk-size={{50}}"}, {"task": "Start or stop a machine:", "command": "podman machine {{start|stop}} {{name}}"}, {"task": "Connect to a running machine via SSH:", "command": "podman machine ssh {{name}}"}, {"task": "Inspect information about a machine:", "command": "podman machine inspect {{name}}"}]}
{"command": "podman ps", "tasks": [{"task": "List currently running podman containers:", "command": "podman ps"}, {"task": "List all podman containers (running and stopped):", "command": "podman ps --all"}, {"task": "Show the latest created container (includes all states):", "command": "podman ps --latest"}, {"task": "Filter containers that contain a substring in their name:", "command": "podman ps --filter \"name={{name}}\""}, {"task": "Filter containers that share a given image as an ancestor:", "command": "podman ps --filter \"ancestor={{image}}:{{tag}}\""}, {"task": "Filter containers by exit status code:", "command": "podman ps --all --filter \"exited={{code}}\""}, {"task": "Filter containers by status (created, running, removing, paused, exited and dead):", "command": "podman ps --filter \"status={{status}}\""}, {"task": "Filter containers that mount a specific volume or have a volume mounted in a specific path:", "command": "podman ps --filter \"volume={{path/to/directory}}\" --format \"table {{.ID}}\\t{{.Image}}\\t{{.Names}}\\t{{.Mounts}}\""}]}
{"command": "podman rmi", "tasks": [{"task": "Remove one or more images given their names:", "command": "podman rmi {{image:tag}} {{image2:tag}} {{...}}"}, {"task": "Force remove an image:", "command": "podman rmi --force {{image}}"}, {"task": "Remove an image without deleting untagged parents:", "command": "podman rmi --no-prune {{image}}"}, {"task": "Display help:", "command": "podman rmi"}]}
{"command": "podman run", "tasks": [{"task": "Run command in a new container from a tagged image:", "command": "podman run {{image:tag}} {{command}}"}, {"task": "Run command in a new container in background and display its ID:", "command": "podman run --detach {{image:tag}} {{command}}"}, {"task": "Run command in a one-off container in interactive mode and pseudo-TTY:", "command": "podman run --rm --interactive --tty {{image:tag}} {{command}}"}, {"task": "Run command in a new container with passed environment variables:", "command": "podman run --env '{{variable}}={{value}}' --env {{variable}} {{image:tag}} {{command}}"}, {"task": "Run command in a new container with bind mounted volumes:", "command": "podman run --volume {{/path/to/host_path}}:{{/path/to/container_path}} {{image:tag}} {{command}}"}, {"task": "Run command in a new container with published ports:", "command": "podman run --publish {{host_port}}:{{container_port}} {{image:tag}} {{command}}"}, {"task": "Run command in a new container overwriting the entrypoint of the image:", "command": "podman run --entrypoint {{command}} {{image:tag}}"}, {"task": "Run command in a new container connecting it to a network:", "command": "podman run --network {{network}} {{image:tag}}"}]}
{"command": "podman", "tasks": [{"task": "List all containers (both running and stopped):", "command": "podman ps --all"}, {"task": "Create a container from an image, with a custom name:", "command": "podman run --name {{container_name}} {{image}}"}, {"task": "Start or stop an existing container:", "command": "podman {{start|stop}} {{container_name}}"}, {"task": "Pull an image from a registry (defaults to Docker Hub):", "command": "podman pull {{image}}"}, {"task": "Display the list of already downloaded images:", "command": "podman images"}, {"task": "Open a shell inside an already running container:", "command": "podman exec --interactive --tty {{container_name}} {{sh}}"}, {"task": "Remove a stopped container:", "command": "podman rm {{container_name}}"}, {"task": "Display the logs of one or more containers and follow log output:", "command": "podman logs --follow {{container_name}} {{container_id}}"}]}
{"command": "poetry", "tasks": [{"task": "Create a new Poetry project in the directory with a specific name:", "command": "poetry new {{project_name}}"}, {"task": "Install a dependency and its subdependencies:", "command": "poetry add {{dependency}}"}, {"task": "Install a development dependency and its subdependencies:", "command": "poetry add --group dev {{dependency}}"}, {"task": "Interactively initialize the current directory as a new Poetry project:", "command": "poetry init"}, {"task": "Get the latest version of all dependencies and update `poetry.lock`:", "command": "poetry update"}, {"task": "Execute a command inside the project's virtual environment:", "command": "poetry run {{command}}"}, {"task": "Bump the minor version of the project in `pyproject.toml`:", "command": "poetry version minor"}]}
{"command": "polybar-msg", "tasks": [{"task": "Quit the bar:", "command": "polybar-msg cmd quit"}, {"task": "Restart the bar in-place:", "command": "polybar-msg cmd restart"}, {"task": "Hide the bar (does nothing if the bar is already hidden):", "command": "polybar-msg cmd hide"}, {"task": "Show the bar again (does nothing if the bar is not hidden):", "command": "polybar-msg cmd show"}, {"task": "Toggle between hidden/visible:", "command": "polybar-msg cmd toggle"}, {"task": "Execute a module action (the data string is optional):", "command": "polybar-msg action \"#{{module_name}}.{{action_name}}.{{data_string}}\""}, {"task": "Only send messages to a specific Polybar instance (all instances by default):", "command": "polybar-msg -p {{pid}} {{cmd|action}} {{payload}}"}]}
{"command": "polybar", "tasks": [{"task": "Start Polybar (the bar name is optional if only one bar is defined in the config):", "command": "polybar {{bar_name}}"}, {"task": "Start Polybar with the specified config:", "command": "polybar --config={{path/to/config.ini}} {{bar_name}}"}, {"task": "Start Polybar and reload the bar when the config file is modified:", "command": "polybar --reload {{bar_name}}"}]}
{"command": "pop", "tasks": [{"task": "Launch the Text-based User Interface:", "command": "pop"}, {"task": "Send an email using the content of a Markdown file as body:", "command": "pop < {{path/to/message.md}} --from {{me@example.com}} --to {{you@example.com}} --subject \"{{On the Subject of Ducks...}}\" --attach {{path/to/attachment}}"}, {"task": "Display help and exit:", "command": "pop --help"}]}
{"command": "popd", "tasks": [{"task": "Remove the top directory from the stack and cd to it:", "command": "popd"}, {"task": "Remove the Nth directory (starting from zero to the left from the list printed with `dirs`):", "command": "popd +N"}, {"task": "Remove the Nth directory (starting from zero to the right from the list printed with `dirs`):", "command": "popd -N"}, {"task": "Remove the 1st directory (starting from zero to the left from the list printed with `dirs`):", "command": "popd -n"}]}
{"command": "popeye", "tasks": [{"task": "Scan the current Kubernetes cluster:", "command": "popeye"}, {"task": "Scan a specific namespace:", "command": "popeye -n {{namespace}}"}, {"task": "Scan specific Kubernetes context:", "command": "popeye --context={{context}}"}, {"task": "Use a spinach configuration file for scanning:", "command": "popeye -f {{spinach.yaml}}"}]}
{"command": "postcss", "tasks": [{"task": "Parse and transform a CSS file:", "command": "postcss {{path/to/file}}"}, {"task": "Parse and transform a CSS file and output to a specific file:", "command": "postcss {{path/to/file}} --output {{path/to/file}}"}, {"task": "Parse and transform a CSS file and output to a specific directory:", "command": "postcss {{path/to/file}} --dir {{path/to/directory}}"}, {"task": "Parse and transform a CSS file in-place:", "command": "postcss {{path/to/file}} --replace"}, {"task": "Specify a custom PostCSS parser:", "command": "postcss {{path/to/file}} --parser {{parser}}"}, {"task": "Specify a custom PostCSS syntax:", "command": "postcss {{path/to/file}} --syntax {{syntax}}"}, {"task": "Watch for changes to a CSS file:", "command": "postcss {{path/to/file}} --watch"}, {"task": "Display available options and examples:", "command": "postcss --help"}]}
{"command": "powershell", "tasks": [{"task": "Start an interactive shell session:", "command": "powershell"}, {"task": "Start an interactive shell session without loading startup configs:", "command": "powershell -NoProfile"}, {"task": "Execute specific commands:", "command": "powershell -Command \"{{echo 'powershell is executed'}}\""}, {"task": "Execute a specific script:", "command": "powershell -File {{path/to/script.ps1}}"}, {"task": "Start a session with a specific version of PowerShell:", "command": "powershell -Version {{version}}"}, {"task": "Prevent a shell from exit after running startup commands:", "command": "powershell -NoExit"}, {"task": "Describe the format of data sent to PowerShell:", "command": "powershell -InputFormat {{Text|XML}}"}, {"task": "Determine how an output from PowerShell is formatted:", "command": "powershell -OutputFormat {{Text|XML}}"}]}
{"command": "pppd", "tasks": [{"task": "Start the daemon:", "command": "pppd"}]}
{"command": "pprof", "tasks": [{"task": "Generate a text report from a specific profiling file, on fibbo binary:", "command": "pprof -top {{./fibbo}} {{./fibbo-profile.pb.gz}}"}, {"task": "Generate a graph and open it on a web browser:", "command": "pprof -svg {{./fibbo}} {{./fibbo-profile.pb.gz}}"}, {"task": "Run pprof in interactive mode to be able to manually launch `pprof` on a file:", "command": "pprof {{./fibbo}} {{./fibbo-profile.pb.gz}}"}, {"task": "Run a web server that serves a web interface on top of `pprof`:", "command": "pprof -http={{localhost:8080}} {{./fibbo}} {{./fibbo-profile.pb.gz}}"}, {"task": "Fetch a profile from an HTTP server and generate a report:", "command": "pprof {{http://localhost:8080/debug/pprof}}"}]}
{"command": "pr", "tasks": [{"task": "Print multiple files with a default header and footer:", "command": "pr {{file1}} {{file2}} {{file3}}"}, {"task": "Print with a custom centered header:", "command": "pr -h \"{{header}}\" {{file1}} {{file2}} {{file3}}"}, {"task": "Print with numbered lines and a custom date format:", "command": "pr -n -D \"{{format}}\" {{file1}} {{file2}} {{file3}}"}, {"task": "Print all files together, one in each column, without a header or footer:", "command": "pr -m -T {{file1}} {{file2}} {{file3}}"}, {"task": "Print, beginning at page 2 up to page 5, with a given page length (including header and footer):", "command": "pr +{{2}}:{{5}} -l {{page_length}} {{file1}} {{file2}} {{file3}}"}, {"task": "Print with an offset for each line and a truncating custom page width:", "command": "pr -o {{offset}} -W {{width}} {{file1}} {{file2}} {{file3}}"}]}
{"command": "pre-commit", "tasks": [{"task": "Install pre-commit into your Git hooks:", "command": "pre-commit install"}, {"task": "Run pre-commit hooks on all staged files:", "command": "pre-commit run"}, {"task": "Run pre-commit hooks on all files, staged or unstaged:", "command": "pre-commit run --all-files"}, {"task": "Clean pre-commit cache:", "command": "pre-commit clean"}]}
{"command": "prettier", "tasks": [{"task": "Format a file and print the result to `stdout`:", "command": "prettier {{path/to/file}}"}, {"task": "Check if a specific file has been formatted:", "command": "prettier --check {{path/to/file}}"}, {"task": "Run with a specific configuration file:", "command": "prettier --config {{path/to/config_file}} {{path/to/file}}"}, {"task": "Format a file or directory, replacing the original:", "command": "prettier --write {{path/to/file_or_directory}}"}, {"task": "Format files or directories recursively using single quotes and no trailing commas:", "command": "prettier --single-quote --trailing-comma {{none}} --write {{path/to/file_or_directory}}"}, {"task": "Format JavaScript and TypeScript files recursively, replacing the original:", "command": "prettier --write \"**/*.{js,jsx,ts,tsx}\""}]}
{"command": "pretty-bytes", "tasks": [{"task": "Convert numeric bytes value to a human-readable string:", "command": "pretty-bytes {{1337}}"}, {"task": "Convert numeric bytes value from `stdin` to a human-readable string:", "command": "echo {{1337}} | pretty-bytes"}, {"task": "Display help and usage information:", "command": "pretty-bytes --help"}]}
{"command": "printenv", "tasks": [{"task": "Display key-value pairs of all environment variables:", "command": "printenv"}, {"task": "Display the value of a specific variable:", "command": "printenv {{HOME}}"}, {"task": "Display the value of a variable and end with NUL instead of newline:", "command": "printenv --null {{HOME}}"}]}
{"command": "printf", "tasks": [{"task": "Print a text message:", "command": "printf \"{{%s\\n}}\" \"{{Hello world}}\""}, {"task": "Print an integer in bold blue:", "command": "printf \"{{\\e[1;34m%.3d\\e[0m\\n}}\" {{42}}"}, {"task": "Print a float number with the Unicode Euro sign:", "command": "printf \"{{\\u20AC %.2f\\n}}\" {{123.4}}"}, {"task": "Print a text message composed with environment variables:", "command": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\""}, {"task": "Store a formatted message in a variable (does not work on zsh):", "command": "printf -v {{myvar}} {{\"This is %s = %d\\n\" \"a year\" 2016}}"}]}
{"command": "procs", "tasks": [{"task": "List all processes showing the PID, user, CPU usage, memory usage, and the command which started them:", "command": "procs"}, {"task": "List all processes as a tree:", "command": "procs --tree"}, {"task": "List information about processes, if the commands which started them contain `zsh`:", "command": "procs {{zsh}}"}, {"task": "List information about all processes sorted by CPU time in [a]scending or [d]escending order:", "command": "procs {{--sorta|--sortd}} cpu"}, {"task": "List information about processes with either a PID, command, or user containing `41` or `firefox`:", "command": "procs --or {{PID|command|user}} {{41}} {{firefox}}"}, {"task": "List information about processes with both PID `41` and a command or user containing `zsh`:", "command": "procs --and {{41}} {{zsh}}"}]}
{"command": "progpilot", "tasks": [{"task": "Analyze the current directory:", "command": "progpilot"}, {"task": "Analyze a specific file or directory:", "command": "progpilot {{path/to/file_or_directory}}"}, {"task": "Specify a custom configuration file:", "command": "progpilot --configuration {{path/to/configuration.yml}}"}]}
{"command": "progress", "tasks": [{"task": "Show the progress of running coreutils:", "command": "progress"}, {"task": "Show the progress of running coreutils in quiet mode:", "command": "progress -q"}, {"task": "Launch and monitor a single long-running command:", "command": "{{command}} & progress --monitor --pid $!"}, {"task": "Include an estimate of time remaining for completion:", "command": "progress --wait --command {{firefox}}"}]}
{"command": "Projucer", "tasks": [{"task": "Display information about a project:", "command": "Projucer --status {{path/to/project_file}}"}, {"task": "Resave all files and resources in a project:", "command": "Projucer --resave {{path/to/project_file}}"}, {"task": "Update the version number in a project:", "command": "Projucer --set-version {{version_number}} {{path/to/project_file}}"}, {"task": "Generate a JUCE project from a PIP file:", "command": "Projucer --create-project-from-pip {{path/to/PIP}} {{path/to/output}}"}, {"task": "Remove all JUCE-style comments (`//=====`, `//-----` or `///////`):", "command": "Projucer --tidy-divider-comments {{path/to/target_folder}}"}, {"task": "Display help:", "command": "Projucer --help"}]}
{"command": "promtool", "tasks": [{"task": "Check if the config files are valid or not (if present report errors):", "command": "promtool check config {{config_file.yml}}"}, {"task": "Check if the rule files are valid or not (if present report errors):", "command": "promtool check rules {{rules_file.yml}}"}, {"task": "Pass Prometheus metrics over `stdin` to check them for consistency and correctness:", "command": "curl --silent {{http://example.com:9090/metrics/}} | promtool check metrics"}, {"task": "Unit tests for rules config:", "command": "promtool test rules {{test_file.yml}}"}]}
{"command": "prosodyctl", "tasks": [{"task": "Show the status of the Prosody server:", "command": "sudo prosodyctl status"}, {"task": "Reload the server's configuration files:", "command": "sudo prosodyctl reload"}, {"task": "Add a user to the Prosody XMPP server:", "command": "sudo prosodyctl adduser {{user@example.com}}"}, {"task": "Set a user's password:", "command": "sudo prosodyctl passwd {{user@example.com}}"}, {"task": "Permanently delete a user:", "command": "sudo prosodyctl deluser {{user@example.com}}"}]}
{"command": "protector", "tasks": [{"task": "Protect branches of a GitHub repository (create branch protection rules):", "command": "protector {{branches_regex}} -repos {{organization/repository}}"}, {"task": "Use the dry run to see what would be protected (can also be used for freeing):", "command": "protector -dry-run {{branches_regex}} -repos {{organization/repository}}"}, {"task": "Free branches of a GitHub repository (delete branch protection rules):", "command": "protector -free {{branches_regex}} -repos {{organization/repository}}"}]}
{"command": "protoc", "tasks": [{"task": "Generate Python code from a `.proto` file:", "command": "protoc --python_out={{path/to/output_directory}} {{input_file.proto}}"}, {"task": "Generate Java code from a `.proto` file that imports other `.proto` files:", "command": "protoc --java_out={{path/to/output_directory}} --proto_path={{path/to/import_search_path}} {{input_file.proto}}"}, {"task": "Generate code for multiple languages:", "command": "protoc --csharp_out={{path/to/c#_output_directory}} --js_out={{path/to/js_output_directory}} {{input_file.proto}}"}]}
{"command": "prqlc", "tasks": [{"task": "Run the compiler interactively:", "command": "prqlc compile"}, {"task": "Compile a specific `.prql` file to `stdout`:", "command": "prqlc compile {{path/to/file.prql}}"}, {"task": "Compile a `.prql` file to a `.sql` file:", "command": "prqlc compile {{path/to/source.prql}} {{path/to/target.sql}}"}, {"task": "Compile a query:", "command": "echo \"{{from employees | filter has_dog | select salary}}\" | prqlc compile"}, {"task": "Watch a directory and compile on file modification:", "command": "prqlc watch {{path/to/directory}}"}]}
{"command": "ps", "tasks": [{"task": "List all running processes:", "command": "ps aux"}, {"task": "List all running processes including the full command string:", "command": "ps auxww"}, {"task": "Search for a process that matches a string:", "command": "ps aux | grep {{string}}"}, {"task": "List all processes of the current user in extra full format:", "command": "ps --user $(id -u) -F"}, {"task": "List all processes of the current user as a tree:", "command": "ps --user $(id -u) f"}, {"task": "Get the parent PID of a process:", "command": "ps -o ppid= -p {{pid}}"}, {"task": "Sort processes by memory consumption:", "command": "ps --sort size"}]}
{"command": "psalm", "tasks": [{"task": "Generate a Psalm configuration:", "command": "psalm --init"}, {"task": "Analyze the current working directory:", "command": "psalm"}, {"task": "Analyze a specific directory or file:", "command": "psalm {{path/to/file_or_directory}}"}, {"task": "Analyze a project with a specific configuration file:", "command": "psalm --config {{path/to/psalm.xml}}"}, {"task": "Include informational findings in the output:", "command": "psalm --show-info"}, {"task": "Analyze a project and display statistics:", "command": "psalm --stats"}, {"task": "Analyze a project in parallel with 4 threads:", "command": "psalm --threads {{4}}"}]}
{"command": "psgrep", "tasks": [{"task": "Find process lines containing a specific string:", "command": "psgrep {{process_name}}"}, {"task": "Find process lines containing a specific string, excluding headers:", "command": "psgrep -n {{process_name}}"}, {"task": "Search using a simplified format (PID, user, command):", "command": "psgrep -s {{process_name}}"}]}
{"command": "psql", "tasks": [{"task": "Connect to the database. By default, it connects to the local socket using port 5432 with the currently logged in user:", "command": "psql {{database}}"}, {"task": "Connect to the database on given server host running on given port with given username, without a password prompt:", "command": "psql -h {{host}} -p {{port}} -U {{username}} {{database}}"}, {"task": "Connect to the database; user will be prompted for password:", "command": "psql -h {{host}} -p {{port}} -U {{username}} -W {{database}}"}, {"task": "Execute a single SQL query or PostgreSQL command on the given database (useful in shell scripts):", "command": "psql -c '{{query}}' {{database}}"}, {"task": "Execute commands from a file on the given database:", "command": "psql {{database}} -f {{file.sql}}"}]}
{"command": "pssh", "tasks": [{"task": "Run a command on two hosts, and print its output on each server inline:", "command": "pssh -i -H \"{{host1}} {{host2}}\" {{hostname -i}}"}, {"task": "Run a command and save the output to separate files:", "command": "pssh -H {{host1}} -H {{host2}} -o {{path/to/output_dir}} {{hostname -i}}"}, {"task": "Run a command on multiple hosts, specified in a new-line separated file:", "command": "pssh -i -h {{path/to/hosts_file}} {{hostname -i}}"}, {"task": "Run a command as root (this asks for the root password):", "command": "pssh -i -h {{path/to/hosts_file}} -A -l {{root_username}} {{hostname -i}}"}, {"task": "Run a command with extra SSH arguments:", "command": "pssh -i -h {{path/to/hosts_file}} -x \"{{-O VisualHostKey=yes}}\" {{hostname -i}}"}, {"task": "Run a command limiting the number of parallel connections to 10:", "command": "pssh -i -h {{path/to/hosts_file}} -p {{10}} '{{cd dir; ./script.sh; exit}}'"}]}
{"command": "psysh", "tasks": [{"task": "Open a shell in the current directory:", "command": "psysh"}, {"task": "Open a shell in a specific directory:", "command": "psysh --cwd {{path/to/directory}}"}, {"task": "Use a specific configuration file:", "command": "psysh --config {{path/to/file}}"}]}
{"command": "pt", "tasks": [{"task": "Find files containing \"foo\" and print the files with highlighted matches:", "command": "pt {{foo}}"}, {"task": "Find files containing \"foo\" and display count of matches in each file:", "command": "pt -c {{foo}}"}, {"task": "Find files containing \"foo\" as a whole word and ignore its case:", "command": "pt -wi {{foo}}"}, {"task": "Find \"foo\" in files with a given extension using a regular expression:", "command": "pt -G='{{\\.bar$}}' {{foo}}"}, {"task": "Find files whose contents match the regular expression, up to 2 directories deep:", "command": "pt --depth={{2}} -e '{{^ba[rz]*$}}'"}]}
{"command": "ptargrep", "tasks": [{"task": "Search for a pattern within a tar file:", "command": "ptargrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for a pattern within multiple files:", "command": "ptargrep \"{{search_pattern}}\" {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}, {"task": "Extract to the current directory using the basename of the file from the archive:", "command": "ptargrep --basename \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for a case-insensitive pattern matching within a tar file:", "command": "ptargrep --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}]}
{"command": "ptpython", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "ptpython"}, {"task": "Execute a specific Python file:", "command": "ptpython {{path/to/file.py}}"}, {"task": "Execute a specific Python file and start a REPL:", "command": "ptpython -i {{path/to/file.py}}"}, {"task": "Open the menu:", "command": "F2"}, {"task": "Open the history page:", "command": "F3"}, {"task": "Toggle paste mode:", "command": "F6"}, {"task": "Quit:", "command": "Ctrl + D"}]}
{"command": "ptpython3", "tasks": [{"task": "View documentation for the original command:", "command": "tldr ptpython"}]}
{"command": "pueue add", "tasks": [{"task": "Add any command to the default queue:", "command": "pueue add {{command}}"}, {"task": "Pass a list of flags or arguments to a command when enqueuing:", "command": "pueue add -- {{command --arg -f}}"}, {"task": "Add a command but do not start it if it's the first in a queue:", "command": "pueue add --stashed -- {{rsync --archive --compress /local/directory /remote/directory}}"}, {"task": "Add a command to a group and start it immediately, see `pueue group` to manage groups:", "command": "pueue add --immediate --group \"{{CPU_intensive}}\" -- {{ffmpeg -i input.mp4 frame_%d.png}}"}, {"task": "Add a command and start it after commands 9 and 12 finish successfully:", "command": "pueue add --after {{9}} {{12}} --group \"{{torrents}}\" -- {{transmission-cli torrent_file.torrent}}"}, {"task": "Add a command with a label after some delay has passed, see `pueue enqueue` for valid datetime formats:", "command": "pueue add --label \"{{compressing large file}}\" --delay \"{{wednesday 10:30pm}}\" -- \"{{7z a compressed_file.7z large_file.xml}}\""}]}
{"command": "pueue clean", "tasks": [{"task": "Remove finished tasks and clear logs:", "command": "pueue clean"}, {"task": "Only clean commands that finished successfully:", "command": "pueue clean --successful-only"}]}
{"command": "pueue completions", "tasks": [{"task": "Generate completions for Bash:", "command": "sudo pueue completions bash {{/usr/share/bash-completion/completions/pueue.bash}}"}, {"task": "Generate completions for zsh:", "command": "sudo pueue completions zsh {{/usr/share/zsh/site-functions}}"}, {"task": "Generate completions for fish:", "command": "sudo pueue completions fish {{/usr/share/fish/completions}}"}]}
{"command": "pueue edit", "tasks": [{"task": "Edit a task, see `pueue status` to get the task ID:", "command": "pueue edit {{task_id}}"}, {"task": "Edit the path from which a task is executed:", "command": "pueue edit {{task_id}} --path"}, {"task": "Edit a command with the specified editor:", "command": "EDITOR={{nano}} pueue edit {{task_id}}"}]}
{"command": "pueue enqueue", "tasks": [{"task": "Enqueue multiple stashed tasks at once:", "command": "pueue enqueue {{task_id}} {{task_id}}"}, {"task": "Enqueue a stashed task after 60 seconds:", "command": "pueue enqueue --delay {{60}} {{task_id}}"}, {"task": "Enqueue a stashed task next Wednesday:", "command": "pueue enqueue --delay {{wednesday}} {{task_id}}"}, {"task": "Enqueue a stashed task after four months:", "command": "pueue enqueue --delay \"4 months\" {{task_id}}"}, {"task": "Enqueue a stashed task on 2021-02-19:", "command": "pueue enqueue --delay {{2021-02-19}} {{task_id}}"}, {"task": "List all available date/time formats:", "command": "pueue enqueue --help"}]}
{"command": "pueue follow", "tasks": [{"task": "Follow the output of a task (`stdout` + `stderr`):", "command": "pueue follow {{task_id}}"}, {"task": "Follow `stderr` of a task:", "command": "pueue follow --err {{task_id}}"}]}
{"command": "pueue group", "tasks": [{"task": "Show all groups with their statuses and number of parallel jobs:", "command": "pueue group"}, {"task": "Add a custom group:", "command": "pueue group --add \"{{group_name}}\""}, {"task": "Remove a group and move its tasks to the default group:", "command": "pueue group --remove \"{{group_name}}\""}]}
{"command": "pueue help", "tasks": [{"task": "Show all available subcommands and flags:", "command": "pueue help"}, {"task": "Show help for a specific subcommand:", "command": "pueue help {{subcommand}}"}]}
{"command": "pueue kill", "tasks": [{"task": "Kill all tasks in the default group:", "command": "pueue kill"}, {"task": "Kill a specific task:", "command": "pueue kill {{task_id}}"}, {"task": "Kill a task and terminate all its child processes:", "command": "pueue kill --children {{task_id}}"}, {"task": "Kill all tasks in a group and pause the group:", "command": "pueue kill --group {{group_name}}"}, {"task": "Kill all tasks across all groups and pause all groups:", "command": "pueue kill --all"}]}
{"command": "pueue log", "tasks": [{"task": "Show the last few lines of output from all tasks:", "command": "pueue log"}, {"task": "Show the full output of a task:", "command": "pueue log {{task_id}}"}, {"task": "Show the last few lines of output from several tasks:", "command": "pueue log {{task_id}} {{task_id}}"}, {"task": "Print a specific number of lines from the tail of output:", "command": "pueue log --lines {{number_of_lines}} {{task_id}}"}]}
{"command": "pueue parallel", "tasks": [{"task": "Set the maximum number of tasks allowed to run in parallel, in the default group:", "command": "pueue parallel {{max_number_of_parallel_tasks}}"}, {"task": "Set the maximum number of tasks allowed to run in parallel, in a specific group:", "command": "pueue parallel --group {{group_name}} {{maximum_number_of_parallel_tasks}}"}]}
{"command": "pueue pause", "tasks": [{"task": "Pause all tasks in the default group:", "command": "pueue pause"}, {"task": "Pause a running task:", "command": "pueue pause {{task_id}}"}, {"task": "Pause a running task and stop all its direct children:", "command": "pueue pause --children {{task_id}}"}, {"task": "Pause all tasks in a group and prevent it from starting new tasks:", "command": "pueue pause --group {{group_name}}"}, {"task": "Pause all tasks and prevent all groups from starting new tasks:", "command": "pueue pause --all"}]}
{"command": "pueue remove", "tasks": [{"task": "Remove a killed or finished task:", "command": "pueue remove {{task_id}}"}, {"task": "Remove multiple tasks at once:", "command": "pueue remove {{task_id}} {{task_id}}"}]}
{"command": "pueue reset", "tasks": [{"task": "Kill all tasks and remove everything (logs, status, groups, task IDs):", "command": "pueue reset"}, {"task": "Kill all tasks, terminate their children, and reset everything:", "command": "pueue reset --children"}, {"task": "Reset without asking for confirmation:", "command": "pueue reset --force"}]}
{"command": "pueue restart", "tasks": [{"task": "Restart a specific task:", "command": "pueue restart {{task_id}}"}, {"task": "Restart multiple tasks at once, and start them immediately (do not enqueue):", "command": "pueue restart --start-immediately {{task_id}} {{task_id}}"}, {"task": "Restart a specific task from a different path:", "command": "pueue restart --edit-path {{task_id}}"}, {"task": "Edit a command before restarting:", "command": "pueue restart --edit {{task_id}}"}, {"task": "Restart a task in-place (without enqueuing as a separate task):", "command": "pueue restart --in-place {{task_id}}"}, {"task": "Restart all failed tasks and stash them:", "command": "pueue restart --all-failed --stashed"}]}
{"command": "pueue send", "tasks": [{"task": "Send input to a running command:", "command": "pueue send {{task_id}} \"{{input}}\""}, {"task": "Send confirmation to a task expecting y/N (e.g. apt, cp):", "command": "pueue send {{task_id}} {{y}}"}]}
{"command": "pueue shutdown", "tasks": [{"task": "Shutdown the daemon without a service manager:", "command": "pueue shutdown"}]}
{"command": "pueue start", "tasks": [{"task": "Resume all tasks in the default group:", "command": "pueue start"}, {"task": "Resume a specific task:", "command": "pueue start {{task_id}}"}, {"task": "Resume multiple tasks at once:", "command": "pueue start {{task_id}} {{task_id}}"}, {"task": "Resume all tasks and start their children:", "command": "pueue start --all --children"}, {"task": "Resume all tasks in a specific group:", "command": "pueue start group {{group_name}}"}]}
{"command": "pueue stash", "tasks": [{"task": "Stash an enqueued task:", "command": "pueue stash {{task_id}}"}, {"task": "Stash multiple tasks at once:", "command": "pueue stash {{task_id}} {{task_id}}"}, {"task": "Start a stashed task immediately:", "command": "pueue start {{task_id}}"}, {"task": "Enqueue a task to be executed when preceding tasks finish:", "command": "pueue enqueue {{task_id}}"}]}
{"command": "pueue status", "tasks": [{"task": "Show the status of all tasks:", "command": "pueue status"}, {"task": "Show the status of a specific group:", "command": "pueue status --group {{group_name}}"}]}
{"command": "pueue switch", "tasks": [{"task": "Switch the priority of two tasks:", "command": "pueue switch {{task_id1}} {{task_id2}}"}]}
{"command": "pueue", "tasks": [{"task": "Show general help and available subcommands:", "command": "pueue --help"}, {"task": "Check the version of pueue:", "command": "pueue --version"}, {"task": "Execute a pueue subcommand:", "command": "pueue {{subcommand}}"}]}
{"command": "pulumi", "tasks": [{"task": "Create a new project using a template:", "command": "pulumi new"}, {"task": "Create a new stack using an isolated deployment target:", "command": "pulumi stack init"}, {"task": "Configure variables (e.g. keys, regions, etc.) interactively:", "command": "pulumi config"}, {"task": "Preview and deploy changes to a program and/or infrastructure:", "command": "pulumi up"}, {"task": "Preview deployment changes without performing them (dry-run):", "command": "pulumi preview"}, {"task": "Destroy a program and its infrastructure:", "command": "pulumi destroy"}]}
{"command": "pup", "tasks": [{"task": "Transform a raw HTML file into a cleaned, indented, and colored format:", "command": "cat {{index.html}} | pup --color"}, {"task": "Filter HTML by element tag name:", "command": "cat {{index.html}} | pup '{{tag}}'"}, {"task": "Filter HTML by id:", "command": "cat {{index.html}} | pup '{{div#id}}'"}, {"task": "Filter HTML by attribute value:", "command": "cat {{index.html}} | pup '{{input[type=\"text\"]}}'"}, {"task": "Print all text from the filtered HTML elements and their children:", "command": "cat {{index.html}} | pup '{{div}} text{}'"}, {"task": "Print HTML as JSON:", "command": "cat {{index.html}} | pup '{{div}} json{}'"}]}
{"command": "puppet agent", "tasks": [{"task": "Register a node at a Puppet server and apply the received catalog:", "command": "puppet agent --test --server {{puppetserver_fqdn}} --serverport {{port}} --waitforcert {{poll_time}}"}, {"task": "Run the agent in the background (uses settings from `puppet.conf`):", "command": "puppet agent"}, {"task": "Run the agent once in the foreground, then exit:", "command": "puppet agent --test"}, {"task": "Run the agent in dry-mode:", "command": "puppet agent --test --noop"}, {"task": "Log every resource being evaluated (even if nothing is being changed):", "command": "puppet agent --test --evaltrace"}, {"task": "Disable the agent:", "command": "puppet agent --disable \"{{message}}\""}, {"task": "Enable the agent:", "command": "puppet agent --enable"}]}
{"command": "puppet apply", "tasks": [{"task": "Apply a manifest:", "command": "puppet apply {{path/to/manifest}}"}, {"task": "Execute puppet code:", "command": "puppet apply --execute {{code}}"}, {"task": "Use a specific module and hiera config file:", "command": "puppet apply --modulepath {{path/to/directory}} --hiera_config {{path/to/file}} {{path/to/manifest}}"}]}
{"command": "puppet", "tasks": [{"task": "Execute a Puppet subcommand:", "command": "puppet {{subcommand}}"}, {"task": "Check the Puppet version:", "command": "puppet --version"}, {"task": "Display help:", "command": "puppet --help"}, {"task": "Display help for a subcommand:", "command": "puppet help {{subcommand}}"}]}
{"command": "pushd", "tasks": [{"task": "Switch to directory and push it on the stack:", "command": "pushd {{path/to/directory}}"}, {"task": "Switch first and second directories on the stack:", "command": "pushd"}, {"task": "Rotate stack by making the 5th element the top of the stack:", "command": "pushd +4"}, {"task": "Rotate the stack 4 times to the left (the current directory stays at the top by replacing the 5th element):", "command": "pushd -n +4"}]}
{"command": "pv", "tasks": [{"task": "Print the contents of the file and display a progress bar:", "command": "pv {{path/to/file}}"}, {"task": "Measure the speed and amount of data flow between pipes (`--size` is optional):", "command": "command1 | pv --size {{expected_amount_of_data_for_eta}} | command2"}, {"task": "Filter a file, see both progress and amount of output data:", "command": "pv -cN in {{big_text_file}} | grep {{pattern}} | pv -cN out > {{filtered_file}}"}, {"task": "Attach to an already running process and see its file reading progress:", "command": "pv -d {{PID}}"}, {"task": "Read an erroneous file, skip errors as `dd conv=sync,noerror` would:", "command": "pv -EE {{path/to/faulty_media}} > image.img"}, {"task": "Stop reading after reading specified amount of data, rate limit to 1K/s:", "command": "pv -L 1K --stop-at --size {{maximum_file_size_to_be_read}}"}]}
{"command": "pve-firewall", "tasks": [{"task": "Compile and print all firewall rules:", "command": "pve-firewall compile"}, {"task": "Show information about the local network:", "command": "pve-firewall localnet"}, {"task": "Restart the Proxmox VE Firewall service:", "command": "pve-firewall restart"}, {"task": "Start the Proxmox VE Firewall service:", "command": "pve-firewall start"}, {"task": "Stop the Proxmox VE Firewall service:", "command": "pve-firewall stop"}, {"task": "Simulate all firewall rules:", "command": "pve-firewall simulate"}, {"task": "Show the status of Proxmox VE Firewall:", "command": "pve-firewall status"}]}
{"command": "pvecm", "tasks": [{"task": "Add the current node to an existing cluster:", "command": "pvecm add {{hostname_or_ip}}"}, {"task": "Add a node to the cluster configuration (internal use):", "command": "pvecm addnode {{node}}"}, {"task": "Return the version of the cluster join API available on this node:", "command": "pvecm apiver"}, {"task": "Generate new cluster configuration:", "command": "pvecm create {{clustername}}"}, {"task": "Remove a node from the cluster configuration:", "command": "pvecm delnode {{node}}"}, {"task": "Display the local view of the cluster nodes:", "command": "pvecm nodes"}, {"task": "Display the local view of the cluster status:", "command": "pvecm status"}]}
{"command": "pveperf", "tasks": [{"task": "Show CPU and hard disk performance data for the hard disk mounted at `/`:", "command": "pveperf"}]}
{"command": "pwd", "tasks": [{"task": "Print the current directory:", "command": "pwd"}, {"task": "Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path):", "command": "pwd -P"}]}
{"command": "pwgen", "tasks": [{"task": "Generate random password with s[y]mbols:", "command": "pwgen -y {{length}}"}, {"task": "Generate secure, hard-to-memorize passwords:", "command": "pwgen -s {{length}}"}, {"task": "Generate password with at least one capital letter in them:", "command": "pwgen -c {{length}}"}]}
{"command": "pwsh", "tasks": [{"task": "View documentation for the original command:", "command": "tldr powershell"}]}
{"command": "py-spy", "tasks": [{"task": "Show a live view of the functions that take the most execution time of a running process:", "command": "py-spy top --pid {{pid}}"}, {"task": "Start a program and show a live view of the functions that take the most execution time:", "command": "py-spy top -- python {{path/to/file.py}}"}, {"task": "Produce an SVG flame graph of the function call execution time:", "command": "py-spy record -o {{path/to/profile.svg}} --pid {{pid}}"}, {"task": "Dump the call stack of a running process:", "command": "py-spy dump --pid {{pid}}"}]}
{"command": "pyats shell", "tasks": [{"task": "Open pyATS shell with a defined Testbed file:", "command": "pyats shell --testbed-file {{path/to/testbed.yaml}}"}, {"task": "Open pyATS shell with a defined Pickle file:", "command": "pyats shell --pickle-file {{path/to/pickle.file}}"}, {"task": "Open pyATS with IPython disabled:", "command": "pyats shell --no-ipython"}]}
{"command": "pyats version", "tasks": [{"task": "Display version of all packages:", "command": "pyats version check"}, {"task": "Display outdated packages:", "command": "pyats version check --outdated"}, {"task": "Update packages to the most recent version:", "command": "pyats version update"}, {"task": "Update or downgrade packages to a specific version:", "command": "pyats version update {{version}}"}]}
{"command": "pyATS", "tasks": [{"task": "Run a `pyATS` subcommand:", "command": "pyats {{subcommand}}"}, {"task": "Display version:", "command": "pyats version check"}, {"task": "Display help:", "command": "pyats --help"}, {"task": "Display help about a specific subcommand:", "command": "pyats {{subcommand}} --help"}]}
{"command": "pycodestyle", "tasks": [{"task": "Check the style of a single file:", "command": "pycodestyle {{file.py}}"}, {"task": "Check the style of multiple files:", "command": "pycodestyle {{file1.py}} {{file2.py}} {{file3.py}}"}, {"task": "Show only the first occurrence of an error:", "command": "pycodestyle --first {{file.py}}"}, {"task": "Show the source code for each error:", "command": "pycodestyle --show-source {{file.py}}"}, {"task": "Show the specific PEP 8 text for each error:", "command": "pycodestyle --show-pep8 {{file.py}}"}]}
{"command": "pydoc", "tasks": [{"task": "Print documentation on a subject (Python keyword, topic, function, module, package, etc.):", "command": "pydoc {{subject}}"}, {"task": "Start an HTTP server on an arbitrary unused port and open a [b]rowser to see the documentation:", "command": "pydoc -b"}, {"task": "Display help:", "command": "pydoc"}]}
{"command": "pyenv virtualenv", "tasks": [{"task": "Create a new Python 3.6.6 virtual environment:", "command": "pyenv virtualenv {{3.6.6}} {{virtualenv_name}}"}, {"task": "List all existing virtual environments:", "command": "pyenv virtualenvs"}, {"task": "Activate a virtual environment:", "command": "pyenv activate {{virtualenv_name}}"}, {"task": "Deactivate the virtual environment:", "command": "pyenv deactivate"}]}
{"command": "pyenv", "tasks": [{"task": "List all available commands:", "command": "pyenv commands"}, {"task": "List all Python versions under the `${PYENV_ROOT}/versions` directory:", "command": "pyenv versions"}, {"task": "List all Python versions that can be installed from upstream:", "command": "pyenv install --list"}, {"task": "Install a Python version under the `${PYENV_ROOT}/versions` directory:", "command": "pyenv install {{2.7.10}}"}, {"task": "Uninstall a Python version under the `${PYENV_ROOT}/versions` directory:", "command": "pyenv uninstall {{2.7.10}}"}, {"task": "Set Python version to be used globally in the current machine:", "command": "pyenv global {{2.7.10}}"}, {"task": "Set Python version to be used in the current directory and all directories below it:", "command": "pyenv local {{2.7.10}}"}]}
{"command": "pyflakes", "tasks": [{"task": "Check a single Python file:", "command": "pyflakes check {{path/to/file}}.py"}, {"task": "Check Python files in a specific directory:", "command": "pyflakes checkPath {{path/to/directory}}"}, {"task": "Check Python files in a directory recursively:", "command": "pyflakes checkRecursive {{path/to/directory}}"}, {"task": "Check all Python files found in multiple directories:", "command": "pyflakes iterSourceCode {{path/to/directory_1}} {{path/to/directory_2}}"}]}
{"command": "pygmentize", "tasks": [{"task": "Highlight file syntax and print to `stdout` (language is inferred from the file extension):", "command": "pygmentize {{file.py}}"}, {"task": "Explicitly set the language for syntax highlighting:", "command": "pygmentize -l {{javascript}} {{input_file}}"}, {"task": "List available lexers (processors for input languages):", "command": "pygmentize -L lexers"}, {"task": "Save output to a file in HTML format:", "command": "pygmentize -f html -o {{output_file.html}} {{input_file.py}}"}, {"task": "List available output formats:", "command": "pygmentize -L formatters"}, {"task": "Output an HTML file, with additional formatter options (full page, with line numbers):", "command": "pygmentize -f html -O \"full,linenos=True\" -o {{output_file.html}} {{input_file}}"}]}
{"command": "pyinfra", "tasks": [{"task": "Execute a command over SSH:", "command": "pyinfra {{target_ip_address}} exec -- {{command_name_and_arguments}}"}, {"task": "Execute contents of a deploy file on a list of targets:", "command": "pyinfra {{path/to/target_list.py}} {{path/to/deploy.py}}"}, {"task": "Execute commands on locally:", "command": "pyinfra @local {{path/to/deploy.py}}"}, {"task": "Execute commands over Docker:", "command": "pyinfra @docker/{{container}} {{path/to/deploy.py}}"}]}
{"command": "pylint", "tasks": [{"task": "Show lint errors in a file:", "command": "pylint {{path/to/file.py}}"}, {"task": "Lint a file and use a configuration file (usually named `pylintrc`):", "command": "pylint --rcfile {{path/to/pylintrc}} {{path/to/file.py}}"}, {"task": "Lint a file and disable a specific error code:", "command": "pylint --disable {{C,W,no-error,design}} {{path/to/file}}"}]}
{"command": "pypy", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "pypy"}, {"task": "Execute script in a given Python file:", "command": "pypy {{path/to/file.py}}"}, {"task": "Execute script as part of an interactive shell:", "command": "pypy -i {{path/to/file.py}}"}, {"task": "Execute a Python expression:", "command": "pypy -c \"{{expression}}\""}, {"task": "Run library module as a script (terminates option list):", "command": "pypy -m {{module}} {{arguments}}"}, {"task": "Install a package using pip:", "command": "pypy -m pip install {{package_name}}"}, {"task": "Interactively debug a Python script:", "command": "pypy -m pdb {{path/to/file.py}}"}]}
{"command": "pystun3", "tasks": [{"task": "Make a STUN request:", "command": "pystun3"}, {"task": "Make a STUN request and specify the stun server:", "command": "pystun3 --stun-host {{stun.1und1.de}}"}, {"task": "Make a STUN request and specify the source port:", "command": "pystun3 --source-port {{7932}}"}]}
{"command": "pytest", "tasks": [{"task": "Run tests from specific files:", "command": "pytest {{path/to/test_file1.py path/to/test_file2.py ...}}"}, {"task": "Run tests with names matching a specific [k]eyword expression:", "command": "pytest -k {{expression}}"}, {"task": "Exit as soon as a test fails or encounters an error:", "command": "pytest --exitfirst"}, {"task": "Run tests matching or excluding markers:", "command": "pytest -m {{marker_name1 and not marker_name2}}"}, {"task": "Run until a test failure, continuing from the last failing test:", "command": "pytest --stepwise"}, {"task": "Run tests without capturing output:", "command": "pytest --capture=no"}]}
{"command": "python", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "python"}, {"task": "Execute a specific Python file:", "command": "python {{path/to/file.py}}"}, {"task": "Execute a specific Python file and start a REPL:", "command": "python -i {{path/to/file.py}}"}, {"task": "Execute a Python expression:", "command": "python -c \"{{expression}}\""}, {"task": "Run the script of the specified library module:", "command": "python -m {{module}} {{arguments}}"}, {"task": "Install a package using `pip`:", "command": "python -m {{pip}} install {{package_name}}"}, {"task": "Interactively debug a Python script:", "command": "python -m {{pdb}} {{path/to/file.py}}"}, {"task": "Start the built-in HTTP server on port 8000 in the current directory:", "command": "python -m {{http.server}}"}]}
{"command": "python3", "tasks": [{"task": "View documentation for the original command:", "command": "tldr python"}]}
{"command": "q", "tasks": [{"task": "Query `.csv` file by specifying the delimiter as ',':", "command": "q -d',' \"SELECT * from {{path/to/file}}\""}, {"task": "Query `.tsv` file:", "command": "q -t \"SELECT * from {{path/to/file}}\""}, {"task": "Query file with header row:", "command": "q -d{{delimiter}} -H \"SELECT * from {{path/to/file}}\""}, {"task": "Read data from `stdin`; '-' in the query represents the data from `stdin`:", "command": "{{output}} | q \"select * from -\""}, {"task": "Join two files (aliased as `f1` and `f2` in the example) on column `c1`, a common column:", "command": "q \"SELECT * FROM {{path/to/file}} f1 JOIN {{path/to/other_file}} f2 ON (f1.c1 = f2.c1)\""}, {"task": "Format output using an output delimiter with an output header line (note: command will output column names based on the input file header or the column aliases overridden in the query):", "command": "q -D{{delimiter}} -O \"SELECT {{column}} as {{alias}} from {{path/to/file}}\""}]}
{"command": "qcp", "tasks": [{"task": "Copy a single file (open an editor with the source filename on the left and the target filename on the right):", "command": "qcp {{source_file}}"}, {"task": "Copy multiple JPG files:", "command": "qcp {{*.jpg}}"}, {"task": "Copy files, but swap the positions of the source and the target filenames in the editor:", "command": "qcp --option swap {{*.jpg}}"}]}
{"command": "qdbus", "tasks": [{"task": "List available service names:", "command": "qdbus"}, {"task": "List object paths for a specific service:", "command": "qdbus {{service_name}}"}, {"task": "List methods, signals and properties available on a specific object:", "command": "qdbus {{service_name}} {{/path/to/object}}"}, {"task": "Execute a specific method passing arguments and display the returned value:", "command": "qdbus {{service_name}} {{/path/to/object}} {{method_name}} {{argument1}} {{argument2}}"}, {"task": "Display the current brightness value in a KDE Plasma session:", "command": "qdbus {{org.kde.Solid.PowerManagement}} {{/org/kde/Solid/PowerManagement/Actions/BrightnessControl}} {{org.kde.Solid.PowerManagement.Actions.BrightnessControl.brightness}}"}, {"task": "Set a specific brightness to a KDE Plasma session:", "command": "qdbus {{org.kde.Solid.PowerManagement}} {{/org/kde/Solid/PowerManagement/Actions/BrightnessControl}} {{org.kde.Solid.PowerManagement.Actions.BrightnessControl.setBrightness}} {{5000}}"}, {"task": "Invoke volume up shortcut in a KDE Plasma session:", "command": "qdbus {{org.kde.kglobalaccel}} {{/component/kmix}} {{invokeShortcut}} \"{{increase_volume}}\""}, {"task": "Gracefully log out and then do nothing, reboot or shut down:", "command": "qdbus {{org.kde.Shutdown}} {{/Shutdown}} {{logout|logoutAndReboot|logoutAndShutdown}}"}]}
{"command": "qemu-img", "tasks": [{"task": "Create disk image with a specific size (in gigabytes):", "command": "qemu-img create {{image_name.img}} {{gigabytes}}G"}, {"task": "Show information about a disk image:", "command": "qemu-img info {{image_name.img}}"}, {"task": "Increase or decrease image size:", "command": "qemu-img resize {{image_name.img}} {{gigabytes}}G"}, {"task": "Dump the allocation state of every sector of the specified disk image:", "command": "qemu-img map {{image_name.img}}"}, {"task": "Convert a VMware .vmdk disk image to a KVM .qcow2 disk image:", "command": "qemu-img convert -f {{vmdk}} -O {{qcow2}} {{path/to/file/foo.vmdk}} {{path/to/file/foo.qcow2}}"}]}
{"command": "qemu", "tasks": [{"task": "Boot from image emulating i386 architecture:", "command": "qemu-system-i386 -hda {{image_name.img}}"}, {"task": "Boot from image emulating x64 architecture:", "command": "qemu-system-x86_64 -hda {{image_name.img}}"}, {"task": "Boot QEMU instance with a live ISO image:", "command": "qemu-system-i386 -hda {{image_name.img}} -cdrom {{os_image.iso}} -boot d"}, {"task": "Specify amount of RAM for instance:", "command": "qemu-system-i386 -m 256 -hda image_name.img -cdrom os-image.iso -boot d"}, {"task": "Boot from physical device (e.g. from USB to test bootable medium):", "command": "qemu-system-i386 -hda /dev/{{storage_device}}"}]}
{"command": "qm nbdstop", "tasks": [{"task": "Stop embedded nbd server:", "command": "qm nbdstop {{VM_ID}}"}]}
{"command": "qm stop", "tasks": [{"task": "Stop a virtual machine immediately:", "command": "qm stop {{VM_ID}}"}, {"task": "Stop a virtual machine and wait for at most 10 seconds:", "command": "qm stop --timeout {{10}} {{VM_ID}}"}, {"task": "Stop a virtual machine and skip lock (only root can use this option):", "command": "qm stop --skiplock {{true}} {{VM_ID}}"}, {"task": "Stop a virtual machine and don't deactivate storage volumes:", "command": "qm stop --keepActive {{true}} {{VM_ID}}"}]}
{"command": "qmmp", "tasks": [{"task": "Launch qmmp:", "command": "qmmp"}, {"task": "Start or stop the currently playing audio:", "command": "qmmp --play-pause"}, {"task": "Seek forwards or backward a specific amount of time in seconds:", "command": "qmmp --seek-{{fwd|bwd}} {{time_in_seconds}}"}, {"task": "Play the next audio file:", "command": "qmmp --next"}, {"task": "Play the previous audio file:", "command": "qmmp --previous"}, {"task": "Print the current volume:", "command": "qmmp --volume-status"}, {"task": "Increase or decrease the volume of the currently playing audio by 5 steps:", "command": "qmmp --volume-{{inc|dec}}"}]}
{"command": "qmv", "tasks": [{"task": "Move a single file (open an editor with the source filename on the left and the target filename on the right):", "command": "qmv {{source_file}}"}, {"task": "Move multiple JPG files:", "command": "qmv {{*.jpg}}"}, {"task": "Move multiple directories:", "command": "qmv -d {{path/to/directory1}} {{path/to/directory2}} {{path/to/directory3}}"}, {"task": "Move all files and directories inside a directory:", "command": "qmv --recursive {{path/to/directory}}"}, {"task": "Move files, but swap the positions of the source and the target filenames in the editor:", "command": "qmv --option swap {{*.jpg}}"}, {"task": "Rename all files and folders in the current directory, but show only target filenames in the editor (you can think of it as a kind of simple mode):", "command": "qmv --format=do ."}]}
{"command": "qpdf", "tasks": [{"task": "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one:", "command": "qpdf --empty --pages {{input.pdf}} {{1-3,5,6-10}} -- {{output.pdf}}"}, {"task": "Merge (concatenate) all the pages of a list of PDF files and save the result as a new PDF:", "command": "qpdf --empty --pages {{file1.pdf}} {{file2.pdf}} {{file3.pdf}} -- {{output.pdf}}"}, {"task": "Merge (concatenate) given pages from a list of PDF files and save the result as a new PDF:", "command": "qpdf --empty --pages {{file1.pdf}} {{1,6-8}} {{file2.pdf}} {{3,4,5}} -- {{output.pdf}}"}, {"task": "Write each group of n pages to a separate output file with a given filename pattern:", "command": "qpdf --split-pages=n {{input.pdf}} {{out_%d.pdf}}"}, {"task": "Rotate certain pages of a PDF with a given angle:", "command": "qpdf --rotate={{90:2,4,6}} --rotate={{180:7-8}} {{input.pdf}} {{output.pdf}}"}, {"task": "Remove the password from a password-protected file:", "command": "qpdf --password={{password}} --decrypt {{input.pdf}} {{output.pdf}}"}]}
{"command": "qr", "tasks": [{"task": "Generate a QR code:", "command": "echo \"{{data}}\" | qr"}, {"task": "Specify the error correction level (defaults to M):", "command": "echo \"{{data}}\" | qr --error-correction={{L|M|Q|H}}"}]}
{"command": "qrencode", "tasks": [{"task": "Convert a string to a QR code and save to an output file:", "command": "qrencode -o {{path/to/output_file.png}} {{string}}"}, {"task": "Convert an input file to a QR code and save to an output file:", "command": "qrencode -o {{path/to/output_file.png}} -r {{path/to/input_file}}"}, {"task": "Convert a string to a QR code and print it in terminal:", "command": "qrencode -t ansiutf8 {{string}}"}, {"task": "Convert input from pipe to a QR code and print it in terminal:", "command": "echo {{string}} | qrencode -t ansiutf8"}]}
{"command": "qtcreator", "tasks": [{"task": "Start Qt Creator:", "command": "qtcreator"}, {"task": "Start Qt Creator and restore the last session:", "command": "qtcreator -lastsession"}, {"task": "Start Qt Creator but don't load the specified plugin:", "command": "qtcreator -noload {{plugin}}"}, {"task": "Start Qt Creator but don't load any plugins:", "command": "qtcreator -noload {{all}}"}, {"task": "Start Qt Creator in presentation mode with pop-ups for keyboard shortcuts:", "command": "qtcreator -presentationMode"}, {"task": "Start Qt Creator and show the diff from a specific commit:", "command": "qtcreator -git-show {{commit}}"}]}
{"command": "quarto", "tasks": [{"task": "Create a new project:", "command": "quarto create-project {{path/to/destination_directory}} --type {{book|default|website}}"}, {"task": "Create a new blog website:", "command": "quarto create-project {{path/to/destination_directory}} --type {{website}} --template {{blog}}"}, {"task": "Render input file(s) to different formats:", "command": "quarto render {{path/to/file.{{qmd|rmd|ipynb}}}} --to {{html|pdf|docx}}"}, {"task": "Render and preview a document or a website:", "command": "quarto preview {{path/to/destination_directory|path/to/file}}"}, {"task": "Publish a document or project to Quarto Pub, Github Pages, RStudio Connect or Netlify:", "command": "quarto publish {{quarto-pub|gh-pages|connect|netlify}}"}]}
{"command": "quilt", "tasks": [{"task": "Import an existing patch from a file:", "command": "quilt import {{path/to/filename.patch}}"}, {"task": "Create a new patch:", "command": "quilt new {{filename.patch}}"}, {"task": "Add a file to the current patch:", "command": "quilt add {{path/to/file}}"}, {"task": "After editing the file, refresh the current patch with the changes:", "command": "quilt refresh"}, {"task": "Apply all the patches in the series file:", "command": "quilt push -a"}, {"task": "Remove all applied patches:", "command": "quilt pop -a"}]}
{"command": "quota", "tasks": [{"task": "Show disk quotas in human-readable units for the current user:", "command": "quota -s"}, {"task": "Verbose output (also display quotas on filesystems where no storage is allocated):", "command": "quota -v"}, {"task": "Quiet output (only display quotas on filesystems where usage is over quota):", "command": "quota -q"}, {"task": "Print quotas for the groups of which the current user is a member:", "command": "quota -g"}, {"task": "Show disk quotas for another user:", "command": "sudo quota -u {{username}}"}]}
{"command": "qutebrowser", "tasks": [{"task": "Open qutebrowser with a specified storage directory:", "command": "qutebrowser --basedir {{path/to/directory}}"}, {"task": "Open a qutebrowser instance with temporary settings:", "command": "qutebrowser --set {{content.geolocation}} {{true|false}}"}, {"task": "Restore a named session of a qutebrowser instance:", "command": "qutebrowser --restore {{session_name}}"}, {"task": "Launch qutebrowser, opening all URLs using the specified method:", "command": "qutebrowser --target {{auto|tab|tab-bg|tab-silent|tab-bg-silent|window|private-window}}"}, {"task": "Open qutebrowser with a temporary base directory and print logs to `stdout` as JSON:", "command": "qutebrowser --temp-basedir --json-logging"}]}
{"command": "R", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "R"}, {"task": "Check R version:", "command": "R --version"}, {"task": "Start R in vanilla mode (i.e. a blank session that doesn't save the workspace at the end):", "command": "R --vanilla"}, {"task": "Execute a file:", "command": "R -f {{path/to/file.R}}"}, {"task": "Execute an R expression and then exit:", "command": "R -e {{expr}}"}, {"task": "Run R with a debugger:", "command": "R -d {{debugger}}"}, {"task": "Check R packages from package sources:", "command": "R CMD check {{path/to/package_source}}"}]}
{"command": "r2", "tasks": [{"task": "View documentation for the original command:", "command": "tldr radare2"}]}
{"command": "r2e", "tasks": [{"task": "Create a new feed database that sends email to an email address:", "command": "r2e new {{email_address}}"}, {"task": "Subscribe to a feed:", "command": "r2e add {{feed_name}} {{feed_URI}}"}, {"task": "Send new stories to an email address:", "command": "r2e run"}, {"task": "List all feeds:", "command": "r2e list"}, {"task": "Delete a feed at a specified index:", "command": "r2e delete {{index}}"}]}
{"command": "rabin2", "tasks": [{"task": "Display general information about a binary (architecture, type, endianness):", "command": "rabin2 -I {{path/to/binary}}"}, {"task": "Display linked libraries:", "command": "rabin2 -l {{path/to/binary}}"}, {"task": "Display symbols imported from libraries:", "command": "rabin2 -i {{path/to/binary}}"}, {"task": "Display strings contained in the binary:", "command": "rabin2 -z {{path/to/binary}}"}, {"task": "Display the output in JSON:", "command": "rabin2 -j -I {{path/to/binary}}"}]}
{"command": "racket", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "racket"}, {"task": "Execute a Racket script:", "command": "racket {{path/to/script.rkt}}"}, {"task": "Execute a Racket expression:", "command": "racket --eval \"{{expression}}\""}, {"task": "Run module as a script (terminates option list):", "command": "racket --lib {{module_name}} --main {{arguments}}"}, {"task": "Start a REPL (interactive shell) for the `typed/racket` hashlang:", "command": "racket -I typed/racket"}]}
{"command": "raco", "tasks": [{"task": "Install a package, automatically installing dependencies:", "command": "raco pkg install --auto {{package_source}}"}, {"task": "Install the current directory as a package:", "command": "raco pkg install"}, {"task": "Build (or rebuild) bytecode, documentation, executables, and metadata indexes for collections:", "command": "raco setup {{collection1 collection2 ...}}"}, {"task": "Run tests in files:", "command": "raco test {{path/to/tests1.rkt path/to/tests2.rkt ...}}"}, {"task": "Search local documentation:", "command": "raco docs {{search_terms ...}}"}, {"task": "Display help:", "command": "raco help"}]}
{"command": "radare2", "tasks": [{"task": "Open a file in write mode without parsing the file format headers:", "command": "radare2 -nw {{path/to/binary}}"}, {"task": "Debug a program:", "command": "radare2 -d {{path/to/binary}}"}, {"task": "Run a script before entering the interactive CLI:", "command": "radare2 -i {{path/to/script.r2}} {{path/to/binary}}"}, {"task": "Show help text for any command in the interactive CLI:", "command": "> {{radare2_command}}?"}, {"task": "Run a shell command from the interactive CLI:", "command": "> !{{shell_command}}"}, {"task": "Dump raw bytes of current block to a file:", "command": "> pr > {{path/to/file.bin}}"}]}
{"command": "rails db", "tasks": [{"task": "Create databases, load the schema, and initialize with seed data:", "command": "rails db:setup"}, {"task": "Access the database console:", "command": "rails db"}, {"task": "Create the databases defined in the current environment:", "command": "rails db:create"}, {"task": "Destroy the databases defined in the current environment:", "command": "rails db:drop"}, {"task": "Run pending migrations:", "command": "rails db:migrate"}, {"task": "View the status of each migration file:", "command": "rails db:migrate:status"}, {"task": "Rollback the last migration:", "command": "rails db:rollback"}, {"task": "Fill the current database with data defined in `db/seeds.rb`:", "command": "rails db:seed"}]}
{"command": "rails destroy", "tasks": [{"task": "List all available generators to destroy:", "command": "rails destroy"}, {"task": "Destroy a model named Post:", "command": "rails destroy model {{Post}}"}, {"task": "Destroy a controller named Posts:", "command": "rails destroy controller {{Posts}}"}, {"task": "Destroy a migration that creates Posts:", "command": "rails destroy migration {{CreatePosts}}"}, {"task": "Destroy a scaffold for a model named Post:", "command": "rails destroy scaffold {{Post}}"}]}
{"command": "rails generate", "tasks": [{"task": "List all available generators:", "command": "rails generate"}, {"task": "Generate a new model named Post with attributes title and body:", "command": "rails generate model {{Post}} {{title:string}} {{body:text}}"}, {"task": "Generate a new controller named Posts with actions index, show, new and create:", "command": "rails generate controller {{Posts}} {{index}} {{show}} {{new}} {{create}}"}, {"task": "Generate a new migration that adds a category attribute to an existing model called Post:", "command": "rails generate migration {{AddCategoryToPost}} {{category:string}}"}, {"task": "Generate a scaffold for a model named Post, predefining the attributes title and body:", "command": "rails generate scaffold {{Post}} {{title:string}} {{body:text}}"}]}
{"command": "rails routes", "tasks": [{"task": "List all routes:", "command": "rails routes"}, {"task": "List all routes in an expanded format:", "command": "rails routes --expanded"}, {"task": "List routes partially matching URL helper method name, HTTP verb, or URL path:", "command": "rails routes -g {{posts_path|GET|/posts}}"}, {"task": "List routes that map to a specified controller:", "command": "rails routes -c {{posts|Posts|Blogs::PostsController}}"}]}
{"command": "rails", "tasks": [{"task": "Create a new rails project:", "command": "rails new \"{{project_name}}\""}, {"task": "Start local server for current project on port 3000:", "command": "rails server"}, {"task": "Start local server for current project on a specified port:", "command": "rails server -p \"{{port}}\""}, {"task": "Open console to interact with application from command-line:", "command": "rails console"}, {"task": "Check current version of rails:", "command": "rails --version"}]}
{"command": "railway", "tasks": [{"task": "Login to a Railway account:", "command": "railway login"}, {"task": "Link to an existing Project under a Railway account or team:", "command": "railway link {{projectId}}"}, {"task": "Create a new project:", "command": "railway init"}, {"task": "Run a local command using variables from the active environment:", "command": "railway run {{cmd}}"}, {"task": "Deploy the linked project directory (if running from a subdirectory, the project root is still deployed):", "command": "railway up"}, {"task": "Open an interactive shell to a database:", "command": "railway connect"}]}
{"command": "rainbowstream", "tasks": [{"task": "Open RainbowStream:", "command": "rainbowstream"}, {"task": "Show your timeline (optional number of tweets to display, default is 5):", "command": "home [{{num_of_last_tweets}}]"}, {"task": "Show profile of a given user:", "command": "whois @{{user}}"}, {"task": "Tweet the message as-is:", "command": "t {{message}}"}, {"task": "Retweet the tweet with given ID (ID is beside the time):", "command": "rt {{tweet_id}}"}, {"task": "Favorite the tweet with given ID:", "command": "fav {{tweet_id}}"}, {"task": "Perform a search for a given word (with or without hashtag):", "command": "s {{word}}"}]}
{"command": "rake", "tasks": [{"task": "Run the `default` Rakefile task:", "command": "rake"}, {"task": "Run a specific task:", "command": "rake {{task}}"}, {"task": "Execute `n` jobs at a time in parallel (number of CPU cores + 4 by default):", "command": "rake --jobs {{n}}"}, {"task": "Use a specific Rakefile:", "command": "rake --rakefile {{path/to/Rakefile}}"}, {"task": "Execute `rake` from another directory:", "command": "rake --directory {{path/to/directory}}"}]}
{"command": "ranger", "tasks": [{"task": "Launch ranger:", "command": "ranger"}, {"task": "Show only directories:", "command": "ranger --show-only-dirs"}, {"task": "Change the configuration directory:", "command": "ranger --confdir={{path/to/directory}}"}, {"task": "Change the data directory:", "command": "ranger --datadir={{path/to/directory}}"}, {"task": "Print CPU usage statistics on exit:", "command": "ranger --profile"}]}
{"command": "rapper", "tasks": [{"task": "Convert an RDF/XML document to Turtle:", "command": "rapper -i rdfxml -o turtle {{path/to/file}}"}, {"task": "Count the number of triples in a Turtle file:", "command": "rapper -i turtle -c {{path/to/file}}"}]}
{"command": "rar", "tasks": [{"task": "Archive 1 or more files:", "command": "rar a {{path/to/archive_name.rar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}, {"task": "Archive a directory:", "command": "rar a {{path/to/archive_name.rar}} {{path/to/directory}}"}, {"task": "Split the archive into parts of equal size (50M):", "command": "rar a -v{{50M}} -R {{path/to/archive_name.rar}} {{path/to/file_or_directory}}"}, {"task": "Password protect the resulting archive:", "command": "rar a -p{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}"}, {"task": "Encrypt file data and headers with password:", "command": "rar a -hp{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}"}, {"task": "Use a specific compression level (0-5):", "command": "rar a -m{{compression_level}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}"}]}
{"command": "rarcrack", "tasks": [{"task": "Brute force the password for an archive (tries to guess the archive type):", "command": "rarcrack {{path/to/file.zip}}"}, {"task": "Specify the archive type:", "command": "rarcrack --type {{rar|zip|7z}} {{path/to/file.zip}}"}, {"task": "Use multiple threads:", "command": "rarcrack --threads {{6}} {{path/to/file.zip}}"}]}
{"command": "rbac-lookup", "tasks": [{"task": "View all RBAC bindings:", "command": "rbac-lookup"}, {"task": "View RBAC bindings that match a given expression:", "command": "rbac-lookup {{search_term}}"}, {"task": "View all RBAC bindings along with the source role binding:", "command": "rbac-lookup -o wide"}, {"task": "View all RBAC bindings filtered by subject:", "command": "rbac-lookup -k {{user|group|serviceaccount}}"}, {"task": "View all RBAC bindings along with IAM roles (if you are using GKE):", "command": "rbac-lookup --gke"}]}
{"command": "rbash", "tasks": [{"task": "Start an interactive shell session:", "command": "rbash"}, {"task": "Execute a command and then exit:", "command": "rbash -c \"{{command}}\""}, {"task": "Execute a script:", "command": "rbash {{path/to/script.sh}}"}, {"task": "Execute a script, printing each command before executing it:", "command": "rbash -x {{path/to/script.sh}}"}, {"task": "Execute commands from a script, stopping at the first error:", "command": "rbash -e {{path/to/script.sh}}"}, {"task": "Read and execute commands from `stdin`:", "command": "rbash -s"}]}
{"command": "rbenv", "tasks": [{"task": "Install a Ruby version:", "command": "rbenv install {{version}}"}, {"task": "Display a list of the latest stable versions for each Ruby:", "command": "rbenv install --list"}, {"task": "Display a list of installed Ruby versions:", "command": "rbenv versions"}, {"task": "Use a specific Ruby version across the whole system:", "command": "rbenv global {{version}}"}, {"task": "Use a specific Ruby version for an application/project directory:", "command": "rbenv local {{version}}"}, {"task": "Display the currently selected Ruby version:", "command": "rbenv version"}, {"task": "Uninstall a Ruby version:", "command": "rbenv uninstall {{version}}"}, {"task": "Display all Ruby versions that contain the specified executable:", "command": "rbenv whence {{executable}}"}]}
{"command": "rbt", "tasks": [{"task": "Post changes to Review Board:", "command": "rbt post {{change_number}}"}, {"task": "Display the diff that will be sent to Review Board:", "command": "rbt diff"}, {"task": "Land a change in a local branch or on a review request:", "command": "rbt land {{branch_name}}"}, {"task": "Patch your tree with a change on a review request:", "command": "rbt patch {{review_request_id}}"}, {"task": "Set up RBTool to talk to a repository:", "command": "rbt setup-repo"}]}
{"command": "rc", "tasks": [{"task": "Start listening on a specific port:", "command": "rc -lp {{port}}"}, {"task": "Start a reverse shell:", "command": "rc {{host}} {{port}} -r {{shell}}"}]}
{"command": "rcat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr rc"}]}
{"command": "rclone", "tasks": [{"task": "List contents of a directory on an rclone remote:", "command": "rclone lsf {{remote_name}}:{{path/to/directory}}"}, {"task": "Copy file or directory from local source to remote destination:", "command": "rclone copy {{path/to/source_file_or_directory}} {{remote_name}}:{{path/to/destination_directory}}"}, {"task": "Copy file or directory from remote source to local destination:", "command": "rclone copy {{remote_name}}:{{path/to/source_file_or_directory}} {{path/to/destination_directory}}"}, {"task": "Sync local source to remote destination, changing the destination only:", "command": "rclone sync {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}"}, {"task": "Move file or directory from local source to remote destination:", "command": "rclone move {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}"}, {"task": "Delete remote file or directory (use `--dry-run` to test, remove it to actually delete):", "command": "rclone --dry-run delete {{remote_name}}:{{path/to/file_or_directory}}"}, {"task": "Mount rclone remote (experimental):", "command": "rclone mount {{remote_name}}:{{path/to/directory}} {{path/to/mount_point}}"}, {"task": "Unmount rclone remote if CTRL-C fails (experimental):", "command": "fusermount -u {{path/to/mount_point}}"}]}
{"command": "rdfind", "tasks": [{"task": "Identify all duplicates in a given directory and output a summary:", "command": "rdfind -dryrun true {{path/to/directory}}"}, {"task": "Replace all duplicates with hardlinks:", "command": "rdfind -makehardlinks true {{path/to/directory}}"}, {"task": "Replace all duplicates with symlinks/soft links:", "command": "rdfind -makesymlinks true {{path/to/directory}}"}, {"task": "Delete all duplicates and do not ignore empty files:", "command": "rdfind -deleteduplicates true -ignoreempty false {{path/to/directory}}"}]}
{"command": "react-native start", "tasks": [{"task": "Start the server that communicates with connected devices:", "command": "react-native start"}, {"task": "Start the metro bundler with a clean cache:", "command": "react-native start --reset-cache"}, {"task": "Start the server in a custom port (defaults to 8081):", "command": "react-native start --port {{3000}}"}, {"task": "Start the server in verbose mode:", "command": "react-native start --verbose"}, {"task": "Specify the maximum number of workers for transforming files (default is the number of CPU cores):", "command": "react-native start --max-workers {{count}}"}, {"task": "Disable interactive mode:", "command": "react-native start --no-interactive"}]}
{"command": "react-native", "tasks": [{"task": "Initialize a new React Native project in a directory of the same name:", "command": "react-native init {{project_name}}"}, {"task": "Start the metro bundler:", "command": "react-native start"}, {"task": "Start the metro bundler with a clean cache:", "command": "react-native start --reset-cache"}, {"task": "Build the current application and start it on a connected Android device or emulator:", "command": "react-native run-android"}, {"task": "Build the current application and start it on an iOS simulator:", "command": "react-native run-ios"}, {"task": "Build the current application in `release` mode and start it on a connected Android device or emulator:", "command": "react-native run-android --variant={{release}}"}, {"task": "Start `logkitty` and print logs to `stdout`:", "command": "react-native log-android"}, {"task": "Start `tail system.log` for an iOS simulator and print logs to `stdout`:", "command": "react-native log-ios"}]}
{"command": "read", "tasks": [{"task": "Store data that you type from the keyboard:", "command": "read {{variable}}"}, {"task": "Do not let backslash (\\\\) act as an escape character:", "command": "read -r {{variable}}"}, {"task": "Read `stdin` and perform an action on every line:", "command": "while read line; do echo \"$line\"; done"}]}
{"command": "readlink", "tasks": [{"task": "Get the actual file to which the symlink points:", "command": "readlink {{path/to/file}}"}, {"task": "Get the absolute path to a file:", "command": "readlink -f {{path/to/file}}"}]}
{"command": "realpath", "tasks": [{"task": "Display the absolute path for a file or directory:", "command": "realpath {{path/to/file_or_directory}}"}, {"task": "Require all path components to exist:", "command": "realpath --canonicalize-existing {{path/to/file_or_directory}}"}, {"task": "Resolve \"..\" components before symlinks:", "command": "realpath --logical {{path/to/file_or_directory}}"}, {"task": "Disable symlink expansion:", "command": "realpath --no-symlinks {{path/to/file_or_directory}}"}, {"task": "Suppress error messages:", "command": "realpath --quiet {{path/to/file_or_directory}}"}]}
{"command": "recsel", "tasks": [{"task": "Extract name and version field:", "command": "recsel -p name,version {{data.rec}}"}, {"task": "Use \"~\" to match a string with a given regular expression:", "command": "recsel -e \"{{field_name}} ~ '{{regular_expression}}' {{data.rec}}\""}, {"task": "Use a predicate to match a name and a version:", "command": "recsel -e \"name ~ '{{regular_expression}}' && version ~ '{{regular_expression}}'\" {{data.rec}}"}]}
{"command": "rector", "tasks": [{"task": "Process a specific directory:", "command": "rector process {{path/to/directory}}"}, {"task": "Process a directory without applying changes (dry run):", "command": "rector process {{path/to/directory}} --dry-run"}, {"task": "Process a directory and apply coding standards:", "command": "rector process {{path/to/directory}} --with-style"}, {"task": "Display a list of available levels:", "command": "rector levels"}, {"task": "Process a directory with a specific level:", "command": "rector process {{path/to/directory}} --level {{level_name}}"}]}
{"command": "redis-benchmark", "tasks": [{"task": "Run full benchmark:", "command": "redis-benchmark"}, {"task": "Run benchmark on a specific Redis server:", "command": "redis-benchmark -h {{host}} -p {{port}} -a {{password}}"}, {"task": "Run a subset of tests with default 100000 requests:", "command": "redis-benchmark -h {{host}} -p {{port}} -t {{set,lpush}} -n {{100000}}"}, {"task": "Run with a specific script:", "command": "redis-benchmark -n {{100000}} script load \"{{redis.call('set', 'foo', 'bar')}}\""}, {"task": "Run benchmark by using 100000 [r]andom keys:", "command": "redis-benchmark -t {{set}} -r {{100000}}"}, {"task": "Run benchmark by using a [P]ipelining of 16 commands:", "command": "redis-benchmark -n {{1000000}} -t {{set,get}} -P {{16}}"}, {"task": "Run benchmark [q]uietly and only show query per seconds result:", "command": "redis-benchmark -q"}]}
{"command": "redis-cli", "tasks": [{"task": "Connect to the local server:", "command": "redis-cli"}, {"task": "Connect to a remote server on the default port (6379):", "command": "redis-cli -h {{host}}"}, {"task": "Connect to a remote server specifying a port number:", "command": "redis-cli -h {{host}} -p {{port}}"}, {"task": "Connect to a remote server specifying a URI:", "command": "redis-cli -u {{uri}}"}, {"task": "Specify a password:", "command": "redis-cli -a {{password}}"}, {"task": "Execute Redis command:", "command": "redis-cli {{redis_command}}"}, {"task": "Connect to the local cluster:", "command": "redis-cli -c"}]}
{"command": "redis-server", "tasks": [{"task": "Start Redis server, using the default port (6379), and write logs to `stdout`:", "command": "redis-server"}, {"task": "Start Redis server, using the default port, as a background process:", "command": "redis-server --daemonize yes"}, {"task": "Start Redis server, using the specified port, as a background process:", "command": "redis-server --port {{port}} --daemonize yes"}, {"task": "Start Redis server with a custom configuration file:", "command": "redis-server {{path/to/redis.conf}}"}, {"task": "Start Redis server with verbose logging:", "command": "redis-server --loglevel {{warning|notice|verbose|debug}}"}]}
{"command": "redshift", "tasks": [{"task": "Turn on Redshift with 5700K temperature during day and 3600K at night:", "command": "redshift -t {{5700}}:{{3600}}"}, {"task": "Turn on Redshift with a manually specified custom location:", "command": "redshift -l {{latitude}}:{{longitude}}"}, {"task": "Turn on Redshift with 70% screen brightness during day and 40% brightness at night:", "command": "redshift -b {{0.7}}:{{0.4}}"}, {"task": "Turn on Redshift with custom gamma levels (between 0 and 1):", "command": "redshift -g {{red}}:{{green}}:{{blue}}"}, {"task": "Turn on Redshift with a constant unchanging color temperature:", "command": "redshift -O {{temperature}}"}]}
{"command": "reflac", "tasks": [{"task": "Recompress a directory of FLAC files:", "command": "reflac {{path/to/directory}}"}, {"task": "Enable maximum compression (very slow):", "command": "reflac --best {{path/to/directory}}"}, {"task": "Display filenames as they are processed:", "command": "reflac --verbose {{path/to/directory}}"}, {"task": "Recurse into subdirectories:", "command": "reflac --recursive {{path/to/directory}}"}, {"task": "Preserve file modification times:", "command": "reflac --preserve {{path/to/directory}}"}]}
{"command": "reflex", "tasks": [{"task": "Rebuild with `make` if any file changes:", "command": "reflex make"}, {"task": "Compile and run Go application if any `.go` file changes:", "command": "reflex --regex='{{\\.go$}}' {{go run .}}"}, {"task": "Ignore a directory when watching for changes:", "command": "reflex --inverse-regex='{{^dir/}}' {{command}}"}, {"task": "Run command when reflex starts and restarts on file changes:", "command": "reflex --start-service=true {{command}}"}, {"task": "Substitute the filename that changed in:", "command": "reflex -- echo {}"}]}
{"command": "rekor-cli", "tasks": [{"task": "Upload an artifact to Rekor:", "command": "rekor-cli upload --artifact {{path/to/file.ext}} --signature {{path/to/file.ext.sig}} --pki-format={{x509}} --public-key={{path/to/key.pub}}"}, {"task": "Get information regarding entries in the Transparency Log:", "command": "rekor-cli get --uuid={{0e81b4d9299e2609e45b5c453a4c0e7820ac74e02c4935a8b830d104632fd2d1}}"}, {"task": "Search the Rekor index to find entries by Artifact:", "command": "rekor-cli search --artifact {{path/to/file.ext}}"}, {"task": "Search the Rekor index to find entries by a specific hash:", "command": "rekor-cli search --sha {{6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b}}"}]}
{"command": "renice", "tasks": [{"task": "Change priority of a running process:", "command": "renice -n {{niceness_value}} -p {{pid}}"}, {"task": "Change priority of all processes owned by a user:", "command": "renice -n {{niceness_value}} -u {{user}}"}, {"task": "Change priority of all processes that belong to a process group:", "command": "renice -n {{niceness_value}} --pgrp {{process_group}}"}]}
{"command": "repren", "tasks": [{"task": "Do a dry-run renaming a directory of PNGs with a literal string replacement:", "command": "repren --dry-run --rename --literal --from '{{find_string}}' --to '{{replacement_string}}' {{*.png}}"}, {"task": "Do a dry-run renaming a directory of JPEGs with a regular expression:", "command": "repren --rename --dry-run --from '{{regular_expression}}' --to '{{replacement_string}}' {{*.jpg}} {{*.jpeg}}"}, {"task": "Do a find-and-replace on the contents of a directory of CSV files:", "command": "repren --from '{{([0-9]+) example_string}}' --to '{{replacement_string \\1}}' {{*.csv}}"}, {"task": "Do both a find-and-replace and a rename operation at the same time, using a pattern file:", "command": "repren --patterns {{path/to/patfile.ext}} --full {{*.txt}}"}, {"task": "Do a case-insensitive rename:", "command": "repren --rename --insensitive --patterns {{path/to/patfile.ext}} *"}]}
{"command": "restic", "tasks": [{"task": "Initialize a backup repository in the specified local directory:", "command": "restic init --repo {{path/to/repository}}"}, {"task": "Backup a directory to the repository:", "command": "restic --repo {{path/to/repository}} backup {{path/to/directory}}"}, {"task": "Show backup snapshots currently stored in the repository:", "command": "restic --repo {{path/to/repository}} snapshots"}, {"task": "Restore a specific backup snapshot to a target directory:", "command": "restic --repo {{path/to/repository}} restore {{latest|snapshot_id}} --target {{path/to/target}}"}, {"task": "Restore a specific path from a specific backup to a target directory:", "command": "restic --repo {{path/to/repository}} restore {{snapshot_id}} --target {{path/to/target}} --include {{path/to/restore}}"}, {"task": "Clean up the repository and keep only the most recent snapshot of each unique backup:", "command": "restic forget --keep-last 1 --prune"}]}
{"command": "resume", "tasks": [{"task": "Create a new `resume.json` file in the current working directory:", "command": "resume init"}, {"task": "Validate a `resume.json` against schema tests to ensure it complies with the standard:", "command": "resume validate"}, {"task": "Export a resume locally in a stylized HTML or PDF format:", "command": "resume export {{path/to/html_or_pdf}}"}, {"task": "Start a web server that serves a local `resume.json`:", "command": "resume serve"}]}
{"command": "retry", "tasks": [{"task": "Retry a command until it succeeds:", "command": "retry {{command}}"}, {"task": "Retry a command every n seconds until it succeeds:", "command": "retry --delay={{n}} {{command}}"}, {"task": "Give up after n attempts:", "command": "retry --times={{n}} {{command}}"}]}
{"command": "rev", "tasks": [{"task": "Reverse the text string \"hello\":", "command": "echo \"hello\" | rev"}, {"task": "Reverse an entire file and print to `stdout`:", "command": "rev {{path/to/file}}"}]}
{"command": "rfetch", "tasks": [{"task": "Display system information:", "command": "rfetch"}, {"task": "Display system [a]rchitecture:", "command": "rfetch -a"}, {"task": "Display system up[t]ime:", "command": "rfetch -t"}, {"task": "Display system [k]ernel:", "command": "rfetch -k"}, {"task": "Display system [c]PU:", "command": "rfetch -c"}, {"task": "Display Linux [D]istro:", "command": "rfetch -D"}, {"task": "View [d]esktop environment:", "command": "rfetch -d"}]}
{"command": "rg", "tasks": [{"task": "Recursively search the current directory for a regular expression:", "command": "rg {{regular_expression}}"}, {"task": "Search for regular expressions recursively in the current directory, including hidden files and files listed in `.gitignore`:", "command": "rg --no-ignore --hidden {{regular_expression}}"}, {"task": "Search for a regular expression only in a subset of directories:", "command": "rg {{regular_expression}} {{set_of_subdirs}}"}, {"task": "Search for a regular expression in files matching a glob (e.g. `README.*`):", "command": "rg {{regular_expression}} --glob {{glob}}"}, {"task": "Search for filenames that match a regular expression:", "command": "rg --files | rg {{regular_expression}}"}, {"task": "Only list matched files (useful when piping to other commands):", "command": "rg --files-with-matches {{regular_expression}}"}, {"task": "Show lines that do not match the given regular expression:", "command": "rg --invert-match {{regular_expression}}"}, {"task": "Search a literal string pattern:", "command": "rg --fixed-strings -- {{string}}"}]}
{"command": "rga", "tasks": [{"task": "Search recursively for a pattern in all files in the current directory:", "command": "rga {{regular_expression}}"}, {"task": "List available adapters:", "command": "rga --rga-list-adapters"}, {"task": "Change which adapters to use (e.g. ffmpeg, pandoc, poppler etc.):", "command": "rga --rga-adapters={{adapter1,adapter2}} {{regular_expression}}"}, {"task": "Search for a pattern using the mime type instead of the file extension (slower):", "command": "rga --rga-accurate {{regular_expression}}"}, {"task": "Display detailed help:", "command": "rga --help"}]}
{"command": "rgpt", "tasks": [{"task": "Ask GPT to improve the code with no extra options:", "command": "rgpt --i \"$(git diff {{path/to/file}})\""}, {"task": "Get a more detailed verbose output from `rgpt` while reviewing the code:", "command": "rgpt --v --i \"$(git diff {{path/to/file}})\""}, {"task": "Ask GPT to improve the code and limit it to a certain amount of GPT3 tokens:", "command": "rgpt --max {{300}} --i \"$(git diff {{path/to/file}})\""}, {"task": "Ask GPT for a more unique result using a float value between 0 and 2. (higher = more unique):", "command": "rgpt --pres {{1.2}} --i \"$(git diff {{path/to/file}})\""}, {"task": "Ask GPT to review your code using a specific model:", "command": "rgpt --model {{davinci}} --i \"$(git diff {{path/to/file}})\""}, {"task": "Make `rgpt` use a JSON output:", "command": "rgpt --json --i \"$(git diff {{path/to/file}})\""}]}
{"command": "rgrep", "tasks": [{"task": "Recursively search for a pattern in the current working directory:", "command": "rgrep \"{{search_pattern}}\""}, {"task": "Recursively search for a case-insensitive pattern in the current working directory:", "command": "rgrep --ignore-case \"{{search_pattern}}\""}, {"task": "Recursively search for an extended regular expression pattern (supports `?`, `+`, `{}`, `()` and `|`) in the current working directory:", "command": "rgrep --extended-regexp \"{{search_pattern}}\""}, {"task": "Recursively search for an exact string (disables regular expressions) in the current working directory:", "command": "rgrep --fixed-strings \"{{exact_string}}\""}, {"task": "Recursively search for a pattern in a specified directory (or file):", "command": "rgrep \"{{search_pattern}}\" {{path/to/file_or_directory}}"}]}
{"command": "rhash", "tasks": [{"task": "Calculate default CRC32 digests of a file:", "command": "rhash {{path/to/file}}"}, {"task": "Recursively process a directory to generate an SFV file using SHA1:", "command": "rhash --sha1 --recursive {{path/to/folder}} > {{path/to/output.sfv}}"}, {"task": "Verify the integrity of files based on an SFV file:", "command": "rhash --check {{path/to/file.sfv}}"}, {"task": "Calculate the SHA3 digest of a text message:", "command": "rhash --sha3-256 --message '{{message}}'"}, {"task": "Calculate CRC32 digest of a file and output digest encoded in base64 using BSD format:", "command": "rhash --base64 --bsd {{path/to/file}}"}, {"task": "Use custom output template:", "command": "rhash --printf '{{%p\\t%s\\t%{mtime}\\t%m\\n}}' {{path/to/file}}"}]}
{"command": "rich", "tasks": [{"task": "Display a file with syntax highlighting:", "command": "rich {{path/to/file.py}}"}, {"task": "Add line numbers, and indentation guides:", "command": "rich {{path/to/file.py}} --line-number --guides"}, {"task": "Apply a theme:", "command": "rich {{path/to/file.py}} --theme {{monokai}}"}, {"task": "Display a file in an interactive pager:", "command": "rich {{path/to/file.py}} --pager"}, {"task": "Display contents from a URL:", "command": "rich {{https://raw.githubusercontent.com/Textualize/rich-cli/main/README.md}} --markdown --pager"}, {"task": "Export a file as HTML:", "command": "rich {{path/to/file.md}} --export-html {{path/to/file.html}}"}, {"task": "Display text with formatting tags, custom alignment, and line width:", "command": "rich --print {{\"Hello [green on black]Stylized[/green on black] [bold]World[/bold]\"}} --{{left|center|right}} --width {{10}}"}]}
{"command": "rip", "tasks": [{"task": "Remove files or directories from specified locations and place them in the graveyard:", "command": "rip {{path/to/file_or_directory}} {{path/to/another/file_or_directory}}"}, {"task": "Interactively remove files or directories, with a prompt before every removal:", "command": "rip --inspect {{path/to/file_or_directory}} {{path/to/another/file_or_directory}}"}, {"task": "List all files and directories in the graveyard that were originally within the current directory:", "command": "rip --seance"}, {"task": "Permanently delete every file and directory in the graveyard:", "command": "rip --decompose"}, {"task": "Put back the files and directories which were affected by the most recent removal:", "command": "rip --unbury"}, {"task": "Put back every file and directory that is listed by `rip --seance`:", "command": "rip --seance --unbury"}]}
{"command": "ripgrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr rg"}]}
{"command": "rm", "tasks": [{"task": "Remove specific files:", "command": "rm {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files ignoring nonexistent ones:", "command": "rm -f {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files [i]nteractively prompting before each removal:", "command": "rm -i {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files printing info about each removal:", "command": "rm -v {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files and directories [r]ecursively:", "command": "rm -r {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}]}
{"command": "rmdir", "tasks": [{"task": "Remove specific directories:", "command": "rmdir {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Remove specific nested directories recursively:", "command": "rmdir -p {{path/to/directory1 path/to/directory2 ...}}"}]}
{"command": "rmlint", "tasks": [{"task": "Check a directory for duplicates, empty files, and other issues:", "command": "rmlint {{path/to/directory}}"}, {"task": "Delete duplicate files found by an execution of `rmlint`:", "command": "./rmlint.sh"}, {"task": "Find duplicate directory trees:", "command": "rmlint --merge-directories {{path/to/directory}}"}, {"task": "Mark files at lower path [d]epth as originals:", "command": "rmlint --rank-by={{d}} {{path/to/directory}}"}, {"task": "Mark files with shortest name [l]ength as originals:", "command": "rmlint --rank-by={{l}} {{path/to/directory}}"}, {"task": "Find only duplicates that have the same filename in addition to the same contents:", "command": "rmlint --match-basename {{path/to/directory}}"}, {"task": "Find all duplicates with the same extension:", "command": "rmlint --match-extension {{path/to/directory}}"}]}
{"command": "roave-backward-compatibility-check", "tasks": [{"task": "Check for breaking changes since the last tag:", "command": "roave-backward-compatibility-check"}, {"task": "Check for breaking changes since a specific tag:", "command": "roave-backward-compatibility-check --from={{git_reference}}"}, {"task": "Check for breaking changes between the last tag and a specific reference:", "command": "roave-backward-compatibility-check --to={{git_reference}}"}, {"task": "Check for breaking changes and output to Markdown:", "command": "roave-backward-compatibility-check --format=markdown > {{results.md}}"}]}
{"command": "robo", "tasks": [{"task": "List available commands:", "command": "robo list"}, {"task": "Run a specific command:", "command": "robo {{foo}}"}, {"task": "Simulate running a specific command:", "command": "robo --simulate {{foo}}"}]}
{"command": "roll", "tasks": [{"task": "Roll 3 6-sided dice and sums the results:", "command": "roll {{3d}}"}, {"task": "Roll 1 8-sided die, add 3 and sum the results:", "command": "roll {{d8 + 3}}"}, {"task": "Roll 4 6-sided dice, keep the 3 highest results and sum the results:", "command": "roll {{4d6h3}}"}, {"task": "Roll 2 12-sided dice 2 times and show every roll:", "command": "roll --verbose {{2{2d12}}}"}, {"task": "Roll 2 20-sided dice until the result is bigger than 10:", "command": "roll \"{{2d20>10}}\""}, {"task": "Roll 2 5-sided dice 3 times and show the total sum:", "command": "roll --sum-series {{3{2d5}}}"}]}
{"command": "route", "tasks": [{"task": "Display the information of route table:", "command": "route -n"}, {"task": "Add route rule:", "command": "sudo route add -net {{ip_address}} netmask {{netmask_address}} gw {{gw_address}}"}, {"task": "Delete route rule:", "command": "sudo route del -net {{ip_address}} netmask {{netmask_address}} dev {{gw_address}}"}]}
{"command": "rpi-imager", "tasks": [{"task": "Write a specific image to a specific block device:", "command": "rpi-imager --cli {{path/to/image.zip}} {{/dev/sdX}}"}, {"task": "Write a specific image to a block device, disabling the checksum verification:", "command": "rpi-imager --cli --disable-verify {{path/to/image.zip}} {{/dev/sdX}}"}, {"task": "Write a specific image to a block device, which will expect a specific checksum when running the verification:", "command": "rpi-imager --cli --sha256 {{expected_hash}} {{path/to/image.zip}} {{/dev/sdX}}"}]}
{"command": "rr", "tasks": [{"task": "Record an application:", "command": "rr record {{path/to/binary --arg1 --arg2}}"}, {"task": "Replay latest recorded execution:", "command": "rr replay"}]}
{"command": "Rscript", "tasks": [{"task": "Run a script:", "command": "Rscript {{path/to/file.R}}"}, {"task": "Run a script in vanilla mode (i.e. a blank session that doesn't save the workspace at the end):", "command": "Rscript --vanilla {{path/to/file.R}}"}, {"task": "Execute one or more R expressions:", "command": "Rscript -e {{expression1}} -e {{expression2}}"}, {"task": "Display R version:", "command": "Rscript --version"}]}
{"command": "rspec", "tasks": [{"task": "Initialize an .rspec config and a spec helper file:", "command": "rspec --init"}, {"task": "Run all tests:", "command": "rspec"}, {"task": "Run a specific directory of tests:", "command": "rspec {{path/to/directory}}"}, {"task": "Run a specific test file:", "command": "rspec {{path/to/file}}"}, {"task": "Run multiple test files:", "command": "rspec {{path/to/file1}} {{path/to/file2}}"}, {"task": "Run a specific test in a file (e.g. the test starts on line 83):", "command": "rspec {{path/to/file}}:{{83}}"}, {"task": "Run specs with a specific seed:", "command": "rspec --seed {{seed_number}}"}]}
{"command": "rss2email", "tasks": [{"task": "List all feeds:", "command": "r2e list"}, {"task": "Convert RSS entries to email:", "command": "r2e run"}, {"task": "Add a feed:", "command": "r2e add {{feed_address}}"}, {"task": "Add a feed with a specific email address:", "command": "r2e add {{feed_address}} {{new_email@example.com}}"}, {"task": "Delete a specific feed:", "command": "r2e delete {{number_of_feed_in_list}}"}, {"task": "Display help:", "command": "r2e -h"}]}
{"command": "rsstail", "tasks": [{"task": "Show the feed of a given URL and wait for new entries appearing at the bottom:", "command": "rsstail -u {{url}}"}, {"task": "Show the feed in reverse chronological order (newer at the bottom):", "command": "rsstail -r -u {{url}}"}, {"task": "Include publication date and link:", "command": "rsstail -pl -u {{url}}"}, {"task": "Set update interval:", "command": "rsstail -u {{url}} -i {{interval_in_seconds}}"}, {"task": "Show feed and exit:", "command": "rsstail -1 -u {{url}}"}]}
{"command": "rsync", "tasks": [{"task": "Transfer a file:", "command": "rsync {{path/to/source}} {{path/to/destination}}"}, {"task": "Use archive mode (recursively copy directories, copy symlinks without resolving and preserve permissions, ownership and modification times):", "command": "rsync --archive {{path/to/source}} {{path/to/destination}}"}, {"task": "Compress the data as it is sent to the destination, display verbose and human-readable progress, and keep partially transferred files if interrupted:", "command": "rsync --compress --verbose --human-readable --partial --progress {{path/to/source}} {{path/to/destination}}"}, {"task": "Recursively copy directories:", "command": "rsync --recursive {{path/to/source}} {{path/to/destination}}"}, {"task": "Transfer directory contents, but not the directory itself:", "command": "rsync --recursive {{path/to/source}}/ {{path/to/destination}}"}, {"task": "Recursively copy directories, use archive mode, resolve symlinks and skip files that are newer on the destination:", "command": "rsync --recursive --archive --update --copy-links {{path/to/source}} {{path/to/destination}}"}, {"task": "Transfer a directory to a remote host running `rsyncd` and delete files on the destination that do not exist on the source:", "command": "rsync --recursive --delete rsync://{{host}}:{{path/to/source}} {{path/to/destination}}"}, {"task": "Transfer a file over SSH using a different port than the default (22) and show global progress:", "command": "rsync --rsh 'ssh -p {{port}}' --info=progress2 {{host}}:{{path/to/source}} {{path/to/destination}}"}]}
{"command": "rtl_sdr", "tasks": [{"task": "Save RAW data from a frequency (specified in Hz) to a file:", "command": "rtl_sdr -f {{100000000}} {{path/to/file}}"}, {"task": "Pipe data to another program:", "command": "rtl_sdr -f {{100000000}} - | {{aplay}}"}, {"task": "Read a specified number of samples:", "command": "rtl_sdr -f {{100000000}} -n {{20}} -"}, {"task": "Specify the sample rate in Hz (ranges 225001-300000 and 900001-3200000):", "command": "rtl_sdr -f {{100000000}} -s {{2400000}} -"}, {"task": "Specify the device by its index:", "command": "rtl_sdr -f {{100000000}} -d {{0}} -"}, {"task": "Specify the gain:", "command": "rtl_sdr -f {{100000000}} -g {{20}} -"}, {"task": "Specify the output block size:", "command": "rtl_sdr -f {{100000000}} -b {{9999999}} -"}, {"task": "Use synchronous output:", "command": "rtl_sdr -f {{100000000}} -S -"}]}
{"command": "rtmpdump", "tasks": [{"task": "Download a file:", "command": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} -o {{file.ext}}"}, {"task": "Download a file from a Flash player:", "command": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --swfVfy {{http://example.com/player}} --flashVer \"{{LNX 10,0,32,18}}\" -o {{file.ext}}"}, {"task": "Specify connection parameters if they are not detected correctly:", "command": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --app {{app_name}} --playpath {{path/to/video}} -o {{file.ext}}"}, {"task": "Download a file from a server that requires a referrer:", "command": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --pageUrl {{http://example.com/webpage}} -o {{file.ext}}"}]}
{"command": "rtv", "tasks": [{"task": "Open the front page:", "command": "/front"}, {"task": "Open a subreddit:", "command": "/r/{{subreddit_name}}"}, {"task": "Expand/collapse comments:", "command": "[space]"}, {"task": "Open link:", "command": "o"}, {"task": "Log in:", "command": "u"}, {"task": "Open the help screen:", "command": "?"}]}
{"command": "rubocop", "tasks": [{"task": "Check all files in the current directory (including subdirectories):", "command": "rubocop"}, {"task": "Check one or more specific files or directories:", "command": "rubocop {{path/to/file}} {{path/to/directory}}"}, {"task": "Write output to file:", "command": "rubocop --out {{path/to/file}}"}, {"task": "View list of cops (linter rules):", "command": "rubocop --show-cops"}, {"task": "Exclude a cop:", "command": "rubocop --except {{cop_1}} {{cop_2}}"}, {"task": "Run only specified cops:", "command": "rubocop --only {{cop_1}} {{cop_2}}"}, {"task": "Auto-correct files (experimental):", "command": "rubocop --auto-correct"}]}
{"command": "ruby", "tasks": [{"task": "Execute a Ruby script:", "command": "ruby {{script.rb}}"}, {"task": "Execute a single Ruby command in the command-line:", "command": "ruby -e {{command}}"}, {"task": "Check for syntax errors on a given Ruby script:", "command": "ruby -c {{script.rb}}"}, {"task": "Start the built-in HTTP server on port 8080 in the current directory:", "command": "ruby -run -e httpd"}, {"task": "Show the version of Ruby you are using:", "command": "ruby -v"}]}
{"command": "runit", "tasks": [{"task": "Start runit's 3-stage init scheme:", "command": "runit"}, {"task": "Shut down runit:", "command": "kill --CONT {{runit_pid}}"}]}
{"command": "runsv", "tasks": [{"task": "Start a runit service as the current user:", "command": "runsv {{path/to/service}}"}, {"task": "Start a runit service as root:", "command": "sudo runsv {{path/to/service}}"}]}
{"command": "runsvchdir", "tasks": [{"task": "Switch `runsvdir` directories:", "command": "sudo runsvchdir {{path/to/directory}}"}]}
{"command": "runsvdir", "tasks": [{"task": "Start and manage all services in a directory as the current user:", "command": "runsvdir {{path/to/services}}"}, {"task": "Start and manage all services in a directory as root:", "command": "sudo runsvdir {{path/to/services}}"}, {"task": "Start services in separate sessions:", "command": "runsvdir -P {{path/to/services}}"}]}
{"command": "rustc", "tasks": [{"task": "Compile a binary crate:", "command": "rustc {{path/to/main.rs}}"}, {"task": "Compile with optimizations (`s` means optimize for binary size; `z` is the same with even more optimizations):", "command": "rustc -C lto -C opt-level={{0|1|2|3|s|z}} {{path/to/main.rs}}"}, {"task": "Compile with debugging information:", "command": "rustc -g {{path/to/main.rs}}"}, {"task": "Explain an error message:", "command": "rustc --explain {{error_code}}"}, {"task": "Compile with architecture-specific optimizations for the current CPU:", "command": "rustc -C target-cpu={{native}} {{path/to/main.rs}}"}, {"task": "Display the target list (Note: you have to add a target using `rustup` first to be able to compile for it):", "command": "rustc --print target-list"}, {"task": "Compile for a specific target:", "command": "rustc --target {{target_triple}} {{path/to/main.rs}}"}]}
{"command": "rustfmt", "tasks": [{"task": "Format a file, overwriting the original file in-place:", "command": "rustfmt {{path/to/source.rs}}"}, {"task": "Check a file for formatting and display any changes on the console:", "command": "rustfmt --check {{path/to/source.rs}}"}, {"task": "Backup any modified files before formatting (the original file is renamed with a `.bk` extension):", "command": "rustfmt --backup {{path/to/source.rs}}"}]}
{"command": "rustup-init.sh", "tasks": [{"task": "Download and run `rustup-init` to install `rustup` and the default Rust toolchain:", "command": "curl https://sh.rustup.rs -sSf | sh -s"}, {"task": "Download and run `rustup-init` and pass arguments to it:", "command": "curl https://sh.rustup.rs -sSf | sh -s -- {{arguments}}"}, {"task": "Run `rustup-init` and specify additional components or targets to install:", "command": "rustup-init.sh --target {{target}} --component {{component}}"}, {"task": "Run `rustup-init` and specify the default toolchain to install:", "command": "rustup-init.sh --default-toolchain {{toolchain}}"}, {"task": "Run `rustup-init` and do not install any toolchain:", "command": "rustup-init.sh --default-toolchain {{none}}"}, {"task": "Run `rustup-init` and specify an installation profile:", "command": "rustup-init.sh --profile {{minimal|default|complete}}"}, {"task": "Run `rustup-init` without asking for confirmation:", "command": "rustup-init.sh -y"}]}
{"command": "rustup", "tasks": [{"task": "Install the nightly toolchain for your system:", "command": "rustup install nightly"}, {"task": "Switch the default toolchain to nightly so that the `cargo` and `rustc` commands will use it:", "command": "rustup default nightly"}, {"task": "Use the nightly toolchain when inside the current project, but leave global settings unchanged:", "command": "rustup override set nightly"}, {"task": "Update all toolchains:", "command": "rustup update"}, {"task": "List installed toolchains:", "command": "rustup show"}, {"task": "Run cargo build with a certain toolchain:", "command": "rustup run {{toolchain_name}} cargo build"}, {"task": "Open the local rust documentation in the default web browser:", "command": "rustup doc"}]}
{"command": "rvm", "tasks": [{"task": "Install one or more space-separated versions of Ruby:", "command": "rvm install {{version(s)}}"}, {"task": "Display a list of installed versions:", "command": "rvm list"}, {"task": "Use a specific version of Ruby:", "command": "rvm use {{version}}"}, {"task": "Set the default Ruby version:", "command": "rvm --default use {{version}}"}, {"task": "Upgrade a version of Ruby to a new version:", "command": "rvm upgrade {{current_version}} {{new_version}}"}, {"task": "Uninstall a version of Ruby and keep its sources:", "command": "rvm uninstall {{version}}"}, {"task": "Remove a version of Ruby and its sources:", "command": "rvm remove {{version}}"}, {"task": "Show specific dependencies for your OS:", "command": "rvm requirements"}]}
{"command": "s", "tasks": [{"task": "Search for a query on Google (default provider):", "command": "s {{query}}"}, {"task": "List all providers:", "command": "s --list-providers"}, {"task": "Search for a query with a given provider:", "command": "s --provider {{provider}} {{query}}"}, {"task": "Use a specified binary to perform the search query:", "command": "s --binary \"{{binary}} {{arguments}}\" {{query}}"}]}
{"command": "s3cmd", "tasks": [{"task": "Invoke configuration/reconfiguration tool:", "command": "s3cmd --configure"}, {"task": "List Buckets/Folders/Objects:", "command": "s3cmd ls s3://{{bucket|path/to/file}}"}, {"task": "Create Bucket/Folder:", "command": "s3cmd mb s3://{{bucket}}"}, {"task": "Download a specific file from a bucket:", "command": "s3cmd get s3://{{bucket_name}}/{{path/to/file}} {{path/to/local_file}}"}, {"task": "Upload a file to a bucket:", "command": "s3cmd put {{local_file}} s3://{{bucket}}/{{file}}"}, {"task": "Move an object to a specific bucket location:", "command": "s3cmd mv s3://{{src_bucket}}/{{src_object}} s3://{{dst_bucket}}/{{dst_object}}"}, {"task": "Delete a specific object:", "command": "s3cmd rm s3://{{bucket}}/{{object}}"}]}
{"command": "safe", "tasks": [{"task": "Add a safe target:", "command": "safe target {{vault_addr}} {{target_name}}"}, {"task": "Authenticate the CLI client against the Vault server, using an authentication token:", "command": "safe auth {{authentication_token}}"}, {"task": "Print the environment variables describing the current target:", "command": "safe env"}, {"task": "Display a tree hierarchy of all reachable keys for a given path:", "command": "safe tree {{path}}"}, {"task": "Move a secret from one path to another:", "command": "safe move {{old/path/to/secret}} {{new/path/to/secret}}"}, {"task": "Generate a new 2048-bit SSH key-pair and store it:", "command": "safe ssh {{2048}} {{path/to/secret}}"}, {"task": "Set non-sensitive keys for a secret:", "command": "safe set {{path/to/secret}} {{key}}={{value}}"}, {"task": "Set auto-generated password in a secret:", "command": "safe gen {{path/to/secret}} {{key}}"}]}
{"command": "sails", "tasks": [{"task": "Start Sails:", "command": "sails lift"}, {"task": "Create new Sails project:", "command": "sails new {{projectName}}"}, {"task": "Generate Sails API:", "command": "sails generate {{name}}"}, {"task": "Generate Sails Controller:", "command": "sails generate controller {{name}}"}, {"task": "Generate Sails Model:", "command": "sails generate model {{name}}"}]}
{"command": "salt-call", "tasks": [{"task": "Perform a highstate on this minion:", "command": "salt-call state.highstate"}, {"task": "Perform a highstate dry-run, compute all changes but don't actually perform them:", "command": "salt-call state.highstate test=true"}, {"task": "Perform a highstate with verbose debugging output:", "command": "salt-call -l debug state.highstate"}, {"task": "List this minion's grains:", "command": "salt-call grains.items"}]}
{"command": "salt-key", "tasks": [{"task": "List all accepted, unaccepted and rejected minion keys:", "command": "salt-key -L"}, {"task": "Accept a minion key by name:", "command": "salt-key -a {{MINION_ID}}"}, {"task": "Reject a minion key by name:", "command": "salt-key -r {{MINION_ID}}"}, {"task": "Print fingerprints of all public keys:", "command": "salt-key -F"}]}
{"command": "salt-run", "tasks": [{"task": "Show status of all minions:", "command": "salt-run manage.status"}, {"task": "Show all minions which are disconnected:", "command": "salt-run manage.up"}]}
{"command": "salt", "tasks": [{"task": "List connected minions:", "command": "salt '*' test.ping"}, {"task": "Execute a highstate on all connected minions:", "command": "salt '*' state.highstate"}, {"task": "Upgrade packages using the OS package manager (apt, yum, brew) on a subset of minions:", "command": "salt '*.example.com' pkg.upgrade"}, {"task": "Execute an arbitrary command on a particular minion:", "command": "salt '{{minion_id}}' cmd.run \"ls \""}]}
{"command": "sam2p", "tasks": [{"task": "Concatenate all PDF files into one:", "command": "sam2p *.pdf {{path/to/output.pdf}}"}]}
{"command": "samtools", "tasks": [{"task": "Convert a SAM input file to BAM stream and save to file:", "command": "samtools view -S -b {{input.sam}} > {{output.bam}}"}, {"task": "Take input from `stdin` (-) and print the SAM header and any reads overlapping a specific region to `stdout`:", "command": "{{other_command}} | samtools view -h - chromosome:start-end"}, {"task": "Sort file and save to BAM (the output format is automatically determined from the output file's extension):", "command": "samtools sort {{input}} -o {{output.bam}}"}, {"task": "Index a sorted BAM file (creates {{sorted_input.bam.bai}}):", "command": "samtools index {{sorted_input.bam}}"}, {"task": "Print alignment statistics about a file:", "command": "samtools flagstat {{sorted_input}}"}, {"task": "Count alignments to each index (chromosome/contig):", "command": "samtools idxstats {{sorted_indexed_input}}"}, {"task": "Merge multiple files:", "command": "samtools merge {{output}} {{input1 input2 …}}"}, {"task": "Split input file according to read groups:", "command": "samtools split {{merged_input}}"}]}
{"command": "sass", "tasks": [{"task": "Convert a SCSS or Sass file to CSS and print out the result:", "command": "sass {{inputfile.scss|inputfile.sass}}"}, {"task": "Convert a SCSS or Sass file to CSS and save the result to a file:", "command": "sass {{inputfile.scss|inputfile.sass}} {{outputfile.css}}"}, {"task": "Watch a SCSS or Sass file for changes and output or update the CSS file with same filename:", "command": "sass --watch {{inputfile.scss|inputfile.sass}}"}, {"task": "Watch a SCSS or Sass file for changes and output or update the CSS file with the given filename:", "command": "sass --watch {{inputfile.scss|inputfile.sass}}:{{outputfile.css}}"}]}
{"command": "satis", "tasks": [{"task": "Initialize a Satis configuration:", "command": "satis init {{satis.json}}"}, {"task": "Add a VCS repository to the Satis configuration:", "command": "satis add {{repository_url}}"}, {"task": "Build the static output from the configuration:", "command": "satis build {{satis.json}} {{path/to/output_directory}}"}, {"task": "Build the static output by updating only the specified repository:", "command": "satis build --repository-url {{repository_url}} {{satis.json}} {{path/to/output_directory}}"}, {"task": "Remove useless archive files:", "command": "satis purge {{satis.json}} {{path/to/output_directory}}"}]}
{"command": "sbcl", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "sbcl"}, {"task": "Execute a Lisp script:", "command": "sbcl --script {{path/to/script.lisp}}"}]}
{"command": "sbt", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "sbt"}, {"task": "Create a new Scala project from an existing Giter8 template hosted on GitHub:", "command": "sbt new {{scala/hello-world.g8}}"}, {"task": "Compile and run all tests:", "command": "sbt test"}, {"task": "Delete all generated files in the `target` directory:", "command": "sbt clean"}, {"task": "Compile the main sources in `src/main/scala` and `src/main/java` directories:", "command": "sbt compile"}, {"task": "Use the specified version of sbt:", "command": "sbt -sbt-version {{version}}"}, {"task": "Use a specific jar file as the sbt launcher:", "command": "sbt -sbt-jar {{path}}"}, {"task": "List all sbt options:", "command": "sbt -h"}]}
{"command": "SC-IM", "tasks": [{"task": "Start SC-IM:", "command": "scim {{path/to/file.csv}}"}, {"task": "Enter a string into the current cell:", "command": "< or >"}, {"task": "Enter a numeric constant into the current cell:", "command": "="}, {"task": "Edit string in the current cell:", "command": "E"}, {"task": "Edit number in the current cell:", "command": "e"}, {"task": "Center align the current cell:", "command": "|"}]}
{"command": "scala", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "scala"}, {"task": "Start the interpreter with a dependency in the classpath:", "command": "scala -classpath {{filename.jar}} {{command}}"}, {"task": "Execute a Scala script:", "command": "scala {{script.scala}}"}, {"task": "Execute a `.jar` program:", "command": "scala {{filename.jar}}"}, {"task": "Execute a single Scala command in the command-line:", "command": "scala -e {{command}}"}]}
{"command": "scalafmt", "tasks": [{"task": "Reformat all `.scala` files in the current directory recursively:", "command": "scalafmt"}, {"task": "Reformat specific files or directories with a custom formatting configuration:", "command": "scalafmt --config {{path/to/.scalafmt.conf}} {{path/to/file_or_directory}} {{path/to/file_or_directory}} {{...}}"}, {"task": "Check if files are correctly formatted, returning `0` if all files respect the formatting style:", "command": "scalafmt --config {{path/to/.scalafmt.conf}} --test"}, {"task": "Exclude files or directories:", "command": "scalafmt --exclude {{path/to/file_or_directory}} {{...}}"}, {"task": "Format only files that were edited against the current Git branch:", "command": "scalafmt --config {{path/to/.scalafmt.conf}} --mode diff"}]}
{"command": "scan-build", "tasks": [{"task": "Build and analyze the project in the current directory:", "command": "scan-build {{make}}"}, {"task": "Run a command and pass all subsequent options to it:", "command": "scan-build {{command}} {{command_arguments}}"}, {"task": "Display help:", "command": "scan-build"}]}
{"command": "scc", "tasks": [{"task": "Print lines of code in the current directory:", "command": "scc"}, {"task": "Print lines of code in the target directory:", "command": "scc {{path/to/directory}}"}, {"task": "Display output for every file:", "command": "scc --by-file"}, {"task": "Display output using a specific output format (defaults to `tabular`):", "command": "scc --format {{tabular|wide|json|csv|cloc-yaml|html|html-table}}"}, {"task": "Only count files with specific file extensions:", "command": "scc --include-ext {{go, java, js}}"}, {"task": "Exclude directories from being counted:", "command": "scc --exclude-dir {{.git,.hg}}"}, {"task": "Display output and sort by column (defaults to by files):", "command": "scc --sort {{files|name|lines|blanks|code|comments|complexity}}"}, {"task": "Print help for scc:", "command": "scc -h"}]}
{"command": "sccmap", "tasks": [{"task": "Extract strongly connected components of one or more directed graphs:", "command": "sccmap -S {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Print statistics about a graph, producing no output graph:", "command": "sccmap -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}"}, {"task": "Display help for `sccmap`:", "command": "sccmap -?"}]}
{"command": "scd", "tasks": [{"task": "Index paths recursively for the very first run:", "command": "scd -ar {{path/to/directory}}"}, {"task": "Change to a specific directory:", "command": "scd {{path/to/directory}}"}, {"task": "Change to a path matching specific patterns:", "command": "scd \"{{pattern1 pattern2 ...}}\""}, {"task": "Show selection menu and ranking of 20 most likely directories:", "command": "scd -v"}, {"task": "Add a specific alias for the current directory:", "command": "scd --alias={{word}}"}, {"task": "Change to a directory using a specific alias:", "command": "scd {{word}}"}]}
{"command": "scheme", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "scheme"}, {"task": "Run a scheme program (with no REPL output):", "command": "scheme --quiet < {{script.scm}}"}, {"task": "Load a scheme program into the REPL:", "command": "scheme --load {{script.scm}}"}, {"task": "Load scheme expressions into the REPL:", "command": "scheme --eval \"{{(define foo 'x)}}\""}, {"task": "Open the REPL in quiet mode:", "command": "scheme --quiet"}]}
{"command": "scp", "tasks": [{"task": "Copy a local file to a remote host:", "command": "scp {{path/to/local_file}} {{remote_host}}:{{path/to/remote_file}}"}, {"task": "Use a specific port when connecting to the remote host:", "command": "scp -P {{port}} {{path/to/local_file}} {{remote_host}}:{{path/to/remote_file}}"}, {"task": "Copy a file from a remote host to a local directory:", "command": "scp {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}"}, {"task": "Recursively copy the contents of a directory from a remote host to a local directory:", "command": "scp -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}"}, {"task": "Copy a file between two remote hosts transferring through the local host:", "command": "scp -3 {{host1}}:{{path/to/remote_file}} {{host2}}:{{path/to/remote_directory}}"}, {"task": "Use a specific username when connecting to the remote host:", "command": "scp {{path/to/local_file}} {{remote_username}}@{{remote_host}}:{{path/to/remote_directory}}"}, {"task": "Use a specific ssh private key for authentication with the remote host:", "command": "scp -i {{~/.ssh/private_key}} {{local_file}} {{remote_host}}:{{/path/remote_file}}"}]}
{"command": "scrapy", "tasks": [{"task": "Create a project:", "command": "scrapy startproject {{project_name}}"}, {"task": "Create a spider (in project directory):", "command": "scrapy genspider {{spider_name}} {{website_domain}}"}, {"task": "Edit spider (in project directory):", "command": "scrapy edit {{spider_name}}"}, {"task": "Run spider (in project directory):", "command": "scrapy crawl {{spider_name}}"}, {"task": "Fetch a webpage as Scrapy sees it and print the source to `stdout`:", "command": "scrapy fetch {{url}}"}, {"task": "Open a webpage in the default browser as Scrapy sees it (disable JavaScript for extra fidelity):", "command": "scrapy view {{url}}"}, {"task": "Open Scrapy shell for URL, which allows interaction with the page source in a Python shell (or IPython if available):", "command": "scrapy shell {{url}}"}]}
{"command": "scrcpy", "tasks": [{"task": "Display a mirror of a connected device:", "command": "scrcpy"}, {"task": "Display a mirror of a specific device based on its ID or IP address (find it under the `adb devices` command):", "command": "scrcpy --serial {{0123456789abcdef|192.168.0.1:5555}}"}, {"task": "Start display in fullscreen mode:", "command": "scrcpy --fullscreen"}, {"task": "Rotate the display screen. Each incremental value adds a 90 degree counterclockwise rotation:", "command": "scrcpy --rotation {{0|1|2|3}}"}, {"task": "Show touches on physical device:", "command": "scrcpy --show-touches"}, {"task": "Record display screen:", "command": "scrcpy --record {{path/to/file.mp4}}"}, {"task": "Set target directory for pushing files to device by drag and drop (non-APK):", "command": "scrcpy --push-target {{path/to/directory}}"}]}
{"command": "screen", "tasks": [{"task": "Start a new screen session:", "command": "screen"}, {"task": "Start a new named screen session:", "command": "screen -S {{session_name}}"}, {"task": "Start a new daemon and log the output to `screenlog.x`:", "command": "screen -dmLS {{session_name}} {{command}}"}, {"task": "Show open screen sessions:", "command": "screen -ls"}, {"task": "Reattach to an open screen:", "command": "screen -r {{session_name}}"}, {"task": "Detach from inside a screen:", "command": "Ctrl + A, D"}, {"task": "Kill the current screen session:", "command": "Ctrl + A, K"}, {"task": "Kill a detached screen:", "command": "screen -X -S {{session_name}} quit"}]}
{"command": "screenfetch", "tasks": [{"task": "Start `screenfetch`:", "command": "screenfetch"}, {"task": "Take a screenshot (requires 'scrot'):", "command": "screenfetch -s"}, {"task": "Specify distribution logo:", "command": "screenfetch -A '{{distribution_name}}'"}, {"task": "Specify distribution logo and text:", "command": "screenfetch -D '{{distribution_name}}'"}, {"task": "Strip all color:", "command": "screenfetch -N"}]}
{"command": "script", "tasks": [{"task": "Start recording in file named \"typescript\":", "command": "script"}, {"task": "Stop recording:", "command": "exit"}, {"task": "Start recording in a given file:", "command": "script {{logfile.log}}"}, {"task": "Append to an existing file:", "command": "script -a {{logfile.log}}"}, {"task": "Execute quietly without start and done messages:", "command": "script -q {{logfile.log}}"}]}
{"command": "sd", "tasks": [{"task": "Trim some whitespace using a regular expression (output stream: `stdout`):", "command": "{{echo 'lorem ipsum 23   '}} | sd '\\s+$' ''"}, {"task": "Replace words using capture groups (output stream: `stdout`):", "command": "{{echo 'cargo +nightly watch'}} | sd '(\\w+)\\s+\\+(\\w+)\\s+(\\w+)' 'cmd: $1, channel: $2, subcmd: $3'"}, {"task": "Find and replace in a specific file (output stream: `stdout`):", "command": "sd -p {{'window.fetch'}} {{'fetch'}} {{path/to/file.js}}"}, {"task": "Find and replace in all files in the current project (output stream: `stdout`):", "command": "sd {{'from \"react\"'}} {{'from \"preact\"'}} \"$(find . -type f)\""}]}
{"command": "sdcv", "tasks": [{"task": "Start `sdcv` interactively:", "command": "sdcv"}, {"task": "List installed dictionaries:", "command": "sdcv --list-dicts"}, {"task": "Display a definition from a specific dictionary:", "command": "sdcv --use-dict {{dictionary_name}} {{search_term}}"}, {"task": "Look up a definition with a fuzzy search:", "command": "sdcv {{search_term}}"}, {"task": "Look up a definition with an exact search:", "command": "sdcv --exact-search {{search_term}}"}, {"task": "Look up a definition and format the output as JSON:", "command": "sdcv --json {{search_term}}"}, {"task": "Search for dictionaries in a specific directory:", "command": "sdcv --data-dir {{path/to/directory}} {{search_term}}"}]}
{"command": "sdiff", "tasks": [{"task": "Compare 2 files:", "command": "sdiff {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare 2 files, ignoring all tabs and whitespace:", "command": "sdiff -W {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare 2 files, ignoring whitespace at the end of lines:", "command": "sdiff -Z {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare 2 files in a case-insensitive manner:", "command": "sdiff -i {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare and then merge, writing the output to a new file:", "command": "sdiff -o {{path/to/merged_file}} {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "sdk", "tasks": [{"task": "Install an SDK version:", "command": "sdk install {{sdk_name}} {{sdk_version}}"}, {"task": "Use a specific SDK version for the current terminal session:", "command": "sdk use {{sdk_name}} {{sdk_version}}"}, {"task": "Show the stable version of any available SDK:", "command": "sdk current {{sdk_name}}"}, {"task": "Show the stable versions of all installed SDKs:", "command": "sdk current"}, {"task": "List all available SDKs:", "command": "sdk list"}, {"task": "List all versions of an SDK:", "command": "sdk list {{sdk_name}}"}, {"task": "Upgrade an SDK to the latest stable version:", "command": "sdk upgrade {{sdk_name}}"}, {"task": "Uninstall a specific SDK version:", "command": "sdk rm {{sdk_name}} {{sdk_version}}"}]}
{"command": "sdkmanager", "tasks": [{"task": "List available packages:", "command": "sdkmanager --list"}, {"task": "Install a package:", "command": "sdkmanager {{package}}"}, {"task": "Update every installed package:", "command": "sdkmanager --update"}, {"task": "Uninstall a package:", "command": "sdkmanager --uninstall {{package}}"}]}
{"command": "searchsploit", "tasks": [{"task": "Search for an exploit, shellcode, or paper:", "command": "searchsploit {{search_terms}}"}, {"task": "Search for a known specific version, e.g. sudo version 1.8.27:", "command": "searchsploit sudo 1.8.27"}, {"task": "Show the exploit-db link to the found resources:", "command": "searchsploit --www {{search_terms}}"}, {"task": "Make a copy of the resource to the current directory (requires the number of the exploit):", "command": "searchsploit --mirror {{exploit_number}}"}, {"task": "Open the resource to read with the pager defined in the `$PAGER` environment variable:", "command": "searchsploit --explore {{exploit_number}}"}, {"task": "Update the local exploit database:", "command": "searchsploit --update"}]}
{"command": "secrethub", "tasks": [{"task": "Print a secret to `stdout`:", "command": "secrethub read {{path/to/secret}}"}, {"task": "Generate a random value and store it as a new or updated secret:", "command": "secrethub generate {{path/to/secret}}"}, {"task": "Store a value from the clipboard as a new or updated secret:", "command": "secrethub write --clip {{path/to/secret}}"}, {"task": "Store a value supplied on `stdin` as a new or updated secret:", "command": "echo \"{{secret_value}}\" | secrethub write {{path/to/secret}}"}, {"task": "Audit a repository or secret:", "command": "secrethub audit {{path/to/repo_or_secret}}"}]}
{"command": "security-checker", "tasks": [{"task": "Look for security issues in the project dependencies (based on the `composer.lock` file in the current directory):", "command": "security-checker security:check"}, {"task": "Use a specific `composer.lock` file:", "command": "security-checker security:check {{path/to/composer.lock}}"}, {"task": "Return results as a JSON object:", "command": "security-checker security:check --format=json"}]}
{"command": "sed", "tasks": [{"task": "Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`:", "command": "{{command}} | sed 's/apple/mango/g'"}, {"task": "Execute a specific script [f]ile and print the result to `stdout`:", "command": "{{command}} | sed -f {{path/to/script.sed}}"}, {"task": "Print just a first line to `stdout`:", "command": "{{command}} | sed -n '1p'"}]}
{"command": "semver", "tasks": [{"task": "Check if a version string respects the semantic versioning format (prints an empty string if it does not match):", "command": "semver {{1.2}}"}, {"task": "Convert a version string to the semantic versioning format:", "command": "semver --coerce {{1.2}}"}, {"task": "Test if `1.2.3` matches the `^1.0` range (prints an empty string if it does not match):", "command": "semver {{1.2.3}} --range \"{{^1.0}}\""}, {"task": "Test with multiple ranges:", "command": "semver {{1.2.3}} --range {{\">=1.0\"}} {{\"<2.0\"}}"}, {"task": "Test multiple version strings and return only the ones that match:", "command": "semver {{1.2.3}} {{2.0.0}} --range \"{{^1.0}}\""}]}
{"command": "sendmail", "tasks": [{"task": "Send a message with the content of `message.txt` to the mail directory of local user `username`:", "command": "sendmail {{username}} < {{message.txt}}"}, {"task": "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the message in `message.txt`:", "command": "sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{message.txt}}"}, {"task": "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the file `file.zip`:", "command": "sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{file.zip}}"}]}
{"command": "seq", "tasks": [{"task": "Sequence from 1 to 10:", "command": "seq 10"}, {"task": "Every 3rd number from 5 to 20:", "command": "seq 5 3 20"}, {"task": "Separate the output with a space instead of a newline:", "command": "seq -s \" \" 5 3 20"}, {"task": "Format output width to a minimum of 4 digits padding with zeros as necessary:", "command": "seq -f \"%04g\" 5 3 20"}]}
{"command": "sequelize", "tasks": [{"task": "Create a model with 3 fields and a migration file:", "command": "sequelize model:generate --name {{table_name}} --attributes {{field1:integer,field2:string,field3:boolean}}"}, {"task": "Run the migration file:", "command": "sequelize db:migrate"}, {"task": "Revert all migrations:", "command": "sequelize db:migrate:undo:all"}, {"task": "Create a seed file with the specified name to populate the database:", "command": "sequelize seed:generate --name {{seed_filename}}"}, {"task": "Populate database using all seed files:", "command": "sequelize db:seed:all"}]}
{"command": "serialver", "tasks": [{"task": "Display the serialVersionUID of a class:", "command": "serialver {{classnames}}"}, {"task": "Display the serialVersionUID for a colon-separated list of classes and resources:", "command": "serialver -classpath {{path/to/directory}} {{classname1:classname2:...}}"}, {"task": "Use a specific option from reference page of Java application launcher to the Java Virtual Machine:", "command": "serialver -Joption {{classnames}}"}]}
{"command": "serve", "tasks": [{"task": "Start an HTTP server listening on the default port to serve the current directory:", "command": "serve"}, {"task": "Start an HTTP server on a specific [p]ort to serve a specific directory:", "command": "serve -p {{port}} {{path/to/directory}}"}, {"task": "Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin: *` header in all responses:", "command": "serve --cors"}, {"task": "Start an HTTP server on the default port rewriting all not-found requests to the `index.html` file:", "command": "serve --single"}, {"task": "Start an HTTPS server on the default port using the specified certificate:", "command": "serve --ssl-cert {{path/to/cert.pem}} --ssl-key {{path/to/key.pem}}"}, {"task": "Start an HTTP server on the default port using a specific configuration file:", "command": "serve --config {{path/to/serve.json}}"}, {"task": "Display help:", "command": "serve --help"}]}
{"command": "serverless", "tasks": [{"task": "Create a serverless project:", "command": "serverless create"}, {"task": "Create a serverless project from a template:", "command": "serverless create --template {{template_name}}"}, {"task": "Deploy to a cloud provider:", "command": "serverless deploy"}, {"task": "Display information about a serverless project:", "command": "serverless info"}, {"task": "Invoke a deployed function:", "command": "serverless invoke -f {{function_name}}"}, {"task": "Follow the logs for a project:", "command": "serverless logs -t"}]}
{"command": "set", "tasks": [{"task": "Display the names and values of shell variables:", "command": "set"}, {"task": "Mark variables that are modified or created for export:", "command": "set -a"}, {"task": "Notify of job termination immediately:", "command": "set -b"}, {"task": "Set various options, e.g. enable `vi` style line editing:", "command": "set -o {{vi}}"}, {"task": "Set the shell to exit as soon as the first error is encountered (mostly used in scripts):", "command": "set -e"}]}
{"command": "sfdp", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "sfdp -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "sfdp -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "sfdp -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | sfdp -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "sfdp -?"}]}
{"command": "sfdx", "tasks": [{"task": "Authorize a Salesforce Organization:", "command": "sfdx force:auth:web:login --setalias {{organization}} --instanceurl {{organization_url}}"}, {"task": "List all authorized organizations:", "command": "sfdx force:org:list"}, {"task": "Open a specific organization in the default web browser:", "command": "sfdx force:org:open --targetusername {{organization}}"}, {"task": "Display information about a specific organization:", "command": "sfdx force:org:display --targetusername {{organization}}"}, {"task": "Push source metadata to an Organization:", "command": "sfdx force:source:push --targetusername {{organization}}"}, {"task": "Pull source metadata from an Organization:", "command": "sfdx force:source:pull --targetusername {{organization}}"}, {"task": "Generate a password for the organization's logged-in user:", "command": "sfdx force:user:password:generate --targetusername {{organization}}"}, {"task": "Assign a permission set for the organization's logged-in user:", "command": "sfdx force:user:permset:assign --permsetname {{permission_set_name}} --targetusername {{organization}}"}]}
{"command": "sftp", "tasks": [{"task": "Connect to a remote server and enter an interactive command mode:", "command": "sftp {{remote_user}}@{{remote_host}}"}, {"task": "Connect using an alternate port:", "command": "sftp -P {{remote_port}} {{remote_user}}@{{remote_host}}"}, {"task": "Connect using a predefined host (in `~/.ssh/config`):", "command": "sftp {{host}}"}, {"task": "Transfer remote file to the local system:", "command": "get {{/path/remote_file}}"}, {"task": "Transfer local file to the remote system:", "command": "put {{/path/local_file}}"}, {"task": "Transfer remote directory to the local system recursively (works with `put` too):", "command": "get -R {{/path/remote_directory}}"}, {"task": "Get list of files on local machine:", "command": "lls"}, {"task": "Get list of files on remote machine:", "command": "ls"}]}
{"command": "sgpt", "tasks": [{"task": "Use it as a search engine, asking for the mass of the sun:", "command": "sgpt \"{{mass of the sun}}\""}, {"task": "Execute Shell commands, and apply `chmod 444` to all files in the current directory:", "command": "sgpt --shell \"{{make all files in current directory read only}}\""}, {"task": "Generate code, solving classic fizz buzz problem:", "command": "sgpt --code \"{{solve fizz buzz problem using Python}}\""}, {"task": "Start a chat session with a unique session name:", "command": "sgpt --chat {{session_name}} \"{{please remember my favorite number: 4}}\""}, {"task": "Start a `REPL` (Read–eval–print loop) session:", "command": "sgpt --repl {{command}}"}, {"task": "Display help:", "command": "sgpt --help"}]}
{"command": "sh", "tasks": [{"task": "Start an interactive shell session:", "command": "sh"}, {"task": "Execute a command and then exit:", "command": "sh -c \"{{command}}\""}, {"task": "Execute a script:", "command": "sh {{path/to/script.sh}}"}, {"task": "Read and execute commands from `stdin`:", "command": "sh -s"}]}
{"command": "sha1sum", "tasks": [{"task": "Calculate the SHA1 checksum for one or more files:", "command": "sha1sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of SHA1 checksums to a file:", "command": "sha1sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha1}}"}, {"task": "Calculate a SHA1 checksum from `stdin`:", "command": "{{command}} | sha1sum"}, {"task": "Read a file of SHA1 sums and filenames and verify all files have matching checksums:", "command": "sha1sum --check {{path/to/file.sha1}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "sha1sum --check --quiet {{path/to/file.sha1}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "sha1sum --ignore-missing --check --quiet {{path/to/file.sha1}}"}]}
{"command": "sha224sum", "tasks": [{"task": "Calculate the SHA224 checksum for one or more files:", "command": "sha224sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of SHA224 checksums to a file:", "command": "sha224sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha224}}"}, {"task": "Calculate a SHA224 checksum from `stdin`:", "command": "{{command}} | sha224sum"}, {"task": "Read a file of SHA224 sums and filenames and verify all files have matching checksums:", "command": "sha224sum --check {{path/to/file.sha224}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "sha224sum --check --quiet {{path/to/file.sha224}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "sha224sum --ignore-missing --check --quiet {{path/to/file.sha224}}"}]}
{"command": "sha256sum", "tasks": [{"task": "Calculate the SHA256 checksum for one or more files:", "command": "sha256sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of SHA256 checksums to a file:", "command": "sha256sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha256}}"}, {"task": "Calculate a SHA256 checksum from `stdin`:", "command": "{{command}} | sha256sum"}, {"task": "Read a file of SHA256 sums and filenames and verify all files have matching checksums:", "command": "sha256sum --check {{path/to/file.sha256}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "sha256sum --check --quiet {{path/to/file.sha256}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "sha256sum --ignore-missing --check --quiet {{path/to/file.sha256}}"}]}
{"command": "sha384sum", "tasks": [{"task": "Calculate the SHA384 checksum for one or more files:", "command": "sha384sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of SHA384 checksums to a file:", "command": "sha384sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha384}}"}, {"task": "Calculate a SHA384 checksum from `stdin`:", "command": "{{command}} | sha384sum"}, {"task": "Read a file of SHA384 sums and filenames and verify all files have matching checksums:", "command": "sha384sum --check {{path/to/file.sha384}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "sha384sum --check --quiet {{path/to/file.sha384}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "sha384sum --ignore-missing --check --quiet {{path/to/file.sha384}}"}]}
{"command": "sha512sum", "tasks": [{"task": "Calculate the SHA512 checksum for one or more files:", "command": "sha512sum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate and save the list of SHA512 checksums to a file:", "command": "sha512sum {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha512}}"}, {"task": "Calculate a SHA512 checksum from `stdin`:", "command": "{{command}} | sha512sum"}, {"task": "Read a file of SHA512 sums and filenames and verify all files have matching checksums:", "command": "sha512sum --check {{path/to/file.sha512}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "sha512sum --check --quiet {{path/to/file.sha512}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "sha512sum --ignore-missing --check --quiet {{path/to/file.sha512}}"}]}
{"command": "shards", "tasks": [{"task": "Create a skeleton `shard.yml` file:", "command": "shards init"}, {"task": "Install dependencies from a `shard.yml` file:", "command": "shards install"}, {"task": "Update all dependencies:", "command": "shards update"}, {"task": "List all installed dependencies:", "command": "shards list"}, {"task": "List version of dependency:", "command": "shards version {{path/to/dependency_directory}}"}]}
{"command": "shasum", "tasks": [{"task": "Calculate the SHA1 checksum for one or more files:", "command": "shasum {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate the SHA256 checksum for one or more files:", "command": "shasum --algorithm 256 {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate the SHA512 checksum for one or more files:", "command": "shasum --algorithm 512 {{path/to/file1 path/to/file2 ...}}"}, {"task": "Calculate a SHA1 checksum from `stdin`:", "command": "{{command}} | shasum"}, {"task": "Calculate and save the list of SHA256 checksums to a file:", "command": "shasum --algorithm 256 {{path/to/file1 path/to/file2 ...}} > {{path/to/file.sha256}}"}, {"task": "Read a file of SHA1 sums and filenames and verify all files have matching checksums:", "command": "shasum --check {{path/to/file}}"}, {"task": "Only show a message for missing files or when verification fails:", "command": "shasum --check --quiet {{path/to/file}}"}, {"task": "Only show a message when verification fails, ignoring missing files:", "command": "shasum --ignore-missing --check --quiet {{path/to/file}}"}]}
{"command": "shc", "tasks": [{"task": "Compile a shell script:", "command": "shc -f {{script}}"}, {"task": "Compile a shell script and specify an output binary file:", "command": "shc -f {{script}} -o {{binary}}"}, {"task": "Compile a shell script and set an expiration date for the executable:", "command": "shc -f {{script}} -e {{dd/mm/yyyy}}"}, {"task": "Compile a shell script and set a message to display upon expiration:", "command": "shc -f {{script}} -e {{dd/mm/yyyy}} -m \"{{Please contact your provider}}\""}]}
{"command": "shellcheck", "tasks": [{"task": "Check a shell script:", "command": "shellcheck {{path/to/script.sh}}"}, {"task": "Check a shell script interpreting it as the specified shell dialect (overrides the shebang at the top of the script):", "command": "shellcheck --shell {{sh|bash|dash|ksh}} {{path/to/script.sh}}"}, {"task": "Ignore one or more error types:", "command": "shellcheck --exclude {{SC1009,SC1073}} {{path/to/script.sh}}"}, {"task": "Also check any sourced shell scripts:", "command": "shellcheck --checked-sourced {{path/to/script.sh}}"}, {"task": "Display output in the specified format (defaults to `tty`):", "command": "shellcheck --format {{tty|checkstyle|diff|gcc|json|json1|quiet}} {{path/to/script.sh}}"}, {"task": "Enable one or more optional checks:", "command": "shellcheck --enable={{add-default-case|avoid-nullary-conditions}}"}, {"task": "List all available optional checks that are disabled by default:", "command": "shellcheck --list-optional"}]}
{"command": "shfmt", "tasks": [{"task": "Print a formatted version of a shell script:", "command": "shfmt {{path/to/file}}"}, {"task": "List unformatted files:", "command": "shfmt --list {{path/to/directory}}"}, {"task": "Write the result to the file instead of printing it to the terminal:", "command": "shfmt --write {{path/to/file}}"}, {"task": "Simplify the code, removing redundant pieces of syntax (i.e. removing \"$\" from vars in expressions):", "command": "shfmt --simplify {{path/to/file}}"}]}
{"command": "shift", "tasks": [{"task": "Move arguments by one place dropping the first argument:", "command": "shift"}, {"task": "Move arguments by N places dropping the first N arguments:", "command": "shift {{N}}"}]}
{"command": "shiori", "tasks": [{"task": "Import bookmarks from HTML Netscape bookmark format file:", "command": "shiori import {{path/to/bookmarks.html}}"}, {"task": "Save the specified URL as bookmark:", "command": "shiori add {{url}}"}, {"task": "List the saved bookmarks:", "command": "shiori print"}, {"task": "Open the saved bookmark in a browser:", "command": "shiori open {{bookmark_id}}"}, {"task": "Start the web interface for managing bookmarks at port 8181:", "command": "shiori serve --port {{8181}}"}]}
{"command": "shopt", "tasks": [{"task": "List of all settable options and whether they are set:", "command": "shopt"}, {"task": "Set an option:", "command": "shopt -s {{option_name}}"}, {"task": "Unset an option:", "command": "shopt -u {{option_name}}"}, {"task": "Print a list of all options and their status formatted as runnable `shopt` commands:", "command": "shopt -p"}, {"task": "Show help for the command:", "command": "help shopt"}]}
{"command": "showfigfonts", "tasks": [{"task": "Display available fonts:", "command": "showfigfonts"}, {"task": "Display available fonts using a specific text:", "command": "showfigfonts {{input_text}}"}]}
{"command": "shred", "tasks": [{"task": "Overwrite a file:", "command": "shred {{path/to/file}}"}, {"task": "Overwrite a file, leaving zeroes instead of random data:", "command": "shred --zero {{path/to/file}}"}, {"task": "Overwrite a file 25 times:", "command": "shred -n25 {{path/to/file}}"}, {"task": "Overwrite a file and remove it:", "command": "shred --remove {{path/to/file}}"}]}
{"command": "shuf", "tasks": [{"task": "Randomize the order of lines in a file and output the result:", "command": "shuf {{path/to/file}}"}, {"task": "Only output the first 5 entries of the result:", "command": "shuf --head-count={{5}} {{path/to/file}}"}, {"task": "Write the output to another file:", "command": "shuf {{path/to/input}} --output={{path/to/output}}"}, {"task": "Generate 3 random numbers in the range 1-10 (inclusive):", "command": "shuf --head-count={{3}} --input-range={{1-10}} --repeat"}]}
{"command": "siege", "tasks": [{"task": "Test a URL with default settings:", "command": "siege {{https://example.com}}"}, {"task": "Test a list of URLs:", "command": "siege --file {{path/to/url_list.txt}}"}, {"task": "Test list of URLs in a random order (Simulates internet traffic):", "command": "siege --internet --file {{path/to/url_list.txt}}"}, {"task": "Benchmark a list of URLs (without waiting between requests):", "command": "siege --benchmark --file {{path/to/url_list.txt}}"}, {"task": "Set the amount of concurrent connections:", "command": "siege --concurrent={{50}} --file {{path/to/url_list.txt}}"}, {"task": "Set how long for the siege to run for:", "command": "siege --time={{30s}} --file {{path/to/url_list.txt}}"}]}
{"command": "silicon", "tasks": [{"task": "Generate an image from a specific source file:", "command": "silicon {{path/to/source_file}} --output {{path/to/output_image}}"}, {"task": "Generate an image from a source file with a specific programming language syntax highlighting (e.g. `rust`, `py`, `js`, etc.):", "command": "silicon {{path/to/source_file}} --output {{path/to/output_image}} --language {{language|extension}}"}, {"task": "Generate an image from `stdin`:", "command": "{{command}} | silicon --output {{path/to/output_image}}"}]}
{"command": "sindresorhus", "tasks": [{"task": "Start Sindre's interactive CLI:", "command": "sindresorhus"}]}
{"command": "singularity", "tasks": [{"task": "Download a remote image from Sylabs Cloud:", "command": "singularity pull --name {{image.sif}} {{library://godlovedc/funny/lolcow:latest}}"}, {"task": "Rebuild a remote image using the latest Singularity image format:", "command": "singularity build {{image.sif}} {{docker://godlovedc/lolcow}}"}, {"task": "Start a container from an image and get a shell inside it:", "command": "singularity shell {{image.sif}}"}, {"task": "Start a container from an image and run a command:", "command": "singularity exec {{image.sif}} {{command}}"}, {"task": "Start a container from an image and execute the internal runscript:", "command": "singularity run {{image.sif}}"}, {"task": "Build a singularity image from a recipe file:", "command": "sudo singularity build {{image.sif}} {{recipe}}"}]}
{"command": "sk", "tasks": [{"task": "Start `skim` on all files in the specified directory:", "command": "find {{path/to/directory}} -type f | sk"}, {"task": "Start `skim` for running processes:", "command": "ps aux | sk"}, {"task": "Start `skim` with a specified query:", "command": "sk --query \"{{query}}\""}, {"task": "Select multiple files with `Shift + Tab` and write to a file:", "command": "find {{path/to/directory}} -type f | sk --multi > {{path/to/file}}"}]}
{"command": "skaffold", "tasks": [{"task": "Build the artifacts:", "command": "skaffold build -f {{skaffold.yaml}}"}, {"task": "Build and deploy your app every time your code changes:", "command": "skaffold dev -f {{skaffold.yaml}}"}, {"task": "Run a pipeline file:", "command": "skaffold run -f {{skaffold.yaml}}"}, {"task": "Run a diagnostic on Skaffold:", "command": "skaffold diagnose -f {{skaffold.yaml}}"}, {"task": "Deploy the artifacts:", "command": "skaffold deploy -f {{skaffold.yaml}}"}]}
{"command": "skate", "tasks": [{"task": "Store a key and a value on the default database:", "command": "skate set \"{{key}}\" \"{{value}}\""}, {"task": "Show your keys saved on the default database:", "command": "skate list"}, {"task": "Delete key and value from the default database:", "command": "skate delete \"{{key}}\""}, {"task": "Create a new key and value in a new database:", "command": "skate set \"{{key}}\"@\"{{database_name}}\" \"{{value}}\""}, {"task": "Show your keys saved in a non default database:", "command": "skate list @\"{{database_name}}\""}, {"task": "Delete key and value from a specific database:", "command": "skate delete \"{{key}}\"@\"{{database_name}}\""}, {"task": "Show the databases available:", "command": "skate list-dbs"}, {"task": "Delete local db and pull down fresh copy from Charm Cloud:", "command": "skate reset @\"{{database_name}}\""}]}
{"command": "skicka", "tasks": [{"task": "Upload a file/folder to Google Drive:", "command": "skicka upload {{path/to/local}} {{path/to/remote}}"}, {"task": "Download a file/folder from Google Drive:", "command": "skicka download {{path/to/remote}} {{path/to/local}}"}, {"task": "List files:", "command": "skicka ls {{path/to/folder}}"}, {"task": "Show amount of space used by children folders:", "command": "skicka du {{path/to/parent/folder}}"}, {"task": "Create a folder:", "command": "skicka mkdir {{path/to/folder}}"}, {"task": "Delete a file:", "command": "skicka rm {{path/to/file}}"}]}
{"command": "skopeo", "tasks": [{"task": "Inspect a remote image from a registry:", "command": "skopeo inspect docker://{{registry_hostname}}/{{image:tag}}"}, {"task": "List available tags for a remote image:", "command": "skopeo list-tags docker://{{registry_hostname}}/{{image}}"}, {"task": "Download an image from a registry:", "command": "skopeo copy docker://{{registry_hostname}}/{{image:tag}} dir:{{path/to/directory}}"}, {"task": "Copy an image from one registry to another:", "command": "skopeo copy docker://{{source_registry}}/{{image:tag}} docker://{{destination_registry}}/{{image:tag}}"}, {"task": "Delete an image from a registry:", "command": "skopeo delete docker://{{registry_hostname}}/{{image:tag}}"}, {"task": "Log in to a registry:", "command": "skopeo login --username {{username}} {{registry_hostname}}"}]}
{"command": "sl", "tasks": [{"task": "Let a steam locomotive run through your terminal:", "command": "sl"}, {"task": "The train burns, people scream:", "command": "sl -a"}, {"task": "Let the train fly:", "command": "sl -F"}, {"task": "Make the train little:", "command": "sl -l"}, {"task": "Let the user exit (CTRL + C):", "command": "sl -e"}]}
{"command": "slackcat", "tasks": [{"task": "Post a file to Slack:", "command": "slackcat --channel {{channel_name}} {{path/to/file}}"}, {"task": "Post a file to Slack with a custom filename:", "command": "slackcat --channel {{channel_name}} --filename={{filename}} {{path/to/file}}"}, {"task": "Pipe command output to Slack as a text snippet:", "command": "{{command}} | slackcat --channel {{channel_name}} --filename={{snippet_name}}"}, {"task": "Stream command output to Slack continuously:", "command": "{{command}} | slackcat --channel {{channel_name}} --stream"}]}
{"command": "sleep", "tasks": [{"task": "Delay in seconds:", "command": "sleep {{seconds}}"}, {"task": "Execute a specific command after 20 seconds delay:", "command": "sleep 20 && {{command}}"}]}
{"command": "slimrb", "tasks": [{"task": "Convert a Slim file to HTML:", "command": "slimrb {{input.slim}} {{output.html}}"}, {"task": "Convert a Slim file and output to prettified HTML:", "command": "slimrb --pretty {{input.slim}} {{output.html}}"}, {"task": "Convert a Slim file to ERB:", "command": "slimrb --erb {{input.slim}} {{output.erb}}"}]}
{"command": "smalltalkci", "tasks": [{"task": "Run tests for a configuration file:", "command": "smalltalkci {{path/to/.smalltalk.ston}}"}, {"task": "Run tests for the `.smalltalk.ston` configuration in the current directory:", "command": "smalltalkci"}, {"task": "Debug tests in headful mode (show VM window):", "command": "smalltalkci --headful"}, {"task": "Download and prepare a well-known smalltalk image for the tests:", "command": "smalltalkci --smalltalk {{Squeak64-Trunk}}"}, {"task": "Specify a custom Smalltalk image and VM:", "command": "smalltalkci --image {{path/to/Smalltalk.image}} --vm {{path/to/vm}}"}, {"task": "Clean up caches and delete builds:", "command": "smalltalkci --clean"}]}
{"command": "smartctl", "tasks": [{"task": "Display SMART health summary:", "command": "sudo smartctl --health {{/dev/sdX}}"}, {"task": "Display device information:", "command": "sudo smartctl --info {{/dev/sdX}}"}, {"task": "Start a short self-test in the background:", "command": "sudo smartctl --test short {{/dev/sdX}}"}, {"task": "Display current/last self-test status and other SMART capabilities:", "command": "sudo smartctl --capabilities {{/dev/sdX}}"}, {"task": "Display exhaustive SMART data:", "command": "sudo smartctl --all {{/dev/sdX}}"}]}
{"command": "smbmap", "tasks": [{"task": "Enumerate hosts with NULL sessions enabled and open shares:", "command": "smbmap --host-file {{path/to/file}}"}, {"task": "Enumerate hosts and check SMB file permissions:", "command": "smbmap --host-file {{path/to/file}} -u {{username}} -p {{password}} -q"}, {"task": "Connect to an ip or hostname through smb using a username and password:", "command": "smbmap -u {{username}} -p {{password}} -d {{domain}} -H {{ip_or_hostname}}"}, {"task": "Locate and download files [R]ecursively up to N levels depth, searching for filename pattern (regex), and excluding certain shares:", "command": "smbmap --host-file {{path/to/file}} -u {{username}} -p {{password}} -q -R --depth {{number}} --exclude {{sharename}} -A {{filepattern}}"}, {"task": "Upload file through smb using username and password:", "command": "smbmap -u {{username}} -p {{password}} -d {{domain}} -H {{ip_or_hostname}} --upload {{path/to/file}} '{{/share_name/remote_filename}}'"}]}
{"command": "sn", "tasks": [{"task": "Generate a new StrongNaming key:", "command": "sn -k {{path/to/key.snk}}"}, {"task": "Re-sign an assembly with the specified private key:", "command": "sn -R {{path/to/assembly.dll}} {{path/to/key_pair.snk}}"}, {"task": "Show the public key of the private key that was used to sign an assembly:", "command": "sn -T {{path/to/assembly.exe}}"}, {"task": "Extract the public key to a file:", "command": "sn -e {{path/to/assembly.dll}} {{path/to/output.pub}}"}]}
{"command": "snakefmt", "tasks": [{"task": "Format a specific Snakefile:", "command": "snakefmt {{path/to/snakefile}}"}, {"task": "Format all Snakefiles recursively in a specific directory:", "command": "snakefmt {{path/to/directory}}"}, {"task": "Format a file using a specific configuration file:", "command": "snakefmt --config {{path/to/config.toml}} {{path/to/snakefile}}"}, {"task": "Format a file using a specific maximum line length:", "command": "snakefmt --line-length {{100}} {{path/to/snakefile}}"}, {"task": "Display the changes that would be performed without performing them (dry-run):", "command": "snakefmt --diff {{path/to/snakefile}}"}]}
{"command": "snort", "tasks": [{"task": "Capture packets with verbose output:", "command": "sudo snort -v -i {{interface}}"}, {"task": "Capture packets and dump application layer data with verbose output:", "command": "sudo snort -vd -i {{interface}}"}, {"task": "Capture packets and display link layer packet headers with verbose output:", "command": "sudo snort -ve -i {{interface}}"}, {"task": "Capture packets and save them in the specified directory:", "command": "sudo snort -i {{interface}} -l {{path/to/directory}}"}, {"task": "Capture packets according to rules and save offending packets along with alerts:", "command": "sudo snort -i {{interface}} -c {{path/to/rules.conf}} -l {{path/to/directory}}"}]}
{"command": "snowsql", "tasks": [{"task": "Connect to a specific instance at <https://account.snowflakecomputing.com> (password can be provided in prompt or configuration file):", "command": "snowsql --accountname {{account}} --username {{username}} --dbname {{database}} --schemaname {{schema}}"}, {"task": "Connect to an instance specified by a specific configuration file (defaults to `~/.snowsql/config`):", "command": "snowsql --config {{path/to/configuration_file}}"}, {"task": "Connect to the default instance using a token for multi-factor authentication:", "command": "snowsql --mfa-passcode {{token}}"}, {"task": "Execute a single SQL query or SnowSQL command on the default connection (useful in shell scripts):", "command": "snowsql --query '{{query}}'"}, {"task": "Execute commands from a specific file on the default connection:", "command": "snowsql --filename {{path/to/file.sql}}"}]}
{"command": "snyk", "tasks": [{"task": "Log in to your Snyk account:", "command": "snyk auth"}, {"task": "Test your code for any known vulnerabilities:", "command": "snyk test"}, {"task": "Test a local Docker image for any known vulnerabilities:", "command": "snyk test --docker {{docker_image}}"}, {"task": "Record the state of dependencies and any vulnerabilities on snyk.io:", "command": "snyk monitor"}, {"task": "Auto patch and ignore vulnerabilities:", "command": "snyk wizard"}]}
{"command": "socat", "tasks": [{"task": "Listen to a port, wait for an incoming connection and transfer data to STDIO:", "command": "socat - TCP-LISTEN:8080,fork"}, {"task": "Create a connection to a host and port, transfer data in STDIO to connected host:", "command": "socat - TCP4:www.example.com:80"}, {"task": "Forward incoming data of a local port to another host and port:", "command": "socat TCP-LISTEN:80,fork TCP4:www.example.com:80"}]}
{"command": "sockstat", "tasks": [{"task": "View which users/processes are listening to which ports:", "command": "sockstat -l"}]}
{"command": "solcjs", "tasks": [{"task": "Compile a specific contract to hex:", "command": "solcjs --bin {{path/to/file.sol}}"}, {"task": "Compile the ABI of a specific contract:", "command": "solcjs --abi {{path/to/file.sol}}"}, {"task": "Specify a base path to resolve imports from:", "command": "solcjs --bin --base-path {{path/to/directory}} {{path/to/file.sol}}"}, {"task": "Specify one or more paths to include containing external code:", "command": "solcjs --bin --include-path {{path/to/directory}} {{path/to/file.sol}}"}, {"task": "Optimise the generated bytecode:", "command": "solcjs --bin --optimize {{path/to/file.sol}}"}]}
{"command": "solo", "tasks": [{"task": "List connected Solos:", "command": "solo ls"}, {"task": "Update the currently connected Solo's firmware to the latest version:", "command": "solo key update"}, {"task": "Blink the LED of a specific Solo:", "command": "solo key wink --serial {{serial_number}}"}, {"task": "Generate random bytes using the currently connected Solo's secure random number generator:", "command": "solo key rng raw"}, {"task": "Monitor the serial output of a Solo:", "command": "solo monitor {{path/to/serial_port}}"}]}
{"command": "sonar-scanner", "tasks": [{"task": "Scan a project with configuration file in your project's root directory named `sonar-project.properties`:", "command": "sonar-scanner"}, {"task": "Scan a project using configuration file other than `sonar-project.properties`:", "command": "sonar-scanner -D{{project.settings=myproject.properties}}"}, {"task": "Print help information:", "command": "sonar-scanner -h"}, {"task": "Print debugging information:", "command": "sonar-scanner -X"}]}
{"command": "sops", "tasks": [{"task": "Encrypt a file:", "command": "sops -e {{path/to/myfile.json}} > {{path/to/myfile.enc.json}}"}, {"task": "Decrypt a file to `stdout`:", "command": "sops -d {{path/to/myfile.enc.json}}"}, {"task": "Rotate data keys for a sops file:", "command": "sops -r {{path/to/myfile.enc.yaml}}"}, {"task": "Change the extension of the file once encrypted:", "command": "sops -d --input-type json {{path/to/myfile.enc.json}}"}, {"task": "Extract keys by naming them, and array elements by numbering them:", "command": "sops -d --extract '[\"an_array\"][1]' {{path/to/myfile.enc.json}}"}, {"task": "Show the difference between two sops files:", "command": "diff <(sops -d {{path/to/secret1.enc.yaml}}) <(sops -d {{path/to/secret2.enc.yaml}})"}]}
{"command": "sort", "tasks": [{"task": "Sort a file in ascending order:", "command": "sort {{path/to/file}}"}, {"task": "Sort a file in descending order:", "command": "sort --reverse {{path/to/file}}"}, {"task": "Sort a file in case-insensitive way:", "command": "sort --ignore-case {{path/to/file}}"}, {"task": "Sort a file using numeric rather than alphabetic order:", "command": "sort --numeric-sort {{path/to/file}}"}, {"task": "Sort `/etc/passwd` by the 3rd field of each line numerically, using \":\" as a field separator:", "command": "sort --field-separator={{:}} --key={{3n}} {{/etc/passwd}}"}, {"task": "Sort a file preserving only unique lines:", "command": "sort --unique {{path/to/file}}"}, {"task": "Sort a file, printing the output to the specified output file (can be used to sort a file in-place):", "command": "sort --output={{path/to/file}} {{path/to/file}}"}, {"task": "Sort numbers with exponents:", "command": "sort --general-numeric-sort {{path/to/file}}"}]}
{"command": "soupault", "tasks": [{"task": "Initialize a minimal website project in the current working directory:", "command": "soupault --init"}, {"task": "Build a website:", "command": "soupault"}, {"task": "Override default config file and directory locations:", "command": "soupault --config {{config_path}} --site-dir {{input_dir}} --build-dir {{output_dir}}"}, {"task": "Extract metadata into a JSON file without generating pages:", "command": "soupault --index-only --dump-index-json {{path/to/file.json}}"}, {"task": "Show the effective config (values from `soupault.toml` plus defaults):", "command": "soupault --show-effective-config"}]}
{"command": "source", "tasks": [{"task": "Evaluate contents of a given file:", "command": "source {{path/to/file}}"}, {"task": "Evaluate contents of a given file (alternatively replacing `source` with `.`):", "command": ". {{path/to/file}}"}]}
{"command": "sox", "tasks": [{"task": "Merge two audio files into one:", "command": "sox -m {{input_audiofile1}} {{input_audiofile2}} {{output_audiofile}}"}, {"task": "Trim an audio file to the specified times:", "command": "sox {{input_audiofile}} {{output_audiofile}} trim {{start}} {{end}}"}, {"task": "Normalize an audio file (adjust volume to the maximum peak level, without clipping):", "command": "sox --norm {{input_audiofile}} {{output_audiofile}}"}, {"task": "Reverse and save an audio file:", "command": "sox {{input_audiofile}} {{output_audiofile}} reverse"}, {"task": "Print statistical data of an audio file:", "command": "sox {{input_audiofile}} -n stat"}, {"task": "Increase the volume of an audio file by 2x:", "command": "sox -v 2.0 {{input_audiofile}} {{output_audiofile}}"}]}
{"command": "spark", "tasks": [{"task": "Register your API token:", "command": "spark register {{token}}"}, {"task": "Display the currently registered API token:", "command": "spark token"}, {"task": "Create a new Spark project:", "command": "spark new {{project_name}}"}, {"task": "Create a new Spark project with Braintree stubs:", "command": "spark new {{project_name}} --braintree"}, {"task": "Create a new Spark project with team-based billing stubs:", "command": "spark new {{project_name}} --team-billing"}]}
{"command": "spatial", "tasks": [{"task": "Run this when you use a project for the first time:", "command": "spatial worker build"}, {"task": "Build workers for local deployment on Unity on macOS:", "command": "spatial worker build --target=development --target=Osx"}, {"task": "Build workers for local deployment on Unreal on Windows:", "command": "spatial worker build --target=local --target=Windows"}, {"task": "Deploy locally:", "command": "spatial local launch {{launch_config}} --snapshot={{snapshot_file}}"}, {"task": "Launch a local worker to connect to your local deployment:", "command": "spatial local worker launch {{worker_type}} {{launch_config}}"}, {"task": "Upload an assembly to use for cloud deployments:", "command": "spatial cloud upload {{assembly_name}}"}, {"task": "Launch a cloud deployment:", "command": "spatial cloud launch {{assembly_name}} {{launch_config}} {{deployment_name}}"}, {"task": "Clean worker directories:", "command": "spatial worker clean"}]}
{"command": "spectacle", "tasks": [{"task": "Capture a screenshot of the entire desktop:", "command": "spectacle"}, {"task": "Capture a screenshot of the active window:", "command": "spectacle --activewindow"}, {"task": "Capture a screenshot of a specific region:", "command": "spectacle --region"}]}
{"command": "speed-test", "tasks": [{"task": "Test your internet connection and ping speed:", "command": "speed-test"}, {"task": "Output the results as JSON:", "command": "speed-test --json"}, {"task": "Output the results in megabytes per second (MBps):", "command": "speed-test --bytes"}, {"task": "Output more detailed information:", "command": "speed-test --verbose"}]}
{"command": "speedcrunch", "tasks": [{"task": "Start SpeedCrunch:", "command": "speedcrunch"}, {"task": "Copy the result of the most recent calculation:", "command": "Ctrl + R"}, {"task": "Open the formula book:", "command": "Ctrl + 1"}, {"task": "Clear the calculator of recent calculations:", "command": "Ctrl + N"}, {"task": "Wrap highlighted in parentheses (defaults to wrapping all if nothing selected):", "command": "Ctrl + P"}, {"task": "Load a speedcrunch session:", "command": "Ctrl + L"}, {"task": "Save a speedcrunch session:", "command": "Ctrl + S"}, {"task": "Toggle keypad:", "command": "Ctrl + K"}]}
{"command": "speedtest-cli", "tasks": [{"task": "Run a speed test:", "command": "speedtest-cli"}, {"task": "Run a speed test and display values in bytes, instead of bits:", "command": "speedtest-cli --bytes"}, {"task": "Run a speed test using `HTTPS`, instead of `HTTP`:", "command": "speedtest-cli --secure"}, {"task": "Run a speed test without performing download tests:", "command": "speedtest-cli --no-download"}, {"task": "Run a speed test and generate an image of the results:", "command": "speedtest-cli --share"}, {"task": "List all `speedtest.net` servers, sorted by distance:", "command": "speedtest-cli --list"}, {"task": "Run a speed test to a specific speedtest.net server:", "command": "speedtest-cli --server {{server_id}}"}, {"task": "Run a speed test and display the results as JSON (suppresses progress information):", "command": "speedtest-cli --json"}]}
{"command": "speedtest", "tasks": [{"task": "Run a speed test:", "command": "speedtest"}, {"task": "Run a speed test and specify the unit of the output:", "command": "speedtest --unit={{auto-decimal-bits|auto-decimal-bytes|auto-binary-bits|auto-binary-bytes}}"}, {"task": "Run a speed test and specify the output format:", "command": "speedtest --format={{human-readable|csv|tsv|json|jsonl|json-pretty}}"}, {"task": "Run a speed test and specify the number of decimal points to use (0 to 8, defaults to 2):", "command": "speedtest --precision={{precision}}"}, {"task": "Run a speed test and print its progress (only available for output format `human-readable` and `json`):", "command": "speedtest --progress={{yes|no}}"}, {"task": "List all `speedtest.net` servers, sorted by distance:", "command": "speedtest --servers"}, {"task": "Run a speed test to a specific `speedtest.net` server:", "command": "speedtest --server-id={{server_id}}"}]}
{"command": "spfquery", "tasks": [{"task": "Check if an IP address is allowed to send an e-mail from the specified e-mail address:", "command": "spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}}"}, {"task": "Turn on debugging output:", "command": "spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}} --debug"}]}
{"command": "sphinx-build", "tasks": [{"task": "Build documentation:", "command": "sphinx-build -b {{html|epub|text|latex|man|...}} {{path/to/source_dir}} {{path/to/build_dir}}"}, {"task": "Build documentations intended for readthedocs.io (requires the sphinx-rtd-theme pip package):", "command": "sphinx-build -b {{html}} {{path/to/docs_dir}} {{path/to/build_dir}}"}]}
{"command": "spicetify", "tasks": [{"task": "Generate a configuration file on very first run and display help:", "command": "spicetify"}, {"task": "Backup and preprocess Spotify application files:", "command": "spicetify backup"}, {"task": "Print all configuration fields and values:", "command": "spicetify config"}, {"task": "Change the value of a configuration field:", "command": "spicetify config {{field}} {{value}}"}, {"task": "Apply the customization changes to Spotify:", "command": "spicetify apply"}, {"task": "Restore Spotify to its original state:", "command": "spicetify restore"}]}
{"command": "spike", "tasks": [{"task": "Create a new project using the default template:", "command": "spike new {{project_name}}"}, {"task": "Compile your project, watch for changes, and auto-reload the browser:", "command": "spike watch"}, {"task": "Compile your project once to the \"public\" directory:", "command": "spike compile"}, {"task": "Remove the output directory:", "command": "spike clean"}]}
{"command": "split", "tasks": [{"task": "Split a file, each split having 10 lines (except the last split):", "command": "split -l {{10}} {{path/to/file}}"}, {"task": "Split a file into 5 files. File is split such that each split has same size (except the last split):", "command": "split -n {{5}} {{path/to/file}}"}, {"task": "Split a file with 512 bytes in each split (except the last split; use 512k for kilobytes and 512m for megabytes):", "command": "split -b {{512}} {{path/to/file}}"}, {"task": "Split a file with at most 512 bytes in each split without breaking lines:", "command": "split -C {{512}} {{path/to/file}}"}]}
{"command": "sponge", "tasks": [{"task": "Append file content to the source file:", "command": "cat {{path/to/file}} | sponge -a {{path/to/file}}"}, {"task": "Remove all lines starting with # in a file:", "command": "grep -v '^{{#}}' {{path/to/file}} | sponge {{path/to/file}}"}]}
{"command": "spotdl", "tasks": [{"task": "Download songs from the provided URLs and embed metadata:", "command": "spotdl {{open.spotify.com/playlist/playlistId open.spotify.com/track/trackId ...}}"}, {"task": "Start a web interface to download individual songs:", "command": "spotdl web"}, {"task": "Save only the metadata without downloading anything:", "command": "spotdl save {{open.spotify.com/playlist/playlistId ...}} --save-file {{path/to/save_file.spotdl}}"}]}
{"command": "sqlite-utils", "tasks": [{"task": "Create a database:", "command": "sqlite-utils create-database {{path/to/database.db}}"}, {"task": "Create a table:", "command": "sqlite-utils create-table {{path/to/database.db}} {{table_name}} {{id integer name text height float photo blob --pk id}}"}, {"task": "List tables:", "command": "sqlite-utils tables {{path/to/database.db}}"}, {"task": "Upsert a record:", "command": "{{echo '[ {\"id\": 1, \"name\": \"Linus Torvalds\"}, {\"id\": 2, \"name\": \"Steve Wozniak\"}, {\"id\": 3, \"name\": \"Tony Hoare\"} ]'}} | sqlite-utils upsert {{path/to/database.db}} {{table_name}} - {{--pk id}}"}, {"task": "Select records:", "command": "sqlite-utils rows {{path/to/database.db}} {{table_name}}"}, {"task": "Delete a record:", "command": "sqlite-utils query {{path/to/database.db}} \"{{delete from table_name where name = 'Tony Hoare'}}\""}, {"task": "Drop a table:", "command": "sqlite-utils drop-table {{path/to/database.db}} {{table_name}}"}, {"task": "Show help information:", "command": "sqlite-utils -h"}]}
{"command": "sqlite3", "tasks": [{"task": "Start an interactive shell with a new database:", "command": "sqlite3"}, {"task": "Open an interactive shell against an existing database:", "command": "sqlite3 {{path/to/database.sqlite3}}"}, {"task": "Execute an SQL statement against a database and then exit:", "command": "sqlite3 {{path/to/database.sqlite3}} '{{SELECT * FROM some_table;}}'"}]}
{"command": "sqlmap", "tasks": [{"task": "Run sqlmap against a single target URL:", "command": "python sqlmap.py -u \"{{http://www.target.com/vuln.php?id=1}}\""}, {"task": "Send data in a POST request (`--data` implies POST request):", "command": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --data=\"{{id=1}}\""}, {"task": "Change the parameter delimiter (& is the default):", "command": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --data=\"{{query=foobar;id=1}}\" --param-del=\"{{;}}\""}, {"task": "Select a random `User-Agent` from `./txt/user-agents.txt` and use it:", "command": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --random-agent"}, {"task": "Provide user credentials for HTTP protocol authentication:", "command": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --auth-type {{Basic}} --auth-cred \"{{testuser:testpass}}\""}]}
{"command": "sqsc", "tasks": [{"task": "List all queues:", "command": "sqsc lq {{queue_prefix}}"}, {"task": "List all messages in a queue:", "command": "sqsc ls {{queue_name}}"}, {"task": "Copy all messages from one queue to another:", "command": "sqsc cp {{source_queue}} {{destination_queue}}"}, {"task": "Move all messages from one queue to another:", "command": "sqsc mv {{source_queue}} {{destination_queue}}"}, {"task": "Describe a queue:", "command": "sqsc describe {{queue_name}}"}, {"task": "Query a queue with SQL syntax:", "command": "sqsc query \"SELECT body FROM {{queue_name}} WHERE body LIKE '%user%'\""}, {"task": "Pull all messages from a queue into a local SQLite database in your present working directory:", "command": "sqsc pull {{queue_name}}"}]}
{"command": "srm", "tasks": [{"task": "Remove a file after a single-pass overwriting with random data:", "command": "srm -s {{path/to/file}}"}, {"task": "Remove a file after seven passes of overwriting with random data:", "command": "srm -m {{path/to/file}}"}, {"task": "Recursively remove a directory and its contents overwriting each file with a single-pass of random data:", "command": "srm -r -s {{path/to/directory}}"}, {"task": "Prompt before every removal:", "command": "srm -i {{\\*}}"}]}
{"command": "ss-local", "tasks": [{"task": "Run a Shadowsocks proxy by specifying the host, server port, local port, password, and encryption method:", "command": "ss-local -s {{host}} -p {{server_port}} -l {{local port}} -k {{password}} -m {{encrypt_method}}"}, {"task": "Run a Shadowsocks proxy by specifying the config file:", "command": "ss-local -c {{path/to/config/file.json}}"}, {"task": "Use a plugin to run the proxy client:", "command": "ss-local --plugin {{plugin_name}} --plugin-opts {{plugin_options}}"}, {"task": "Enable TCP fast open:", "command": "ss-local --fast-open"}]}
{"command": "ssh-add", "tasks": [{"task": "Add the default ssh keys in `~/.ssh` to the ssh-agent:", "command": "ssh-add"}, {"task": "Add a specific key to the ssh-agent:", "command": "ssh-add {{path/to/private_key}}"}, {"task": "List fingerprints of currently loaded keys:", "command": "ssh-add -l"}, {"task": "Delete a key from the ssh-agent:", "command": "ssh-add -d {{path/to/private_key}}"}, {"task": "Delete all currently loaded keys from the ssh-agent:", "command": "ssh-add -D"}, {"task": "Add a key to the ssh-agent and the keychain:", "command": "ssh-add -K {{path/to/private_key}}"}]}
{"command": "ssh-agent", "tasks": [{"task": "Start an SSH Agent for the current shell:", "command": "eval $(ssh-agent)"}, {"task": "Kill the currently running agent:", "command": "ssh-agent -k"}]}
{"command": "ssh-copy-id", "tasks": [{"task": "Copy your keys to the remote machine:", "command": "ssh-copy-id {{username@remote_host}}"}, {"task": "Copy the given public key to the remote:", "command": "ssh-copy-id -i {{path/to/certificate}} {{username}}@{{remote_host}}"}, {"task": "Copy the given public key to the remote with specific port:", "command": "ssh-copy-id -i {{path/to/certificate}} -p {{port}} {{username}}@{{remote_host}}"}]}
{"command": "ssh-keygen", "tasks": [{"task": "Generate a key interactively:", "command": "ssh-keygen"}, {"task": "Generate an ed25519 key with 32 key derivation function rounds and save the key to a specific file:", "command": "ssh-keygen -t {{ed25519}} -a {{32}} -f {{~/.ssh/filename}}"}, {"task": "Generate an RSA 4096-bit key with email as a comment:", "command": "ssh-keygen -t {{rsa}} -b {{4096}} -C \"{{comment|email}}\""}, {"task": "Remove the keys of a host from the known_hosts file (useful when a known host has a new key):", "command": "ssh-keygen -R {{remote_host}}"}, {"task": "Retrieve the fingerprint of a key in MD5 Hex:", "command": "ssh-keygen -l -E {{md5}} -f {{~/.ssh/filename}}"}, {"task": "Change the password of a key:", "command": "ssh-keygen -p -f {{~/.ssh/filename}}"}, {"task": "Change the type of the key format (for example from OPENSSH format to PEM), the file will be rewritten in-place:", "command": "ssh-keygen -p -N \"\" -m {{PEM}} -f {{~/.ssh/OpenSSH_private_key}}"}, {"task": "Retrieve public key from secret key:", "command": "ssh-keygen -y -f {{~/.ssh/OpenSSH_private_key}}"}]}
{"command": "ssh-keyscan", "tasks": [{"task": "Retrieve all public ssh keys of a remote host:", "command": "ssh-keyscan {{host}}"}, {"task": "Retrieve all public ssh keys of a remote host listening on a specific port:", "command": "ssh-keyscan -p {{port}} {{host}}"}, {"task": "Retrieve certain types of public ssh keys of a remote host:", "command": "ssh-keyscan -t {{rsa,dsa,ecdsa,ed25519}} {{host}}"}, {"task": "Manually update the ssh known_hosts file with the fingerprint of a given host:", "command": "ssh-keyscan -H {{host}} >> ~/.ssh/known_hosts"}]}
{"command": "ssh", "tasks": [{"task": "Connect to a remote server:", "command": "ssh {{username}}@{{remote_host}}"}, {"task": "Connect to a remote server with a specific identity (private key):", "command": "ssh -i {{path/to/key_file}} {{username}}@{{remote_host}}"}, {"task": "Connect to a remote server using a specific port:", "command": "ssh {{username}}@{{remote_host}} -p {{2222}}"}, {"task": "Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command:", "command": "ssh {{username}}@{{remote_host}} -t {{command}} {{command_arguments}}"}, {"task": "SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`):", "command": "ssh -D {{1080}} {{username}}@{{remote_host}}"}, {"task": "SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:", "command": "ssh -L {{9999}}:{{example.org}}:{{80}} -N -T {{username}}@{{remote_host}}"}, {"task": "SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):", "command": "ssh -J {{username}}@{{jump_host}} {{username}}@{{remote_host}}"}, {"task": "Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options):", "command": "ssh -A {{username}}@{{remote_host}}"}]}
{"command": "sshd", "tasks": [{"task": "Start daemon in the background:", "command": "sshd"}, {"task": "Run sshd in the foreground:", "command": "sshd -D"}, {"task": "Run with verbose output (for debugging):", "command": "sshd -D -d"}, {"task": "Run on a specific port:", "command": "sshd -p {{port}}"}]}
{"command": "sshfs", "tasks": [{"task": "Mount remote directory:", "command": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}"}, {"task": "Unmount remote directory:", "command": "umount {{mountpoint}}"}, {"task": "Mount remote directory from server with specific port:", "command": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} -p {{2222}}"}, {"task": "Use compression:", "command": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} -C"}, {"task": "Follow symbolic links:", "command": "sshfs -o follow_symlinks {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}"}]}
{"command": "sshpass", "tasks": [{"task": "Connect to a remote server using a password supplied on a file descriptor (in this case, `stdin`):", "command": "sshpass -d {{0}} ssh {{user}}@{{hostname}}"}, {"task": "Connect to a remote server with the password supplied as an option, and automatically accept unknown ssh keys:", "command": "sshpass -p {{password}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}}"}, {"task": "Connect to a remote server using the first line of a file as the password, automatically accept unknown ssh keys, and launch a command:", "command": "sshpass -f {{path/to/file}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}} \"{{command}}\""}]}
{"command": "sshuttle", "tasks": [{"task": "Forward all IPv4 TCP traffic via a remote SSH server:", "command": "sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}"}, {"task": "Also forward all DNS traffic to the server's default DNS resolver:", "command": "sshuttle --dns --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}"}, {"task": "Forward all traffic except that which is bound for a specific subnet:", "command": "sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} --exclude {{192.168.0.1/24}}"}, {"task": "Use the tproxy method to forward all IPv4 and IPv6 traffic:", "command": "sshuttle --method=tproxy --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} {{::/0}} --exclude={{your_local_ip_address}} --exclude={{ssh_server_ip_address}}"}]}
{"command": "sslscan", "tasks": [{"task": "Test a server on port 443:", "command": "sslscan {{example.com}}"}, {"task": "Test a specified port:", "command": "sslscan {{example.com}}:{{465}}"}, {"task": "Show certificate information:", "command": "testssl --show-certificate {{example.com}}"}]}
{"command": "st-flash", "tasks": [{"task": "Read 4096 bytes from the device starting from 0x8000000:", "command": "st-flash read {{firmware}}.bin {{0x8000000}} {{4096}}"}, {"task": "Write firmware to device starting from 0x8000000:", "command": "st-flash write {{firmware}}.bin {{0x8000000}}"}, {"task": "Erase firmware from device:", "command": "st-flash erase"}]}
{"command": "st-info", "tasks": [{"task": "Display amount of program memory available:", "command": "st-info --flash"}, {"task": "Display amount of SRAM memory available:", "command": "st-info --sram"}, {"task": "Display summarized information of the device:", "command": "st-info --probe"}]}
{"command": "st-util", "tasks": [{"task": "Run GDB server on port 4500:", "command": "st-util -p {{4500}}"}, {"task": "Connect to GDB server:", "command": "(gdb) target extended-remote {{localhost}}:{{4500}}"}, {"task": "Write firmware to device:", "command": "(gdb) load {{firmware.elf}}"}]}
{"command": "stack", "tasks": [{"task": "Create a new package:", "command": "stack new {{package_name}} {{template_name}}"}, {"task": "Compile a package:", "command": "stack build"}, {"task": "Run tests inside a package:", "command": "stack test"}, {"task": "Compile a project and re-compile every time a file changes:", "command": "stack build --file-watch"}, {"task": "Compile a project and execute a command after compilation:", "command": "stack build --exec \"{{command}}\""}, {"task": "Run a program and pass an argument to it:", "command": "stack exec {{program_name}} -- {{argument}}"}]}
{"command": "standard-version", "tasks": [{"task": "Update the changelog file and tag a release:", "command": "standard-version"}, {"task": "Tag a release without bumping the version:", "command": "standard-version --first-release"}, {"task": "Update the changelog and tag an alpha release:", "command": "standard-version --prerelease alpha"}, {"task": "Update the changelog and tag a specific release type:", "command": "standard-version --release-as {{major|minor|patch}}"}, {"task": "Tag a release, preventing hooks from being verified during the commit step:", "command": "standard-version --no-verify"}, {"task": "Tag a release committing all staged changes, not just files affected by `standard-version`:", "command": "standard-version --commit-all"}, {"task": "Update a specific changelog file and tag a release:", "command": "standard-version --infile {{path/to/file.md}}"}, {"task": "Display the release that would be performed without performing them:", "command": "standard-version --dry-run"}]}
{"command": "standard", "tasks": [{"task": "Lint all JavaScript source files in the current directory:", "command": "standard"}, {"task": "Lint specific JavaScript file(s):", "command": "standard {{path/to/file1 path/to/file2 ...}}"}, {"task": "Apply automatic fixes during linting:", "command": "standard --fix"}, {"task": "Declare any available global variables:", "command": "standard --global {{variable}}"}, {"task": "Use a custom ESLint plugin when linting:", "command": "standard --plugin {{plugin}}"}, {"task": "Use a custom JS parser when linting:", "command": "standard --parser {{parser}}"}, {"task": "Use a custom ESLint environment when linting:", "command": "standard --env {{environment}}"}]}
{"command": "starship init", "tasks": [{"task": "Display the subcommand help:", "command": "starship init --help"}, {"task": "Print the starship integration code for the specified shell:", "command": "starship init {{bash|elvish|fish|ion|powershell|tcsh|zsh}}"}, {"task": "Append the `starship` integration code to `~/.bashrc`:", "command": "starship init {{bash}} >> {{~/.bashrc}}"}, {"task": "Append the `starship` integration code to `~/.zshrc`:", "command": "starship init {{zsh}} >> {{~/.zshrc}}"}]}
{"command": "starship", "tasks": [{"task": "Print the starship integration code for the specified shell:", "command": "starship init {{bash|elvish|fish|ion|powershell|tcsh|zsh}}"}, {"task": "Explain each part of the current prompt and show the time taken to render them:", "command": "starship explain"}, {"task": "Print the computed starship configuration (use `--default` to print default configuration instead):", "command": "starship print-config"}, {"task": "List supported modules:", "command": "starship module --list"}, {"task": "Edit the starship configuration in the default editor:", "command": "starship configure"}, {"task": "Create a bug report GitHub issue pre-populated with information about the system and starship configuration:", "command": "starship bug-report"}, {"task": "Print the completion script for the specified shell:", "command": "starship completions {{bash|elvish|fish|powershell|zsh}}"}, {"task": "Display help for a subcommand:", "command": "starship {{subcommand}} --help"}]}
{"command": "stat", "tasks": [{"task": "Display properties about a specific file such as size, permissions, creation and access dates among others:", "command": "stat {{path/to/file}}"}, {"task": "Display properties about a specific file such as size, permissions, creation and access dates among others without labels:", "command": "stat --terse {{path/to/file}}"}, {"task": "Display information about the filesystem where a specific file is located:", "command": "stat --file-system {{path/to/file}}"}, {"task": "Show only octal file permissions:", "command": "stat --format=\"%a %n\" {{path/to/file}}"}, {"task": "Show the owner and group of a specific file:", "command": "stat --format=\"%U %G\" {{path/to/file}}"}, {"task": "Show the size of a specific file in bytes:", "command": "stat --format=\"%s %n\" {{path/to/file}}"}]}
{"command": "stdbuf", "tasks": [{"task": "Change `stdin` buffer size to 512 KiB:", "command": "stdbuf --input={{512K}} {{command}}"}, {"task": "Change `stdout` buffer to line-buffered:", "command": "stdbuf --output={{L}} {{command}}"}, {"task": "Change `stderr` buffer to unbuffered:", "command": "stdbuf --error={{0}} {{command}}"}]}
{"command": "steam", "tasks": [{"task": "Launch Steam, printing debug messages to `stdout`:", "command": "steam"}, {"task": "Launch Steam and enable its in-app debug console tab:", "command": "steam -console"}, {"task": "Enable and open the Steam console tab in a running Steam instance:", "command": "steam steam://open/console"}, {"task": "Log into Steam with the specified credentials:", "command": "steam -login {{username}} {{password}}"}, {"task": "Launch Steam in Big Picture Mode:", "command": "steam -tenfoot"}, {"task": "Exit Steam:", "command": "steam -shutdown"}]}
{"command": "steamcmd", "tasks": [{"task": "Install or update an application anonymously:", "command": "steamcmd +login {{anonymous}} +app_update {{appid}} +quit"}, {"task": "Install or update an application using the specified credentials:", "command": "steamcmd +login {{username}} +app_update {{appid}} +quit"}, {"task": "Install an application for a specific platform:", "command": "steamcmd +@sSteamCmdForcePlatformType {{windows}} +login {{anonymous}} +app_update {{appid}} validate +quit"}]}
{"command": "stern", "tasks": [{"task": "Tail all pods within a current namespace:", "command": "stern ."}, {"task": "Tail all pods with a specific status:", "command": "stern . --container-state {{running|waiting|terminated}}"}, {"task": "Tail all pods that matches a given regular expression:", "command": "stern {{pod_query}}"}, {"task": "Tail matched pods from all namespaces:", "command": "stern {{pod_query}} --all-namespaces"}, {"task": "Tail matched pods from 15 minutes ago:", "command": "stern {{pod_query}} --since {{15m}}"}, {"task": "Tail matched pods with a specific label:", "command": "stern {{pod_query}} --selector {{release=canary}}"}]}
{"command": "stl2gts", "tasks": [{"task": "Convert an STL file to a GTS file:", "command": "stl2gts < {{path/to/file.stl}} > {{path/to/file.gts}}"}, {"task": "Convert an STL file to a GTS file and revert face normals:", "command": "stl2gts --revert < {{path/to/file.stl}} > {{path/to/file.gts}}"}, {"task": "Convert an STL file to a GTS file and do not merge vertices:", "command": "stl2gts --nomerge < {{path/to/file.stl}} > {{path/to/file.gts}}"}, {"task": "Convert an STL file to a GTS file and display surface statistics:", "command": "stl2gts --verbose < {{path/to/file.stl}} > {{path/to/file.gts}}"}, {"task": "Print help for `stl2gts`:", "command": "stl2gts --help"}]}
{"command": "stolonctl", "tasks": [{"task": "Get cluster status:", "command": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} status"}, {"task": "Get cluster data:", "command": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} clusterdata"}, {"task": "Get cluster specification:", "command": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} spec"}, {"task": "Update cluster specification with a patch in JSON format:", "command": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} update --patch '{{cluster_spec}}'"}]}
{"command": "Stormlock", "tasks": [{"task": "Acquire a lease for resource:", "command": "stormlock acquire {{resource}}"}, {"task": "Release the given lease for the given resource:", "command": "stormlock release {{resource}} {{lease_id}}"}, {"task": "Show information on the current lease for a resource, if any:", "command": "stormlock current {{resource}}"}, {"task": "Test if a lease for given resource is currently active:", "command": "stormlock is-held {{resource}} {{lease_id}}"}]}
{"command": "stow", "tasks": [{"task": "Symlink all files recursively to a given directory:", "command": "stow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"}, {"task": "Delete symlinks recursively from a given directory:", "command": "stow --delete --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"}, {"task": "Simulate to see what the result would be like:", "command": "stow --simulate --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"}, {"task": "Delete and resymlink:", "command": "stow --restow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"}, {"task": "Exclude files matching a regular expression:", "command": "stow --ignore={{regular_expression}} --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"}]}
{"command": "streamlink", "tasks": [{"task": "Attempt to extract streams from the URL specified, and if it's successful, print out a list of available streams to choose from:", "command": "streamlink {{example.com/stream}}"}, {"task": "Open a stream with the specified quality:", "command": "streamlink {{example.com/stream}} {{720p60}}"}, {"task": "Select the highest or lowest available quality:", "command": "streamlink {{example.com/stream}} {{best|worst}}"}, {"task": "Specify which player to use to feed stream data to (VLC is used by default if found):", "command": "streamlink --player={{mpv}} {{example.com/stream}} {{best}}"}, {"task": "Specify the amount of time to skip from the beginning of the stream. For live streams, this is a negative offset from the end of the stream (rewind):", "command": "streamlink --hls-start-offset {{[HH:]MM:SS}} {{example.com/stream}} {{best}}"}, {"task": "Skip to the beginning of a live stream, or as far back as possible:", "command": "streamlink --hls-live-restart {{example.com/stream}} {{best}}"}, {"task": "Write stream data to a file instead of playing it:", "command": "streamlink --output {{path/to/file.ts}} {{example.com/stream}} {{best}}"}, {"task": "Open the stream in the player, while at the same time writing it to a file:", "command": "streamlink --record {{path/to/file.ts}} {{example.com/stream}} {{best}}"}]}
{"command": "strings", "tasks": [{"task": "Print all strings in a binary:", "command": "strings {{path/to/file}}"}, {"task": "Limit results to strings at least *length* characters long:", "command": "strings -n {{length}} {{path/to/file}}"}, {"task": "Prefix each result with its offset within the file:", "command": "strings -t d {{path/to/file}}"}, {"task": "Prefix each result with its offset within the file in hexadecimal:", "command": "strings -t x {{path/to/file}}"}]}
{"command": "strip-nondeterminism", "tasks": [{"task": "Strip nondeterministic information from a file:", "command": "strip-nondeterminism {{path/to/file}}"}, {"task": "Strip nondeterministic information from a file manually specifying the filetype:", "command": "strip-nondeterminism --type {{filetype}} {{path/to/file}}"}, {"task": "Strip nondeterministic information from a file; instead of removing timestamps set them to the specified UNIX timestamp:", "command": "strip-nondeterminism --timestamp {{unix_timestamp}} {{path/to/file}}"}]}
{"command": "stripe", "tasks": [{"task": "Follow the logs of activity on the account:", "command": "stripe logs tail"}, {"task": "Listen for events, filtering on events with the name `charge.succeeded` and forwarding them to localhost:3000/events:", "command": "stripe listen --events=\"{{charge.succeeded}}\" --forward-to=\"{{localhost:3000/events}}\""}, {"task": "Send a test webhook event:", "command": "stripe trigger {{charge.succeeded}}"}, {"task": "Create a customer:", "command": "stripe customers create --email=\"{{test@example.com}}\" --name=\"{{Jenny Rosen}}\""}, {"task": "Print to JSON:", "command": "stripe listen --print-json"}]}
{"command": "stty", "tasks": [{"task": "Display all settings for the current terminal:", "command": "stty --all"}, {"task": "Set the number of rows or columns:", "command": "stty {{rows|cols}} {{count}}"}, {"task": "Get the actual transfer speed of a device:", "command": "stty --file {{path/to/device_file}} speed"}, {"task": "Reset all modes to reasonable values for the current terminal:", "command": "stty sane"}]}
{"command": "stun", "tasks": [{"task": "Make a STUN request:", "command": "stun {{stun.1und1.de}}"}, {"task": "Make a STUN request and specify the source port:", "command": "stun {{stun.1und1.de}} -p {{4302}}"}]}
{"command": "su", "tasks": [{"task": "Switch to superuser (requires the root password):", "command": "su"}, {"task": "Switch to a given user (requires the user's password):", "command": "su {{username}}"}, {"task": "Switch to a given user and simulate a full login shell:", "command": "su - {{username}}"}, {"task": "Execute a command as another user:", "command": "su - {{username}} -c \"{{command}}\""}]}
{"command": "subfinder", "tasks": [{"task": "Find subdomains for a specific domain:", "command": "subfinder -d {{example.com}}"}, {"task": "Show only the subdomains found:", "command": "subfinder --silent -d {{example.com}}"}, {"task": "Use a brute-force attack to find subdomains:", "command": "subfinder -d {{example.com}} -b"}, {"task": "Remove wildcard subdomains:", "command": "subfinder -nW -d {{example.com}}"}, {"task": "Use a given comma-separated list of resolvers:", "command": "subfinder -r {{8.8.8.8}},{{1.1.1.1}} -d {{example.com}}"}]}
{"command": "subl", "tasks": [{"task": "Open the current directory in Sublime Text:", "command": "subl {{.}}"}, {"task": "Open a file or directory in Sublime Text:", "command": "subl {{path/to/file_or_directory}}"}, {"task": "Open a file and jump to a specific line number:", "command": "subl {{path/to/file}}:{{line_number}}"}, {"task": "Open a file or directory in the currently open window:", "command": "subl -a {{path/to/file}}"}, {"task": "Open a file or directory in a new window:", "command": "subl -n {{path/to/file}}"}]}
{"command": "subliminal", "tasks": [{"task": "Download English subtitles for a video:", "command": "subliminal download -l {{en}} {{video.ext}}"}]}
{"command": "sublist3r", "tasks": [{"task": "Find subdomains for a domain:", "command": "sublist3r --domain {{domain_name}}"}, {"task": "Find subdomains for a domain, also enabling brute force search:", "command": "sublist3r --domain {{domain_name}} --bruteforce"}, {"task": "Save the found subdomains to a text file:", "command": "sublist3r --domain {{domain_name}} --output {{path/to/output_file}}"}, {"task": "Output all available options:", "command": "sublist3r --help"}]}
{"command": "sudo", "tasks": [{"task": "Run a command as the superuser:", "command": "sudo {{less /var/log/syslog}}"}, {"task": "Edit a file as the superuser with your default editor:", "command": "sudo --edit {{/etc/fstab}}"}, {"task": "Run a command as another user and/or group:", "command": "sudo --user={{user}} --group={{group}} {{id -a}}"}, {"task": "Repeat the last command prefixed with `sudo` (only in `bash`, `zsh`, etc.):", "command": "sudo !!"}, {"task": "Launch the default shell with superuser privileges and run login-specific files (`.profile`, `.bash_profile`, etc.):", "command": "sudo --login"}, {"task": "Launch the default shell with superuser privileges without changing the environment:", "command": "sudo --shell"}, {"task": "Launch the default shell as the specified user, loading the user's environment and reading login-specific files (`.profile`, `.bash_profile`, etc.):", "command": "sudo --login --user={{user}}"}, {"task": "List the allowed (and forbidden) commands for the invoking user:", "command": "sudo --list"}]}
{"command": "sum", "tasks": [{"task": "Compute a checksum with BSD-compatible algorithm and 1024-byte blocks:", "command": "sum {{path/to/file}}"}, {"task": "Compute a checksum with System V-compatible algorithm and 512-byte blocks:", "command": "sum --sysv {{path/to/file}}"}]}
{"command": "sup", "tasks": [{"task": "Add an article to the RSS feed:", "command": "sup {{path/to/file.html}}"}]}
{"command": "supervisorctl", "tasks": [{"task": "Show the status of a process (or all processes if `process_name` is not specified):", "command": "supervisorctl status {{process_name}}"}, {"task": "Start/stop/restart a process:", "command": "supervisorctl {{start|stop|restart}} {{process_name}}"}, {"task": "Start/stop/restart all processes in a group:", "command": "supervisorctl {{start|stop|restart}} {{group_name}}:*"}, {"task": "Show last 100 **bytes** of process `stderr`:", "command": "supervisorctl tail -100 {{process_name}} stderr"}, {"task": "Keep displaying `stdout` of a process:", "command": "supervisorctl tail -f {{process_name}} stdout"}, {"task": "Reload process config file to add/remove processes as necessary:", "command": "supervisorctl update"}]}
{"command": "supervisord", "tasks": [{"task": "Start `supervisord` with specified configuration file:", "command": "supervisord -c {{path/to/file}}"}, {"task": "Run supervisord in the foreground:", "command": "supervisord -n"}]}
{"command": "surfraw", "tasks": [{"task": "Display the list of supported website search scripts (elvi):", "command": "surfraw -elvi"}, {"task": "Open the elvi's results page for a specific search in the browser:", "command": "surfraw {{elvi}} \"{{search_terms}}\""}, {"task": "Display an elvi description and its specific options:", "command": "surfraw {{elvi}} -local-help"}, {"task": "Search using an elvi with specific options and open the results page in the browser:", "command": "surfraw {{elvi}} {{elvi_options}} \"{{search_terms}}\""}, {"task": "Display the URL to the elvi's results page for a specific search:", "command": "surfraw -print {{elvi}} \"{{search_terms}}\""}, {"task": "Search using the alias:", "command": "sr {{elvi}} \"{{search_terms}}\""}]}
{"command": "surge", "tasks": [{"task": "Upload a new site to surge.sh:", "command": "surge {{path/to/my_project}}"}, {"task": "Deploy site to custom domain (note that the DNS records must point to the surge.sh subdomain):", "command": "surge {{path/to/my_project}} {{my_custom_domain.com}}"}, {"task": "List your surge projects:", "command": "surge list"}, {"task": "Remove a project:", "command": "surge teardown {{my_custom_domain.com}}"}]}
{"command": "sv", "tasks": [{"task": "Start a service:", "command": "sudo sv up {{path/to/service}}"}, {"task": "Stop a service:", "command": "sudo sv down {{path/to/service}}"}, {"task": "Get service status:", "command": "sudo sv status {{path/to/service}}"}, {"task": "Reload a service:", "command": "sudo sv reload {{path/to/service}}"}, {"task": "Start a service, but only if it's not running and don't restart it if it stops:", "command": "sudo sv once {{path/to/service}}"}]}
{"command": "svgcleaner", "tasks": [{"task": "Optimize an SVG:", "command": "svgcleaner {{input.svg}} {{output.svg}}"}, {"task": "Optimize an SVG multiple times:", "command": "svgcleaner --multipass {{input.svg}} {{output.svg}}"}]}
{"command": "svgo", "tasks": [{"task": "Optimize a file using the default plugins (overwrites the original file):", "command": "svgo {{test.svg}}"}, {"task": "Optimize a file and save the result to another file:", "command": "svgo {{test.svg}} -o {{test.min.svg}}"}, {"task": "Optimize all SVG files within a directory (overwrites the original files):", "command": "svgo -f {{path/to/directory/with/svg/files}}"}, {"task": "Optimize all SVG files within a directory and save the resulting files to another directory:", "command": "svgo -f {{path/to/input/directory}} -o {{path/to/output/directory}}"}, {"task": "Optimize SVG content passed from another command, and save the result to a file:", "command": "{{cat test.svg}} | svgo -i - -o {{test.min.svg}}"}, {"task": "Optimize a file and print out the result:", "command": "svgo {{test.svg}} -o -"}, {"task": "Show available plugins:", "command": "svgo --show-plugins"}]}
{"command": "svgr", "tasks": [{"task": "Transform a SVG file into a React component to `stdout`:", "command": "svgr -- {{path/to/file.svg}}"}, {"task": "Transform a SVG file into a React component using TypeScript to `stdout`:", "command": "svgr --typescript -- {{path/to/file.svg}}"}, {"task": "Transform a SVG file into a React component using JSX transform to `stdout`:", "command": "svgr --jsx-runtime automatic -- {{path/to/file.svg}}"}, {"task": "Transform all SVG files from a directory to React components into a specific directory:", "command": "svgr --out-dir {{path/to/output_directory}} {{path/to/input_directory}}"}, {"task": "Transform all SVG files from a directory to React components into a specific directory skipping already transformed files:", "command": "svgr --out-dir {{path/to/output_directory}} --ignore-existing {{path/to/input_directory}}"}, {"task": "Transform all SVG files from a directory to React components into a specific directory using a specific case for filenames:", "command": "svgr --out-dir {{path/to/output_directory}} --filename-case {{camel|kebab|pascal}} {{path/to/input_directory}}"}, {"task": "Transform all SVG files from a directory to React components into a specific directory without generating an index file:", "command": "svgr --out-dir {{path/to/output_directory}} --no-index {{path/to/input_directory}}"}]}
{"command": "svn changelist", "tasks": [{"task": "Add files to a changelist, creating the changelist if it does not exist:", "command": "svn changelist {{changelist_name}} {{path/to/file1}} {{path/to/file2}}"}, {"task": "Remove files from a changelist:", "command": "svn changelist --remove {{path/to/file1}} {{path/to/file2}}"}, {"task": "Remove the whole changelist at once:", "command": "svn changelist --remove --recursive --changelist {{changelist_name}} ."}, {"task": "Add the contents of a space-separated list of directories to a changelist:", "command": "svn changelist --recursive {{changelist_name}} {{path/to/directory1}} {{path/to/directory2}}"}, {"task": "Commit a changelist:", "command": "svn commit --changelist {{changelist_name}}"}]}
{"command": "svn", "tasks": [{"task": "Check out a working copy from a repository:", "command": "svn co {{url/to/repository}}"}, {"task": "Bring changes from the repository into the working copy:", "command": "svn up"}, {"task": "Put files and directories under version control, scheduling them for addition to repository. They will be added in next commit:", "command": "svn add {{PATH}}"}, {"task": "Send changes from your working copy to the repository:", "command": "svn ci -m {{commit_log_message}} [{{PATH}}]"}, {"task": "Display changes from the last 10 revisions, showing modified files for each revision:", "command": "svn log -vl {{10}}"}, {"task": "Show detailed help:", "command": "svn help"}]}
{"command": "swagger-codegen", "tasks": [{"task": "Generate documentation and code from an OpenAPI/swagger file:", "command": "swagger-codegen generate -i {{swagger_file}} -l {{language}}"}, {"task": "Generate Java code using the library retrofit2 and the option useRxJava2:", "command": "swagger-codegen generate -i {{http://petstore.swagger.io/v2/swagger.json}} -l {{java}} --library {{retrofit2}} -D{{useRxJava2}}={{true}}"}, {"task": "List available languages:", "command": "swagger-codegen langs"}, {"task": "Display help options for the generate command:", "command": "swagger-codegen help {{generate}}"}]}
{"command": "swc", "tasks": [{"task": "Transpile a specified input file and output to `stdout`:", "command": "swc {{path/to/file}}"}, {"task": "Transpile the input file every time it is changed:", "command": "swc {{path/to/file}} --watch"}, {"task": "Transpile a specified input file and output to a specific file:", "command": "swc {{path/to/input_file}} --out-file {{path/to/output_file}}"}, {"task": "Transpile a specified input directory and output to a specific directory:", "command": "swc {{path/to/input_directory}} --out-dir {{path/to/output_directory}}"}, {"task": "Transpile a specified input directory using a specific configuration file:", "command": "swc {{path/to/input_directory}} --config-file {{path/to/.swcrc}}"}, {"task": "Ignore files in a directory specified using glob path:", "command": "swc {{path/to/input_directory}} --ignore {{ignored_files}}"}]}
{"command": "swift", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "swift"}, {"task": "Execute a program:", "command": "swift {{file.swift}}"}, {"task": "Start a new project with the package manager:", "command": "swift package init"}, {"task": "Generate an Xcode project file:", "command": "swift package generate-xcodeproj"}, {"task": "Update dependencies:", "command": "swift package update"}, {"task": "Compile project for release:", "command": "swift build -c release"}]}
{"command": "swig", "tasks": [{"task": "Generate a binding between C++ and Python:", "command": "swig -c++ -python -o {{path/to/output_wrapper.cpp}} {{path/to/swig_file.i}}"}, {"task": "Generate a binding between C++ and Go:", "command": "swig -go -cgo -intgosize 64 -c++ {{path/to/swig_file.i}}"}, {"task": "Generate a binding between C and Java:", "command": "swig -java {{path/to/swig_file.i}}"}, {"task": "Generate a binding between C and Ruby and prefix the Ruby module with {{foo::bar::}}:", "command": "swig -ruby -prefix \"{{foo::bar::}}\" {{path/to/swig_file.i}}"}]}
{"command": "swipl", "tasks": [{"task": "Start an interactive session:", "command": "swipl"}, {"task": "Execute a command without showing any output:", "command": "swipl --quiet -t \"{{command}}\""}, {"task": "Execute a script:", "command": "swipl {{path/to/file.pl}}"}, {"task": "Print all shell configuration variables:", "command": "swipl --dump-runtime-variables"}, {"task": "Print the version:", "command": "swipl --version"}]}
{"command": "symfony", "tasks": [{"task": "Create a new Symfony project:", "command": "symfony new {{name}}"}, {"task": "Run a local web server:", "command": "symfony serve"}, {"task": "Stop the local web server:", "command": "symfony server:stop"}, {"task": "Check for security issues in the project's dependencies:", "command": "symfony security:check"}]}
{"command": "sync", "tasks": [{"task": "Flush all pending write operations on all disks:", "command": "sync"}, {"task": "Flush all pending write operations on a single file to disk:", "command": "sync {{path/to/file}}"}]}
{"command": "syncthing", "tasks": [{"task": "Start Syncthing:", "command": "syncthing"}, {"task": "Start Syncthing without opening a web browser:", "command": "syncthing -no-browser"}, {"task": "Print the device ID:", "command": "syncthing -device-id"}, {"task": "Change the home directory:", "command": "syncthing -home={{path/to/directory}}"}, {"task": "Force a full index exchange:", "command": "syncthing -reset-deltas"}, {"task": "Change the address upon which the web interface listens:", "command": "syncthing -gui-address={{ip_address:port|path/to/socket.sock}}"}, {"task": "Show filepaths to the files used by Syncthing:", "command": "syncthing -paths"}, {"task": "Disable the Syncthing monitor process:", "command": "syncthing -no-restart"}]}
{"command": "sysbench", "tasks": [{"task": "Run a CPU benchmark with 1 thread for 10 seconds:", "command": "sysbench cpu run"}, {"task": "Run a CPU benchmark with multiple threads for a specified time:", "command": "sysbench --threads={{number_of_threads}} --time={{seconds}}"}, {"task": "Run a memory benchmark with 1 thread for 10 seconds:", "command": "sysbench memory run"}, {"task": "Prepare a filesystem-level read benchmark:", "command": "sysbench fileio prepare"}, {"task": "Run a filesystem-level benchmark:", "command": "sysbench --file-test-mode={{rndrd|rndrw|rndwr|seqrd|seqrewr|seqwr}} fileio run"}]}
{"command": "tabula", "tasks": [{"task": "Extract all tables from a PDF to a CSV file:", "command": "tabula -o {{file.csv}} {{file.pdf}}"}, {"task": "Extract all tables from a PDF to a JSON file:", "command": "tabula --format JSON -o {{file.json}} {{file.pdf}}"}, {"task": "Extract tables from pages 1, 2, 3, and 6 of a PDF:", "command": "tabula --pages {{1-3,6}} {{file.pdf}}"}, {"task": "Extract tables from page 1 of a PDF, guessing which portion of the page to examine:", "command": "tabula --guess --pages {{1}} {{file.pdf}}"}, {"task": "Extract all tables from a PDF, using ruling lines to determine cell boundaries:", "command": "tabula --spreadsheet {{file.pdf}}"}, {"task": "Extract all tables from a PDF, using blank space to determine cell boundaries:", "command": "tabula --no-spreadsheet {{file.pdf}}"}]}
{"command": "tac", "tasks": [{"task": "Concatenate specific files in reversed order:", "command": "tac {{path/to/file1 path/to/file2 ...}}"}, {"task": "Display `stdin` in reversed order:", "command": "{{cat path/to/file}} | tac"}, {"task": "Use a specific [s]eparator:", "command": "tac -s {{separator}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Use a specific [r]egex as a [s]eparator:", "command": "tac -r -s {{separator}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Use a separator [b]efore each file:", "command": "tac -b {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "tail", "tasks": [{"task": "Show last 'count' lines in file:", "command": "tail --lines {{count}} {{path/to/file}}"}, {"task": "Print a file from a specific line number:", "command": "tail --lines +{{count}} {{path/to/file}}"}, {"task": "Print a specific count of bytes from the end of a given file:", "command": "tail --bytes {{count}} {{path/to/file}}"}, {"task": "Print the last lines of a given file and keep reading file until `Ctrl + C`:", "command": "tail --follow {{path/to/file}}"}, {"task": "Keep reading file until `Ctrl + C`, even if the file is inaccessible:", "command": "tail --retry --follow {{path/to/file}}"}, {"task": "Show last 'num' lines in 'file' and refresh every 'n' seconds:", "command": "tail --lines {{count}} --sleep-interval {{seconds}} --follow {{path/to/file}}"}]}
{"command": "tailscale file", "tasks": [{"task": "Send a file to a specific node:", "command": "sudo tailscale file cp {{path/to/file}} {{hostname|ip}}:"}, {"task": "Store files that were sent to the current node into a specific directory:", "command": "sudo tailscale file get {{path/to/directory}}"}]}
{"command": "tailscale ssh", "tasks": [{"task": "Advertise/Disable SSH on the host:", "command": "sudo tailscale up --ssh={{true|false}}"}, {"task": "SSH to a specific host which has Tailscale-SSH enabled:", "command": "tailscale ssh {{username}}@{{host}}"}]}
{"command": "tailscale up", "tasks": [{"task": "Connect to Tailscale:", "command": "sudo tailscale up"}, {"task": "Connect and offer the current machine to be an exit node for internet traffic:", "command": "sudo tailscale up --advertise-exit-node"}, {"task": "Connect using a specific node for internet traffic:", "command": "sudo tailscale up --exit-node={{exit_node_ip}}"}, {"task": "Connect and block incoming connections to the current node:", "command": "sudo tailscale up --shields-up"}, {"task": "Connect and don't accept DNS configuration from the admin panel (defaults to `true`):", "command": "sudo tailscale up --accept-dns={{false}}"}, {"task": "Connect and configure Tailscale as a subnet router:", "command": "sudo tailscale up --advertise-routes={{10.0.0.0/24}},{{10.0.1.0/24}}"}, {"task": "Connect and accept subnet routes from Tailscale:", "command": "sudo tailscale up --accept-routes"}, {"task": "Reset unspecified settings to their default values and connect:", "command": "sudo tailscale up --reset"}]}
{"command": "tailscale", "tasks": [{"task": "Connect to Tailscale:", "command": "sudo tailscale up"}, {"task": "Disconnect from Tailscale:", "command": "sudo tailscale down"}, {"task": "Display the current Tailscale IP addresses:", "command": "tailscale ip"}, {"task": "Ping a peer node at the Tailscale layer and display which route it took for each response:", "command": "tailscale ping {{ip|hostname}}"}, {"task": "Analyze the local network conditions and display the result:", "command": "tailscale netcheck"}, {"task": "Start a web server for controlling Tailscale:", "command": "tailscale web"}, {"task": "Display a shareable identifier to help diagnose issues:", "command": "tailscale bugreport"}, {"task": "Display help for a subcommand:", "command": "tailscale {{subcommand}} --help"}]}
{"command": "takeout", "tasks": [{"task": "Display a list of available services:", "command": "takeout enable"}, {"task": "Enable a specific service:", "command": "takeout enable {{name}}"}, {"task": "Enable a specific service with the default parameters:", "command": "takeout enable --default {{name}}"}, {"task": "Display a list of enabled services:", "command": "takeout disable"}, {"task": "Disable a specific service:", "command": "takeout disable {{name}}"}, {"task": "Disable all services:", "command": "takeout disable --all"}, {"task": "Start a specific container:", "command": "takeout start {{container_id}}"}, {"task": "Stop a specific container:", "command": "takeout stop {{container_id}}"}]}
{"command": "tar", "tasks": [{"task": "[c]reate an archive and write it to a [f]ile:", "command": "tar cf {{path/to/target.tar}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "[c]reate a g[z]ipped archive and write it to a [f]ile:", "command": "tar czf {{path/to/target.tar.gz}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "[c]reate a g[z]ipped archive from a directory using relative paths:", "command": "tar czf {{path/to/target.tar.gz}} --directory={{path/to/directory}} ."}, {"task": "E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely:", "command": "tar xvf {{path/to/source.tar[.gz|.bz2|.xz]}}"}, {"task": "E[x]tract a (compressed) archive [f]ile into the target directory:", "command": "tar xf {{path/to/source.tar[.gz|.bz2|.xz]}} --directory={{path/to/directory}}"}, {"task": "[c]reate a compressed archive and write it to a [f]ile, using [a]rchive suffix to determine the compression program:", "command": "tar caf {{path/to/target.tar.xz}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Lis[t] the contents of a tar [f]ile [v]erbosely:", "command": "tar tvf {{path/to/source.tar}}"}, {"task": "E[x]tract files matching a pattern from an archive [f]ile:", "command": "tar xf {{path/to/source.tar}} --wildcards \"{{*.html}}\""}]}
{"command": "task", "tasks": [{"task": "Add a new task which is due tomorrow:", "command": "task add {{description}} due:{{tomorrow}}"}, {"task": "Update a task's priority:", "command": "task {{task_id}} modify priority:{{H|M|L}}"}, {"task": "Complete a task:", "command": "task {{task_id}} done"}, {"task": "Delete a task:", "command": "task {{task_id}} delete"}, {"task": "List all open tasks:", "command": "task list"}, {"task": "List open tasks due before the end of the week:", "command": "task list due.before:{{eow}}"}, {"task": "Show a graphical burndown chart, by day:", "command": "task burndown.daily"}, {"task": "List all reports:", "command": "task reports"}]}
{"command": "tb", "tasks": [{"task": "Add a new task to a board:", "command": "tb --task {{task_description}} @{{board_name}}"}, {"task": "Add a new note to a board:", "command": "tb --note {{note_description}} @{{board_name}}"}, {"task": "Edit item's priority:", "command": "tb --priority @{{item_id}} {{priority}}"}, {"task": "Check/uncheck item:", "command": "tb --check {{item_id}}"}, {"task": "Archive all checked items:", "command": "tb --clear"}, {"task": "Move item to a board:", "command": "tb --move @{{item_id}} {{board_name}}"}]}
{"command": "tbl", "tasks": [{"task": "Process input with tables, saving the output for future typesetting with groff to PostScript:", "command": "tbl {{path/to/input_file}} > {{path/to/output.roff}}"}, {"task": "Typeset input with tables to PDF using the [me] macro package:", "command": "tbl -T {{pdf}} {{path/to/input.tbl}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}"}]}
{"command": "tcc", "tasks": [{"task": "Compile and link 2 source files to generate an executable:", "command": "tcc -o {{executable_name}} {{path/to/file1.c}} {{path/to/file2.c}}"}, {"task": "Directly run an input file like a script and pass arguments to it:", "command": "tcc -run {{path/to/source_file.c}} {{arguments}}"}, {"task": "Interpret C source files with a shebang inside the file:", "command": "#!/full/path/to/tcc -run"}]}
{"command": "tcpdump", "tasks": [{"task": "List available network interfaces:", "command": "tcpdump -D"}, {"task": "Capture the traffic of a specific interface:", "command": "tcpdump -i {{eth0}}"}, {"task": "Capture all TCP traffic showing contents (ASCII) in console:", "command": "tcpdump -A tcp"}, {"task": "Capture the traffic from or to a host:", "command": "tcpdump host {{www.example.com}}"}, {"task": "Capture the traffic from a specific interface, source, destination and destination port:", "command": "tcpdump -i {{eth0}} src {{192.168.1.1}} and dst {{192.168.1.2}} and dst port {{80}}"}, {"task": "Capture the traffic of a network:", "command": "tcpdump net {{192.168.1.0/24}}"}, {"task": "Capture all traffic except traffic over port 22 and save to a dump file:", "command": "tcpdump -w {{dumpfile.pcap}} port not {{22}}"}, {"task": "Read from a given dump file:", "command": "tcpdump -r {{dumpfile.pcap}}"}]}
{"command": "tcsh", "tasks": [{"task": "Start an interactive shell session:", "command": "tcsh"}, {"task": "Start an interactive shell session without loading startup configs:", "command": "tcsh -f"}, {"task": "Execute specific [c]ommands:", "command": "tcsh -c \"{{echo 'tcsh is executed'}}\""}, {"task": "Execute a specific script:", "command": "tcsh {{path/to/script.tcsh}}"}, {"task": "Check a specific script for syntax errors:", "command": "tcsh -n {{path/to/script.tcsh}}"}, {"task": "Execute specific commands from `stdin`:", "command": "{{echo \"echo 'tcsh is executed'\"}} | tcsh"}]}
{"command": "tea", "tasks": [{"task": "Log into a Gitea server:", "command": "tea login add --name \"{{name}}\" --url \"{{url}}\" --token \"{{token}}\""}, {"task": "Display all repositories:", "command": "tea repos ls"}, {"task": "Display a list of issues:", "command": "tea issues ls"}, {"task": "Display a list of issues for a specific repository:", "command": "tea issues ls --repo \"{{repository}}\""}, {"task": "Create a new issue:", "command": "tea issues create --title \"{{title}}\" --body \"{{body}}\""}, {"task": "Display a list of open pull requests:", "command": "tea pulls ls"}, {"task": "Open the current repository in a browser:", "command": "tea open"}]}
{"command": "tectonic", "tasks": [{"task": "Compile a standalone TeX/LaTeX file:", "command": "tectonic -X compile {{path/to/file.tex}}"}, {"task": "Compile a standalone TeX/LaTeX file with synctex data:", "command": "tectonic -X compile --synctex {{path/to/file.tex}}"}, {"task": "Initialize a tectonic project in the current directory:", "command": "tectonic -X init"}, {"task": "Initialize a tectonic project in the specified directory:", "command": "tectonic -X new {{project_name}}"}, {"task": "Build the project in the current directory:", "command": "tectonic -X build"}, {"task": "Start a watcher to build the project in the current directory on change:", "command": "tectonic -X watch"}]}
{"command": "tee", "tasks": [{"task": "Copy `stdin` to each file, and also to `stdout`:", "command": "echo \"example\" | tee {{path/to/file}}"}, {"task": "Append to the given files, do not overwrite:", "command": "echo \"example\" | tee -a {{path/to/file}}"}, {"task": "Print `stdin` to the terminal, and also pipe it into another program for further processing:", "command": "echo \"example\" | tee {{/dev/tty}} | {{xargs printf \"[%s]\"}}"}, {"task": "Create a directory called \"example\", count the number of characters in \"example\" and write \"example\" to the terminal:", "command": "echo \"example\" | tee >(xargs mkdir) >(wc -c)"}]}
{"command": "telnet", "tasks": [{"task": "Telnet to the default port of a host:", "command": "telnet {{host}}"}, {"task": "Telnet to a specific port of a host:", "command": "telnet {{ip_address}} {{port}}"}, {"task": "Exit a telnet session:", "command": "quit"}, {"task": "Emit the default escape character combination for terminating the session:", "command": "Ctrl + ]"}, {"task": "Start `telnet` with \"x\" as the session termination character:", "command": "telnet -e {{x}} {{ip_address}} {{port}}"}, {"task": "Telnet to Star Wars animation:", "command": "telnet {{towel.blinkenlights.nl}}"}]}
{"command": "termdown", "tasks": [{"task": "Start a stopwatch:", "command": "termdown"}, {"task": "Start a 1 minute and 30 seconds countdown:", "command": "termdown {{1m30s}}"}, {"task": "Start a 1 minute 30 seconds countdown with blinking the terminal at the end:", "command": "termdown {{1m30s}} --blink"}, {"task": "Show a title above countdown:", "command": "termdown {{1m30s}} --title \"{{Interesting title}}\""}, {"task": "Display current time:", "command": "termdown --time"}]}
{"command": "terminalizer", "tasks": [{"task": "Create the global config directory:", "command": "terminalizer init"}, {"task": "Record the terminal and create a recording file:", "command": "terminalizer record {{path/to/file}}"}, {"task": "Play a recorded file on the terminal:", "command": "terminalizer play {{path/to/file}}"}, {"task": "Render a recording file as an animated GIF image:", "command": "terminalizer render {{path/to/file}}"}, {"task": "Upload a video to terminalizer.com:", "command": "terminalizer share {{path/to/file}}"}]}
{"command": "terraform fmt", "tasks": [{"task": "Format the configuration in the current directory:", "command": "terraform fmt"}, {"task": "Format the configuration in the current directory and subdirectories:", "command": "terraform fmt -recursive"}, {"task": "Display diffs of formatting changes:", "command": "terraform fmt -diff"}, {"task": "Do not list files that were formatted to `stdout`:", "command": "terraform fmt -list=false"}]}
{"command": "terraform plan", "tasks": [{"task": "Generate and show the execution plan in the currently directory:", "command": "terraform plan"}, {"task": "Show a plan to destroy all remote objects that currently exist:", "command": "terraform plan -destroy"}, {"task": "Show a plan to update the Terraform state and output values:", "command": "terraform plan -refresh-only"}, {"task": "Specify values for input variables:", "command": "terraform plan -var '{{name1}}={{value1}}' -var '{{name2}}={{value2}}'"}, {"task": "Focus Terraform's attention on only a subset of resources:", "command": "terraform plan -target {{resource_type.resource_name[instance index]}}"}, {"task": "Output a plan as JSON:", "command": "terraform plan -json"}, {"task": "Write a plan to a specific file:", "command": "terraform plan -no-color > {{path/to/file}}"}]}
{"command": "terraform", "tasks": [{"task": "Initialize a new or existing Terraform configuration:", "command": "terraform init"}, {"task": "Verify that the configuration files are syntactically valid:", "command": "terraform validate"}, {"task": "Format configuration according to Terraform language style conventions:", "command": "terraform fmt"}, {"task": "Generate and show an execution plan:", "command": "terraform plan"}, {"task": "Build or change infrastructure:", "command": "terraform apply"}, {"task": "Destroy Terraform-managed infrastructure:", "command": "terraform destroy"}]}
{"command": "terragrunt", "tasks": [{"task": "Generate and show an execution plan:", "command": "terragrunt plan"}, {"task": "Build or change infrastructure:", "command": "terragrunt apply"}, {"task": "Show current deployment (from state):", "command": "terragrunt show"}, {"task": "Show module output values:", "command": "terragrunt output"}, {"task": "Destroy Terraform-managed infrastructure:", "command": "terragrunt destroy"}, {"task": "Build or change infrastructure from a tree of Terragrunt modules (stack):", "command": "terragrunt run-all apply"}]}
{"command": "tesseract", "tasks": [{"task": "Recognize text in an image and save it to `output.txt` (the `.txt` extension is added automatically):", "command": "tesseract {{image.png}} {{output}}"}, {"task": "Specify a custom language (default is English) with an ISO 639-2 code (e.g. deu = Deutsch = German):", "command": "tesseract -l deu {{image.png}} {{output}}"}, {"task": "List the ISO 639-2 codes of available languages:", "command": "tesseract --list-langs"}, {"task": "Specify a custom page segmentation mode (default is 3):", "command": "tesseract -psm {{0_to_10}} {{image.png}} {{output}}"}, {"task": "List page segmentation modes and their descriptions:", "command": "tesseract --help-psm"}]}
{"command": "test", "tasks": [{"task": "Test if a given variable is equal to a given string:", "command": "test \"{{$MY_VAR}}\" == \"{{/bin/zsh}}\""}, {"task": "Test if a given variable is empty:", "command": "test -z \"{{$GIT_BRANCH}}\""}, {"task": "Test if a file exists:", "command": "test -f \"{{path/to/file_or_directory}}\""}, {"task": "Test if a directory does not exist:", "command": "test ! -d \"{{path/to/directory}}\""}, {"task": "If A is true, then do B, or C in the case of an error (notice that C may run even if A fails):", "command": "test {{condition}} && {{echo \"true\"}} || {{echo \"false\"}}"}]}
{"command": "testssl", "tasks": [{"task": "Test a server (run every check) on port 443:", "command": "testssl {{example.com}}"}, {"task": "Test a different port:", "command": "testssl {{example.com:465}}"}, {"task": "Only check available protocols:", "command": "testssl --protocols {{example.com}}"}, {"task": "Only check vulnerabilities:", "command": "testssl --vulnerable {{example.com}}"}, {"task": "Only check HTTP security headers:", "command": "testssl --headers {{example.com}}"}]}
{"command": "tex", "tasks": [{"task": "Compile a DVI document:", "command": "tex {{source.tex}}"}, {"task": "Compile a DVI document, specifying an output directory:", "command": "tex -output-directory={{path/to/directory}} {{source.tex}}"}, {"task": "Compile a DVI document, exiting on each error:", "command": "tex -halt-on-error {{source.tex}}"}]}
{"command": "texdoc", "tasks": [{"task": "Open the first search result in the default PDF viewer:", "command": "texdoc {{search}}"}, {"task": "List the best search results:", "command": "texdoc --list {{search}}"}, {"task": "Open full documentation of texdoc:", "command": "texdoc {{texdoc}}"}]}
{"command": "texliveonfly", "tasks": [{"task": "Download missing packages while compiling:", "command": "texliveonfly {{source.tex}}"}, {"task": "Use a specific compiler (defaults to `pdflatex`):", "command": "texliveonfly --compiler={{compiler}} {{source.tex}}"}, {"task": "Use a custom TeX Live `bin` folder:", "command": "texliveonfly --texlive_bin={{path/to/texlive_bin}} {{source.tex}}"}]}
{"command": "textql", "tasks": [{"task": "Print the lines in the specified `.csv` file that match a SQL query to `stdout`:", "command": "textql -sql \"{{SELECT * FROM filename}}\" {{path/to/filename.csv}}"}, {"task": "Query `.tsv` file:", "command": "textql -dlm=tab -sql \"{{SELECT * FROM filename}}\" {{path/to/filename.tsv}}"}, {"task": "Query file with header row:", "command": "textql -dlm={{delimiter}} -header -sql \"{{SELECT * FROM filename}}\" {{path/to/filename.csv}}"}, {"task": "Read data from `stdin`:", "command": "cat {{path/to/file}} | textql -sql \"{{SELECT * FROM stdin}}\""}, {"task": "Join two files on a specified common column:", "command": "textql -header -sql \"SELECT * FROM {{file1}} JOIN {{file2}} ON {{file1}}.{{c1}} = {{file2}}.{{c1}} LIMIT {{10}}\" -output-header {{path/to/file1.csv}} {{path/to/file2.csv}}"}, {"task": "Format output using an output delimiter with an output header line:", "command": "textql -output-dlm={{delimiter}} -output-header -sql \"SELECT {{column}} AS {{alias}} FROM {{filename}}\" {{path/to/filename.csv}}"}]}
{"command": "theHarvester", "tasks": [{"task": "Gather information on a domain using Google:", "command": "theHarvester --domain {{domain_name}} --source google"}, {"task": "Gather information on a domain using multiple sources:", "command": "theHarvester --domain {{domain_name}} --source {{google,bing,crtsh}}"}, {"task": "Change the limit of results to work with:", "command": "theHarvester --domain {{domain_name}} --source {{google}} --limit {{200}}"}, {"task": "Save the output to two files in XML and HTML format:", "command": "theHarvester --domain {{domain_name}} --source {{google}} --file {{output_file_name}}"}, {"task": "Output all available options:", "command": "theHarvester --help"}]}
{"command": "thunderbird", "tasks": [{"task": "Open thunderbird:", "command": "thunderbird"}, {"task": "Use a specific user profile:", "command": "thunderbird -P {{profile_name}}"}, {"task": "Use a specific user profile directory:", "command": "thunderbird --profile {{path/to/profile/directory}}"}]}
{"command": "tig", "tasks": [{"task": "Show the sequence of commits starting from the current one in reverse chronological order:", "command": "tig"}, {"task": "Show the history of a specific branch:", "command": "tig {{branch}}"}, {"task": "Show the history of specific files or directories:", "command": "tig {{path1 path2 ...}}"}, {"task": "Show the difference between two references (such as branches or tags):", "command": "tig {{base_ref}}..{{compared_ref}}"}, {"task": "Display commits from all branches and stashes:", "command": "tig --all"}, {"task": "Start in stash view, displaying all saved stashes:", "command": "tig stash"}]}
{"command": "time", "tasks": [{"task": "Run the `command` and print the time measurements to `stdout`:", "command": "time {{command}}"}]}
{"command": "timeout", "tasks": [{"task": "Run `sleep 10` and terminate it, if it runs for more than 3 seconds:", "command": "timeout {{3s}} {{sleep 10}}"}, {"task": "Specify the signal to be sent to the command after the time limit expires. (By default, TERM is sent):", "command": "timeout --signal {{INT}} {{5s}} {{sleep 10}}"}]}
{"command": "timetrap", "tasks": [{"task": "Create a new timesheet:", "command": "timetrap sheet {{timesheet}}"}, {"task": "Check in an entry started 5 minutes ago:", "command": "timetrap in --at \"{{5 minutes ago}}\" {{entry_notes}}"}, {"task": "Display the current timesheet:", "command": "timetrap display"}, {"task": "Edit the last entry's end time:", "command": "timetrap edit --end {{time}}"}]}
{"command": "timew", "tasks": [{"task": "Start a new stopwatch, giving a tag name to the activity being tracked:", "command": "timew start {{activity_tag}}"}, {"task": "View running stopwatches:", "command": "timew"}, {"task": "Stop the stopwatch with a given tag name:", "command": "timew stop {{activity_tag}}"}, {"task": "Stop all running stopwatches:", "command": "timew stop"}, {"task": "View tracked items:", "command": "timew summary"}]}
{"command": "timidity", "tasks": [{"task": "Play a MIDI file:", "command": "timidity {{path/to/file.mid}}"}, {"task": "Play a MIDI file in a loop:", "command": "timidity --loop {{path/to/file.mid}}"}, {"task": "Play a MIDI file in a specific key (0 = C major/A minor, -1 = F major/D minor, +1 = G major/E minor, etc.):", "command": "timidity --force-keysig={{-flats|+sharps}} {{path/to/file.mid}}"}, {"task": "Convert a MIDI file to PCM (WAV) audio:", "command": "timidity --output-mode={{w}} --output-file={{path/to/file.wav}} {{path/to/file.mid}}"}, {"task": "Convert a MIDI file to FLAC audio:", "command": "timidity --output-mode={{F}} --output-file={{path/to/file.flac}} {{path/to/file.mid}}"}]}
{"command": "tlmgr generate", "tasks": [{"task": "Remake the configuration file storing into a specific location:", "command": "tlmgr generate --dest {{output_file}}"}, {"task": "Remake the configuration file using a local configuration file:", "command": "tlmgr generate --localcfg {{local_configuration_file}}"}, {"task": "Run necessary programs after rebuilding configuration files:", "command": "tlmgr generate --rebuild-sys"}]}
{"command": "tldr-lint", "tasks": [{"task": "Lint all pages:", "command": "tldr-lint {{pages_directory}}"}, {"task": "Format a specific page to `stdout`:", "command": "tldr-lint --format {{page.md}}"}, {"task": "Format all pages in place:", "command": "tldr-lint --format --in-place {{pages_directory}}"}]}
{"command": "tldr", "tasks": [{"task": "Print the tldr page for a specific command (hint: this is how you got here!):", "command": "tldr {{command}}"}, {"task": "Print the tldr page for a specific subcommand:", "command": "tldr {{command}}-{{subcommand}}"}, {"task": "Print the tldr page for a command for a specific [p]latform:", "command": "tldr -p {{android|linux|osx|sunos|windows}} {{command}}"}, {"task": "[u]pdate the local cache of tldr pages:", "command": "tldr -u"}]}
{"command": "tldrl", "tasks": [{"task": "View documentation for the original command:", "command": "tldr tldr-lint"}]}
{"command": "tlmgr arch", "tasks": [{"task": "View documentation for the original command:", "command": "tldr tlmgr platform"}]}
{"command": "tlmgr backup", "tasks": [{"task": "Make a backup of one or more packages:", "command": "tlmgr backup {{package1 package2 ...}}"}, {"task": "Make a backup of all packages:", "command": "tlmgr backup --all"}, {"task": "Make a backup to a custom directory:", "command": "tlmgr backup {{package}} --backupdir {{path/to/backup_directory}}"}, {"task": "Remove a backup of one or more packages:", "command": "tlmgr backup clean {{package1 package2 ...}}"}, {"task": "Remove all backups:", "command": "tlmgr backup clean --all"}]}
{"command": "tlmgr candidates", "tasks": [{"task": "List all available repositories from which a package can be installed:", "command": "tlmgr candidates {{package}}"}]}
{"command": "tlmgr check", "tasks": [{"task": "Check the consistency of the whole TeX Live installation:", "command": "tlmgr check all"}, {"task": "Check the consistency of the whole TeX Live information in verbose mode:", "command": "tlmgr check all -v"}, {"task": "Check for missing dependencies:", "command": "tlmgr check depends"}, {"task": "Check if all TeX Live executables are present:", "command": "tlmgr check executes"}, {"task": "Check if all files listed in the local TLPDB are present:", "command": "tlmgr check files"}, {"task": "Check for duplicate filenames in the runfiles sections:", "command": "tlmgr check runfiles"}]}
{"command": "tlmgr conf", "tasks": [{"task": "Show the current TeX Live configuration:", "command": "tlmgr conf"}, {"task": "Show the current `texmf`, `tlmgr`, or `updmap` configuration:", "command": "tlmgr conf {{texmf|tlmgr|updmap}}"}, {"task": "Show only a specific configuration option:", "command": "tlmgr conf {{texmf|tlmgr|updmap}} {{configuration_key}}"}, {"task": "Set a specific configuration option:", "command": "tlmgr conf {{texmf|tlmgr|updmap}} {{configuration_key}} {{value}}"}, {"task": "Delete a specific configuration option:", "command": "tlmgr conf {{texmf|tlmgr|updmap}} --delete {{configuration_key}}"}, {"task": "Disable the execution of system calls via `\\write18`:", "command": "tlmgr conf texmf {{shell_escape}} {{0}}"}, {"task": "Show all additional `texmf` trees:", "command": "tlmgr conf auxtrees show"}]}
{"command": "tlmgr dump-tlpdb", "tasks": [{"task": "Dump the local package database:", "command": "tlmgr dump-tlpdb --local"}, {"task": "Dump the remote package database:", "command": "tlmgr dump-tlpdb --remote"}, {"task": "Dump the local package database as JSON:", "command": "tlmgr dump-tlpdb --local --json"}]}
{"command": "tlmgr gui", "tasks": [{"task": "Start a GUI for `tlmgr`:", "command": "sudo tlmgr gui"}, {"task": "Start a GUI specifying the background color:", "command": "sudo tlmgr gui -background \"{{#f39bc3}}\""}, {"task": "Start a GUI specifying the foreground color:", "command": "sudo tlmgr gui -foreground \"{{#0ef3bd}}\""}, {"task": "Start a GUI specifying the font and font size:", "command": "sudo tlmgr gui -font \"{{helvetica 18}}\""}, {"task": "Start a GUI setting a specific geometry:", "command": "sudo tlmgr gui -geometry {{width}}x{{height}}-{{xpos}}+{{ypos}}"}, {"task": "Start a GUI passing an arbitrary X resource string:", "command": "sudo tlmgr gui -xrm {{xresource}}"}]}
{"command": "tlmgr info", "tasks": [{"task": "List all available TeX Live packages, prefexing installed ones with `i`:", "command": "tlmgr info"}, {"task": "List all available collections:", "command": "tlmgr info collections"}, {"task": "List all available schemes:", "command": "tlmgr info scheme"}, {"task": "Show information about a specific package:", "command": "tlmgr info {{package_name}}"}, {"task": "List all files contained in a specific package:", "command": "tlmgr info {{package_name}} --list"}, {"task": "List all installed packages:", "command": "tlmgr info --only-installed"}, {"task": "Show only specific information about a package:", "command": "tlmgr info {{package_name}} --data \"{{name}},{{category}},{{installed}},{{size}},{{depends}},...\""}, {"task": "Print all available packages as JSON encoded array:", "command": "tlmgr info --json"}]}
{"command": "tlmgr install", "tasks": [{"task": "Install a package and its dependencies:", "command": "sudo tlmgr install {{package}}"}, {"task": "Reinstall a package:", "command": "sudo tlmgr install --reinstall {{package}}"}, {"task": "Simulate installing a package without making any changes:", "command": "tlmgr install --dry-run {{package}}"}, {"task": "Install a package without its dependencies:", "command": "sudo tlmgr install --no-depends {{package}}"}, {"task": "Install a package from a specific file:", "command": "sudo tlmgr install --file {{path/to/package}}"}]}
{"command": "tlmgr key", "tasks": [{"task": "List all keys for TeX Live:", "command": "tlmgr key list"}, {"task": "Add a key from a specific file:", "command": "sudo tlmgr key add {{path/to/key.gpg}}"}, {"task": "Add a key from `stdin`:", "command": "cat {{path/to/key.gpg}} | sudo tlmgr key add -"}, {"task": "Remove a specific key by its ID:", "command": "sudo tlmgr key remove {{key_id}}"}]}
{"command": "tlmgr option", "tasks": [{"task": "List all TeX Live settings:", "command": "tlmgr option showall"}, {"task": "List all currently set Tex Live settings:", "command": "tlmgr option show"}, {"task": "Print all TeX Live settings in JSON format:", "command": "tlmgr option showall --json"}, {"task": "Show the value of a specific TeX Live setting:", "command": "tlmgr option {{setting}}"}, {"task": "Modify the value of a specific TeX Live setting:", "command": "tlmgr option {{setting}} {{value}}"}, {"task": "Set TeX Live to get future updates from the internet after installing from DVD:", "command": "tlmgr option {{repository}} {{https://mirror.ctan.org/systems/texlive/tlnet}}"}]}
{"command": "tlmgr paper", "tasks": [{"task": "Show the default paper size used by all TeX Live programs:", "command": "tlmgr paper"}, {"task": "Set the default paper size for all TeX Live programs to A4:", "command": "sudo tlmgr paper {{a4}}"}, {"task": "Show the default paper size used by a specific TeX Live program:", "command": "tlmgr {{pdftex}} paper"}, {"task": "Set the default paper size for a specific TeX Live program to A4:", "command": "sudo tlmgr {{pdftex}} paper {{a4}}"}, {"task": "List all available paper sizes for a specific TeX Live program:", "command": "tlmgr {{pdftex}} paper --list"}, {"task": "Dump the default paper size used by all TeX Live programs in JSON format:", "command": "tlmgr paper --json"}]}
{"command": "tlmgr path", "tasks": [{"task": "Add symlinks to TeX Live files:", "command": "sudo tlmgr path add"}, {"task": "Remove symlinks to TeX Live files:", "command": "sudo tlmgr path remove"}]}
{"command": "tlmgr pinning", "tasks": [{"task": "Show the current pinning data:", "command": "tlmgr pinning show"}, {"task": "Pin the matching the packages to the given repository:", "command": "tlmgr pinning add {{repository}} {{package1 package2 ...}}"}, {"task": "Remove any packages recorded in the pinning file matching the packages for the given repository:", "command": "tlmgr pinning remove {{repository}} {{package1 package2 ...}}"}, {"task": "Remove all pinning data for the given repository:", "command": "tlmgr pinning remove {{repository}} --all"}]}
{"command": "tldr platform", "tasks": [{"task": "List all available platforms in the package repository:", "command": "tlmgr platform list"}, {"task": "Add the executables for a specific platform:", "command": "sudo tlmgr platform add {{platform}}"}, {"task": "Remove the executables for a specific platform:", "command": "sudo tlmgr platform remove {{platform}}"}, {"task": "Auto-detect and switch to the current platform:", "command": "sudo tlmgr platform set {{auto}}"}, {"task": "Switch to a specific platform:", "command": "sudo tlmgr platform set {{platform}}"}]}
{"command": "tlmgr recreate-tlpdb", "tasks": [{"task": "Recreate the `texlive.tlpdb` database file and dump it to `stdout`:", "command": "sudo tlmgr recreate-tlpdb"}]}
{"command": "tlmgr remove", "tasks": [{"task": "Uninstall a TeX Live package:", "command": "sudo tlmgr remove {{package}}"}, {"task": "Simulate uninstalling a package without making any changes:", "command": "tlmgr remove --dry-run {{package}}"}, {"task": "Uninstall a package without its dependencies:", "command": "sudo tlmgr remove --no-depends {{package}}"}, {"task": "Uninstall a package and back it up to a specific directory:", "command": "sudo tlmgr remove --backupdir {{path/to/directory}} {{package}}"}, {"task": "Uninstall all of TeX Live, asking for confirmation:", "command": "sudo tlmgr remove --all"}]}
{"command": "tlmgr repository", "tasks": [{"task": "List all configured repositories and their tags (if set):", "command": "tlmgr repository list"}, {"task": "List all packages available in a specific repository:", "command": "tlmgr repository list {{path|url|tag}}"}, {"task": "Add a new repository with a specific tag (the tag is not required):", "command": "sudo tlmgr repository add {{path|url}} {{tag}}"}, {"task": "Remove a specific repository:", "command": "sudo tlmgr repository remove {{path|url|tag}}"}, {"task": "Set a new list of repositories, overwriting the previous list:", "command": "sudo tlmgr repository set {{path|url|tag}}#{{tag}} {{path|url|tag}}#{{tag}} {{...}}"}, {"task": "Show the verification status of all configured repositories:", "command": "tlmgr repository status"}]}
{"command": "tlmgr restore", "tasks": [{"task": "List all available backup revisions for all packages:", "command": "tlmgr restore"}, {"task": "List all available backup revisions for a specific package:", "command": "tlmgr restore {{package}}"}, {"task": "Restore a specific revision of a specific package:", "command": "tlmgr restore {{package}} {{revision}}"}, {"task": "Restore the latest revision of all backed-up packages:", "command": "tlmgr restore --all"}, {"task": "Restore a package from a custom backup directory:", "command": "tlmgr restore {{package}} {{revision}} --backupdir {{path/to/backup_directory}}"}, {"task": "Perform a dry-run and print all taken actions without making them:", "command": "tlmgr restore --dry-run {{package}} {{revision}}"}]}
{"command": "tlmgr search", "tasks": [{"task": "Search for a package name and descriptions of all locally installed packages from a specific regular expression:", "command": "tlmgr search \"{{regular_expression}}\""}, {"task": "Search for all file names of all locally installed packages from a regular expression:", "command": "tlmgr search --file \"{{regular_expression}}\""}, {"task": "Search for all file names, package names, and descriptions of all locally installed packages from a regular expression:", "command": "tlmgr search --all \"{{regular_expression}}\""}, {"task": "Search the TeX Live database, instead of the local installation:", "command": "tlmgr search --global \"{{regular_expression}}\""}, {"task": "Restrict the matches for package names and descriptions (but not for file names) to whole words:", "command": "tlmgr search --all --word \"{{regular_expression}}\""}]}
{"command": "tlmgr shell", "tasks": [{"task": "Start an interactive shell of `tlmgr`:", "command": "tlmgr shell"}, {"task": "Run any `tlmgr` sub-command in the interactive shell:", "command": "{{sub_command}} {{arguments}}"}, {"task": "Quit the interactive shell:", "command": "quit"}, {"task": "List all TeX Live variables:", "command": "get"}, {"task": "Get the value of a TeX Live variable:", "command": "get {{variable}}"}, {"task": "Set the value of a TeX Live variable:", "command": "set {{variable}} {{value}}"}, {"task": "Restart the interactive shell:", "command": "restart"}, {"task": "Print the version of the current protocol:", "command": "protocol"}]}
{"command": "tlmgr update", "tasks": [{"task": "Update all TeX Live packages:", "command": "sudo tlmgr update --all"}, {"task": "Update tlmgr itself:", "command": "sudo tlmgr update --self"}, {"task": "Update a specific package:", "command": "sudo tlmgr update {{package}}"}, {"task": "Update all except a specific package:", "command": "sudo tlmgr update --all --exclude {{package}}"}, {"task": "Update all packages, making a backup of the current packages:", "command": "sudo tlmgr update --all --backup"}, {"task": "Update a specific package without updating its dependencies:", "command": "sudo tlmgr update --no-depends {{package}}"}, {"task": "Simulate updating all packages without making any changes:", "command": "sudo tlmgr update --all --dry-run"}]}
{"command": "tlmgr", "tasks": [{"task": "Install a package and its dependencies:", "command": "tlmgr install {{package}}"}, {"task": "Remove a package and its dependencies:", "command": "tlmgr remove {{package}}"}, {"task": "Display information about a package:", "command": "tlmgr info {{package}}"}, {"task": "Update all packages:", "command": "tlmgr update --all"}, {"task": "Show possible updates without updating anything:", "command": "tlmgr update --list"}, {"task": "Start a GUI version of tlmgr:", "command": "tlmgr gui"}, {"task": "List all TeX Live configurations:", "command": "tlmgr conf"}]}
{"command": "tmpmail", "tasks": [{"task": "Create a temporary inbox:", "command": "tmpmail --generate"}, {"task": "List messages and their numeric ID:", "command": "tmpmail"}, {"task": "Display the most recent received email:", "command": "tmpmail --recent"}, {"task": "Open a specific message:", "command": "tmpmail {{email_id}}"}, {"task": "View email as raw text without HTML tags:", "command": "tmpmail --text"}, {"task": "Open email with a specific browser (default is w3m):", "command": "tmpmail --browser {{browser}}"}]}
{"command": "tmsu", "tasks": [{"task": "Tag a specific file with multiple tags:", "command": "tmsu tag {{path/to/file.mp3}} {{music}} {{big-jazz}} {{mp3}}"}, {"task": "Tag multiple files:", "command": "tmsu tag --tags \"{{music mp3}}\" {{*.mp3}}"}, {"task": "List tags of specified file(s):", "command": "tmsu tags {{*.mp3}}"}, {"task": "List files with specified tag(s):", "command": "tmsu files {{big-jazz}} {{music}}"}, {"task": "List files with tags matching boolean expression:", "command": "tmsu files \"{{(year >= 1990 and year <= 2000)}} and {{grunge}}\""}, {"task": "Mount tmsu virtual filesystem to an existing directory:", "command": "tmsu mount {{path/to/directory}}"}]}
{"command": "tmux", "tasks": [{"task": "Start a new session:", "command": "tmux"}, {"task": "Start a new named session:", "command": "tmux new -s {{name}}"}, {"task": "List existing sessions:", "command": "tmux ls"}, {"task": "Attach to the most recently used session:", "command": "tmux attach"}, {"task": "Detach from the current session (inside a tmux session):", "command": "Ctrl-B d"}, {"task": "Create a new window (inside a tmux session):", "command": "Ctrl-B c"}, {"task": "Switch between sessions and windows (inside a tmux session):", "command": "Ctrl-B w"}, {"task": "Kill a session by name:", "command": "tmux kill-session -t {{name}}"}]}
{"command": "tmuxinator", "tasks": [{"task": "Create a new project:", "command": "tmuxinator new {{project}}"}, {"task": "Edit a project:", "command": "tmuxinator edit {{project}}"}, {"task": "List projects:", "command": "tmuxinator list"}, {"task": "Start a tmux session based on project:", "command": "tmuxinator start {{project}}"}, {"task": "Stop a project's tmux session:", "command": "tmuxinator stop {{project}}"}]}
{"command": "todo", "tasks": [{"task": "List startable tasks:", "command": "todo list --startable"}, {"task": "Add a new task to the work list:", "command": "todo new {{thing_to_do}} --list {{work}}"}, {"task": "Add a location to a task with a given ID:", "command": "todo edit --location {{location_name}} {{task_id}}"}, {"task": "Show details about a task:", "command": "todo show {{task_id}}"}, {"task": "Mark tasks with the specified IDs as completed:", "command": "todo done {{task_id1 task_id2 ...}}"}, {"task": "Delete a task:", "command": "todo delete {{task_id}}"}, {"task": "Delete done tasks and reset the IDs of the remaining tasks:", "command": "todo flush"}]}
{"command": "todoist", "tasks": [{"task": "Add a task:", "command": "todoist add \"{{task_name}}\""}, {"task": "Add a high priority task with a label, project, and due date:", "command": "todoist add \"{{task_name}}\" --priority {{1}} --label-ids \"{{label_id}}\" --project-name \"{{project_name}}\" --date \"{{tmr 9am}}\""}, {"task": "Add a high priority task with a label, project, and due date in quick mode:", "command": "todoist quick '#{{project_name}} \"{{tmr 9am}}\" p{{1}} {{task_name}} @{{label_name}}'"}, {"task": "List all tasks with a header and color:", "command": "todoist --header --color list"}, {"task": "List all high priority tasks:", "command": "todoist list --filter p{{1}}"}, {"task": "List today's tasks with high priority that have the specified label:", "command": "todoist list --filter '(@{{label_name}} | {{today}}) & p{{1}}'"}]}
{"command": "todoman", "tasks": [{"task": "View documentation for the original command:", "command": "tldr todo"}]}
{"command": "tokei", "tasks": [{"task": "Get a report on the code in a directory and all subdirectories:", "command": "tokei {{path/to/directory}}"}, {"task": "Get a report for a directory excluding `.min.js` files:", "command": "tokei {{path/to/directory}} -e {{*.min.js}}"}, {"task": "Print out statistics for individual files in a directory:", "command": "tokei {{path/to/directory}} --files"}, {"task": "Get a report for all files of type Rust and Markdown:", "command": "tokei {{path/to/directory}} -t={{Rust}},{{Markdown}}"}]}
{"command": "topgrade", "tasks": [{"task": "Run updates:", "command": "topgrade"}, {"task": "Say yes to all updates:", "command": "topgrade -y"}, {"task": "Cleanup temporary/old files:", "command": "topgrade -c"}, {"task": "Disable a certain update operation:", "command": "topgrade --disable {{operation}}"}, {"task": "Only perform a certain update operation:", "command": "topgrade --only {{operation}}"}, {"task": "Edit the config file with default editor:", "command": "topgrade --edit-config"}]}
{"command": "topydo", "tasks": [{"task": "Add a to-do to a specific project with a given context:", "command": "topydo add \"{{todo_message}} +{{project_name}} @{{context_name}}\""}, {"task": "Add a to-do with a due date of tomorrow with a priority of `A`:", "command": "topydo add \"(A) {{todo _message}} due:{{1d}}\""}, {"task": "Add a to-do with a due date of Friday:", "command": "topydo add \"{{todo_message}} due:{{fri}}\""}, {"task": "Add a non-strict repeating to-do (next due = now + rec):", "command": "topydo add \"water flowers due:{{mon}} rec:{{1w}}\""}, {"task": "Add a strict repeating to-do (next due = current due + rec):", "command": "topydo add \"{{todo_message}} due:{{2020-01-01}} rec:{{+1m}}\""}, {"task": "Revert the last `topydo` command executed:", "command": "topydo revert"}]}
{"command": "touch", "tasks": [{"task": "Create specific files:", "command": "touch {{path/to/file1 path/to/file2 ...}}"}, {"task": "Set the file [a]ccess or [m]odification times to the current one and don't [c]reate file if it doesn't exist:", "command": "touch -c -{{a|m}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Set the file [t]ime to a specific value and don't [c]reate file if it doesn't exist:", "command": "touch -c -t {{YYYYMMDDHHMM.SS}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Set the file time of a specific file to the time of anothe[r] file and don't [c]reate file if it doesn't exist:", "command": "touch -c -r {{~/.emacs}} {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "tox", "tasks": [{"task": "Run tests on all test environments:", "command": "tox"}, {"task": "Create a `tox.ini` configuration:", "command": "tox-quickstart"}, {"task": "List the available environments:", "command": "tox --listenvs-all"}, {"task": "Run tests on a specific environment (e.g. Python 3.6):", "command": "tox -e {{py36}}"}, {"task": "Force the virtual environment to be recreated:", "command": "tox --recreate -e {{py27}}"}]}
{"command": "tpp", "tasks": [{"task": "View a presentation:", "command": "tpp {{path/to/file}}"}, {"task": "Output a presentation:", "command": "tpp -t {{type}} -o {{path/to/output}} {{path/to/file}}"}]}
{"command": "tput", "tasks": [{"task": "Move the cursor to a screen location:", "command": "tput cup {{row}} {{column}}"}, {"task": "Set foreground (af) or background (ab) color:", "command": "tput {{setaf|setab}} {{ansi_color_code}}"}, {"task": "Show number of columns, lines, or colors:", "command": "tput {{cols|lines|colors}}"}, {"task": "Ring the terminal bell:", "command": "tput bel"}, {"task": "Reset all terminal attributes:", "command": "tput sgr0"}, {"task": "Enable or disable word wrap:", "command": "tput {{smam|rmam}}"}]}
{"command": "tr", "tasks": [{"task": "Replace all occurrences of a character in a file, and print the result:", "command": "tr {{find_character}} {{replace_character}} < {{path/to/file}}"}, {"task": "Replace all occurrences of a character from another command's output:", "command": "echo {{text}} | tr {{find_character}} {{replace_character}}"}, {"task": "Map each character of the first set to the corresponding character of the second set:", "command": "tr '{{abcd}}' '{{jkmn}}' < {{path/to/file}}"}, {"task": "Delete all occurrences of the specified set of characters from the input:", "command": "tr -d '{{input_characters}}' < {{path/to/file}}"}, {"task": "Compress a series of identical characters to a single character:", "command": "tr -s '{{input_characters}}' < {{path/to/file}}"}, {"task": "Translate the contents of a file to upper-case:", "command": "tr \"[:lower:]\" \"[:upper:]\" < {{path/to/file}}"}, {"task": "Strip out non-printable characters from a file:", "command": "tr -cd \"[:print:]\" < {{path/to/file}}"}]}
{"command": "traceroute", "tasks": [{"task": "Traceroute to a host:", "command": "traceroute {{example.com}}"}, {"task": "Disable IP address and host name mapping:", "command": "traceroute -n {{example.com}}"}, {"task": "Specify wait time in seconds for response:", "command": "traceroute --wait={{0.5}} {{example.com}}"}, {"task": "Specify number of queries per hop:", "command": "traceroute --queries={{5}} {{example.com}}"}, {"task": "Specify size in bytes of probing packet:", "command": "traceroute {{example.com}} {{42}}"}, {"task": "Determine the MTU to the destination:", "command": "traceroute --mtu {{example.com}}"}, {"task": "Use ICMP instead of UDP for tracerouting:", "command": "traceroute --icmp {{example.com}}"}]}
{"command": "traefik", "tasks": [{"task": "Start server with default config:", "command": "traefik"}, {"task": "Start server with a custom config file:", "command": "traefik --c {{config_file}}.toml"}, {"task": "Start server with cluster mode enabled:", "command": "traefik --cluster"}, {"task": "Start server with web UI enabled:", "command": "traefik --web"}]}
{"command": "trans", "tasks": [{"task": "Translate a word (language is detected automatically):", "command": "trans \"{{word_or_sentence_to_translate}}\""}, {"task": "Get a brief translation:", "command": "trans --brief \"{{word_or_sentence_to_translate}}\""}, {"task": "Translate a word into french:", "command": "trans :{{fr}} {{word}}"}, {"task": "Translate a word from German to English:", "command": "trans {{de}}:{{en}} {{Schmetterling}}"}, {"task": "Behave like a dictionary to get the meaning of a word:", "command": "trans -d {{word}}"}]}
{"command": "transcode", "tasks": [{"task": "Create stabilization file to be able to remove camera shakes:", "command": "transcode -J stabilize -i {{input_file}}"}, {"task": "Remove camera shakes after creating stabilization file, transform video using XviD:", "command": "transcode -J transform -i {{input_file}} -y xvid -o {{output_file}}"}, {"task": "Resize the video to 640x480 pixels and convert to MPEG4 codec using XviD:", "command": "transcode -Z 640x480 -i {{input_file}} -y xvid -o {{output_file}}"}]}
{"command": "transcrypt", "tasks": [{"task": "Initialize an unconfigured repository:", "command": "transcrypt"}, {"task": "List the currently encrypted files:", "command": "git ls-crypt"}, {"task": "Display the credentials of a configured repository:", "command": "transcrypt --display"}, {"task": "Initialize and decrypt a fresh clone of a configured repository:", "command": "transcrypt --cipher={{cipher}}"}, {"task": "Rekey to change the encryption cipher or password:", "command": "transcrypt --rekey"}]}
{"command": "transfersh", "tasks": [{"task": "Upload a file to transfer.sh:", "command": "transfersh {{path/to/file}}"}, {"task": "Upload a file showing a progress bar (requires Python package `requests_toolbelt`):", "command": "transfersh --progress {{path/to/file}}"}, {"task": "Upload a file using a different file name:", "command": "transfersh --name {{filename}} {{path/to/file}}"}, {"task": "Upload a file to a custom transfer.sh server:", "command": "transfersh --servername {{upload.server.name}} {{path/to/file}}"}, {"task": "Upload all files from a directory recursively:", "command": "transfersh --recursive {{path/to/directory/}}"}, {"task": "Upload a specific directory as an uncompressed tar:", "command": "transfersh -rt {{path/to/directory}}"}]}
{"command": "transmission-cli", "tasks": [{"task": "Download a specific torrent:", "command": "transmission-cli {{url|magnet|path/to/file}}"}, {"task": "Download a torrent to a specific directory:", "command": "transmission-cli --download-dir {{path/to/download_directory}} {{url|magnet|path/to/file}}"}, {"task": "Create a torrent file from a specific file or directory:", "command": "transmission-cli --new {{path/to/source_file_or_directory}}"}, {"task": "Set the download speed limit to 50 KB/s:", "command": "transmission-cli --downlimit {{50}} {{url|magnet|path/to/file}}"}, {"task": "Set the upload speed limit to 50 KB/s:", "command": "transmission-cli --uplimit {{50}} {{url|magnet|path/to/file}}"}, {"task": "Use a specific port for connections:", "command": "transmission-cli --port {{port_number}} {{url|magnet|path/to/file}}"}, {"task": "Force encryption for peer connections:", "command": "transmission-cli --encryption-required {{url|magnet|path/to/file}}"}, {"task": "Use a Bluetack-formatted peer blocklist:", "command": "transmission-cli --blocklist {{blocklist_url|path/to/blocklist}} {{url|magnet|path/to/file}}"}]}
{"command": "transmission-create", "tasks": [{"task": "Create a torrent with 2048 KB as the piece size:", "command": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}"}, {"task": "Create a private torrent with a 2048 KB piece size:", "command": "transmission-create -p -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}"}, {"task": "Create a torrent with a comment:", "command": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} -c {{comment}} {{path/to/file_or_directory}}"}, {"task": "Create a torrent with multiple trackers:", "command": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} --tracker {{tracker_url2}} {{path/to/file_or_directory}}"}, {"task": "Show help page:", "command": "transmission-create --help"}]}
{"command": "transmission-daemon", "tasks": [{"task": "Start a headless `transmission` session:", "command": "transmission-daemon"}, {"task": "Start and watch a specific directory for new torrents:", "command": "transmission-daemon --watch-dir {{path/to/directory}}"}, {"task": "Dump daemon settings in JSON format:", "command": "transmission-daemon --dump-settings > {{path/to/file.json}}"}, {"task": "Start with specific settings for the web interface:", "command": "transmission-daemon --auth --username {{username}} --password {{password}} --port {{9091}} --allowed {{127.0.0.1}}"}]}
{"command": "transmission-edit", "tasks": [{"task": "Add or remove a URL from a torrent's announce list:", "command": "transmission-edit --{{add|delete}} {{http://example.com}} {{path/to/file.torrent}}"}, {"task": "Update a tracker's passcode in a torrent file:", "command": "transmission-edit --replace {{old-passcode}} {{new-passcode}} {{path/to/file.torrent}}"}]}
{"command": "transmission-remote", "tasks": [{"task": "Add a torrent file or magnet link to Transmission and download to a specified directory:", "command": "transmission-remote {{hostname}} -a {{torrent|url}} -w {{/path/to/download_directory}}"}, {"task": "Change the default download directory:", "command": "transmission-remote {{hostname}} -w {{/path/to/download_directory}}"}, {"task": "List all torrents:", "command": "transmission-remote {{hostname}} --list"}, {"task": "Start torrent 1 and 2, stop torrent 3:", "command": "transmission-remote {{hostname}} -t \"{{1,2}}\" --start -t {{3}} --stop"}, {"task": "Remove torrent 1 and 2, and also delete local data for torrent 2:", "command": "transmission-remote {{hostname}} -t {{1}} --remove -t {{2}} --remove-and-delete"}, {"task": "Stop all torrents:", "command": "transmission-remote {{hostname}} -t {{all}} --stop"}, {"task": "Move torrents 1-10 and 15-20 to a new directory (which will be created if it does not exist):", "command": "transmission-remote {{hostname}} -t \"{{1-10,15-20}}\" --move {{/path/to/new_directory}}"}]}
{"command": "transmission-show", "tasks": [{"task": "Display metadata for a specific torrent:", "command": "transmission-show {{path/to/file.torrent}}"}, {"task": "Generate a magnet link for a specific torrent:", "command": "transmission-show --magnet {{path/to/file.torrent}}"}, {"task": "Query a torrent's trackers and print the current number of peers:", "command": "transmission-show --scrape {{path/to/file.torrent}}"}]}
{"command": "transmission", "tasks": [{"task": "Show the tldr page for running Transmission's daemon:", "command": "tldr transmission-daemon"}, {"task": "Show the tldr page for interacting with the daemon:", "command": "tldr transmission-remote"}, {"task": "Show the tldr page for creating torrent files:", "command": "tldr transmission-create"}, {"task": "Show the tldr page for modifying torrent files:", "command": "tldr transmission-edit"}, {"task": "Show the tldr page for getting info about torrent files:", "command": "tldr transmission-show"}, {"task": "Show the tldr page for the deprecated method for interacting with the daemon:", "command": "tldr transmission-cli"}]}
{"command": "trap", "tasks": [{"task": "List available signals to set traps for:", "command": "trap -l"}, {"task": "List active traps for the current shell:", "command": "trap -p"}, {"task": "Set a trap to execute commands when one or more signals are detected:", "command": "trap 'echo \"Caught signal {{SIGHUP}}\"' {{SIGHUP}}"}, {"task": "Remove active traps:", "command": "trap - {{SIGHUP}} {{SIGINT}}"}]}
{"command": "trash-cli", "tasks": [{"task": "Trash specific files and directories into the current trashcan:", "command": "trash-put {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Remove specific files from the current trashcan:", "command": "trash-rm {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Empty the current trashcan:", "command": "trash-empty"}, {"task": "List trashed files and directories in the current trashcan:", "command": "trash-list"}, {"task": "Restore a specific file or directory by a number from the displayed list from the current trashcan:", "command": "trash-restore"}]}
{"command": "travis", "tasks": [{"task": "Display the client version:", "command": "travis version"}, {"task": "Authenticate the CLI client against the server, using an authentication token:", "command": "travis login"}, {"task": "List repositories the user has permissions on:", "command": "travis repos"}, {"task": "Encrypt values in `.travis.yml`:", "command": "travis encrypt {{token}}"}, {"task": "Generate a `.travis.yml` file and enable the project:", "command": "travis init"}]}
{"command": "trawl", "tasks": [{"task": "Show column names:", "command": "trawl -n"}, {"task": "Filter interface names using a case-insensitive regular expression:", "command": "trawl -f wi"}, {"task": "Get a list of available interfaces:", "command": "trawl -i"}, {"task": "Include the loopback interface:", "command": "trawl -l"}]}
{"command": "tre", "tasks": [{"task": "Print directories only:", "command": "tre --directories"}, {"task": "Print JSON containing files in the tree hierarchy instead of the normal tree diagram:", "command": "tre --json"}, {"task": "Print files and directories up to the specified depth limit (where 1 means the current directory):", "command": "tre --limit {{depth}}"}, {"task": "Print all hidden files and directories using the specified colorization mode:", "command": "tre --all --color {{automatic|always|never}}"}, {"task": "Print files within the tree hierarchy, assigning a shell alias to each file that, when called, will open the associated file using the provided `command` (or in `$EDITOR` by default):", "command": "tre --editor {{command}}"}, {"task": "Print files within the tree hierarchy, excluding all paths that match the provided regular expression:", "command": "tre --exclude {{regular_expression}}"}, {"task": "Display version:", "command": "tre --version"}, {"task": "Display help:", "command": "tre --help"}]}
{"command": "tred", "tasks": [{"task": "Construct the transitive reduction graph of one or more directed graphs:", "command": "tred {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Display help:", "command": "tred -?"}]}
{"command": "tree", "tasks": [{"task": "Print files and directories up to 'num' levels of depth (where 1 means the current directory):", "command": "tree -L {{num}}"}, {"task": "Print directories only:", "command": "tree -d"}, {"task": "Print hidden files too with colorization on:", "command": "tree -a -C"}, {"task": "Print the tree without indentation lines, showing the full path instead (use `-N` to not escape non-printable characters):", "command": "tree -i -f"}, {"task": "Print the size of each file and the cumulative size of each directory, in human-readable format:", "command": "tree -s -h --du"}, {"task": "Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files:", "command": "tree -P '{{*.txt}}' --prune"}, {"task": "Print directories within the tree hierarchy, using the wildcard (glob) pattern, and pruning out directories that aren't ancestors of the wanted one:", "command": "tree -P {{directory_name}} --matchdirs --prune"}, {"task": "Print the tree ignoring the given directories:", "command": "tree -I '{{directory_name1|directory_name2}}'"}]}
{"command": "trivy", "tasks": [{"task": "Scan an image:", "command": "trivy image {{image:tag}}"}, {"task": "Scan the filesystem for vulnerabilities and misconfigurations:", "command": "trivy fs --security-checks {{vuln,config}} {{path/to/project_directory}}"}, {"task": "Scan a directory for misconfigurations:", "command": "trivy config {{path/to/iac_directory}}"}, {"task": "Generate output with a SARIF template:", "command": "trivy image --format {{template}} --template {{\"@sarif.tpl\"}} -o {{path/to/report.sarif}} {{image:tag}}"}]}
{"command": "troff", "tasks": [{"task": "Format output for a PostScript printer, saving the output to a file:", "command": "troff {{path/to/input.roff}} | grops > {{path/to/output.ps}}"}, {"task": "Format output for a PostScript printer using the [me] macro package, saving the output to a file:", "command": "troff -{{me}} {{path/to/input.roff}} | grops > {{path/to/output.ps}}"}, {"task": "Format output as [a]SCII text using the [man] macro package:", "command": "troff -T {{ascii}} -{{man}} {{path/to/input.roff}} | grotty"}, {"task": "Format output as a [pdf] file, saving the output to a file:", "command": "troff -T {{pdf}} {{path/to/input.roff}} | gropdf > {{path/to/output.pdf}}"}]}
{"command": "true", "tasks": [{"task": "Return a successful exit code:", "command": "true"}]}
{"command": "truffle", "tasks": [{"task": "Download a pre-built Truffle project (Truffle Box):", "command": "truffle unbox {{box_name}}"}, {"task": "Compile contract source files in the current directory:", "command": "truffle compile"}, {"task": "Run JavaScript and Solidity tests:", "command": "truffle test"}, {"task": "Run migrations to deploy contracts:", "command": "truffle migrate"}, {"task": "Display help for a subcommand:", "command": "truffle help {{subcommand}}"}]}
{"command": "truncate", "tasks": [{"task": "Set a size of 10 GB to an existing file, or create a new file with the specified size:", "command": "truncate --size {{10G}} {{filename}}"}, {"task": "Extend the file size by 50 MiB, fill with holes (which reads as zero bytes):", "command": "truncate --size +{{50M}} {{filename}}"}, {"task": "Shrink the file by 2 GiB, by removing data from the end of file:", "command": "truncate --size -{{2G}} {{filename}}"}, {"task": "Empty the file's content:", "command": "truncate --size 0 {{filename}}"}, {"task": "Empty the file's content, but do not create the file if it does not exist:", "command": "truncate --no-create --size 0 {{filename}}"}]}
{"command": "ts-node", "tasks": [{"task": "Execute a TypeScript file without compiling (`node` + `tsc`):", "command": "ts-node {{path/to/file.ts}}"}, {"task": "Execute a TypeScript file without loading `tsconfig.json`:", "command": "ts-node --skip-project {{path/to/file.ts}}"}, {"task": "Evaluate TypeScript code passed as a literal:", "command": "ts-node --eval '{{console.log(\"Hello World\")}}'"}, {"task": "Execute a TypeScript file in script mode:", "command": "ts-node --script-mode {{path/to/file.ts}}"}, {"task": "Transpile a TypeScript file to JavaScript without executing it:", "command": "ts-node --transpile-only {{path/to/file.ts}}"}, {"task": "Display TS-Node help:", "command": "ts-node --help"}]}
{"command": "ts", "tasks": [{"task": "Add a timestamp to the beginning of each line:", "command": "{{command}} | ts"}, {"task": "Add timestamps with microsecond precision:", "command": "{{command}} | ts \"{{%b %d %H:%M:%.S}}\""}, {"task": "Add [i]ncremental timestamps with microsecond precision, starting from zero:", "command": "{{command}} | ts -i \"{{%H:%M:%.S}}\""}, {"task": "Convert existing timestamps in a text file (eg. a log file) into [r]elative format:", "command": "cat {{path/to/file}} | ts -r"}]}
{"command": "tsc", "tasks": [{"task": "Compile a TypeScript file `foobar.ts` into a JavaScript file `foobar.js`:", "command": "tsc {{foobar.ts}}"}, {"task": "Compile a TypeScript file into JavaScript using a specific target syntax (default is `ES3`):", "command": "tsc --target {{ES5|ES2015|ES2016|ES2017|ES2018|ESNEXT}} {{foobar.ts}}"}, {"task": "Compile a TypeScript file into a JavaScript file with a custom name:", "command": "tsc --outFile {{output.js}} {{input.ts}}"}, {"task": "Compile all `.ts` files of a TypeScript project defined in a `tsconfig.json` file:", "command": "tsc --build {{tsconfig.json}}"}, {"task": "Run the compiler using command-line options and arguments fetched from a text file:", "command": "tsc @{{args.txt}}"}, {"task": "Type-check multiple JavaScript files, and output only the errors:", "command": "tsc --allowJs --checkJs --noEmit {{src/**/*.js}}"}]}
{"command": "tslint", "tasks": [{"task": "Create TSLint config:", "command": "tslint --init"}, {"task": "Lint on a given set of files:", "command": "tslint {{path/to/file1.js path/to/file2.js ...}}"}, {"task": "Fix lint issues:", "command": "tslint --fix"}, {"task": "Lint with the config file in the project root:", "command": "tslint --project {{path/to/project_root}}"}]}
{"command": "tsort", "tasks": [{"task": "Perform a topological sort consistent with a partial sort per line of input separated by blanks:", "command": "tsort {{path/to/file}}"}, {"task": "Perform a topological sort consistent on strings:", "command": "echo -e \"{{UI Backend\\nBackend Database\\nDocs UI}}\" | tsort"}]}
{"command": "tsv-filter", "tasks": [{"task": "Print the lines where a specific column is numerically equal to a given number:", "command": "tsv-filter -H --eq {{field_name}}:{{number}} {{path/to/tsv_file}}"}, {"task": "Print the lines where a specific column is [eq]ual/[n]on [e]qual/[l]ess [t]han/[l]ess than or [e]qual/[g]reater [t]han/[g]reater than or [e]qual to a given number:", "command": "tsv-filter --{{eq|ne|lt|le|gt|ge}} {{column_number}}:{{number}} {{path/to/tsv_file}}"}, {"task": "Print the lines where a specific column is [eq]ual/[n]ot [e]qual/part of/not part of a given string:", "command": "tsv-filter --str-{{eq|ne|in-fld|not-in-fld}} {{column_number}}:{{string}} {{path/to/tsv_file}}"}, {"task": "Filter for non-empty fields:", "command": "tsv-filter --not-empty {{column_number}} {{path/to/tsv_file}}"}, {"task": "Print the lines where a specific column is empty:", "command": "tsv-filter --invert --not-empty {{column_number}} {{path/to/tsv_file}}"}, {"task": "Print the lines that satisfy two conditions:", "command": "tsv-filter --eq {{column_number1}}:{{number}} --str-eq {{column_number2}}:{{string}} {{path/to/tsv_file}}"}, {"task": "Print the lines that match at least one condition:", "command": "tsv-filter --or --eq {{column_number1}}:{{number}} --str-eq {{column_number2}}:{{string}} {{path/to/tsv_file}}"}, {"task": "Count matching lines, interpreting first line as a [H]eader:", "command": "tsv-filter --count -H --eq {{field_name}}:{{number}} {{path/to/tsv_file}}"}]}
{"command": "tts", "tasks": [{"task": "Run text-to-speech with the default models, writing the output to \"tts_output.wav\":", "command": "tts --text \"{{text}}\""}, {"task": "List provided models:", "command": "tts --list_models"}, {"task": "Query info for a model by idx:", "command": "tts --model_info_by_idx {{model_type/model_query_idx}}"}, {"task": "Query info for a model by name:", "command": "tts --model_info_by_name {{model_type/language/dataset/model_name}}"}, {"task": "Run a text-to-speech model with its default vocoder model:", "command": "tts --text \"{{text}}\" --model_name {{model_type/language/dataset/model_name}}"}, {"task": "Run your own text-to-speech model (using the Griffin-Lim vocoder):", "command": "tts --text \"{{text}}\" --model_path {{path/to/model.pth}} --config_path {{path/to/config.json}} --out_path {{path/to/file.wav}}"}]}
{"command": "tty", "tasks": [{"task": "Print the file name of this terminal:", "command": "tty"}]}
{"command": "tuckr", "tasks": [{"task": "Check dotfile status:", "command": "tuckr status"}, {"task": "Add all dotfiles to system:", "command": "tuckr add \\*"}, {"task": "Add all dotfiles except specified programs:", "command": "tuckr add \\* -e {{program1}},{{program2}}"}, {"task": "Remove all dotfiles from the system:", "command": "tuckr rm \\*"}, {"task": "Add a program dotfile and run its setup script:", "command": "tuckr set {{program}}"}]}
{"command": "tuir", "tasks": [{"task": "Launch tuir:", "command": "tuir"}, {"task": "Open a subreddit:", "command": "/{{subreddit_name}}"}, {"task": "Open a link:", "command": "o"}, {"task": "Open a specific subreddit on launch:", "command": "tuir -s {{subreddit_name}}"}, {"task": "Open external links using programs defined in the mailcap config:", "command": "tuir --enable-media"}]}
{"command": "turbo", "tasks": [{"task": "Log in using the default web browser with a Vercel account:", "command": "turbo login"}, {"task": "Link the current directory to a Vercel organization and enable remote caching:", "command": "turbo link"}, {"task": "Build the current project:", "command": "turbo run build"}, {"task": "Run a task without concurrency:", "command": "turbo run {{task_name}} --concurrency={{1}}"}, {"task": "Run a task ignoring cached artifacts and forcibly re-execute all tasks:", "command": "turbo run {{task_name}} --force"}, {"task": "Run a task in parallel across packages:", "command": "turbo run {{task_name}} --parallel --no-cache"}, {"task": "Unlink the current directory from your Vercel organization and disable Remote Caching:", "command": "turbo unlink"}, {"task": "Generate a Dot graph of a specific task execution (the output file format can be controlled with the filename):", "command": "turbo run {{task_name}} --graph={{path/to/file}}.{{html|jpg|json|pdf|png|svg}}"}]}
{"command": "twine", "tasks": [{"task": "Upload to PyPI:", "command": "twine upload dist/*"}, {"task": "Upload to the Test PyPI [r]epository to verify things look right:", "command": "twine upload -r testpypi dist/*"}, {"task": "Upload to PyPI with a specified [u]sername and [p]assword:", "command": "twine upload -u {{username}} -p {{password}} dist/*"}, {"task": "Upload to an alternative repository URL:", "command": "twine upload --repository-url {{repository_url}} dist/*"}, {"task": "Check that your distribution's long description should render correctly on PyPI:", "command": "twine check dist/*"}, {"task": "Upload using a specific pypirc configuration file:", "command": "twine upload --config-file {{configuration_file}} dist/*"}, {"task": "Continue uploading files if one already exists (only valid when uploading to PyPI):", "command": "twine upload --skip-existing dist/*"}, {"task": "Upload to PyPI showing detailed information:", "command": "twine upload --verbose dist/*"}]}
{"command": "twm", "tasks": [{"task": "Connect to the default X server:", "command": "twm"}, {"task": "Connect to a specific X server:", "command": "twm -display {{display}}"}, {"task": "Only manage the default screen:", "command": "twm -s"}, {"task": "Use a specific startup file:", "command": "twm -f {{path/to/file}}"}, {"task": "Enable verbose mode and print unexpected errors in X:", "command": "twm -v"}]}
{"command": "twopi", "tasks": [{"task": "Render a `png` image with a filename based on the input filename and output format (uppercase -O):", "command": "twopi -T {{png}} -O {{path/to/input.gv}}"}, {"task": "Render a `svg` image with the specified output filename (lowercase -o):", "command": "twopi -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}"}, {"task": "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format:", "command": "twopi -T {{format}} -O {{path/to/input.gv}}"}, {"task": "Render a `gif` image using `stdin` and `stdout`:", "command": "echo \"{{digraph {this -> that} }}\" | twopi -T {{gif}} > {{path/to/image.gif}}"}, {"task": "Display help:", "command": "twopi -?"}]}
{"command": "twurl", "tasks": [{"task": "Authorize `twurl` to access a Twitter account:", "command": "twurl authorize --consumer-key {{twitter_api_key}} --consumer-secret {{twitter_api_secret}}"}, {"task": "Make a GET request to an API endpoint:", "command": "twurl -X GET {{twitter_api_endpoint}}"}, {"task": "Make a POST request to an API endpoint:", "command": "twurl -X POST -d '{{endpoint_params}}' {{twitter_api_endpoint}}"}, {"task": "Upload media to Twitter:", "command": "twurl -H \"{{twitter_upload_url}}\" -X POST \"{{twitter_upload_endpoint}}\" --file \"{{path/to/media.jpg}}\" --file-field \"media\""}, {"task": "Access a different Twitter API host:", "command": "twurl -H {{twitter_api_url}} -X GET {{twitter_api_endpoint}}"}, {"task": "Create an alias for a requested resource:", "command": "twurl alias {{alias_name}} {{resource}}"}]}
{"command": "tye", "tasks": [{"task": "Scaffold a `tye.yaml` file representing the application:", "command": "tye init"}, {"task": "Run an application locally:", "command": "tye run"}, {"task": "Build an application's containers:", "command": "tye build"}, {"task": "Push an application's containers:", "command": "tye push"}, {"task": "Deploy an application to Kubernetes:", "command": "tye deploy"}, {"task": "Remove a deployed application from Kubernetes:", "command": "tye undeploy"}]}
{"command": "type", "tasks": [{"task": "Display the type of a command:", "command": "type {{command}}"}, {"task": "Display all locations containing the specified executable:", "command": "type -a {{command}}"}, {"task": "Display the name of the disk file that would be executed:", "command": "type -p {{command}}"}]}
{"command": "typeorm", "tasks": [{"task": "Generate a new initial TypeORM project structure:", "command": "typeorm init"}, {"task": "Create an empty migration file:", "command": "typeorm migration:create --name {{migration_name}}"}, {"task": "Create a migration file with the SQL statements to update the schema:", "command": "typeorm migration:generate --name {{migration_name}}"}, {"task": "Run all pending migrations:", "command": "typeorm migration:run"}, {"task": "Create a new entity file in a specific directory:", "command": "typeorm entity:create --name {{entity}} --dir {{path/to/directory}}"}, {"task": "Display the SQL statements to be executed by `typeorm schema:sync` on the default connection:", "command": "typeorm schema:log"}, {"task": "Execute a specific SQL statement on the default connection:", "command": "typeorm query {{sql_sentence}}"}, {"task": "Display help for a subcommand:", "command": "typeorm {{subcommand}} --help"}]}
{"command": "typeset", "tasks": [{"task": "Declare a string variable with the specified value:", "command": "typeset {{variable}}=\"{{value}}\""}, {"task": "Declare an integer variable with the specified value:", "command": "typeset -i {{variable}}=\"{{value}}\""}, {"task": "Declare an array variable with the specified value:", "command": "typeset {{variable}}=({{item_a item_b item_c}})"}, {"task": "Declare an associative array variable with the specified value:", "command": "typeset -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})"}, {"task": "Declare a readonly variable with the specified value:", "command": "typeset -r {{variable}}=\"{{value}}\""}, {"task": "Declare a global variable within a function with the specified value:", "command": "typeset -g {{variable}}=\"{{value}}\""}]}
{"command": "typst", "tasks": [{"task": "List all discoverable fonts in the system and the given directory:", "command": "typst --font-path {{path/to/fonts_directory}} fonts"}, {"task": "Compile a Typst file:", "command": "typst compile {{path/to/source.typ}} {{path/to/output.pdf}}"}, {"task": "Watch a Typst file and recompile on changes:", "command": "typst watch {{path/to/source.typ}} {{path/to/output.pdf}}"}]}
{"command": "u3d", "tasks": [{"task": "Open the project in the current directory using the correct Unity version:", "command": "u3d"}, {"task": "List installed versions of Unity:", "command": "u3d list"}, {"task": "List available versions of Unity that can be downloaded:", "command": "u3d available"}, {"task": "Download and install latest stable Unity version:", "command": "u3d install latest_stable"}, {"task": "Download and install Unity version and editor [p]ackages:", "command": "u3d install {{2021.2.0f1}} -p {{Unity,iOS,Android}}"}]}
{"command": "ufraw-batch", "tasks": [{"task": "Simply convert RAW files to JPG:", "command": "ufraw-batch --out-type=jpg {{input_file(s)}}"}, {"task": "Simply convert RAW files to PNG:", "command": "ufraw-batch --out-type=png {{input_file(s)}}"}, {"task": "Extract the preview image from the raw file:", "command": "ufraw-batch --embedded-image {{input_file(s)}}"}, {"task": "Save the file with size up to the given maximums MAX1 and MAX2:", "command": "ufraw-batch --size=MAX1,MAX2 {{input_file(s)}}"}]}
{"command": "ugrep", "tasks": [{"task": "Start a query TUI to search files in the current directory recursively (CTRL-Z for help):", "command": "ugrep --query"}, {"task": "Search the current directory recursively for files containing a regex search pattern:", "command": "ugrep \"{{search_pattern}}\""}, {"task": "Search in a specific file or in all files in a specific directory, showing line numbers of matches:", "command": "ugrep --line-number \"{{search_pattern}}\" {{path/to/file_or_directory}}"}, {"task": "Search in all files in the current directory recursively and print the name of each matching file:", "command": "ugrep --files-with-matches \"{{search_pattern}}\""}, {"task": "Fuzzy search files with up to 3 extra, missing or mismatching characters in the pattern:", "command": "ugrep --fuzzy={{3}} \"{{search_pattern}}\""}, {"task": "Also search compressed files, `zip` and `tar` archives recursively:", "command": "ugrep --decompress \"{{search_pattern}}\""}, {"task": "Search only files whose filenames match a specific glob pattern:", "command": "ugrep --glob=\"{{glob_pattern}}\" \"{{search_pattern}}\""}, {"task": "Search only C++ source files (use `--file-type=list` to list all file types):", "command": "ugrep --file-type=cpp \"{{search_pattern}}\""}]}
{"command": "ulimit", "tasks": [{"task": "Get the properties of all the user limits:", "command": "ulimit -a"}, {"task": "Get hard limit for the number of simultaneously opened files:", "command": "ulimit -H -n"}, {"task": "Get soft limit for the number of simultaneously opened files:", "command": "ulimit -S -n"}, {"task": "Set max per-user process limit:", "command": "ulimit -u 30"}]}
{"command": "umask", "tasks": [{"task": "Display the current mask in octal notation:", "command": "umask"}, {"task": "Display the current mask in symbolic (human-readable) mode:", "command": "umask -S"}, {"task": "Change the mask symbolically to allow read permission for all users (the rest of the mask bits are unchanged):", "command": "umask {{a+r}}"}, {"task": "Set the mask (using octal) to restrict no permissions for the file's owner, and restrict all permissions for everyone else:", "command": "umask {{077}}"}]}
{"command": "umount", "tasks": [{"task": "Unmount a filesystem, by passing the path to the source it is mounted from:", "command": "umount {{path/to/device_file}}"}, {"task": "Unmount a filesystem, by passing the path to the target where it is mounted:", "command": "umount {{path/to/mounted_directory}}"}, {"task": "Unmount all mounted filesystems (except the `proc` filesystem):", "command": "umount -a"}]}
{"command": "unalias", "tasks": [{"task": "Remove an alias:", "command": "unalias {{alias_name}}"}, {"task": "Remove all aliases:", "command": "unalias -a"}]}
{"command": "uname", "tasks": [{"task": "Print kernel name:", "command": "uname"}, {"task": "Print system architecture and processor information:", "command": "uname --machine --processor"}, {"task": "Print kernel name, kernel release and kernel version:", "command": "uname --kernel-name --kernel-release --kernel-version"}, {"task": "Print system hostname:", "command": "uname --nodename"}, {"task": "Print all available system information:", "command": "uname --all"}]}
{"command": "unar", "tasks": [{"task": "Extract an archive to the current directory:", "command": "unar {{archive}}"}, {"task": "Extract an archive to the specified directory:", "command": "unar -o {{path/to/directory}} {{archive}}"}, {"task": "Force overwrite if files to be unpacked already exist:", "command": "unar -f {{archive}}"}, {"task": "Force rename if files to be unpacked already exist:", "command": "unar -r {{archive}}"}, {"task": "Force skip if files to be unpacked already exist:", "command": "unar -s {{archive}}"}]}
{"command": "unclutter", "tasks": [{"task": "Hide mouse cursor after 3 seconds:", "command": "unclutter -idle {{3}}"}]}
{"command": "uncrustify", "tasks": [{"task": "Format a single file:", "command": "uncrustify -f {{path/to/file.cpp}} -o {{path/to/output.cpp}}"}, {"task": "Read filenames from `stdin`, and take backups before writing output back to the original filepaths:", "command": "find . -name \"*.cpp\" | uncrustify -F - --replace"}, {"task": "Don't make backups (useful if files are under version control):", "command": "find . -name \"*.cpp\" | uncrustify -F - --no-backup"}, {"task": "Use a custom configuration file and write the result to `stdout`:", "command": "uncrustify -c {{path/to/uncrustify.cfg}} -f {{path/to/file.cpp}}"}, {"task": "Explicitly set a configuration variable's value:", "command": "uncrustify --set {{option}}={{value}}"}, {"task": "Generate a new configuration file:", "command": "uncrustify --update-config -o {{path/to/new.cfg}}"}]}
{"command": "unexpand", "tasks": [{"task": "Convert blanks in each file to tabs, writing to `stdout`:", "command": "unexpand {{path/to/file}}"}, {"task": "Convert blanks to tabs, reading from `stdout`:", "command": "unexpand"}, {"task": "Convert all blanks, instead of just initial blanks:", "command": "unexpand -a {{path/to/file}}"}, {"task": "Convert only leading sequences of blanks (overrides -a):", "command": "unexpand --first-only {{path/to/file}}"}, {"task": "Have tabs a certain number of characters apart, not 8 (enables -a):", "command": "unexpand -t {{number}} {{path/to/file}}"}]}
{"command": "unflatten", "tasks": [{"task": "Adjust one or more directed graphs to improve the layout aspect ratio:", "command": "unflatten {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}"}, {"task": "Use `unflatten` as a preprocessor for `dot` layout to improve aspect ratio:", "command": "unflatten {{path/to/input.gv}} | dot -T {{png}} {{path/to/output.png}}"}, {"task": "Display help for `unflatten`:", "command": "unflatten -?"}]}
{"command": "uniq", "tasks": [{"task": "Display each line once:", "command": "sort {{path/to/file}} | uniq"}, {"task": "Display only unique lines:", "command": "sort {{path/to/file}} | uniq -u"}, {"task": "Display only duplicate lines:", "command": "sort {{path/to/file}} | uniq -d"}, {"task": "Display number of occurrences of each line along with that line:", "command": "sort {{path/to/file}} | uniq -c"}, {"task": "Display number of occurrences of each line, sorted by the most frequent:", "command": "sort {{path/to/file}} | uniq -c | sort -nr"}]}
{"command": "unison", "tasks": [{"task": "Sync two directories (creates log first time these two directories are synchronized):", "command": "unison {{path/to/directory_1}} {{path/to/directory_2}}"}, {"task": "Automatically accept the (non-conflicting) defaults:", "command": "unison {{path/to/directory_1}} {{path/to/directory_2}} -auto"}, {"task": "Ignore some files using a pattern:", "command": "unison {{path/to/directory_1}} {{path/to/directory_2}} -ignore {{pattern}}"}, {"task": "Show documentation:", "command": "unison -doc {{topics}}"}]}
{"command": "units", "tasks": [{"task": "Run in interactive mode:", "command": "units"}, {"task": "List all units containing a specific string in interactive mode:", "command": "search {{string}}"}, {"task": "Show the conversion between two simple units:", "command": "units {{quarts}} {{tablespoons}}"}, {"task": "Convert between units with quantities:", "command": "units \"{{15 pounds}}\" {{kilograms}}"}, {"task": "Show the conversion between two compound units:", "command": "units \"{{meters / second}}\" \"{{inches / hour}}\""}, {"task": "Show the conversion between units with different dimensions:", "command": "units \"{{acres}}\" \"{{ft^2}}\""}, {"task": "Show the conversion of byte multipliers:", "command": "units \"{{15 megabytes}}\" {{bytes}}"}]}
{"command": "unlink", "tasks": [{"task": "Remove the specified file if it is the last link:", "command": "unlink {{path/to/file}}"}]}
{"command": "unlzma", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xz"}]}
{"command": "unrar", "tasks": [{"task": "Extract files with original directory structure:", "command": "unrar x {{compressed.rar}}"}, {"task": "Extract files to a specified path with the original directory structure:", "command": "unrar x {{compressed.rar}} {{path/to/extract}}"}, {"task": "Extract files into current directory, losing directory structure in the archive:", "command": "unrar e {{compressed.rar}}"}, {"task": "Test integrity of each file inside the archive file:", "command": "unrar t {{compressed.rar}}"}, {"task": "List files inside the archive file without decompressing it:", "command": "unrar l {{compressed.rar}}"}]}
{"command": "unxz", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xz"}]}
{"command": "unzip", "tasks": [{"task": "Extract all files/directories from specific archives into the current directory:", "command": "unzip {{path/to/archive1.zip path/to/archive2.zip ...}}"}, {"task": "Extract files/directories from archives to a specific path:", "command": "unzip {{path/to/archive1.zip path/to/archive2.zip ...}} -d {{path/to/output}}"}, {"task": "Extract files/directories from archives to `stdout`:", "command": "unzip -c {{path/to/archive1.zip path/to/archive2.zip ...}}"}, {"task": "Extract the contents of the file(s) to `stdout` alongside the extracted file names:", "command": "unzip -O {{gbk}} {{path/to/archive1.zip path/to/archive2.zip ...}}"}, {"task": "List the contents of a specific archive without extracting them:", "command": "unzip -l {{path/to/archive.zip}}"}, {"task": "Extract a specific file from an archive:", "command": "unzip -j {{path/to/archive.zip}} {{path/to/file_in_archive1 path/to/file_in_archive2 ...}}"}]}
{"command": "unzstd", "tasks": [{"task": "Decompress files:", "command": "unzstd {{path/to/file1.ztd path/to/file2.ztd ...}}"}, {"task": "Decompress a file into a specific output file:", "command": "unzstd {{path/to/compressed.ztd}} -o {{path/to/extracted_file}}"}, {"task": "Display information about a compressed file:", "command": "unzip --list {{path/to/file.zst}}"}]}
{"command": "updog", "tasks": [{"task": "Start a HTTP server for the current directory:", "command": "updog"}, {"task": "Start a HTTP server for a specified directory:", "command": "updog --directory {{/path/to/directory}}"}, {"task": "Start a HTTP server on a specified port:", "command": "updog --port {{port}}"}, {"task": "Start a HTTP server with a password (To log in, leave the username blank and enter the password in the password field):", "command": "updog --password {{password}}"}, {"task": "Enable transport encryption via SSL:", "command": "updog --ssl"}]}
{"command": "uptime", "tasks": [{"task": "Print current time, uptime, number of logged-in users and other information:", "command": "uptime"}, {"task": "Show only the amount of time the system has been booted for:", "command": "uptime --pretty"}, {"task": "Print the date and time the system booted up at:", "command": "uptime --since"}, {"task": "Show version information:", "command": "uptime --version"}]}
{"command": "upx", "tasks": [{"task": "Compress executable:", "command": "upx {{path/to/file}}"}, {"task": "Decompress executable:", "command": "upx -d {{path/to/file}}"}, {"task": "Detailed help:", "command": "upx --help"}]}
{"command": "users", "tasks": [{"task": "Print logged in usernames:", "command": "users"}, {"task": "Print logged in usernames according to a given file:", "command": "users {{/var/log/wmtp}}"}]}
{"command": "uudecode", "tasks": [{"task": "Decode a file that was encoded with `uuencode` and print the result to `stdout`:", "command": "uudecode {{path/to/encoded_file}}"}, {"task": "Decode a file that was encoded with `uuencode` and write the result to a file:", "command": "uudecode -o {{path/to/decoded_file}} {{path/to/encoded_file}}"}]}
{"command": "uuencode", "tasks": [{"task": "Encode a file and print the result to `stdout`:", "command": "uuencode {{path/to/input_file}} {{output_file_name_after_decoding}}"}, {"task": "Encode a file and write the result to a file:", "command": "uuencode -o {{path/to/output_file}} {{path/to/input_file}} {{output_file_name_after_decoding}}"}, {"task": "Encode a file using Base64 instead of the default uuencode encoding and write the result to a file:", "command": "uuencode -m -o {{path/to/output_file}} {{path/to/input_file}} {{output_file_name_after_decoding}}"}]}
{"command": "uvicorn", "tasks": [{"task": "Run Python web app:", "command": "uvicorn {{import.path:app_object}}"}, {"task": "Listen on port 8080 on localhost:", "command": "uvicorn --host {{localhost}} --port {{8080}} {{import.path:app_object}}"}, {"task": "Turn on live reload:", "command": "uvicorn --reload {{import.path:app_object}}"}, {"task": "Use 4 worker processes for handling requests:", "command": "uvicorn --workers {{4}} {{import.path:app_object}}"}, {"task": "Run app over HTTPS:", "command": "uvicorn --ssl-certfile {{cert.pem}} --ssl-keyfile {{key.pem}} {{import.path:app_object}}"}]}
{"command": "vagrant", "tasks": [{"task": "Create Vagrantfile in current directory with the base Vagrant box:", "command": "vagrant init"}, {"task": "Create Vagrantfile with the Ubuntu 20.04 (Focal Fossa) box from HashiCorp Atlas:", "command": "vagrant init ubuntu/focal64"}, {"task": "Start and provision the vagrant environment:", "command": "vagrant up"}, {"task": "Suspend the machine:", "command": "vagrant suspend"}, {"task": "Halt the machine:", "command": "vagrant halt"}, {"task": "Connect to machine via SSH:", "command": "vagrant ssh"}, {"task": "Output the SSH configuration file of the running Vagrant machine:", "command": "vagrant ssh-config"}, {"task": "List all local boxes:", "command": "vagrant box list"}]}
{"command": "vala", "tasks": [{"task": "Run a vala file, with gtk+:", "command": "vala {{path/to/file.vala}} --pkg {{gtk+-3.0}}"}, {"task": "Display version info:", "command": "vala --version"}, {"task": "Display helper message:", "command": "vala --help"}]}
{"command": "valac", "tasks": [{"task": "Compile a vala file, with gtk+:", "command": "valac {{path/to/file.vala}} --pkg {{gtk+-3.0}}"}, {"task": "Display version info:", "command": "valac --version"}, {"task": "Display helper message:", "command": "valac --help"}]}
{"command": "vale", "tasks": [{"task": "Check the style of a file:", "command": "vale {{path/to/file}}"}, {"task": "Check the style of a file with a specified configuration:", "command": "vale --config='{{path/to/.vale.ini}}' {{path/to/file}}"}, {"task": "Output the results in JSON format:", "command": "vale --output=JSON {{path/to/file}}"}, {"task": "Check style issues at the specific severity and higher:", "command": "vale --minAlertLevel={{suggestion|warning|error}} {{path/to/file}}"}, {"task": "Check the style from `stdin`, specifying markup format:", "command": "cat {{file.md}} | vale --ext=.md"}, {"task": "List the current configuration:", "command": "vale ls-config"}]}
{"command": "valgrind", "tasks": [{"task": "Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`:", "command": "valgrind {{program}}"}, {"task": "Use Memcheck to report all possible memory leaks of `program` in full detail:", "command": "valgrind --leak-check=full --show-leak-kinds=all {{program}}"}, {"task": "Use the Cachegrind tool to profile and log CPU cache operations of `program`:", "command": "valgrind --tool=cachegrind {{program}}"}, {"task": "Use the Massif tool to profile and log heap memory and stack usage of `program`:", "command": "valgrind --tool=massif --stacks=yes {{program}}"}]}
{"command": "var-dump-server", "tasks": [{"task": "Start the server:", "command": "var-dump-server"}, {"task": "Dump the data in an HTML file:", "command": "var-dump-server --format=html > {{path/to/file.html}}"}, {"task": "Make the server listen on a specific address and port:", "command": "var-dump-server --host {{127.0.0.1:9912}}"}]}
{"command": "varnishlog", "tasks": [{"task": "Display logs in real time:", "command": "varnishlog"}, {"task": "Only display requests to a specific domain:", "command": "varnishlog -q 'ReqHeader eq \"Host: {{example.com}}\"'"}, {"task": "Only display POST requests:", "command": "varnishlog -q 'ReqMethod eq \"{{POST}}\"'"}, {"task": "Only display requests to a specific path:", "command": "varnishlog -q 'ReqURL eq \"{{/path}}\"'"}, {"task": "Only display requests to paths matching a regular expression:", "command": "varnishlog -q 'ReqURL ~ \"{{regex}}\"'"}]}
{"command": "vault", "tasks": [{"task": "Connect to a Vault server and initialize a new encrypted data store:", "command": "vault init"}, {"task": "Unseal (unlock) the vault, by providing one of the key shares needed to access the encrypted data store:", "command": "vault unseal {{key-share-x}}"}, {"task": "Authenticate the CLI client against the Vault server, using an authentication token:", "command": "vault auth {{authentication_token}}"}, {"task": "Store a new secret in the vault, using the generic back-end called \"secret\":", "command": "vault write secret/{{hello}} value={{world}}"}, {"task": "Read a value from the vault, using the generic back-end called \"secret\":", "command": "vault read secret/{{hello}}"}, {"task": "Read a specific field from the value:", "command": "vault read -field={{field_name}} secret/{{hello}}"}, {"task": "Seal (lock) the Vault server, by removing the encryption key of the data store from memory:", "command": "vault seal"}]}
{"command": "VBoxManage", "tasks": [{"task": "List all VirtualBox virtual machines:", "command": "VBoxManage list vms"}, {"task": "Show information about a particular virtual machine:", "command": "VBoxManage showvminfo {{name|uuid}}"}, {"task": "Start a virtual machine:", "command": "VBoxManage startvm {{name|uuid}}"}, {"task": "Start a virtual machine in headless mode:", "command": "VBoxManage startvm {{name|uuid}} --type headless"}, {"task": "Shutdown the virtual machine and save its current state:", "command": "VBoxManage controlvm {{name|uuid}} savestate"}, {"task": "Shutdown down the virtual machine without saving its state:", "command": "VBoxManage controlvm {{name|uuid}} poweroff"}, {"task": "Update VBox extension packs:", "command": "VBoxManage extpack install --replace {{VboxExtensionPackFileName}}"}]}
{"command": "vcsh", "tasks": [{"task": "Initialize an (empty) repository:", "command": "vcsh init {{repository_name}}"}, {"task": "Clone a repository into a custom directory name:", "command": "vcsh clone {{git_url}} {{repository_name}}"}, {"task": "List all managed repositories:", "command": "vcsh list"}, {"task": "Execute a Git command on a managed repository:", "command": "vcsh {{repository_name}} {{git_command}}"}, {"task": "Push/pull all managed repositories to/from remotes:", "command": "vcsh {{push|pull}}"}, {"task": "Write a custom `.gitignore` file for a managed repository:", "command": "vcsh write-gitignore {{repository_name}}"}]}
{"command": "vdir", "tasks": [{"task": "List files and directories in the current directory, one per line, with details:", "command": "vdir"}, {"task": "List with sizes displayed in human-readable units (KB, MB, GB):", "command": "vdir -h"}, {"task": "List including hidden files (starting with a dot):", "command": "vdir -a"}, {"task": "List files and directories sorting entries by size (largest first):", "command": "vdir -S"}, {"task": "List files and directories sorting entries by modification time (newest first):", "command": "vdir -t"}, {"task": "List grouping directories first:", "command": "vdir --group-directories-first"}, {"task": "Recursively list all files and directories in a specific directory:", "command": "vdir --recursive {{path/to/directory}}"}]}
{"command": "vectorize-pixelart", "tasks": [{"task": "Convert a PNG to a vector image format:", "command": "vectorize-pixelart {{path/to/input.png}} {{path/to/output.svg|.eps}}"}]}
{"command": "vegeta", "tasks": [{"task": "Launch an attack lasting 30 seconds:", "command": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}}"}, {"task": "Launch an attack on a server with a self-signed HTTPS certificate:", "command": "echo \"{{GET https://example.com}}\" | vegeta attack -insecure -duration={{30s}}"}, {"task": "Launch an attack with a rate of 10 requests per second:", "command": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} -rate={{10}}"}, {"task": "Launch an attack and display a report:", "command": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} | vegeta report"}, {"task": "Launch an attack and plot the results on a graph (latency over time):", "command": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} | vegeta plot > {{path/to/results.html}}"}, {"task": "Launch an attack against multiple URLs from a file:", "command": "vegeta attack -duration={{30s}} -targets={{requests.txt}} | vegeta report"}]}
{"command": "vela", "tasks": [{"task": "Trigger a pipeline to run from a Git branch, commit or tag:", "command": "vela add deployment --org {{organization}} --repo {{repository_name}} --target {{environment}} --ref {{branch|commit|refs/tags/git_tag}} --description \"{{deploy_description}}\""}, {"task": "List deployments for a repository:", "command": "vela get deployment --org {{organization}} --repo {{repository_name}}"}, {"task": "Inspect a specific deployment:", "command": "vela view deployment --org {{organization}} --repo {{repository_name}} --deployment {{deployment_number}}"}]}
{"command": "velero", "tasks": [{"task": "Create a backup containing all resources:", "command": "velero backup create {{backup_name}}"}, {"task": "List all backups:", "command": "velero backup get"}, {"task": "Delete a backup:", "command": "velero backup delete {{backup_name}}"}, {"task": "Create a weekly backup, each living for 90 days (2160 hours):", "command": "velero schedule create {{schedule_name}} --schedules=\"{{@every 7d}}\" --ttl {{2160h0m0s}}"}, {"task": "Create a restore from the latest successful backup triggered by specific schedule:", "command": "velero restore create --from-schedule {{schedule_name}}"}]}
{"command": "venv", "tasks": [{"task": "Create a python virtual environment:", "command": " python -m venv {{path/to/virtual_environment}}"}, {"task": "Activate the virtual environment (Linux and Mac OS):", "command": "source {{path/to/virtual_environment}}/bin/activate"}, {"task": "Activate the virtual environment (Windows):", "command": "{{path\\to\\virtual_environment}}\\Scripts\\activate.bat"}, {"task": "Deactivate the virtual environment:", "command": "deactivate"}]}
{"command": "vercel", "tasks": [{"task": "Deploy the current directory:", "command": "vercel"}, {"task": "Deploy the current directory to production:", "command": "vercel --prod"}, {"task": "Deploy a directory:", "command": "vercel {{path/to/project}}"}, {"task": "Initialize an example project:", "command": "vercel init"}, {"task": "Deploy with Environment Variables:", "command": "vercel --env {{ENV}}={{var}}"}, {"task": "Build with Environment Variables:", "command": "vercel --build-env {{ENV}}={{var}}"}, {"task": "Set default regions to enable the deployment on:", "command": "vercel --regions {{region_id}}"}, {"task": "Remove a deployment:", "command": "vercel remove {{project_name}}"}]}
{"command": "verilator", "tasks": [{"task": "Build a specific C project in the current directory:", "command": "verilator --binary --build-jobs 0 -Wall {{path/to/source.v}}"}, {"task": "Create a C++ executable in a specific folder:", "command": "verilator --cc --exe --build --build-jobs 0 -Wall {{path/to/source.cpp}} {{path/to/output.v}}"}, {"task": "Perform linting over a code in the current directory:", "command": "verilator --lint-only -Wall"}, {"task": "Create XML output about the design (files, modules, instance hierarchy, logic and data types) to feed into other tools:", "command": "verilator --xml-output -Wall {{path/to/output.xml}}"}]}
{"command": "vgmstream_cli", "tasks": [{"task": "Decode an `adc` file to `wav`. (Default output name is `input.wav`):", "command": "vgmstream_cli {{path/to/input.adc}} -o {{path/to/output.wav}}"}, {"task": "Print metadata without decoding the audio:", "command": "vgmstream_cli {{path/to/input.adc}} -m"}, {"task": "Decode an audio file without loops:", "command": "vgmstream_cli {{path/to/input.adc}} -o {{path/to/output.wav}} -i"}, {"task": "Decode with three loops, then add a 3s delay followed by a 5s fadeout:", "command": "vgmstream_cli {{path/to/input.adc}} -o {{path/to/output.wav}} -l {{3.0}} -f {{5.0}} -d {{3.0}}"}, {"task": "Convert multiple files to `bgm_(original name).wav` (Default `-o` pattern is `?f.wav`):", "command": "vgmstream_cli -o {{path/to/bgm_?f.wav}} {{path/to/file1.adc}} {{path/to/file2.adc}}"}, {"task": "Play the file looping endlessly (`channels` and `rate` must match metadata):", "command": "vgmstream_cli {{path/to/input.adc}} -pec | aplay --format cd --channels {{1}} --rate {{44100}}"}]}
{"command": "vgrep", "tasks": [{"task": "Recursively search the current directory for a pattern and cache it:", "command": "vgrep {{search_pattern}}"}, {"task": "Display the contents of the cache:", "command": "vgrep"}, {"task": "Open the \"4th\" match from the cache in the default editor:", "command": "vgrep --show {{4}}"}, {"task": "Display a context of \"3\" lines for each match in the cache:", "command": "vgrep --show=context{{3}}"}, {"task": "Display the number of matches for each directory in the tree:", "command": "vgrep --show=tree"}, {"task": "Display the number of matches for each file in the tree:", "command": "vgrep --show=files"}, {"task": "Start an interactive shell with cached matches:", "command": "vgrep --interactive"}]}
{"command": "vhs", "tasks": [{"task": "Create a tape file (add commands to the tape file using an editor):", "command": "vhs new {{path/to/file.tape}}"}, {"task": "Record inputs to a tape file (once done, exit the shell to create the tape):", "command": "vhs record > {{path/to/file.tape}}"}, {"task": "Record inputs to a tape file using a specific shell:", "command": "vhs record --shell {{shell}} > {{path/to/file.tape}}"}, {"task": "Validate the syntax of a tape file:", "command": "vhs validate {{path/to/file.tape}}"}, {"task": "Create a gif from a tape file:", "command": "vhs < {{path/to/file.tape}}"}, {"task": "Publish a gif to <https://vhs.charm.sh> and get a shareable URL:", "command": "vhs publish {{path/to/file.gif}}"}]}
{"command": "vi", "tasks": [{"task": "View documentation for the original command:", "command": "tldr vim"}]}
{"command": "view", "tasks": [{"task": "Open a file:", "command": "view {{path/to/file}}"}]}
{"command": "vifm", "tasks": [{"task": "Open the current directory:", "command": "vifm ."}, {"task": "Open specified directories on left or right plane:", "command": "vifm {{path/to/directory1 path/to/directory2 ...}}"}]}
{"command": "vim", "tasks": [{"task": "Open a file:", "command": "vim {{path/to/file}}"}, {"task": "Open a file at a specified line number:", "command": "vim +{{line_number}} {{path/to/file}}"}, {"task": "View Vim's help manual:", "command": ":help<Enter>"}, {"task": "Save and quit the current buffer:", "command": ":wq<Enter>"}, {"task": "Enter normal mode and undo the last operation:", "command": "<ESC>u"}, {"task": "Search for a pattern in the file (press `n`/`N` to go to next/previous match):", "command": "/{{search_pattern}}<Enter>"}, {"task": "Perform a regular expression substitution in the whole file:", "command": ":%s/{{regular_expression}}/{{replacement}}/g<Enter>"}, {"task": "Display the line numbers:", "command": ":set nu<Enter>"}]}
{"command": "vimdiff", "tasks": [{"task": "Open two files and show the differences:", "command": "vimdiff {{file1}} {{file2}}"}, {"task": "Move the cursor to the window on the left|right:", "command": "Ctrl + w {{h|l}}"}, {"task": "Jump to the previous difference:", "command": "[c"}, {"task": "Jump to the next difference:", "command": "]c"}, {"task": "Copy the highlighted difference from the other window to the current window:", "command": "do"}, {"task": "Copy the highlighted difference from the current window to the other window:", "command": "dp"}, {"task": "Update all highlights and folds:", "command": ":diffupdate"}, {"task": "Toggle the highlighted code fold:", "command": "za"}]}
{"command": "vimtutor", "tasks": [{"task": "Launch the vim tutor using the given language (en, fr, de, ...):", "command": "vimtutor {{language}}"}, {"task": "Exit the tutor:", "command": "<Esc> :q <Enter>"}]}
{"command": "virsh-connect", "tasks": [{"task": "Connect to the default hypervisor:", "command": "virsh connect"}, {"task": "Connect as root to the local QEMU/KVM hypervisor:", "command": "virsh connect qemu:///system"}, {"task": "Launch a new instance of the hypervisor and connect to it as the local user:", "command": "virsh connect qemu:///session"}, {"task": "Connect as root to a remote hypervisor using ssh:", "command": "virsh connect qemu+ssh://{{user_name@host_name}}/system"}]}
{"command": "virsh-domblklist", "tasks": [{"task": "List the target name and source path of the block devices:", "command": "virsh domblklist --domain {{vm_name}}"}, {"task": "List the disk type and device value as well as the target name and source path:", "command": "virsh domblklist --domain {{vm_name}} --details"}]}
{"command": "virsh-help", "tasks": [{"task": "List the `virsh` commands grouped into related categories:", "command": "virsh help"}, {"task": "List the command categories:", "command": "virsh help | grep \"keyword\""}, {"task": "List the commands in a category:", "command": "virsh help {{category_keyword}}"}, {"task": "Show help for a command:", "command": "virsh help {{command}}"}]}
{"command": "virsh-list", "tasks": [{"task": "List information about running virtual machines:", "command": "virsh list"}, {"task": "List information about virtual machines regardless of state:", "command": "virsh list --all"}, {"task": "List information about virtual machines with autostart either enabled or disabled:", "command": "virsh list --all --{{autostart|no-autostart}}"}, {"task": "List information about virtual machines either with or without snapshots:", "command": "virsh list --all --{{with-snapshot|without-snapshot}}"}]}
{"command": "virsh pool-autostart", "tasks": [{"task": "Enable autostart for the storage pool specified by name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-autostart --pool {{name|uuid}}"}, {"task": "Disable autostart for the storage pool specified by name or UUID:", "command": "virsh pool-autostart --pool {{name|uuid}} --disable"}]}
{"command": "virsh pool-build", "tasks": [{"task": "Build the storage pool specified by name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-build --pool {{name|uuid}}"}]}
{"command": "virsh pool-define-as", "tasks": [{"task": "Create the configuration file for a storage pool called pool_name using `/var/vms` as the underlying storage system:", "command": "virsh pool-define-as --name {{pool_name}} --type {{dir}} --target {{/var/vms}}"}]}
{"command": "virsh pool-delete", "tasks": [{"task": "Delete the underlying storage system for the storage pool specified by name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-delete --pool {{name|uuid}}"}]}
{"command": "virsh pool-destroy", "tasks": [{"task": "Stop a storage pool specified by name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-destroy --pool {{name|uuid}}"}]}
{"command": "virsh pool-info", "tasks": [{"task": "List the name, UUID, state, persistence type, autostart status, capacity, space allocated, and space available for the storage pool specified by name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-info --pool {{name|uuid}}"}]}
{"command": "virsh pool-list", "tasks": [{"task": "List the name, state, and whether autostart is enabled or disabled for active storage pools:", "command": "virsh pool-list"}, {"task": "List information for active and inactive or just inactive storage pools:", "command": "virsh pool-list --{{all|inactive}}"}, {"task": "List extended information about persistence, capacity, allocation, and available space for active storage pools:", "command": "virsh pool-list --details"}, {"task": "List information for active storage pools with either autostart enabled or disabled:", "command": "virsh pool-list --{{autostart|no-autostart}}"}, {"task": "List information for active storage pools that are either persistent or transient:", "command": "virsh pool-list --{{persistent|transient}}"}, {"task": "List the name and UUID of active storage pools:", "command": "virsh pool-list --name --uuid"}]}
{"command": "virsh pool-start", "tasks": [{"task": "Start the storage pool specified by name or UUID (determine using `virsh pool-list`) and create the underlying storage system if it doesn't exist:", "command": "virsh pool-start --pool {{name|uuid}} --build"}]}
{"command": "virsh pool-undefine", "tasks": [{"task": "Delete the configuration for the storage pool specified name or UUID (determine using `virsh pool-list`):", "command": "virsh pool-undefine --pool {{name|uuid}}"}]}
{"command": "virsh-undefine", "tasks": [{"task": "Delete only the virtual machine configuration file:", "command": "virsh undefine --domain {{vm_name}}"}, {"task": "Delete the configuration file and all associated storage volumes:", "command": "virsh undefine --domain {{vm_name}} --remove-all-storage"}, {"task": "Delete the configuration file and the specified storage volumes using the target name or the source name (as obtained from the `virsh domblklist` command):", "command": "virsh undefine --domain {{vm_name}} --storage {{sda,path/to/source}}"}]}
{"command": "virsh", "tasks": [{"task": "Connect to a hypervisor session:", "command": "virsh connect {{qemu:///system}}"}, {"task": "List all domains:", "command": "virsh list --all"}, {"task": "Dump guest configuration file:", "command": "virsh dumpxml {{guest_id}} > {{path/to/guest.xml}}"}, {"task": "Create a guest from a configuration file:", "command": "virsh create {{path/to/config_file.xml}}"}, {"task": "Edit a guest's configuration file (editor can be changed with $EDITOR):", "command": "virsh edit {{guest_id}}"}, {"task": "Start/reboot/shutdown/suspend/resume a guest:", "command": "virsh {{command}} {{guest_id}}"}, {"task": "Save the current state of a guest to a file:", "command": "virsh save {{guest_id}} {{filename}}"}, {"task": "Delete a running guest:", "command": "virsh destroy {{guest_id}} && virsh undefine {{guest_id}}"}]}
{"command": "virt-clone", "tasks": [{"task": "Clone a virtual machine and automatically generate a new name, storage path, and MAC address:", "command": "virt-clone --original {{vm_name}} --auto-clone"}, {"task": "Clone a virtual machine and specify the new name, storage path, and MAC address:", "command": "virt-clone --original {{vm_name}} --name {{new_vm_name}} --file {{path/to/new_storage}} --mac {{ff:ff:ff:ff:ff:ff|RANDOM}}"}]}
{"command": "virt-install", "tasks": [{"task": "Create a virtual machine with 1 GB RAM and 12 GB storage and start a Debian installation:", "command": "virt-install --name {{vm_name}} --memory {{1024}} --disk path={{path/to/image.qcow2}},size={{12}} --cdrom {{path/to/debian.iso}}"}, {"task": "Create a x86-64, KVM-accelerated, UEFI-based virtual machine with the Q35 chipset, 4 GiB RAM, 16 GiB RAW storage, and start a Fedora installation:", "command": "virt-install --name {{vm_name}} --arch {{x86_64}} --virt-type {{kvm}} --machine {{q35}} --boot {{uefi}} --memory {{4096}} --disk path={{path/to/image.raw}},size={{16}} --cdrom {{path/to/fedora.iso}}"}, {"task": "Create a diskless live virtual machine without an emulated sound device or a USB controller. Don't start an installation and don't autoconnect to console but attach a cdrom to it (might be useful for when using a live CD like tails):", "command": "virt-install --name {{vm_name}} --memory {{512}} --disk {{none}} --controller {{type=usb,model=none}} --sound {{none}} --autoconsole {{none}} --install {{no_install=yes}} --cdrom {{path/to/tails.iso}}"}, {"task": "Create a virtual machine with 16 GiB RAM, 250 GiB storage, 8 cores with hyperthreading, a specific CPU topology, and a CPU model that shares most features with the host CPU:", "command": "virt-install --name {{vm_name}} --cpu {{host-model}},topology.sockets={{1}},topology.cores={{4}},topology.threads={{2}} --memory {{16384}} --disk path={{path/to/image.qcow2}},size={{250}} --cdrom {{path/to/debian.iso}}"}, {"task": "Create a virtual machine and kickstart an automated deployment based on Fedora 35 using only remote resources (no ISO required):", "command": "virt-install --name {{vm_name}} --memory {{2048}} --disk path={{path/to/image.qcow2}},size={{20}} --location={{https://download.fedoraproject.org/pub/fedora/linux/releases/35/Everything/x86_64/os/}} --extra-args={{\"inst.ks=https://path/to/valid/kickstart.org\"}}"}]}
{"command": "virt-sparsify", "tasks": [{"task": "Create a sparsified compressed image without snapshots from an unsparsified one:", "command": "virt-sparsify --compress {{path/to/image.qcow2}} {{path/to/image_new.qcow2}}"}, {"task": "Sparsify an image in-place:", "command": "virt-sparsify --in-place {{path/to/image.img}}"}]}
{"command": "virt-sysprep", "tasks": [{"task": "List all supported operations (enabled operations are indicated with asterisks):", "command": "virt-sysprep --list-operations"}, {"task": "Run all enabled operations but don't actually apply the changes:", "command": "virt-sysprep --domain {{vm_name}} --dry-run"}, {"task": "Run only the specified operations:", "command": "virt-sysprep --domain {{vm_name}} --operations {{operation1,operation2,...}}"}, {"task": "Generate a new `/etc/machine-id` file and enable customizations to be able to change the host name to avoid network conflicts:", "command": "virt-sysprep --domain {{vm_name}} --enable {{customizations}} --hostname {{host_name}} --operation {{machine-id}}"}]}
{"command": "virtualenv", "tasks": [{"task": "Create a new environment:", "command": "virtualenv {{path/to/venv}}"}, {"task": "Customize the prompt prefix:", "command": "virtualenv --prompt={{prompt_prefix}} {{path/to/venv}}"}, {"task": "Use a different version of Python with virtualenv:", "command": "virtualenv --python={{path/to/pythonbin}} {{path/to/venv}}"}, {"task": "Start (select) the environment:", "command": "source {{path/to/venv}}/bin/activate"}, {"task": "Stop the environment:", "command": "deactivate"}]}
{"command": "virtualenvwrapper", "tasks": [{"task": "Create a new Python `virtualenv` in `$WORKON_HOME`:", "command": "mkvirtualenv {{virtualenv_name}}"}, {"task": "Create a `virtualenv` for a specific Python version:", "command": "mkvirtualenv --python {{/usr/local/bin/python3.8}} {{virtualenv_name}}"}, {"task": "Activate or use a different `virtualenv`:", "command": "workon {{virtualenv_name}}"}, {"task": "Stop the `virtualenv`:", "command": "deactivate"}, {"task": "List all virtual environments:", "command": "lsvirtualenv"}, {"task": "Remove a `virtualenv`:", "command": "rmvirtualenv {{virtualenv_name}}"}, {"task": "Get summary of all virtualenvwrapper commands:", "command": "virtualenvwrapper"}]}
{"command": "visudo", "tasks": [{"task": "Edit the sudoers file:", "command": "sudo visudo"}, {"task": "Check the sudoers file for errors:", "command": "sudo visudo -c"}, {"task": "Edit the sudoers file using a specific editor:", "command": "sudo EDITOR={{editor}} visudo"}, {"task": "Display version information:", "command": "visudo --version"}]}
{"command": "Vite", "tasks": [{"task": "Setup using `npm` 6.x:", "command": "npm create vite@latest my-react-app --template react-ts"}, {"task": "Setup using `npm` 7+, extra double-dash is needed:", "command": "npm create vite@latest my-react-app -- --template react-ts"}, {"task": "Setup using `yarn`:", "command": "yarn create vite my-react-app --template react-ts"}, {"task": "Setup using `pnpm`:", "command": "pnpm create vite my-react-app --template react-ts"}]}
{"command": "viu", "tasks": [{"task": "Render an image or animated GIF:", "command": "viu {{path/to/file}}"}, {"task": "Render an image or GIF from the internet using `curl`:", "command": "curl -s {{https://example.com/image.png}} | viu -"}, {"task": "Render an image with a transparent background:", "command": "viu -t {{path/to/file}}"}, {"task": "Render an image with a specific width and height in pixels:", "command": "viu -w {{width}} -h {{height}} {{path/to/file}}"}, {"task": "Render an image or GIF and display its file name:", "command": "viu -n {{path/to/file}}"}]}
{"command": "vladimyr", "tasks": [{"task": "Start Dario's interactive CLI:", "command": "vladimyr"}]}
{"command": "vlc", "tasks": [{"task": "Play a file:", "command": "vlc {{path/to/file}}"}, {"task": "Play in fullscreen:", "command": "vlc --fullscreen {{path/to/file}}"}, {"task": "Play muted:", "command": "vlc --no-audio {{path/to/file}}"}, {"task": "Play repeatedly:", "command": "vlc --loop {{path/to/file}}"}, {"task": "Play video from a URL:", "command": "vlc {{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"}]}
{"command": "volta", "tasks": [{"task": "List all installed tools:", "command": "volta list"}, {"task": "Install the latest version of a tool:", "command": "volta install {{node|npm|yarn|package_name}}"}, {"task": "Install a specific version of a tool:", "command": "volta install {{node|npm|yarn}}@version"}, {"task": "Choose a tool version for a project (will store it in `package.json`):", "command": "volta pin {{node|npm|yarn}}@version"}, {"task": "Display help:", "command": "volta help"}, {"task": "Display help for a subcommand:", "command": "volta help {{fetch|install|uninstall|pin|list|completions|which|setup|run|help}}"}]}
{"command": "vsce", "tasks": [{"task": "List all the extensions created by a publisher:", "command": "vsce list {{publisher}}"}, {"task": "Publish an extension as major, minor or patch version:", "command": "vsce publish {{major|minor|patch}}"}, {"task": "Unpublish an extension:", "command": "vsce unpublish {{extension_id}}"}, {"task": "Package the current working directory as a `.vsix` file:", "command": "vsce package"}, {"task": "Show the metadata associated with an extension:", "command": "vsce show {{extension_id}}"}]}
{"command": "vt", "tasks": [{"task": "Scan a specific file for viruses:", "command": "vt scan file {{path/to/file}}"}, {"task": "Scan a URL for viruses:", "command": "vt scan url {{url}}"}, {"task": "Display information from a specific analysis:", "command": "vt analysis {{file_id|analysis_id}}"}, {"task": "Download files in encrypted `.zip` format (requires premium account):", "command": "vt download {{file_id}} --output {{path/to/directory}} --zip --zip-password {{password}}"}, {"task": "Initialize or re-initialize `vt` to enter API key interactively:", "command": "vt init"}, {"task": "Display information about a domain:", "command": "vt domain {{url}}"}, {"task": "Display information for a specific URL:", "command": "vt url {{url}}"}, {"task": "Display information for a specific IP address:", "command": "vt domain {{ip_address}}"}]}
{"command": "vue build", "tasks": [{"task": "Build a `.js` or `.vue` file in production mode with zero config:", "command": "vue build {{filename}}"}]}
{"command": "vue init", "tasks": [{"task": "Create a new project using one of the default templates:", "command": "vue init {{webpack|webpack-simple|browserify|browserify-simple|simple}} {{project_name}}"}, {"task": "Create a new project using a local template:", "command": "vue init {{path/to/template_directory}} {{project_name}}"}, {"task": "Create a new project using a template from GitHub:", "command": "vue init {{username}}/{{repo}} {{project_name}}"}]}
{"command": "vue serve", "tasks": [{"task": "Serve a `.js` or `.vue` file in development mode with zero config:", "command": "vue serve {{filename}}"}]}
{"command": "vue", "tasks": [{"task": "Create a new Vue project interactively:", "command": "vue create {{project_name}}"}, {"task": "Create a new project with web UI:", "command": "vue ui"}]}
{"command": "vzdump", "tasks": [{"task": "Dump a guest virtual machine into the default dump directory (usually `/var/lib/vz/dump/`), excluding snapshots:", "command": "vzdump {{vm_id}}"}, {"task": "Back up the guest virtual machines with the IDs 101, 102, and 103:", "command": "vzdump {{101 102 103}}"}, {"task": "Dump a guest virtual machine using a specific mode:", "command": "vzdump {{vm_id}} --mode {{suspend|snapshot}}"}, {"task": "Back up all guest systems and send an notification email to the root and admin users:", "command": "vzdump --all --mode {{suspend}} --mailto {{root}} --mailto {{admin}}"}, {"task": "Use snapshot mode (no downtime required) and a non-default dump directory:", "command": "vzdump {{vm_id}} --dumpdir {{path/to/directory}} --mode {{snapshot}}"}, {"task": "Back up all guest virtual machines excluding the IDs 101 and 102:", "command": "vzdump --mode {{suspend}} --exclude {{101, 102}}"}]}
{"command": "w", "tasks": [{"task": "Show logged-in users info:", "command": "w"}, {"task": "Show logged-in users info without a header:", "command": "w -h"}]}
{"command": "w3m", "tasks": [{"task": "Open a URL:", "command": "w3m {{http://example.com}}"}, {"task": "Open a URL in monochrome mode:", "command": "w3m {{http://example.com}} -M"}, {"task": "Open a URL without mouse support:", "command": "w3m {{http://example.com}} --no-mouse"}, {"task": "Open a new browser tab:", "command": "Shift + T"}, {"task": "Display your browser history:", "command": "Ctrl + H"}, {"task": "Quit w3m:", "command": "'q' then 'y'"}]}
{"command": "waifu2x-ncnn-vulkan", "tasks": [{"task": "Upscale an image:", "command": "waifu2x-ncnn-vulkan -i {{path/to/input_file}} -o {{path/to/output_file}}"}, {"task": "Upscale an image by a custom scale factor and denoise it:", "command": "waifu2x-ncnn-vulkan -i {{path/to/input_file}} -o {{path/to/output_file}} -s {{1|2|4|8|16|32}} -n {{-1|0|1|2|3}}"}, {"task": "Save the upscaled image in a specific format:", "command": "waifu2x-ncnn-vulkan -i {{path/to/input_file}} -o {{path/to/output_file}} -f {{jpg|png|webp}}"}]}
{"command": "wait", "tasks": [{"task": "Wait for a process to finish given its process ID (PID) and return its exit status:", "command": "wait {{pid}}"}, {"task": "Wait for all processes known to the invoking shell to finish:", "command": "wait"}]}
{"command": "waitress-serve", "tasks": [{"task": "Run a Python web app:", "command": "waitress-serve {{import.path:wsgi_func}}"}, {"task": "Listen on port 8080 on localhost:", "command": "waitress-serve --listen={{localhost}}:{{8080}} {{import.path:wsgi_func}}"}, {"task": "Start waitress on a Unix socket:", "command": "waitress-serve --unix-socket={{path/to/socket}} {{import.path:wsgi_func}}"}, {"task": "Use 4 threads to process requests:", "command": "waitress-serve --threads={{4}} {{import.path:wsgifunc}}"}, {"task": "Call a factory method that returns a WSGI object:", "command": "waitress-serve --call {{import.path.wsgi_factory}}"}, {"task": "Set the URL scheme to HTTPS:", "command": "waitress-serve --url-scheme={{https}} {{import.path:wsgi_func}}"}]}
{"command": "wal", "tasks": [{"task": "Preview color scheme:", "command": "wal --preview {{image.png}}"}, {"task": "Create color scheme:", "command": "wal -i {{image.png}}"}, {"task": "Create a light color scheme:", "command": "wal -i {{image.png}} -l"}, {"task": "Skip setting the desktop wallpaper:", "command": "wal -i {{image.png}} -n"}, {"task": "Skip setting the terminal colors:", "command": "wal -i {{image.png}} -s"}, {"task": "Restore the previously generated color scheme and wallpaper:", "command": "wal -R"}]}
{"command": "wapm", "tasks": [{"task": "Interactively create a new `wapm.toml` file:", "command": "wapm init"}, {"task": "Download all the packages listed as dependencies in `wapm.toml`:", "command": "wapm install"}, {"task": "Download a specific version of a package and add it to the list of dependencies in wapm.toml:", "command": "wapm install {{package_name}}@{{version}}"}, {"task": "Download a package and install it globally:", "command": "wapm install --global {{package_name}}"}, {"task": "Uninstall a package and remove it from the list of dependencies in `wapm.toml`:", "command": "wapm uninstall {{package_name}}"}, {"task": "Print a tree of locally installed dependencies:", "command": "wapm list"}, {"task": "List top-level globally installed packages:", "command": "wapm list --global"}, {"task": "Execute a package command using the Wasmer runtime:", "command": "wapm run {{command_name}} {{arguments}}"}]}
{"command": "warp-cli", "tasks": [{"task": "Register the current device to WARP (must be run before first connection):", "command": "warp-cli register"}, {"task": "Connect to WARP:", "command": "warp-cli connect"}, {"task": "Disconnect from WARP:", "command": "warp-cli disconnect"}, {"task": "Display the WARP connection status:", "command": "warp-cli status"}, {"task": "Display help:", "command": "warp-cli help"}, {"task": "Display help for a subcommand:", "command": "warp-cli help {{subcommand}}"}]}
{"command": "warp-diag", "tasks": [{"task": "Generate a zip file with information about the system configuration and the WARP connection:", "command": "warp-diag"}, {"task": "Generate a zip file with debug information including a timestamp to the output filename:", "command": "warp-diag --add-ts"}, {"task": "Save the output file under a specific directory:", "command": "warp-diag --output {{path/to/directory}}"}, {"task": "Submit a new feedback to Cloudflare's WARP interactively:", "command": "warp-diag feedback"}]}
{"command": "wasm-objdump", "tasks": [{"task": "Display the section headers of a given binary:", "command": "wasm-objdump -h {{file.wasm}}"}, {"task": "Display the entire disassembled output of a given binary:", "command": "wasm-objdump -d {{file.wasm}}"}, {"task": "Display the details of each section:", "command": "wasm-objdump --details {{file.wasm}}"}, {"task": "Display the details of a given section:", "command": "wasm-objdump --section '{{import}}' --details {{file.wasm}}"}]}
{"command": "wasm-opt", "tasks": [{"task": "Apply default optimizations and write to a given file:", "command": "wasm-opt -O {{input.wasm}} -o {{output.wasm}}"}, {"task": "Apply all optimizations and write to a given file (takes more time, but generates optimal code):", "command": "wasm-opt -O4 {{input.wasm}} -o {{output.wasm}}"}, {"task": "Optimize a file for size:", "command": "wasm-opt -Oz {{input.wasm}} -o {{output.wasm}}"}, {"task": "Print the textual representation of the binary to console:", "command": "wasm-opt {{input.wasm}} --print"}]}
{"command": "wasm2c", "tasks": [{"task": "Convert a file to a C source file and header and display it to the console:", "command": "wasm2c {{file.wasm}}"}, {"task": "Write the output to a given file (`file.h` gets additionally generated):", "command": "wasm2c {{file.wasm}} -o {{file.c}}"}]}
{"command": "wasm2wat", "tasks": [{"task": "Convert a file to the text format and display it to the console:", "command": "wasm2wat {{file.wasm}}"}, {"task": "Write the output to a given file:", "command": "wasm2wat {{file.wasm}} -o {{file.wat}}"}]}
{"command": "wat2wasm", "tasks": [{"task": "Parse and check a file for errors:", "command": "wat2wasm {{file.wat}}"}, {"task": "Write the output binary to a given file:", "command": "wat2wasm {{file.wat}} -o {{file.wasm}}"}, {"task": "Display simplified representation of every byte:", "command": "wat2wasm -v {{file.wat}}"}]}
{"command": "watch", "tasks": [{"task": "Repeatedly run a command and show the result:", "command": "watch {{command}}"}, {"task": "Re-run a command every 60 seconds:", "command": "watch -n {{60}} {{command}}"}, {"task": "Monitor the contents of a directory, highlighting differences as they appear:", "command": "watch -d {{ls -l}}"}, {"task": "Repeatedly run a pipeline and show the result:", "command": "watch '{{command_1}} | {{command_2}} | {{command_3}}'"}]}
{"command": "watchexec", "tasks": [{"task": "Call `ls -la` when any file in the current directory changes:", "command": "watchexec {{ls -la}}"}, {"task": "Run `make` when any JavaScript, CSS and HTML file in the current directory changes:", "command": "watchexec --exts {{js,css,html}} make"}, {"task": "Run `make` when any file in the `lib` or `src` directory changes:", "command": "watchexec --watch {{lib}} --watch {{src}} {{make}}"}, {"task": "Call/restart `my_server` when any file in the current directory changes, sending `SIGKILL` to stop the child process:", "command": "watchexec --restart --stop-signal {{SIGKILL}} {{my_server}}"}]}
{"command": "watson", "tasks": [{"task": "Start monitoring time in project:", "command": "watson start {{project}}"}, {"task": "Start monitoring time in project with tags:", "command": "watson start {{project}} +{{tag}}"}, {"task": "Stop monitoring time for the current project:", "command": "watson stop"}, {"task": "Display the latest working sessions:", "command": "watson log"}, {"task": "Edit most recent frame:", "command": "watson edit"}, {"task": "Remove most recent frame:", "command": "watson remove"}]}
{"command": "wc", "tasks": [{"task": "Count all lines in a file:", "command": "wc --lines {{path/to/file}}"}, {"task": "Count all words in a file:", "command": "wc --words {{path/to/file}}"}, {"task": "Count all bytes in a file:", "command": "wc --bytes {{path/to/file}}"}, {"task": "Count all characters in a file (taking multi-byte characters into account):", "command": "wc --chars {{path/to/file}}"}, {"task": "Count all lines, words and bytes from `stdin`:", "command": "{{find .}} | wc"}, {"task": "Count the length of the longest line in number of characters:", "command": "wc --max-line-length {{path/to/file}}"}]}
{"command": "weasyprint", "tasks": [{"task": "Render an HTML file to PDF:", "command": "weasyprint {{path/to/input.html}} {{path/to/output}}.pdf"}, {"task": "Render an HTML file to PNG, including an additional user stylesheet:", "command": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --stylesheet {{path/to/stylesheet.css}}"}, {"task": "Output additional debugging information when rendering:", "command": "weasyprint {{path/to/input.html}} {{path/to/output}}.pdf --verbose"}, {"task": "Specify a custom resolution when outputting to PNG:", "command": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --resolution {{300}}"}, {"task": "Specify a base URL for relative URLs in the input HTML file:", "command": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --base-url {{url_or_filename}}"}]}
{"command": "web-ext", "tasks": [{"task": "Run the web extension in the current directory in Firefox:", "command": "web-ext run"}, {"task": "Run a web extension from a specific directory in Firefox:", "command": "web-ext run --source-dir {{path/to/directory}}"}, {"task": "Display verbose execution output:", "command": "web-ext run --verbose"}, {"task": "Run a web extension in Firefox Android:", "command": "web-ext run --target firefox-android"}, {"task": "Lint the manifest and source files for errors:", "command": "web-ext lint"}, {"task": "Build and package the extension:", "command": "web-ext build"}, {"task": "Display verbose build output:", "command": "web-ext build --verbose"}, {"task": "Sign a package for self-hosting:", "command": "web-ext sign --api-key {{api_key}} --api-secret {{api_secret}}"}]}
{"command": "webpack", "tasks": [{"task": "Create a single output file from an entry point file:", "command": "webpack {{app.js}} {{bundle.js}}"}, {"task": "Load CSS files too from the JavaScript file (this uses the CSS loader for `.css` files):", "command": "webpack {{app.js}} {{bundle.js}} --module-bind '{{css=css}}'"}, {"task": "Pass a config file (with e.g. the entry script and the output filename) and show compilation progress:", "command": "webpack --config {{webpack.config.js}} --progress"}, {"task": "Automatically recompile on changes to project files:", "command": "webpack --watch {{app.js}} {{bundle.js}}"}]}
{"command": "webstorm", "tasks": [{"task": "Open the current directory in WebStorm:", "command": "webstorm"}, {"task": "Open a specific directory in WebStorm:", "command": "webstorm {{path/to/directory}}"}, {"task": "Open specific files in the LightEdit mode﻿:", "command": "webstorm -e {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open and wait until done editing a specific file in the LightEdit mode:", "command": "webstorm --wait -e {{path/to/file}}"}, {"task": "Open a file with the cursor at the specific line:", "command": "webstorm --line {{line_number}} {{path/to/file}}"}, {"task": "Open and compare files (supports up to 3 files):", "command": "webstorm diff {{path/to/file1}} {{path/to/file2}}"}, {"task": "Open and perform a three-way merge:", "command": "webstorm merge {{path/to/left_file}} {{path/to/right_file}} {{path/to/target_file}}"}]}
{"command": "webtorrent", "tasks": [{"task": "Download a torrent:", "command": "webtorrent download \"{{torrent_id}}\""}, {"task": "Stream a torrent to VLC media player:", "command": "webtorrent download \"{{torrent_id}}\" --vlc"}, {"task": "Stream a torrent to a Digital Living Network Alliance (DLNA) device:", "command": "webtorrent download \"{{torrent_id}}\" --dlna"}, {"task": "Display a list of files for a specific torrent:", "command": "webtorrent download \"{{torrent_id}}\" --select"}, {"task": "Specify a file index from the torrent to download:", "command": "webtorrent download \"{{torrent_id}}\" --select {{index}}"}, {"task": "Seed a specific file or directory:", "command": "webtorrent seed {{path/to/file_or_directory}}"}, {"task": "Create a new torrent file for the specified file path:", "command": "webtorrent create {{path/to/file}}"}, {"task": "Display information for a magnet URI or `.torrent` file:", "command": "webtorrent info {{path/to/file_or_magnet}}"}]}
{"command": "weechat", "tasks": [{"task": "Start WeeChat:", "command": "weechat"}, {"task": "Do not load any plugin(s) on startup:", "command": "weechat --no-plugin"}, {"task": "Do not load any script(s) on startup:", "command": "weechat --no-script"}, {"task": "Do not connect to servers automatically:", "command": "weechat --no-connect"}, {"task": "Write default terminal colors to `stdout`:", "command": "weechat --colors"}]}
{"command": "wfuzz", "tasks": [{"task": "Directory and file bruteforce using the specified wordlist and also proxying the traffic:", "command": "wfuzz -w {{path/to/file}} -p {{127.0.0.1:8080}} {{http://example.com/FUZZ}}"}, {"task": "Save the results to a file:", "command": "wfuzz -w {{path/to/file}} -f {{filename}} {{http://example.com/FUZZ}}"}, {"task": "Show colorized output while only showing the declared response codes in the output:", "command": "wfuzz -c -w {{path/to/file}} --sc {{200,301,302}} {{http://example.com/FUZZ}}"}, {"task": "Use a custom header to fuzz subdomains while hiding specific response codes and word counts. Increase the threads to 100 and include the target ip/domain:", "command": "wfuzz -w {{path/to/file}} -H {{\"Host: FUZZ.example.com\"}} --hc {{301}} --hw {{222}} -t {{100}} {{example.com}}"}]}
{"command": "wget", "tasks": [{"task": "Download the contents of a URL to a file (named \"foo\" in this case):", "command": "wget {{https://example.com/foo}}"}, {"task": "Download the contents of a URL to a file (named \"bar\" in this case):", "command": "wget --output-document {{bar}} {{https://example.com/foo}}"}, {"task": "Download a single web page and all its resources with 3-second intervals between requests (scripts, stylesheets, images, etc.):", "command": "wget --page-requisites --convert-links --wait=3 {{https://example.com/somepage.html}}"}, {"task": "Download all listed files within a directory and its sub-directories (does not download embedded page elements):", "command": "wget --mirror --no-parent {{https://example.com/somepath/}}"}, {"task": "Limit the download speed and the number of connection retries:", "command": "wget --limit-rate={{300k}} --tries={{100}} {{https://example.com/somepath/}}"}, {"task": "Download a file from an HTTP server using Basic Auth (also works for FTP):", "command": "wget --user={{username}} --password={{password}} {{https://example.com}}"}, {"task": "Continue an incomplete download:", "command": "wget --continue {{https://example.com}}"}, {"task": "Download all URLs stored in a text file to a specific directory:", "command": "wget --directory-prefix {{path/to/directory}} --input-file {{URLs.txt}}"}]}
{"command": "where", "tasks": [{"task": "Find all instances of a command:", "command": "where {{command}}"}]}
{"command": "whereis", "tasks": [{"task": "Locate binary, source and man pages for ssh:", "command": "whereis {{ssh}}"}, {"task": "Locate binary and man pages for ls:", "command": "whereis -bm {{ls}}"}, {"task": "Locate source of gcc and man pages for Git:", "command": "whereis -s {{gcc}} -m {{git}}"}, {"task": "Locate binaries for gcc in `/usr/bin/` only:", "command": "whereis -b -B {{/usr/bin/}} -f {{gcc}}"}, {"task": "Locate unusual binaries (those that have more or less than one binary on the system):", "command": "whereis -u *"}, {"task": "Locate binaries that have unusual manual entries (binaries that have more or less than one manual installed):", "command": "whereis -u -m *"}]}
{"command": "which", "tasks": [{"task": "Search the PATH environment variable and display the location of any matching executables:", "command": "which {{executable}}"}, {"task": "If there are multiple executables which match, display all:", "command": "which -a {{executable}}"}]}
{"command": "while", "tasks": [{"task": "Read `stdin` and perform an action on every line:", "command": "while read line; do echo \"$line\"; done"}, {"task": "Execute a command forever once every second:", "command": "while :; do {{command}}; sleep 1; done"}]}
{"command": "whisper", "tasks": [{"task": "Convert a specific audio file to all of the given file formats:", "command": "whisper {{path/to/audio.mp3}}"}, {"task": "Convert an audio file specifying the output format of the converted file:", "command": "whisper {{path/to/audio.mp3}} --output_format {{txt}}"}, {"task": "Convert an audio file using a specific model for conversion:", "command": "whisper {{path/to/audio.mp3}} --model {{tiny.en,tiny,base.en,base,small.en,small,medium.en,medium,large-v1,large-v2,large}}"}, {"task": "Convert an audio file specifying which language the audio file is in to reduce conversion time:", "command": "whisper {{path/to/audio.mp3}} --language {{english}}"}, {"task": "Convert an audio file and save it to a specific location:", "command": "whisper {{path/to/audio.mp3}} --output_dir \"{{path/to/output}}\""}, {"task": "Convert an audio file in quiet mode:", "command": "whisper {{path/to/audio.mp3}} --verbose {{False}}"}]}
{"command": "who", "tasks": [{"task": "Display the username, line, and time of all currently logged-in sessions:", "command": "who"}, {"task": "Display information only for the current terminal session:", "command": "who am i"}, {"task": "Display all available information:", "command": "who -a"}, {"task": "Display all available information with table headers:", "command": "who -a -H"}]}
{"command": "whoami", "tasks": [{"task": "Display currently logged username:", "command": "whoami"}, {"task": "Display the username after a change in the user ID:", "command": "sudo whoami"}]}
{"command": "whois", "tasks": [{"task": "Get information about a domain name:", "command": "whois {{example.com}}"}, {"task": "Get information about an IP address:", "command": "whois {{8.8.8.8}}"}, {"task": "Get abuse contact for an IP address:", "command": "whois -b {{8.8.8.8}}"}]}
{"command": "wipeclean", "tasks": [{"task": "Clear the terminal screen:", "command": "wipeclean"}, {"task": "Set the animation speed in frames per second (defaults to 150):", "command": "wipeclean --speed {{speed}}"}]}
{"command": "wondershaper", "tasks": [{"task": "Display [h]elp:", "command": "wondershaper -h"}, {"task": "Show the current [s]tatus of a specific [a]dapter:", "command": "wondershaper -s -a {{adapter_name}}"}, {"task": "Clear limits from a specific [a]dapter:", "command": "wondershaper -c -a {{adapter_name}}"}, {"task": "Set a specific maximum [d]ownload rate (in Kbps):", "command": "wondershaper -a {{adapter_name}} -d {{1024}}"}, {"task": "Set a specific maximum [u]pload rate (in Kbps):", "command": "wondershaper -a {{adapter_name}} -u {{512}}"}, {"task": "Set a specific maximum [d]ownload rate and [u]pload rate (in Kpbs):", "command": "wondershaper -a {{adapter_name}} -d {{1024}} -u {{512}}"}]}
{"command": "wordgrinder", "tasks": [{"task": "Start WordGrinder (loads a blank document by default):", "command": "wordgrinder"}, {"task": "Open a given file:", "command": "wordgrinder {{filename}}"}, {"task": "Show the menu:", "command": "Alt + M"}]}
{"command": "wormhole", "tasks": [{"task": "Send a file:", "command": "wormhole send {{path/to/file}}"}, {"task": "Receive a file:", "command": "wormhole receive {{wormhole_code}}"}, {"task": "Send raw text:", "command": "wormhole send"}]}
{"command": "wp", "tasks": [{"task": "Print information about the operating system, shell, PHP, and WP-CLI (`wp`) installation:", "command": "wp --info"}, {"task": "Update WP-CLI:", "command": "wp cli update"}, {"task": "Download a fresh WordPress installation to current directory, optionally specifying the locale:", "command": "wp core download --locale={{locale}}"}, {"task": "Create basic `wpconfig` file (assuming database on `localhost`):", "command": "wp config create --dbname={{dbname}} --dbuser={{dbuser}} --dbpass={{dbpass}}"}, {"task": "Install and activate a WordPress plugin:", "command": "wp plugin install {{plugin}} --activate"}, {"task": "Replace all instances of a string in the database:", "command": "wp search-replace {{old_string}} {{new_string}}"}, {"task": "Import the contents of a WordPress Extended RSS (WXR) file:", "command": "wp import {{path/to/file.xml}}"}]}
{"command": "wpa_supplicant", "tasks": [{"task": "Join a protected wireless network:", "command": "wpa_supplicant -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}"}, {"task": "Join a protected wireless network and run it in a daemon:", "command": "wpa_supplicant -B -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}"}]}
{"command": "wpaclean", "tasks": [{"task": "Clean capture and save only the 4-way handshake and a beacon in the result:", "command": "wpaclean {{path/to/result.cap}} {{path/to/capture.cap}}"}, {"task": "Clean multiple captures and save 4-way handshakes and beacons in the result:", "command": "wpaclean {{path/to/result.cap}} {{path/to/capture1.cap path/to/capture2.cap ...}}"}]}
{"command": "wpm", "tasks": [{"task": "Start `wpm`:", "command": "wpm"}, {"task": "Start `wpm` with short texts:", "command": "wpm --short"}, {"task": "Start `wpm` using a specific text file:", "command": "wpm --load {{path/to/file.txt}}"}, {"task": "Tag your race scores:", "command": "wpm --tag {{tag_name}}"}, {"task": "Show score statistics grouped by tags:", "command": "wpm --stats"}, {"task": "Start `wpm` with monochrome colors:", "command": "wpm --monochrome"}]}
{"command": "wpscan", "tasks": [{"task": "Update the vulnerability database:", "command": "wpscan --update"}, {"task": "Scan a WordPress website:", "command": "wpscan --url {{url}}"}, {"task": "Scan a WordPress website, using random user agents and passive detection:", "command": "wpscan --url {{url}} --stealthy"}, {"task": "Scan a WordPress website, checking for vulnerable plugins and specifying the path to the `wp-content` directory:", "command": "wpscan --url {{url}} --enumerate {{vp}} --wp-content-dir {{remote/path/to/wp-content}}"}, {"task": "Scan a WordPress website through a proxy:", "command": "wpscan --url {{url}} --proxy {{protocol://ip:port}} --proxy-auth {{username:password}}"}, {"task": "Perform user identifiers enumeration on a WordPress website:", "command": "wpscan --url {{url}} --enumerate {{u}}"}, {"task": "Execute a password guessing attack on a WordPress website:", "command": "wpscan --url {{url}} --usernames {{username|path/to/usernames.txt}} --passwords {{path/to/passwords.txt}} threads {{20}}"}, {"task": "Scan a WordPress website, collecting vulnerability data from the WPVulnDB (https://wpvulndb.com/):", "command": "wpscan --url {{url}} --api-token {{token}}"}]}
{"command": "wrangler", "tasks": [{"task": "Initialize a project with a skeleton configuration:", "command": "wrangler init {{project_name}}"}, {"task": "Authenticate with Cloudflare:", "command": "wrangler login"}, {"task": "Start a local development server:", "command": "wrangler dev --host {{hostname}}"}, {"task": "Publish the worker script:", "command": "wrangler publish"}, {"task": "Aggregate logs from the production worker:", "command": "wrangler tail"}]}
{"command": "write", "tasks": [{"task": "Send a message to a given user on a given terminal id:", "command": "write {{username}} {{terminal_id}}"}, {"task": "Send message to \"testuser\" on terminal `/dev/tty/5`:", "command": "write {{testuser}} {{tty/5}}"}, {"task": "Send message to \"johndoe\" on pseudo terminal `/dev/pts/5`:", "command": "write {{johndoe}} {{pts/5}}"}]}
{"command": "wrk", "tasks": [{"task": "Run a benchmark for `30` seconds, using `12` threads, and keeping `400` HTTP connections open:", "command": "wrk -t{{12}} -c{{400}} -d{{30s}} \"{{http://127.0.0.1:8080/index.html}}\""}, {"task": "Run a benchmark with a custom header:", "command": "wrk -t{{2}} -c{{5}} -d{{5s}} -H \"{{Host: example.com}}\" \"{{http://example.com/index.html}}\""}, {"task": "Run a benchmark with a request timeout of `2` seconds:", "command": "wrk -t{{2}} -c{{5}} -d{{5s}} --timeout {{2s}} \"{{http://example.com/index.html}}\""}]}
{"command": "wuzz", "tasks": [{"task": "Start `wuzz`:", "command": "wuzz"}, {"task": "Display help information:", "command": "F1"}, {"task": "Send an HTTP request:", "command": "Ctrl + R"}, {"task": "Switch to the next view:", "command": "Ctrl + J, Tab"}, {"task": "Switch to the previous view:", "command": "Ctrl + K, Shift + Tab"}]}
{"command": "x11docker", "tasks": [{"task": "Launch VLC in a container:", "command": "x11docker --pulseaudio --share={{$HOME/Videos}} {{jess/vlc}}"}, {"task": "Launch Xfce in a window:", "command": "x11docker --desktop {{x11docker/xfce}}"}, {"task": "Launch GNOME in a window:", "command": "x11docker --desktop --gpu --init={{systemd}} {{x11docker/gnome}}"}, {"task": "Launch KDE Plasma in a window:", "command": "x11docker --desktop --gpu --init={{systemd}} {{x11docker/kde-plasma}}"}, {"task": "Display help:", "command": "x11docker --help"}]}
{"command": "x_x", "tasks": [{"task": "View an XLSX or CSV file:", "command": "x_x {{file.xlsx|file.csv}}"}, {"task": "View an XLSX or CSV file, using the first row as table headers:", "command": "x_x -h {{0}} {{file.xlsx|file.csv}}"}, {"task": "View a CSV file with unconventional delimiters:", "command": "x_x --delimiter={{';'}} --quotechar={{'|'}} {{file.csv}}"}]}
{"command": "xar", "tasks": [{"task": "Create a xar archive of all files in a given directory:", "command": "xar -cf {{archive.xar}} {{path/to/directory}}"}, {"task": "List the contents of a given xar archive:", "command": "xar -tf {{archive.xar}}"}, {"task": "Extract the contents of a given xar archive to the current directory:", "command": "xar -xf {{archive.xar}}"}]}
{"command": "xargs", "tasks": [{"task": "Run a command using the input data as arguments:", "command": "{{arguments_source}} | xargs {{command}}"}, {"task": "Run multiple chained commands on the input data:", "command": "{{arguments_source}} | xargs sh -c \"{{command1}} && {{command2}} | {{command3}}\""}, {"task": "Delete all files with a `.backup` extension (`-print0` uses a null character to split file names, and `-0` uses it as delimiter):", "command": "find . -name {{'*.backup'}} -print0 | xargs -0 rm -v"}, {"task": "Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line:", "command": "{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}"}, {"task": "Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time:", "command": "{{arguments_source}} | xargs -P {{max-procs}} {{command}}"}]}
{"command": "xcaddy", "tasks": [{"task": "Build Caddy server from source:", "command": "xcaddy build"}, {"task": "Build Caddy server with a specific version (defaults to latest):", "command": "xcaddy build {{version}}"}, {"task": "Build Caddy with a specific module:", "command": "xcaddy build --with {{module_name}}"}, {"task": "Build Caddy and output to a specific file:", "command": "xcaddy build --output {{path/to/file}}"}, {"task": "Build and run Caddy for a development plugin in the current directory:", "command": "xcaddy run"}, {"task": "Build and run Caddy for a development plugin using a specific Caddy config:", "command": "xcaddy run --config {{path/to/file}}"}]}
{"command": "xcv", "tasks": [{"task": "Cut a file:", "command": "xcv x {{input_file}}"}, {"task": "Copy a file:", "command": "xcv c {{input_file}}"}, {"task": "Paste a file:", "command": "xcv v {{output_file}}"}, {"task": "List files available for pasting:", "command": "xcv l"}]}
{"command": "xdelta", "tasks": [{"task": "Apply a patch:", "command": "xdelta -d -s {{path/to/input_file}} {{path/to/delta_file.xdelta}} {{path/to/output_file}}"}, {"task": "Create a patch:", "command": "xdelta -e -s {{path/to/old_file}} {{path/to/new_file}} {{path/to/output_file.xdelta}}"}]}
{"command": "xe", "tasks": [{"task": "Run a command once for each line of input data as arguments:", "command": "{{arguments_source}} | xe {{command}}"}, {"task": "Execute the commands, replacing any occurrence of the placeholder (marked as `{}`) with the input line:", "command": "{{arguments_source}} | xe {{command}} {} {{optional_extra_arguments}}"}, {"task": "Execute a shellscript, joining every `N` lines into a single call:", "command": "echo -e 'a\\nb' | xe -N{{2}} -s 'echo $2 $1'"}, {"task": "Delete all files with a `.backup` extension:", "command": "find . -name {{'*.backup'}} | xe rm -v"}, {"task": "Run up to `max-jobs` processes in parallel; the default is 1. If `max-jobs` is 0, xe will run as many processes as cpu cores:", "command": "{{arguments_source}} | xe -j {{max-jobs}} {{command}}"}]}
{"command": "Xephyr", "tasks": [{"task": "Create a black window with display ID \":2\":", "command": "Xephyr -br -ac -noreset -screen {{800x600}} {{:2}}"}, {"task": "Start an X application on the new screen:", "command": "DISPLAY=:2 {{command_name}}"}]}
{"command": "xetex", "tasks": [{"task": "Compile a PDF document:", "command": "xetex {{source.tex}}"}, {"task": "Compile a PDF document, specifying an output directory:", "command": "xetex -output-directory={{path/to/directory}} {{source.tex}}"}, {"task": "Compile a PDF document, exiting if errors occur:", "command": "xetex -halt-on-error {{source.tex}}"}]}
{"command": "xev", "tasks": [{"task": "Monitor all occurring X events:", "command": "xev"}, {"task": "Monitor all X events of the root window instead of creating a new one:", "command": "xev -root"}, {"task": "Monitor all X events of a particular window:", "command": "xev -id {{window_id}}"}, {"task": "Monitor X events from a given category (can be specified multiple times):", "command": "xev -event {{event_category}}"}]}
{"command": "xgettext", "tasks": [{"task": "Scan file and output strings to `messages.po`:", "command": "xgettext {{path/to/input_file}}"}, {"task": "Use a different output filename:", "command": "xgettext --output {{path/to/output_file}} {{path/to/input_file}}"}, {"task": "Append new strings to an existing file:", "command": "xgettext --join-existing --output {{path/to/output_file}} {{path/to/input_file}}"}, {"task": "Don't add a header containing metadata to the output file:", "command": "xgettext --omit-header {{path/to/input_file}}"}]}
{"command": "xh", "tasks": [{"task": "Send a GET request:", "command": "xh {{httpbin.org/get}}"}, {"task": "Send a POST request with a JSON body (key-value pairs are added to a top-level JSON object - e.g. `{\"name\": \"john\", \"age\": 25}`):", "command": "xh post {{httpbin.org/post}} {{name=john}} {{age:=25}}"}, {"task": "Send a GET request with query parameters (e.g. `first_param=5&second_param=true`):", "command": "xh get {{httpbin.org/get}} {{first_param==5}} {{second_param==true}}"}, {"task": "Send a GET request with a custom header:", "command": "xh get {{httpbin.org/get}} {{header-name:header-value}}"}, {"task": "Make a GET request and save the response body to a file:", "command": "xh --download {{httpbin.org/json}} --output {{path/to/file}}"}]}
{"command": "xidel", "tasks": [{"task": "Print all URLs found by a Google search:", "command": "xidel {{https://www.google.com/search?q=test}} --extract \"//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']\""}, {"task": "Print the title of all pages found by a Google search and download them:", "command": "xidel {{https://www.google.com/search?q=test}} --follow \"{{//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']}}\" --extract {{//title}} --download {{'{$host}/'}}"}, {"task": "Follow all links on a page and print the titles, with XPath:", "command": "xidel {{https://example.org}} --follow {{//a}} --extract {{//title}}"}, {"task": "Follow all links on a page and print the titles, with CSS selectors:", "command": "xidel {{https://example.org}} --follow \"{{css('a')}}\" --css {{title}}"}, {"task": "Follow all links on a page and print the titles, with pattern matching:", "command": "xidel {{https://example.org}} --follow \"{{<a>{.}</a>*}}\" --extract \"{{<title>{.}</title>}}\""}, {"task": "Read the pattern from example.xml (which will also check if the element containing \"ood\" is there, and fail otherwise):", "command": "xidel {{path/to/example.xml}} --extract \"{{<x><foo>ood</foo><bar>{.}</bar></x>}}\""}, {"task": "Print all newest Stack Overflow questions with title and URL using pattern matching on their RSS feed:", "command": "xidel {{http://stackoverflow.com/feeds}} --extract \"{{<entry><title>{title:=.}</title><link>{uri:=@href}</link></entry>+}}\""}, {"task": "Check for unread Reddit mail, Webscraping, combining CSS, XPath, JSONiq, and automatically form evaluation:", "command": "xidel {{https://reddit.com}} --follow \"{{form(css('form.login-form')[1], {'user': '$your_username', 'passwd': '$your_password'})}}\" --extract \"{{css('#mail')/@title}}\""}]}
{"command": "xkcdpass", "tasks": [{"task": "Generate one passphrase with the default options:", "command": "xkcdpass"}, {"task": "Generate one passphrase whose first letters of each word match the provided argument:", "command": "xkcdpass -a {{acrostic}}"}, {"task": "Generate passwords interactively:", "command": "xkcdpass -i"}]}
{"command": "xkill", "tasks": [{"task": "Display a cursor to kill a window when pressing the left mouse button (press any other mouse button to cancel):", "command": "xkill"}, {"task": "Display a cursor to select a window to kill by pressing any mouse button:", "command": "xkill -button any"}]}
{"command": "xml canonic", "tasks": [{"task": "Make an XML document canonical, preserving comments:", "command": "xml canonic {{path/to/input.xml|URI}} > {{path/to/output.xml}}"}, {"task": "Make an XML document canonical, removing comments:", "command": "xml canonic --without-comments {{path/to/input.xml|URI}} > {{path/to/output.xml}}"}, {"task": "Make XML exclusively canonical, using an XPATH from a file, preserving comments:", "command": "xml canonic --exc-with-comments {{path/to/input.xml|URI}} {{path/to/c14n.xpath}}"}, {"task": "Display help for the `canonic` subcommand:", "command": "xml canonic --help"}]}
{"command": "xml depyx", "tasks": [{"task": "Convert a PYX (ESIS - ISO 8879) document to XML format:", "command": "xml depyx {{path/to/input.pyx|URI}} > {{path/to/output.xml}}"}, {"task": "Convert a PYX document from `stdin` to XML format:", "command": "cat {{path/to/input.pyx}} | xml depyx > {{path/to/output.xml}}"}, {"task": "Display help for the `depyx` subcommand:", "command": "xml depyx --help"}]}
{"command": "xml edit", "tasks": [{"task": "Delete elements matching an XPATH from an XML document:", "command": "xml edit --delete \"{{XPATH1}}\" {{path/to/input.xml|URI}}"}, {"task": "Move an element node of an XML document from XPATH1 to XPATH2:", "command": "xml edit --move \"{{XPATH1}}\" \"{{XPATH2}}\" {{path/to/input.xml|URI}}"}, {"task": "Rename all attributes named \"id\" to \"ID\":", "command": "xml edit --rename \"{{//*/@id}}\" -v \"{{ID}}\" {{path/to/input.xml|URI}}"}, {"task": "Rename sub-elements of the element \"table\" that are named \"rec\" to \"record\":", "command": "xml edit --rename \"{{/xml/table/rec}}\" -v \"{{record}}\" {{path/to/input.xml|URI}}"}, {"task": "Update the XML table record with \"id=3\" to the value \"id=5\":", "command": "xml edit --update \"{{xml/table/rec[@id=3]/@id}}\" -v {{5}} {{path/to/input.xml|URI}}"}, {"task": "Display help for the `edit` subcommand:", "command": "xml edit --help"}]}
{"command": "xml elements", "tasks": [{"task": "Extract elements from an XML document (producing XPATH expressions):", "command": "xml elements {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}"}, {"task": "Extract elements and their attributes from an XML document:", "command": "xml elements -a {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}"}, {"task": "Extract elements and their attributes and values from an XML document:", "command": "xml elements -v {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}"}, {"task": "Print sorted unique elements from an XML document to see its structure:", "command": "xml elements -u {{path/to/input.xml|URI}}"}, {"task": "Print sorted unique elements from an XML document up to a depth of 3:", "command": "xml elements -d{{3}} {{path/to/input.xml|URI}}"}, {"task": "Display help for the `elements` subcommand:", "command": "xml elements --help"}]}
{"command": "xml escape", "tasks": [{"task": "Escape special XML characters in a string:", "command": "xml escape \"{{<a1>}}\""}, {"task": "Escape special XML characters from `stdin`:", "command": "echo \"{{<a1>}}\" | xml escape"}, {"task": "Display help for the `escape` subcommand:", "command": "xml escape --help"}]}
{"command": "xml format", "tasks": [{"task": "Format an XML document, indenting with tabs:", "command": "xml format --indent-tab {{path/to/input.xml|URI}} > {{path/to/output.xml}}"}, {"task": "Format an HTML document, indenting with 4 spaces:", "command": "xml format --html --indent-spaces {{4}} {{path/to/input.html|URI}} > {{path/to/output.html}}"}, {"task": "Recover parsable parts of a malformed XML document, without indenting:", "command": "xml format --recover --noindent {{path/to/malformed.xml|URI}} > {{path/to/recovered.xml}}"}, {"task": "Format an XML document from `stdin`, removing the `DOCTYPE` declaration:", "command": "cat {{path\\to\\input.xml}} | xml format --dropdtd > {{path/to/output.xml}}"}, {"task": "Format an XML document, omitting the XML declaration:", "command": "xml format --omit-decl {{path\\to\\input.xml|URI}} > {{path/to/output.xml}}"}, {"task": "Display help for the `format` subcommand:", "command": "xml format --help"}]}
{"command": "xml list", "tasks": [{"task": "Write the current directory's listing to an XML document:", "command": "xml list > {{path/to/dir_list.xml}}"}, {"task": "Write the specified directory's listing to an XML document:", "command": "xml list {{path/to/directory}} > {{path/to/dir_list.xml}}"}, {"task": "Display help for the `list` subcommand:", "command": "xml list --help"}]}
{"command": "xml pyx", "tasks": [{"task": "Convert an XML document to PYX format:", "command": "xml pyx {{path/to/input.xml|URI}} > {{path/to/output.pyx}}"}, {"task": "Convert an XML document from `stdin` to PYX format:", "command": "cat {{path/to/input.xml}} | xml pyx > {{path/to/output.pyx}}"}, {"task": "Display help for the `pyx` subcommand:", "command": "xml pyx --help"}]}
{"command": "xml select", "tasks": [{"task": "Select all elements matching \"XPATH1\" and print the value of their sub-element \"XPATH2\":", "command": "xml select --template --match \"{{XPATH1}}\" --value-of \"{{XPATH2}}\" {{path/to/input.xml|URI}}"}, {"task": "Match \"XPATH1\" and print the value of \"XPATH2\" as text with new-lines:", "command": "xml select --text --template --match \"{{XPATH1}}\" --value-of \"{{XPATH2}}\" --nl {{path/to/input.xml|URI}}"}, {"task": "Count the elements of \"XPATH1\":", "command": "xml select --template --value-of \"count({{XPATH1}})\" {{path/to/input.xml|URI}}"}, {"task": "Count all nodes in one or more XML documents:", "command": "xml select --text --template --inp-name --output \" \" --value-of \"count(node())\" --nl {{path/to/input1.xml|URI}} {{path/to/input2.xml|URI}}"}, {"task": "Display help for the `select` subcommand:", "command": "xml select --help"}]}
{"command": "xml transform", "tasks": [{"task": "Transform an XML document using an XSL stylesheet, passing one XPATH parameter and one literal string parameter:", "command": "xml transform {{path/to/stylesheet.xsl}} -p \"{{Count='count(/xml/table/rec)'}}\" -s {{Text=\"Count=\"}} {{path/to/input.xml|URI}}"}, {"task": "Display help for the `transform` subcommand:", "command": "xml transform --help"}]}
{"command": "xml unescape", "tasks": [{"task": "Unescape special XML characters from a string:", "command": "xml unescape \"{{&lt;a1&gt;}}\""}, {"task": "Unescape special XML characters from `stdin`:", "command": "echo \"{{&lt;a1&gt;}}\" | xml unescape"}, {"task": "Display help for the `unescape` subcommand:", "command": "xml escape --help"}]}
{"command": "xml validate", "tasks": [{"task": "Validate one or more XML documents for well-formedness only:", "command": "xml validate {{path/to/input1.xml|URI}} {{input2.xml ...}}"}, {"task": "Validate one or more XML documents against a Document Type Definition (DTD):", "command": "xml validate --dtd {{path/to/schema.dtd}} {{path/to/input1.xml|URI}} {{input2.xml ...}}"}, {"task": "Validate one or more XML documents against an XML Schema Definition (XSD):", "command": "xml validate --xsd {{path/to/schema.xsd}} {{path/to/input1.xml|URI}} {{input2.xml ...}}"}, {"task": "Validate one or more XML documents against a Relax NG schema (RNG):", "command": "xml validate --relaxng {{path/to/schema.rng}} {{path/to/input1.xml|URI}} {{input2.xml ...}}"}, {"task": "Display help for the `validate` subcommand:", "command": "xml validate --help"}]}
{"command": "xml", "tasks": [{"task": "Display general help, including the list of subcommands:", "command": "xml --help"}, {"task": "Execute a subcommand with input from a file or URI, printing to `stdout`:", "command": "xml {{subcommand}} {{options}} {{path/to/input.xml|URI}}"}, {"task": "Execute a subcommand using `stdin` and `stdout`:", "command": "xml {{subcommand}} {{options}}"}, {"task": "Execute a subcommand with input from a file or URI and output to a file:", "command": "xml {{subcommand}} {{options}} {{path/to/input.xml|URI}} > {{path/to/output}}"}, {"task": "Display help for a subcommand:", "command": "xml {{subcommand}} --help"}, {"task": "Display the version of the XMLStarlet Toolkit:", "command": "xml --version"}]}
{"command": "xmllint", "tasks": [{"task": "Return all nodes (tags) named \"foo\":", "command": "xmllint --xpath \"//{{foo}}\" {{source_file.xml}}"}, {"task": "Return the contents of the first node named \"foo\" as a string:", "command": "xmllint --xpath \"string(//{{foo}})\" {{source_file.xml}}"}, {"task": "Return the href attribute of the second anchor element in an HTML file:", "command": "xmllint --html --xpath \"string(//a[2]/@href)\" webpage.xhtml"}, {"task": "Return human-readable (indented) XML from file:", "command": "xmllint --format {{source_file.xml}}"}, {"task": "Check that an XML file meets the requirements of its DOCTYPE declaration:", "command": "xmllint --valid {{source_file.xml}}"}, {"task": "Validate XML against DTD schema hosted online:", "command": "xmllint --dtdvalid {{URL}} {{source_file.xml}}"}]}
{"command": "xmlstarlet", "tasks": [{"task": "Format an XML document and print to `stdout`:", "command": "xmlstarlet format {{path/to/file.xml}}"}, {"task": "XML document can also be piped from `stdin`:", "command": "{{cat path/to/file.xml}} | xmlstarlet format"}, {"task": "Print all nodes that match a given XPath:", "command": "xmlstarlet select --template --copy-of {{xpath}} {{path/to/file.xml}}"}, {"task": "Insert an attribute to all matching nodes, and print to `stdout` (source file is unchanged):", "command": "xmlstarlet edit --insert {{xpath}} --type attr --name {{attribute_name}} --value {{attribute_value}} {{path/to/file.xml}}"}, {"task": "Update the value of all matching nodes in place (source file is changed):", "command": "xmlstarlet edit --inplace --update {{xpath}} --value {{new_value}} {{file.xml}}"}, {"task": "Delete all matching nodes in place (source file is changed):", "command": "xmlstarlet edit --inplace --delete {{xpath}} {{file.xml}}"}, {"task": "Escape or unescape special XML characters in a given string:", "command": "xmlstarlet [un]escape {{string}}"}, {"task": "List a given directory as XML (omit argument to list current directory):", "command": "xmlstarlet ls {{path/to/directory}}"}]}
{"command": "xmlto", "tasks": [{"task": "Convert a DocBook XML document to PDF format:", "command": "xmlto {{pdf}} {{document.xml}}"}, {"task": "Convert a DocBook XML document to HTML format and store the resulting files in a separate directory:", "command": "xmlto -o {{path/to/html_files}} {{html}} {{document.xml}}"}, {"task": "Convert a DocBook XML document to a single HTML file:", "command": "xmlto {{html-nochunks}} {{document.xml}}"}, {"task": "Specify a stylesheet to use while converting a DocBook XML document:", "command": "xmlto -x {{stylesheet.xsl}} {{output_format}} {{document.xml}}"}]}
{"command": "xo", "tasks": [{"task": "Lint files in the \"src\" directory:", "command": "xo"}, {"task": "Lint a given set of files:", "command": "xo {{file1}}.js {{file2}}.js"}, {"task": "Automatically fix any lint issues found:", "command": "xo --fix"}, {"task": "Lint using spaces as indentation instead of tabs:", "command": "xo --space"}, {"task": "Lint using the \"prettier\" code style:", "command": "xo --prettier"}]}
{"command": "xonsh", "tasks": [{"task": "Start an interactive shell session:", "command": "xonsh"}, {"task": "Execute a single command and then exit:", "command": "xonsh -c \"{{command}}\""}, {"task": "Run commands from a script file and then exit:", "command": "xonsh {{path/to/script_file.xonsh}}"}, {"task": "Define environment variables for the shell process:", "command": "xonsh -D{{name1}}={{value1}} -D{{name2}}={{value2}}"}, {"task": "Load the specified `.xonsh` or `.json` configuration files:", "command": "xonsh --rc {{path/to/file1.xonsh}} {{path/to/file2.json}}"}, {"task": "Skip loading the `.xonshrc` configuration file:", "command": "xonsh --no-rc"}]}
{"command": "xpdf", "tasks": [{"task": "Open a PDF file:", "command": "xpdf {{path/to/file.pdf}}"}, {"task": "Open a specific page in a PDF file:", "command": "xpdf {{path/to/file.pdf}} :{{page_number}}"}, {"task": "Open a compressed PDF file:", "command": "xpdf {{path/to/file.pdf.tar}}"}, {"task": "Open a PDF file in fullscreen mode:", "command": "xpdf -fullscreen {{path/to/file.pdf}}"}, {"task": "Specify the initial zoom:", "command": "xpdf -z {{75}}% {{path/to/file.pdf}}"}, {"task": "Specify the initial zoom at page width or full page:", "command": "xpdf -z {{page|width}} {{path/to/file.pdf}}"}]}
{"command": "xplr", "tasks": [{"task": "Open a directory:", "command": "xplr {{path/to/directory}}"}, {"task": "Focus on a file:", "command": "xplr {{path/to/file}}"}, {"task": "Focus on a directory:", "command": "xplr --force-focus {{path/to/directory}}"}, {"task": "Open a directory with specific files or directories selected:", "command": "xplr {{path/to/directory}} {{path/to/selected_file_or_directory1}} {{path/to/selected_file_or_directory2}}"}]}
{"command": "xprop", "tasks": [{"task": "Display the name of the root window:", "command": "xprop -root WM_NAME"}, {"task": "Display the window manager hints for a window:", "command": "xprop -name \"{{window_name}}\" WM_HINTS"}, {"task": "Display the point size of a font:", "command": "xprop -font \"{{font_name}}\" POINT_SIZE"}, {"task": "Display all the properties of the window with the id 0x200007:", "command": "xprop -id {{0x200007}}"}]}
{"command": "xsp", "tasks": [{"task": "Listen on all interfaces (`0.0.0.0`) and port `8080`:", "command": "xsp"}, {"task": "Listen on a specific IP address and port:", "command": "xsp --address {{127.0.0.1}} --port {{8000}}"}]}
{"command": "xsv", "tasks": [{"task": "Inspect the headers of a file:", "command": "xsv headers {{path/to/file.csv}}"}, {"task": "Count the number of entries:", "command": "xsv count {{path/to/file.csv}}"}, {"task": "Get an overview of the shape of entries:", "command": "xsv stats {{path/to/file.csv}} | xsv table"}, {"task": "Select a few columns:", "command": "xsv select {{column_a,column_b}} {{path/to/file.csv}}"}, {"task": "Show 10 random entries:", "command": "xsv sample {{10}} {{path/to/file.csv}}"}, {"task": "Join a column from one file to another:", "command": "xsv join --no-case {{column_a}} {{path/to/file/a.csv}} {{column_b}} {{path/to/file/b.csv}} | xsv table"}]}
{"command": "xxd", "tasks": [{"task": "Generate a hexdump from a binary file and display the output:", "command": "xxd {{input_file}}"}, {"task": "Generate a hexdump from a binary file and save it as a text file:", "command": "xxd {{input_file}} {{output_file}}"}, {"task": "Display a more compact output, replacing consecutive zeros (if any) with a star:", "command": "xxd -a {{input_file}}"}, {"task": "Display the output with 10 columns of one octet (byte) each:", "command": "xxd -c {{10}} {{input_file}}"}, {"task": "Display output only up to a length of 32 bytes:", "command": "xxd -l {{32}} {{input_file}}"}, {"task": "Display the output in plain mode, without any gaps between the columns:", "command": "xxd -p {{input_file}}"}, {"task": "Revert a plaintext hexdump back into binary, and save it as a binary file:", "command": "xxd -r -p {{input_file}} {{output_file}}"}]}
{"command": "xxh", "tasks": [{"task": "Connect to a host and run the current shell:", "command": "xxh \"{{host}}\""}, {"task": "Install the current shell into the target machine without prompting:", "command": "xxh \"{{host}}\" ++install"}, {"task": "Run the specified shell on the target machine:", "command": "xxh \"{{host}}\" ++shell {{xonsh|zsh|fish|bash|osquery}}"}, {"task": "Use a specific xxh configuration directory on the target machine:", "command": "xxh \"{{host}}\" ++host-xxh-home {{~/.xxh}}"}, {"task": "Use the specified configuration file on the host machine:", "command": "xxh \"{{host}}\" ++xxh-config {{~/.config/xxh/config.xxhc}}"}, {"task": "Specify a password to use for the SSH connection:", "command": "xxh \"{{host}}\" ++password \"{{password}}\""}, {"task": "Install an xxh package on the target machine:", "command": "xxh \"{{host}}\" ++install-xxh-packages {{package}}"}, {"task": "Set an environment variable for the shell process on the target machine:", "command": "xxh \"{{host}}\" ++env {{name}}={{value}}"}]}
{"command": "xz", "tasks": [{"task": "Compress a file using xz:", "command": "xz {{path/to/file}}"}, {"task": "Decompress an xz file:", "command": "xz --decompress {{path/to/file.xz}}"}, {"task": "Compress a file using lzma:", "command": "xz --format={{lzma}} {{path/to/file}}"}, {"task": "Decompress an lzma file:", "command": "xz --decompress --format={{lzma}} {{path/to/file.lzma}}"}, {"task": "Decompress a file and write to `stdout` (implies `--keep`):", "command": "xz --decompress --stdout {{path/to/file.xz}}"}, {"task": "Compress a file, but don't delete the original:", "command": "xz --keep {{path/to/file}}"}, {"task": "Compress a file using the fastest compression:", "command": "xz -0 {{path/to/file}}"}, {"task": "Compress a file using the best compression:", "command": "xz -9 {{path/to/file}}"}]}
{"command": "xzcat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xz"}]}
{"command": "xzcmp", "tasks": [{"task": "Compare two specific files:", "command": "xzcmp {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "xzdiff", "tasks": [{"task": "Compare files:", "command": "xzdiff {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare files, showing the differences side by side:", "command": "xzdiff --side-by-side {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare files and report only that they differ (no details on what is different):", "command": "xzdiff --brief {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare files and report when the files are the same:", "command": "xzdiff --report-identical-files {{path/to/file1}} {{path/to/file2}}"}, {"task": "Compare files using paginated results:", "command": "xzdiff --paginate {{path/to/file1}} {{path/to/file2}}"}]}
{"command": "xzegrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzgrep"}]}
{"command": "xzfgrep", "tasks": [{"task": "View documentation for the original command:", "command": "tldr xzgrep"}]}
{"command": "xzgrep", "tasks": [{"task": "Search for a pattern within a file:", "command": "xzgrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for an exact string (disables regular expressions):", "command": "xzgrep --fixed-strings \"{{exact_string}}\" {{path/to/file}}"}, {"task": "Search for a pattern in all files showing line numbers of matches:", "command": "xzgrep --line-number \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode:", "command": "xzgrep --extended-regexp --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print 3 lines of context around, before, or after each match:", "command": "xzgrep --{{context|before-context|after-context}}={{3}} \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match with color output:", "command": "xzgrep --with-filename --line-number --color=always \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "xzgrep --only-matching \"{{search_pattern}}\" {{path/to/file}}"}]}
{"command": "xzless", "tasks": [{"task": "View a compressed file:", "command": "xzless {{path/to/file}}"}, {"task": "View a compressed file and display line numbers:", "command": "xzless --LINE-NUMBERS {{path/to/file}}"}, {"task": "View a compressed file and quit if the entire file can be displayed on the first screen:", "command": "xzless --quit-if-one-screen {{path/to/file}}"}]}
{"command": "xzmore", "tasks": [{"task": "View a compressed file:", "command": "xzmore {{path/to/file}}"}]}
{"command": "yacas", "tasks": [{"task": "Start an interactive `yacas` session:", "command": "yacas"}, {"task": "While in a `yacas` session, execute a statement:", "command": "{{Integrate(x)Cos(x)}};"}, {"task": "While in a `yacas` session, display an example:", "command": "{{Example()}};"}, {"task": "Quit from a `yacas` session:", "command": "{{quit}}"}, {"task": "Execute one or more `yacas` scripts (without terminal or prompts), then exit:", "command": "yacas -p -c {{path/to/script1}} {{path/to/script2}}"}, {"task": "Execute and print the result of one statement, then exit:", "command": "echo \"{{Echo( Deriv(x)Cos(1/x) );}}\" | yacas -p -c /dev/stdin"}]}
{"command": "yacc", "tasks": [{"task": "Create a file `y.tab.c` containing the C parser code and compile the grammar file with all necessary constant declarations for values. (Constant declarations file `y.tab.h` is created only when the `-d` flag is used):", "command": "yacc -d {{path/to/grammar_file.y}}"}, {"task": "Compile a grammar file containing the description of the parser and a report of conflicts generated by ambiguities in the grammar:", "command": "yacc -d {{path/to/grammar_file.y}} -v"}, {"task": "Compile a grammar file, and prefix output filenames with `prefix` instead of `y`:", "command": "yacc -d {{path/to/grammar_file.y}} -v -b {{prefix}}"}]}
{"command": "yank", "tasks": [{"task": "Yank using the default delimiters (\\f, \\n, \\r, \\s, \\t):", "command": "{{sudo dmesg}} | yank"}, {"task": "Yank an entire line:", "command": "{{sudo dmesg}} | yank -l"}, {"task": "Yank using a specific delimiter:", "command": "{{echo hello=world}} | yank -d {{=}}"}, {"task": "Only yank fields matching a specific pattern:", "command": "{{ps ux}} | yank -g \"{{[0-9]+}}\""}]}
{"command": "yapf", "tasks": [{"task": "Display a diff of the changes that would be made, without making them (dry-run):", "command": "yapf --diff {{path/to/file}}"}, {"task": "Format the file in-place and display a diff of the changes:", "command": "yapf --diff --in-place {{path/to/file}}"}, {"task": "Recursively format all Python files in a directory, concurrently:", "command": "yapf --recursive --in-place --style {{pep8}} --parallel {{path/to/directory}}"}]}
{"command": "yard", "tasks": [{"task": "Create the documentation:", "command": "yard"}, {"task": "Create the documentation and save it to one file:", "command": "yard --one-file"}, {"task": "List all undocumented objects:", "command": "yard stats --list-undoc"}]}
{"command": "yarn-why", "tasks": [{"task": "Show why a Yarn package is installed:", "command": "yarn-why {{package_name}}"}]}
{"command": "yarn", "tasks": [{"task": "Install a module globally:", "command": "yarn global add {{module_name}}"}, {"task": "Install all dependencies referenced in the `package.json` file (the `install` is optional):", "command": "yarn install"}, {"task": "Install a module and save it as a dependency to the `package.json` file (add `--dev` to save as a dev dependency):", "command": "yarn add {{module_name}}@{{version}}"}, {"task": "Uninstall a module and remove it from the `package.json` file:", "command": "yarn remove {{module_name}}"}, {"task": "Interactively create a `package.json` file:", "command": "yarn init"}, {"task": "Identify whether a module is a dependency and list other modules that depend upon it:", "command": "yarn why {{module_name}}"}]}
{"command": "ybacklight", "tasks": [{"task": "Print current brightness and maximal brightness, shortened and separated by a slash:", "command": "ybacklight Sc/Sm"}, {"task": "Set the brightness to 420:", "command": "ybacklight s{{420}}"}, {"task": "Increase the brightness by 42 big steps (4200 by default):", "command": "ybacklight Si{{42}}"}, {"task": "Decrease the brightness by 300:", "command": "ybacklight d{{300}}"}]}
{"command": "yes", "tasks": [{"task": "Repeatedly output \"message\":", "command": "yes {{message}}"}, {"task": "Repeatedly output \"y\":", "command": "yes"}, {"task": "Accept everything prompted by the `apt-get` command:", "command": "yes | sudo apt-get install {{program}}"}]}
{"command": "yesod", "tasks": [{"task": "Create a new scaffolded site, with SQLite as backend, in the `my-project` directory:", "command": "stack new {{my-project}} {{yesod-sqlite}}"}, {"task": "Install the Yesod CLI tool within a Yesod scaffolded site:", "command": "stack build yesod-bin cabal-install --install-ghc"}, {"task": "Start development server:", "command": "stack exec -- yesod devel"}, {"task": "Touch files with altered Template Haskell dependencies:", "command": "stack exec -- yesod touch"}, {"task": "Deploy application using Keter (Yesod's deployment manager):", "command": "stack exec -- yesod keter"}]}
{"command": "ykinfo", "tasks": [{"task": "Display all information from YubiKey:", "command": "ykinfo -a"}, {"task": "Get only serial in decimal from YubiKey:", "command": "ykinfo -s -q"}, {"task": "Get capabilities from YubiKey:", "command": "ykinfo -c"}]}
{"command": "ykman", "tasks": [{"task": "Get information from YubiKey:", "command": "ykman info"}, {"task": "Get information for a given application from YubiKey:", "command": "ykman {{fido|oath|openpgp|otp|piv}} info"}, {"task": "Get a list of enabled applications over NFC from YubiKey:", "command": "ykman config nfc --list"}, {"task": "Enable application over USB on YubiKey:", "command": "ykman config usb --enable {{OTP|U2F|FIDO2|OATH|PIV|OPENPGP|HSMAUTH}}"}]}
{"command": "yolo", "tasks": [{"task": "Create a copy of the default configuration in your current working directory:", "command": "yolo task=init"}, {"task": "Train the object detection, instance segment, or classification model with the specified configuration file:", "command": "yolo task={{detect|segment|classify}} mode=train cfg={{path/to/config.yaml}}"}]}
{"command": "you-get", "tasks": [{"task": "Print media information about a specific media on the web:", "command": "you-get --info {{https://example.com/video?id=value}}"}, {"task": "Download a media from a specific URL:", "command": "you-get {{https://example.com/video?id=value}}"}, {"task": "Search on Google Videos and download:", "command": "you-get {{keywords}}"}, {"task": "Download a media to a specific location:", "command": "you-get --output-dir {{path/to/directory}} --output-filename {{filename}} {{https://example.com/watch?v=value}}"}, {"task": "Download a media using a proxy:", "command": "you-get --http-proxy {{proxy_server}} {{https://example.com/watch?v=value}}"}]}
{"command": "youtube-dl", "tasks": [{"task": "Download a video or playlist:", "command": "youtube-dl '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'"}, {"task": "List all formats that a video or playlist is available in:", "command": "youtube-dl --list-formats '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'"}, {"task": "Download a video or playlist at a specific quality:", "command": "youtube-dl --format \"{{best[height<=480]}}\" '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'"}, {"task": "Download the audio from a video and convert it to an MP3:", "command": "youtube-dl -x --audio-format {{mp3}} '{{url}}'"}, {"task": "Download the best quality audio and video and merge them:", "command": "youtube-dl -f bestvideo+bestaudio '{{url}}'"}, {"task": "Download video(s) as MP4 files with custom filenames:", "command": "youtube-dl --format {{mp4}} -o \"{{%(playlist_index)s-%(title)s by %(uploader)s on %(upload_date)s in %(playlist)s.%(ext)s}}\" '{{url}}'"}, {"task": "Download a particular language's subtitles along with the video:", "command": "youtube-dl --sub-lang {{en}} --write-sub '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'"}, {"task": "Download a playlist and extract MP3s from it:", "command": "youtube-dl -f \"bestaudio\" --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o \"%(title)s.%(ext)s\" {{url_to_playlist}}"}]}
{"command": "youtube-viewer", "tasks": [{"task": "Search for a video:", "command": "youtube-viewer {{search_term}}"}, {"task": "Log in to your YouTube account:", "command": "youtube-viewer --login"}, {"task": "Watch a video with a specific URL in VLC:", "command": "youtube-viewer --player={{vlc}} {{https://youtube.com/watch?v=dQw4w9WgXcQ}}"}, {"task": "Display a search prompt and play the selected video in 720p:", "command": "youtube-viewer -{{7}}"}]}
{"command": "yq", "tasks": [{"task": "Output a YAML file, in pretty-print format (v4+):", "command": "yq eval {{path/to/file.yaml}}"}, {"task": "Output a YAML file, in pretty-print format (v3):", "command": "yq read {{path/to/file.yaml}} --colors"}, {"task": "Output the first element in a YAML file that contains only an array (v4+):", "command": "yq eval '.[0]' {{path/to/file.yaml}}"}, {"task": "Output the first element in a YAML file that contains only an array (v3):", "command": "yq read {{path/to/file.yaml}} '[0]'"}, {"task": "Set (or overwrite) a key to a value in a file (v4+):", "command": "yq eval '.{{key}} = \"{{value}}\"' --inplace {{path/to/file.yaml}}"}, {"task": "Set (or overwrite) a key to a value in a file (v3):", "command": "yq write --inplace {{path/to/file.yaml}} '{{key}}' '{{value}}'"}, {"task": "Merge two files and print to `stdout` (v4+):", "command": "yq eval-all 'select(filename == \"{{path/to/file1.yaml}}\") * select(filename == \"{{path/to/file2.yaml}}\")' {{path/to/file1.yaml}} {{path/to/file2.yaml}}"}, {"task": "Merge two files and print to `stdout` (v3):", "command": "yq merge {{path/to/file1.yaml}} {{path/to/file2.yaml}} --colors"}]}
{"command": "yt-dlp", "tasks": [{"task": "Download a video or playlist (with the default options from command below):", "command": "yt-dlp \"{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}\""}, {"task": "List the available downloadable formats for a video:", "command": "yt-dlp --list-formats \"{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}\""}, {"task": "Download a video with a defined format, in this case the best mp4 video available (default is \"bv\\*+ba/b\"):", "command": "yt-dlp --format \"{{bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]}}\" \"{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}\""}, {"task": "Extract audio from a video (requires ffmpeg or ffprobe):", "command": "yt-dlp --extract-audio \"{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}\""}, {"task": "Specify audio format and audio quality of extracted audio (between 0 (best) and 10 (worst), default = 5):", "command": "yt-dlp --extract-audio --audio-format {{mp3}} --audio-quality {{0}} \"{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}\""}, {"task": "Download all playlists of YouTube channel/user keeping each playlist in separate directory:", "command": "yt-dlp -o \"{{%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s}}\" \"{{https://www.youtube.com/user/TheLinuxFoundation/playlists}}\""}, {"task": "Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home:", "command": "yt-dlp -u {{user}} -p {{password}} -P \"{{~/MyVideos}}\" -o \"{{%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s}}\" \"{{https://www.udemy.com/java-tutorial}}\""}, {"task": "Download entire series season keeping each series and each season in separate directory under C:/MyVideos:", "command": "yt-dlp -P \"{{C:/MyVideos}}\" -o \"{{%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s}}\" \"{{https://videomore.ru/kino_v_detalayah/5_sezon/367617}}\""}]}
{"command": "z", "tasks": [{"task": "Go to a directory that contains \"foo\" in the name:", "command": "z {{foo}}"}, {"task": "Go to a directory that contains \"foo\" and then \"bar\":", "command": "z {{foo}} {{bar}}"}, {"task": "Go to the highest-ranked directory matching \"foo\":", "command": "z -r {{foo}}"}, {"task": "Go to the most recently accessed directory matching \"foo\":", "command": "z -t {{foo}}"}, {"task": "List all directories in `z`'s database matching \"foo\":", "command": "z -l {{foo}}"}, {"task": "Remove the current directory from `z`'s database:", "command": "z -x ."}, {"task": "Restrict matches to subdirectories of the current directory:", "command": "z -c {{foo}}"}]}
{"command": "zbarimg", "tasks": [{"task": "Process an image file:", "command": "zbarimg {{image_file}}"}]}
{"command": "zcat", "tasks": [{"task": "Print the uncompressed contents of a gzipped file to `stdout`:", "command": "zcat {{file.txt.gz}}"}, {"task": "Print compression details of a gzipped file to `stdout`:", "command": "zcat -l {{file.txt.gz}}"}]}
{"command": "zcmp", "tasks": [{"task": "Invoke `cmp` on two files compressed via `gzip`:", "command": "zcmp {{path/to/file1.gz}} {{path/to/file2.gz}}"}, {"task": "Compare a file to its gzipped version (assuming `.gz` exists already):", "command": "zcmp {{path/to/file}}"}]}
{"command": "zdb", "tasks": [{"task": "Show detailed configuration of all mounted ZFS zpools:", "command": "zdb"}, {"task": "Show detailed configuration for a specific ZFS pool:", "command": "zdb -C {{poolname}}"}, {"task": "Show statistics about number, size and deduplication of blocks:", "command": "zdb -b {{poolname}}"}]}
{"command": "zdiff", "tasks": [{"task": "Compare two files, uncompressing them if necessary:", "command": "zdiff {{path/to/file1.gz}} {{path/to/file2.gz}}"}, {"task": "Compare a file to a gzipped archive with the same name:", "command": "zdiff {{path/to/file}}"}]}
{"command": "zeek", "tasks": [{"task": "Analyze live traffic from a network interface:", "command": "sudo zeek --iface {{interface}}"}, {"task": "Analyze live traffic from a network interface and load custom scripts:", "command": "sudo zeek --iface {{interface}} {{script1}} {{script2}}"}, {"task": "Analyze live traffic from a network interface, without loading any scripts:", "command": "sudo zeek --bare-mode --iface {{interface}}"}, {"task": "Analyze live traffic from a network interface, applying a `tcpdump` filter:", "command": "sudo zeek --filter {{path/to/filter}} --iface {{interface}}"}, {"task": "Analyze live traffic from a network interface using a watchdog timer:", "command": "sudo zeek --watchdog --iface {{interface}}"}, {"task": "Analyze traffic from a `pcap` file:", "command": "zeek --readfile {{path/to/file.trace}}"}]}
{"command": "zegrep", "tasks": [{"task": "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-sensitive):", "command": "zegrep \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-insensitive):", "command": "zegrep --ignore-case \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines that do not match a pattern:", "command": "zegrep --invert-match \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Print file name and line number for each match:", "command": "zegrep --with-filename --line-number \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Search for lines matching a pattern, printing only the matched text:", "command": "zegrep --only-matching \"{{search_pattern}}\" {{path/to/file}}"}, {"task": "Recursively search files in a compressed file for a pattern:", "command": "zegrep --recursive \"{{search_pattern}}\" {{path/to/file}}"}]}
{"command": "zek", "tasks": [{"task": "Generate a Go struct from a given XML from `stdin` and display output on `stdout`:", "command": "cat {{path/to/input.xml}} | zek"}, {"task": "Generate a Go struct from a given XML from `stdin` and send output to a file:", "command": "curl -s {{https://url/to/xml}} | zek -o {{path/to/output.go}}"}, {"task": "Generate an example Go program from a given XML from `stdin` and send output to a file:", "command": "cat {{path/to/input.xml}} | zek -p -o {{path/to/output.go}}"}]}
{"command": "zellij", "tasks": [{"task": "Start a new named session:", "command": "zellij --session {{name}}"}, {"task": "List existing sessions:", "command": "zellij list-sessions"}, {"task": "Attach to the most recently used session:", "command": "zellij attach"}, {"task": "Open a new pane (inside a zellij session):", "command": "Alt + N"}, {"task": "Detach from the current session (inside a zellij session):", "command": "Ctrl + O, D"}]}
{"command": "zfgrep", "tasks": [{"task": "Search for an exact string in a file:", "command": "zfgrep {{search_string}} {{path/to/file}}"}, {"task": "Count the number of lines that match the given string in a file:", "command": "zfgrep --count {{search_string}} {{path/to/file}}"}, {"task": "Show the line number in the file along with the matching lines:", "command": "zfgrep --line-number {{search_string}} {{path/to/file}}"}, {"task": "Display all lines except those that contain the search string:", "command": "zfgrep --invert-match {{search_string}} {{path/to/file}}"}, {"task": "List only filenames whose content matches the search string at least once:", "command": "zfgrep --files-with-matches {{search_string}} {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "zfs", "tasks": [{"task": "List all available zfs filesystems:", "command": "zfs list"}, {"task": "Create a new ZFS filesystem:", "command": "zfs create {{pool_name/filesystem_name}}"}, {"task": "Delete a ZFS filesystem:", "command": "zfs destroy {{pool_name/filesystem_name}}"}, {"task": "Create a Snapshot of a ZFS filesystem:", "command": "zfs snapshot {{pool_name/filesystem_name}}@{{snapshot_name}}"}, {"task": "Enable compression on a filesystem:", "command": "zfs set compression=on {{pool_name/filesystem_name}}"}, {"task": "Change mountpoint for a filesystem:", "command": "zfs set mountpoint={{/my/mount/path}} {{pool_name/filesystem_name}}"}]}
{"command": "zgrep", "tasks": [{"task": "Grep a pattern in a compressed file (case-sensitive):", "command": "zgrep {{pattern}} {{path/to/compressed/file}}"}, {"task": "Grep a pattern in a compressed file (case-insensitive):", "command": "zgrep -i {{pattern}} {{path/to/compressed/file}}"}, {"task": "Output count of lines containing matched pattern in a compressed file:", "command": "zgrep -c {{pattern}} {{path/to/compressed/file}}"}, {"task": "Display the lines which don’t have the pattern present (Invert the search function):", "command": "zgrep -v {{pattern}} {{path/to/compressed/file}}"}, {"task": "Grep a compressed file for multiple patterns:", "command": "zgrep -e \"{{pattern_1}}\" -e \"{{pattern_2}}\" {{path/to/compressed/file}}"}, {"task": "Use extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`):", "command": "zgrep -E {{regular_expression}} {{path/to/file}}"}, {"task": "Print 3 lines of [C]ontext around, [B]efore, or [A]fter each match:", "command": "zgrep -{{C|B|A}} {{3}} {{pattern}} {{path/to/compressed/file}}"}]}
{"command": "zig", "tasks": [{"task": "Compile the project in the current directory:", "command": "zig build"}, {"task": "Compile and run the project in the current directory:", "command": "zig build run"}, {"task": "Initialize a `zig build` application:", "command": "zig init-exe"}, {"task": "Initialize a `zig build` library:", "command": "zig init-lib"}, {"task": "Create and run a test build:", "command": "zig test {{path/to/file.zig}}"}, {"task": "Reformat Zig source into canonical form:", "command": "zig fmt {{path/to/file.zig}}"}, {"task": "Use Zig as a drop-in C compiler:", "command": "zig cc {{path/to/file.c}}"}, {"task": "Use Zig as a drop-in C++ compiler:", "command": "zig c++ {{path/to/file.cpp}}"}]}
{"command": "zip", "tasks": [{"task": "Add files/directories to a specific archive ([r]ecursively):", "command": "zip -r {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Remove files/directories from a specific archive ([d]elete):", "command": "zip -d {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Archive files/directories e[x]cluding specified ones:", "command": "zip -r {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} -x {{path/to/excluded_files_or_directories}}"}, {"task": "Archive files/directories with a specific compression level (`0` - the lowest, `9` - the highest):", "command": "zip -r -{{0-9}} {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Create an [e]ncrypted archive with a specific password:", "command": "zip -r -e {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Archive files/directories to a multi-part [s]plit zip file (e.g. 3 GB parts):", "command": "zip -r -s {{3g}} {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Print a specific archive contents:", "command": "zip -sf {{path/to/compressed.zip}}"}]}
{"command": "zip2john", "tasks": [{"task": "Extract the password hash from an archive, listing all files in the archive:", "command": "zip2john {{path/to/file.zip}}"}, {"task": "Extract the password hash using [o]nly a specific compressed file:", "command": "zip2john -o {{path/to/compressed_file}} {{path/to/file.zip}}"}, {"task": "Extract the password hash from a compressed file to a specific file (for use with John the Ripper):", "command": "zip2john -o {{path/to/compressed_file}} {{path/to/file.zip}} > {{file.hash}}"}]}
{"command": "zipalign", "tasks": [{"task": "Align the data of a ZIP file on 4-byte boundaries:", "command": "zipalign {{4}} {{path/to/input.zip}} {{path/to/output.zip}}"}, {"task": "Check that a ZIP file is correctly aligned on 4-byte boundaries and display the results in a verbose manner:", "command": "zipalign -v -c {{4}} {{path/to/input.zip}}"}]}
{"command": "zipgrep", "tasks": [{"task": "Search for a pattern within a ZIP archive:", "command": "zipgrep \"{{search_pattern}}\" {{path/to/file.zip}}"}, {"task": "Print file name and line number for each match:", "command": "zipgrep -H -n \"{{search_pattern}}\" {{path/to/file.zip}}"}, {"task": "Search for lines that do not match a pattern:", "command": "zipgrep -v \"{{search_pattern}}\" {{path/to/file.zip}}"}, {"task": "Specify files inside a ZIP archive from search:", "command": "zipgrep \"{{search_pattern}}\" {{path/to/file.zip}} {{file/to/search1}} {{file/to/search2}}"}, {"task": "Exclude files inside a ZIP archive from search:", "command": "zipgrep \"{{search_pattern}}\" {{path/to/file.zip}} -x {{file/to/exclude1}} {{file/to/exclude2}}"}]}
{"command": "zipinfo", "tasks": [{"task": "List all files in a `.zip` file in long format (permissions, ownership, size, and modification date):", "command": "zipinfo {{path/to/archive.zip}}"}, {"task": "List all files in a `.zip` file:", "command": "zipinfo -1 {{path/to/archive.zip}}"}]}
{"command": "zipnote", "tasks": [{"task": "View the comments on a zip archive:", "command": "zipnote {{path/to/file.zip}}"}, {"task": "Extract the comments on a zip archive to a file:", "command": "zipnote {{path/to/file.zip}} > {{path/to/file.txt}}"}, {"task": "Add/Update comments in a zip archive from a file:", "command": "zipnote -w {{path/to/file.zip}} < {{path/to/file.txt}}"}]}
{"command": "zless", "tasks": [{"task": "Page through a `gzip` compressed file with `less`:", "command": "zless {{file.txt.gz}}"}]}
{"command": "zlib-flate", "tasks": [{"task": "Compress a file:", "command": "zlib-flate -compress < {{path/to/input_file}} > {{path/to/compressed.zlib}}"}, {"task": "Uncompress a file:", "command": "zlib-flate -uncompress < {{path/to/compressed.zlib}} > {{path/to/output_file}}"}, {"task": "Compress a file with a specified compression level. 0=Fastest (Worst), 9=Slowest (Best):", "command": "zlib-flate -compress={{compression_level}} < {{path/to/input_file}} > {{path/to/compressed.zlib}}"}]}
{"command": "zm", "tasks": [{"task": "Make a new draft:", "command": "zm new"}, {"task": "Edit a draft:", "command": "zm edit"}, {"task": "Publish a draft and commit it with git:", "command": "zm publish"}]}
{"command": "zmore", "tasks": [{"task": "Open a compressed file:", "command": "zmore {{path/to/file.txt.gz}}"}, {"task": "Display the next page of the file:", "command": "<Space>"}, {"task": "Search for a pattern in the file (press `n` to go to next match):", "command": "/{{regular_expression}}"}, {"task": "Exit:", "command": "q"}, {"task": "Display interactive command help:", "command": "h"}]}
{"command": "zmv", "tasks": [{"task": "Move files using a regular expression-like pattern:", "command": "zmv '{{(*).log}}' '{{$1.txt}}'"}, {"task": "Preview the result of a move, without making any actual changes:", "command": "zmv -n '{{(*).log}}' '{{$1.txt}}'"}, {"task": "Interactively move files, with a prompt before every change:", "command": "zmv -i '{{(*).log}}' '{{$1.txt}}'"}, {"task": "Verbosely print each action as it's being executed:", "command": "zmv -v '{{(*).log}}' '{{$1.txt}}'"}]}
{"command": "znew", "tasks": [{"task": "Recompress a file from `.Z` to `.gz` format:", "command": "znew {{path/to/file1.Z}}"}, {"task": "Recompress multiple files and display the achieved size reduction % per file:", "command": "znew -v {{path/to/file1.Z}} {{path/to/file2.Z}} {{path/to/file3.Z}}"}, {"task": "Recompress a file using the slowest compression method (for optimal compression):", "command": "znew -9 {{path/to/file1.Z}}"}, {"task": "Recompress a file, [K]eeping the `.Z` file if it is smaller than the `.gz` file:", "command": "znew -K {{path/to/file1.Z}}"}]}
{"command": "zola", "tasks": [{"task": "Create the directory structure used by Zola at the given directory:", "command": "zola init {{my_site}}"}, {"task": "Build the whole site in the `public` directory after deleting it:", "command": "zola build"}, {"task": "Build the whole site into a different directory:", "command": "zola build --output-dir {{path/to/output_directory/}}"}, {"task": "Build and serve the site using a local server (default is `127.0.0.1:1111`):", "command": "zola serve"}, {"task": "Build all pages just like the build command would, but without writing any of the results to disk:", "command": "zola check"}]}
{"command": "zopflipng", "tasks": [{"task": "Optimize a PNG:", "command": "zopflipng {{input.png}} {{output.png}}"}, {"task": "Optimize several PNGs and save with given prefix:", "command": "zopflipng --prefix={{prefix}} {{image1.png}} {{image2.png}} {{image3.png}}"}]}
{"command": "zotero", "tasks": [{"task": "Run with the GUI:", "command": "zotero"}, {"task": "Run in headless mode:", "command": "zotero --headless"}, {"task": "Run with a specific profile:", "command": "zotero -P {{profile}}"}, {"task": "Run the Migration Assistant:", "command": "zotero --migration"}]}
{"command": "zoxide", "tasks": [{"task": "Go to the highest-ranked directory that contains \"foo\" in the name:", "command": "zoxide query {{foo}}"}, {"task": "Go to the highest-ranked directory that contains \"foo\" and then \"bar\":", "command": "zoxide query {{foo}} {{bar}}"}, {"task": "Start an interactive directory search (requires `fzf`):", "command": "zoxide query --interactive"}, {"task": "Add a directory or increment its rank:", "command": "zoxide add {{path/to/directory}}"}, {"task": "Remove a directory from `zoxide`'s database interactively:", "command": "zoxide remove {{path/to/directory}} --interactive"}, {"task": "Generate shell configuration for command aliases (`z`, `za`, `zi`, `zq`, `zr`):", "command": "zoxide init {{bash|fish|zsh}}"}]}
{"command": "zpool", "tasks": [{"task": "Show the configuration and status of all ZFS zpools:", "command": "zpool status"}, {"task": "Check a ZFS pool for errors (verifies the checksum of EVERY block). Very CPU and disk intensive:", "command": "zpool scrub {{pool_name}}"}, {"task": "List zpools available for import:", "command": "zpool import"}, {"task": "Import a zpool:", "command": "zpool import {{pool_name}}"}, {"task": "Export a zpool (unmount all filesystems):", "command": "zpool export {{pool_name}}"}, {"task": "Show the history of all pool operations:", "command": "zpool history {{pool_name}}"}, {"task": "Create a mirrored pool:", "command": "zpool create {{pool_name}} mirror {{disk1}} {{disk2}} mirror {{disk3}} {{disk4}}"}, {"task": "Add a cache (L2ARC) device to a zpool:", "command": "zpool add {{pool_name}} cache {{cache_disk}}"}]}
{"command": "zsh", "tasks": [{"task": "Start an interactive shell session:", "command": "zsh"}, {"task": "Execute specific [c]ommands:", "command": "zsh -c \"{{echo Hello world}}\""}, {"task": "Execute a specific script:", "command": "zsh {{path/to/script.zsh}}"}, {"task": "Check a specific script for syntax errors without executing it:", "command": "zsh --no-exec {{path/to/script.zsh}}"}, {"task": "Execute specific commands from `stdin`:", "command": "{{echo Hello world}} | zsh"}, {"task": "Execute a specific script, printing each command in the script before executing it:", "command": "zsh --xtrace {{path/to/script.zsh}}"}, {"task": "Start an interactive shell session in verbose mode, printing each command before executing it:", "command": "zsh --verbose"}, {"task": "Execute a specific command inside `zsh` with disabled glob patterns:", "command": "noglob {{command}}"}]}
{"command": "zstd", "tasks": [{"task": "Compress a file into a new file with the `.zst` suffix:", "command": "zstd {{path/to/file}}"}, {"task": "Decompress a file:", "command": "zstd -d {{path/to/file}}.zst"}, {"task": "Decompress to `stdout`:", "command": "zstd -dc {{path/to/file}}.zst"}, {"task": "Compress a file specifying the compression level, where 1=fastest, 19=slowest and 3=default:", "command": "zstd -{{level}} {{path/to/file}}"}, {"task": "Unlock higher compression levels (up to 22) using more memory (both for compression and decompression):", "command": "zstd --ultra -{{level}} {{path/to/file}}"}]}
{"command": "zstdless", "tasks": [{"task": "Open a `zstd` compressed file:", "command": "zstdless {{path/to/file.zst}}"}]}
{"command": "zsteg", "tasks": [{"task": "Detect embedded data in a PNG:", "command": "zsteg {{path/to/image.png}}"}, {"task": "Detect embedded data in a BMP image, using all known methods:", "command": "zsteg --all {{path/to/image.bmp}}"}, {"task": "Detect embedded data in a PNG, iterating pixels vertically and using MSB first:", "command": "zsteg --msb --order yx {{path/to/image.png}}"}, {"task": "Detect embedded data in a BMP image, specifying the bits to consider:", "command": "zsteg --bits {{1,2,3|1-3}} {{path/to/image.bmp}}"}, {"task": "Detect embedded data in a PNG, extracting only prime pixels and inverting bits:", "command": "zsteg --prime --invert {{path/to/image.png}}"}, {"task": "Detect embedded data in a BMP image, specifying the minimum length of the strings to be found and the find mode:", "command": "zsteg --min-str-len {{10}} --strings {{first|all|longest|none}} {{path/to/image.bmp}}"}]}
{"command": "Exclamation mark", "tasks": [{"task": "Substitute with the previous command and run it with sudo:", "command": "sudo !!"}, {"task": "Substitute with a command based on its line number found with `history`:", "command": "!{{number}}"}, {"task": "Substitute with a command that was used specified lines back:", "command": "!-{{number}}"}, {"task": "Substitute with the most recent command that starts with `string`:", "command": "!{{string}}"}]}
{"command": "a2disconf", "tasks": [{"task": "Disable a configuration file:", "command": "sudo a2disconf {{configuration_file}}"}, {"task": "Don't show informative messages:", "command": "sudo a2disconf --quiet {{configuration_file}}"}]}
{"command": "a2dismod", "tasks": [{"task": "Disable a module:", "command": "sudo a2dismod {{module}}"}, {"task": "Don't show informative messages:", "command": "sudo a2dismod --quiet {{module}}"}]}
{"command": "a2dissite", "tasks": [{"task": "Disable a virtual host:", "command": "sudo a2dissite {{virtual_host}}"}, {"task": "Don't show informative messages:", "command": "sudo a2dissite --quiet {{virtual_host}}"}]}
{"command": "a2enconf", "tasks": [{"task": "Enable a configuration file:", "command": "sudo a2enconf {{configuration_file}}"}, {"task": "Don't show informative messages:", "command": "sudo a2enconf --quiet {{configuration_file}}"}]}
{"command": "a2enmod", "tasks": [{"task": "Enable a module:", "command": "sudo a2enmod {{module}}"}, {"task": "Don't show informative messages:", "command": "sudo a2enmod --quiet {{module}}"}]}
{"command": "a2ensite", "tasks": [{"task": "Enable a virtual host:", "command": "sudo a2ensite {{virtual_host}}"}, {"task": "Don't show informative messages:", "command": "sudo a2ensite --quiet {{virtual_host}}"}]}
{"command": "a2query", "tasks": [{"task": "List enabled Apache modules:", "command": "sudo a2query -m"}, {"task": "Check if a specific module is installed:", "command": "sudo a2query -m {{module_name}}"}, {"task": "List enabled virtual hosts:", "command": "sudo a2query -s"}, {"task": "Display the currently enabled Multi Processing Module:", "command": "sudo a2query -M"}, {"task": "Display the Apache version:", "command": "sudo a2query -v"}]}
{"command": "abbr", "tasks": [{"task": "Add a new abbreviation:", "command": "abbr --add {{abbreviation_name}} {{command}} {{command_arguments}}"}, {"task": "Rename an existing abbreviation:", "command": "abbr --rename {{old_name}} {{new_name}}"}, {"task": "Erase an existing abbreviation:", "command": "abbr --erase {{abbreviation_name}}"}, {"task": "Import the abbreviations defined on another host over SSH:", "command": "ssh {{host_name}} abbr --show | source"}]}
{"command": "abroot", "tasks": [{"task": "Output the current or future root partition state:", "command": "sudo abroot get {{present|future}}"}, {"task": "Enter the transactional shell in the future root partition and switch root on the next boot:", "command": "sudo abroot shell"}, {"task": "Execute a specific command in the transactional shell in the future root partition and switch to it on the next boot:", "command": "sudo abroot exec \"{{command}}\""}, {"task": "Install specific packages in the host inside the transactional shell in the future root partition and switch to it on the next boot:", "command": "sudo abroot exec apt install {{package1 package2 ...}}"}, {"task": "Update the boot partition (for advanced users only):", "command": "sudo abroot _update-boot"}, {"task": "Display help:", "command": "abroot --help"}, {"task": "Display version:", "command": "abroot --version"}]}
{"command": "ac", "tasks": [{"task": "Print how long the current user has been connected in hours:", "command": "ac"}, {"task": "Print how long users have been connected in hours:", "command": "ac --individual-totals"}, {"task": "Print how long a particular user has been connected in hours:", "command": "ac --individual-totals {{username}}"}, {"task": "Print how long a particular user has been connected in hours per day (with total):", "command": "ac --daily-totals --individual-totals {{username}}"}, {"task": "Also display additional details:", "command": "ac --compatibility"}]}
{"command": "acountry", "tasks": [{"task": "Print a country where an IPv4 address or host is located:", "command": "acountry {{example.com}}"}, {"task": "Print extra [d]ebugging output:", "command": "acountry -d {{example.com}}"}, {"task": "Print more [v]erbose information:", "command": "acountry -v {{example.com}}"}]}
{"command": "acpi", "tasks": [{"task": "Show battery information:", "command": "acpi"}, {"task": "Show thermal information:", "command": "acpi -t"}, {"task": "Show cooling device information:", "command": "acpi -c"}, {"task": "Show thermal information in Fahrenheit:", "command": "acpi -tf"}, {"task": "Show all information:", "command": "acpi -V"}, {"task": "Extract information from `/proc` instead of `/sys`:", "command": "acpi -p"}]}
{"command": "add-apt-repository", "tasks": [{"task": "Add a new apt repository:", "command": "add-apt-repository {{repository_spec}}"}, {"task": "Remove an apt repository:", "command": "add-apt-repository --remove {{repository_spec}}"}, {"task": "Update the package cache after adding a repository:", "command": "add-apt-repository --update {{repository_spec}}"}, {"task": "Allow source packages to be downloaded from the repository:", "command": "add-apt-repository --enable-source {{repository_spec}}"}]}
{"command": "addpart", "tasks": [{"task": "Tell the kernel about the existence of the specified partition:", "command": "addpart {{device}} {{partition}} {{start}} {{length}}"}]}
{"command": "addr2line", "tasks": [{"task": "Display the filename and line number of the source code from an instruction address of an executable:", "command": "addr2line --exe={{path/to/executable}} {{address}}"}, {"task": "Display the function name, filename and line number:", "command": "addr2line --exe={{path/to/executable}} --functions {{address}}"}, {"task": "Demangle the function name for C++ code:", "command": "addr2line --exe={{path/to/executable}} --functions --demangle {{address}}"}]}
{"command": "adduser", "tasks": [{"task": "Create a new user with a default home directory and prompt the user to set a password:", "command": "adduser {{username}}"}, {"task": "Create a new user without a home directory:", "command": "adduser --no-create-home {{username}}"}, {"task": "Create a new user with a home directory at the specified path:", "command": "adduser --home {{path/to/home}} {{username}}"}, {"task": "Create a new user with the specified shell set as the login shell:", "command": "adduser --shell {{path/to/shell}} {{username}}"}, {"task": "Create a new user belonging to the specified group:", "command": "adduser --ingroup {{group}} {{username}}"}]}
{"command": "adig", "tasks": [{"task": "Display A (default) record from DNS for hostname(s):", "command": "adig {{example.com}}"}, {"task": "Display extra [d]ebugging output:", "command": "adig -d {{example.com}}"}, {"task": "Connect to a specific DNS [s]erver:", "command": "adig -s {{1.2.3.4}} {{example.com}}"}, {"task": "Use a specific TCP port to connect to a DNS server:", "command": "adig -T {{port}} {{example.com}}"}, {"task": "Use a specific UDP port to connect to a DNS server:", "command": "adig -U {{port}} {{example.com}}"}]}
{"command": "ahost", "tasks": [{"task": "Print an `A` or `AAAA` record associated with a hostname or IP address:", "command": "ahost {{example.com}}"}, {"task": "Display some extra debugging output:", "command": "ahost -d {{example.com}}"}, {"task": "Display the record with a specified type:", "command": "ahost -t {{a|aaaa|u}} {{example.com}}"}]}
{"command": "alien", "tasks": [{"task": "Convert a specific installation file to Debian format (`.deb` extension):", "command": "sudo alien --to-deb {{path/to/file}}"}, {"task": "Convert a specific installation file to Red Hat format (`.rpm` extension):", "command": "sudo alien --to-rpm {{path/to/file}}"}, {"task": "Convert a specific installation file to a Slackware installation file (`.tgz` extension):", "command": "sudo alien --to-tgz {{path/to/file}}"}, {"task": "Convert a specific installation file to Debian format and install on the system:", "command": "sudo alien --to-deb --install {{path/to/file}}"}]}
{"command": "alpine", "tasks": [{"task": "Open alpine normally:", "command": "alpine"}, {"task": "Open alpine directly to the message composition screen to send an email to a given email address:", "command": "alpine {{email@example.net}}"}, {"task": "Quit alpine:", "command": "'q' then 'y'"}]}
{"command": "alternatives", "tasks": [{"task": "View documentation for the original command:", "command": "tldr update-alternatives"}]}
{"command": "amixer", "tasks": [{"task": "Turn up the master volume by 10%:", "command": "amixer -D pulse sset Master {{10%+}}"}, {"task": "Turn down the master volume by 10%:", "command": "amixer -D pulse sset Master {{10%-}}"}]}
{"command": "anbox", "tasks": [{"task": "Launch Anbox into the app manager:", "command": "anbox launch --package={{org.anbox.appmgr}} --component={{org.anbox.appmgr.AppViewActivity}}"}]}
{"command": "apache2ctl", "tasks": [{"task": "Start the Apache daemon. Throw a message if it is already running:", "command": "sudo apache2ctl start"}, {"task": "Stop the Apache daemon:", "command": "sudo apache2ctl stop"}, {"task": "Restart the Apache daemon:", "command": "sudo apache2ctl restart"}, {"task": "Test syntax of the configuration file:", "command": "sudo apache2ctl -t"}, {"task": "List loaded modules:", "command": "sudo apache2ctl -M"}]}
{"command": "apk", "tasks": [{"task": "Update repository indexes from all remote repositories:", "command": "apk update"}, {"task": "Install a new package:", "command": "apk add {{package}}"}, {"task": "Remove a package:", "command": "apk del {{package}}"}, {"task": "Repair a package or upgrade it without modifying main dependencies:", "command": "apk fix {{package}}"}, {"task": "Search for a package via keywords:", "command": "apk search {{keywords}}"}, {"task": "Display information about a specific package:", "command": "apk info {{package}}"}]}
{"command": "aplay", "tasks": [{"task": "Play a specific file (sampling rate, bit depth, etc. will be automatically determined for the file format):", "command": "aplay {{path/to/file}}"}, {"task": "Play the first 10 seconds of a specific file at 2500 Hz:", "command": "aplay --duration={{10}} --rate={{2500}} {{path/to/file}}"}, {"task": "Play the raw file as a 22050 Hz, mono, 8-bit, Mu-Law `.au` file:", "command": "aplay --channels={{1}} --file-type {{raw}} --rate={{22050}} --format={{mu_law}} {{path/to/file}}"}]}
{"command": "apport-bug", "tasks": [{"task": "Report a bug about the whole system:", "command": "apport-bug"}, {"task": "Report a bug about a specific package:", "command": "apport-bug {{package}}"}, {"task": "Report a bug about a specific executable:", "command": "apport-bug {{path/to/executable}}"}, {"task": "Report a bug about a specific process:", "command": "apport-bug {{PID}}"}]}
{"command": "apt-add-repository", "tasks": [{"task": "Add a new apt repository:", "command": "apt-add-repository {{repository_spec}}"}, {"task": "Remove an apt repository:", "command": "apt-add-repository --remove {{repository_spec}}"}, {"task": "Update the package cache after adding a repository:", "command": "apt-add-repository --update {{repository_spec}}"}, {"task": "Enable source packages:", "command": "apt-add-repository --enable-source {{repository_spec}}"}]}
{"command": "apt-cache", "tasks": [{"task": "Search for a package in your current sources:", "command": "apt-cache search {{query}}"}, {"task": "Show information about a package:", "command": "apt-cache show {{package}}"}, {"task": "Show whether a package is installed and up to date:", "command": "apt-cache policy {{package}}"}, {"task": "Show dependencies for a package:", "command": "apt-cache depends {{package}}"}, {"task": "Show packages that depend on a particular package:", "command": "apt-cache rdepends {{package}}"}]}
{"command": "apt-file", "tasks": [{"task": "Update the metadata database:", "command": "sudo apt update"}, {"task": "Search for packages that contain the specified file or path:", "command": "apt-file {{search|find}} {{partial_path/to/file}}"}, {"task": "List the contents of a specific package:", "command": "apt-file {{show|list}} {{package_name}}"}, {"task": "Search for packages that match the `regular_expression`:", "command": "apt-file {{search|find}} --regexp {{regular_expression}}"}]}
{"command": "apt-get", "tasks": [{"task": "Update the list of available packages and versions (it's recommended to run this before other `apt-get` commands):", "command": "apt-get update"}, {"task": "Install a package, or update it to the latest available version:", "command": "apt-get install {{package}}"}, {"task": "Remove a package:", "command": "apt-get remove {{package}}"}, {"task": "Remove a package and its configuration files:", "command": "apt-get purge {{package}}"}, {"task": "Upgrade all installed packages to their newest available versions:", "command": "apt-get upgrade"}, {"task": "Clean the local repository - removing package files (`.deb`) from interrupted downloads that can no longer be downloaded:", "command": "apt-get autoclean"}, {"task": "Remove all packages that are no longer needed:", "command": "apt-get autoremove"}, {"task": "Upgrade installed packages (like `upgrade`), but remove obsolete packages and install additional packages to meet new dependencies:", "command": "apt-get dist-upgrade"}]}
{"command": "apt-key", "tasks": [{"task": "List trusted keys:", "command": "apt-key list"}, {"task": "Add a key to the trusted keystore:", "command": "apt-key add {{public_key_file.asc}}"}, {"task": "Delete a key from the trusted keystore:", "command": "apt-key del {{key_id}}"}, {"task": "Add a remote key to the trusted keystore:", "command": "wget -qO - {{https://host.tld/filename.key}} | apt-key add -"}, {"task": "Add a key from keyserver with only key id:", "command": "apt-key adv --keyserver {{pgp.mit.edu}} --recv {{KEYID}}"}]}
{"command": "apt-mark", "tasks": [{"task": "Mark a package as automatically installed:", "command": "sudo apt-mark auto {{package_name}}"}, {"task": "Hold a package at its current version and prevent updates to it:", "command": "sudo apt-mark hold {{package_name}}"}, {"task": "Allow a package to be updated again:", "command": "sudo apt-mark unhold {{package_name}}"}, {"task": "Show manually installed packages:", "command": "apt-mark showmanual"}, {"task": "Show held packages that aren't being updated:", "command": "apt-mark showhold"}]}
{"command": "apt moo", "tasks": [{"task": "Print a cow easter egg:", "command": "apt moo"}]}
{"command": "apt", "tasks": [{"task": "Update the list of available packages and versions (it's recommended to run this before other `apt` commands):", "command": "sudo apt update"}, {"task": "Search for a given package:", "command": "apt search {{package}}"}, {"task": "Show information for a package:", "command": "apt show {{package}}"}, {"task": "Install a package, or update it to the latest available version:", "command": "sudo apt install {{package}}"}, {"task": "Remove a package (using `purge` instead also removes its configuration files):", "command": "sudo apt remove {{package}}"}, {"task": "Upgrade all installed packages to their newest available versions:", "command": "sudo apt upgrade"}, {"task": "List all packages:", "command": "apt list"}, {"task": "List installed packages:", "command": "apt list --installed"}]}
{"command": "aptitude", "tasks": [{"task": "Synchronize list of packages and versions available. This should be run first, before running subsequent aptitude commands:", "command": "aptitude update"}, {"task": "Install a new package and its dependencies:", "command": "aptitude install {{package}}"}, {"task": "Search for a package:", "command": "aptitude search {{package}}"}, {"task": "Search for an installed package (`?installed` is an aptitude search term):", "command": "aptitude search '?installed({{package}})'"}, {"task": "Remove a package and all packages depending on it:", "command": "aptitude remove {{package}}"}, {"task": "Upgrade installed packages to the newest available versions:", "command": "aptitude upgrade"}, {"task": "Upgrade installed packages (like `aptitude upgrade`) including removing obsolete packages and installing additional packages to meet new package dependencies:", "command": "aptitude full-upgrade"}, {"task": "Put an installed package on hold to prevent it from being automatically upgraded:", "command": "aptitude hold '?installed({{package}})'"}]}
{"command": "apx", "tasks": [{"task": "Initialize or reinitialize a specific container:", "command": "apx init"}, {"task": "Install specific packages in the container:", "command": "apx install {{package1 package2 ...}}"}, {"task": "Install a DEB/RPM package inside the container (Use `--dnf` flag for installing RPMs):", "command": "apx install --sideload {{path/to/package}}"}, {"task": "Remove specific packages from the container:", "command": "apx remove {{package1 package2 ...}}"}, {"task": "Search for specific packages:", "command": "apx search {{package1 package2 ...}}"}, {"task": "Enter the managed container shell to execute commands (type `exit` to exit the container):", "command": "apx enter"}, {"task": "Update the list of available packages in the container:", "command": "apx update"}, {"task": "Upgrade all installed packages in the container to their newest available version:", "command": "apx upgrade"}]}
{"command": "arch-chroot", "tasks": [{"task": "Start an interactive shell (`bash`, by default) in a new root directory:", "command": "arch-chroot {{path/to/new/root}}"}, {"task": "Specify the user (other than the current user) to run the shell as:", "command": "arch-chroot -u {{user}} {{path/to/new/root}}"}, {"task": "Run a custom command (instead of the default `bash`) in the new root directory:", "command": "arch-chroot {{path/to/new/root}} {{command}} {{command_arguments}}"}, {"task": "Specify the shell, other than the default `bash` (in this case, the `zsh` package should have been installed in the target system):", "command": "arch-chroot {{path/to/new/root}} {{zsh}}"}]}
{"command": "archey", "tasks": [{"task": "Show system information:", "command": "archey"}]}
{"command": "archinstall", "tasks": [{"task": "Start the interactive installer:", "command": "archinstall"}, {"task": "Start a preset installer:", "command": "archinstall {{minimal|unattended}}"}]}
{"command": "archivemount", "tasks": [{"task": "Mount an archive to a specific mountpoint:", "command": "archivemount {{path/to/archive}} {{path/to/mount_point}}"}]}
{"command": "archlinux-java", "tasks": [{"task": "List installed Java environments:", "command": "archlinux-java status"}, {"task": "Return the short name of the current default Java environment:", "command": "archlinux-java get"}, {"task": "Set the default Java environment:", "command": "archlinux-java set {{java_environment}}"}, {"task": "Unset the default Java environment:", "command": "archlinux-java unset"}, {"task": "Fix an invalid/broken default Java environment configuration:", "command": "archlinux-java fix"}]}
{"command": "arecord", "tasks": [{"task": "Record a snippet in \"CD\" quality (finish with Ctrl-C when done):", "command": "arecord -vv --format=cd {{path/to/file.wav}}"}, {"task": "Record a snippet in \"CD\" quality, with a fixed duration of 10 seconds:", "command": "arecord -vv --format=cd --duration={{10}} {{path/to/file.wav}}"}, {"task": "Record a snippet and save it as an MP3 (finish with Ctrl-C when done):", "command": "arecord -vv --format=cd --file-type raw | lame -r - {{path/to/file.mp3}}"}, {"task": "List all sound cards and digital audio devices:", "command": "arecord --list-devices"}, {"task": "Allow interactive interface (e.g. use space-bar or enter to play or pause):", "command": "arecord --interactive"}]}
{"command": "arithmetic", "tasks": [{"task": "Start an arithmetic quiz:", "command": "arithmetic"}, {"task": "Specify one or more arithmetic [o]peration symbols to get problems on them:", "command": "arithmetic -o {{+|-|x|/}}"}, {"task": "Specify a range. Addition and multiplication problems would feature numbers between 0 and range, inclusive. Subtraction and division problems would have required result and number to be operated on, between 0 and range:", "command": "arithmetic -r {{7}}"}]}
{"command": "ark", "tasks": [{"task": "Extract a specific archive into the current directory:", "command": "ark --batch {{path/to/archive}}"}, {"task": "Extract an archive into a specific directory:", "command": "ark --batch --destination {{path/to/directory}} {{path/to/archive}}"}, {"task": "Create an archive if it does not exist and add specific files to it:", "command": "ark --add-to {{path/to/archive}} {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "arpaname", "tasks": [{"task": "Translate IP addresses (IPv4 and IPv6) to the corresponding ARPA name:", "command": "arpaname {{ip_address}}"}]}
{"command": "arpspoof", "tasks": [{"task": "Poison all hosts to intercept packets on [i]nterface for the host:", "command": "sudo arpspoof -i {{wlan0}} {{host_ip}}"}, {"task": "Poison [t]arget to intercept packets on [i]nterface for the host:", "command": "sudo arpspoof -i {{wlan0}} -t {{target_ip}} {{host_ip}}"}, {"task": "Poison both [t]arget and host to intercept packets on [i]nterface for the host:", "command": "sudo arpspoof -i {{wlan0}} -r -t {{target_ip}} {{host_ip}}"}]}
{"command": "as", "tasks": [{"task": "Assemble a file, writing the output to `a.out`:", "command": "as {{file.s}}"}, {"task": "Assemble the output to a given file:", "command": "as {{file.s}} -o {{out.o}}"}, {"task": "Generate output faster by skipping whitespace and comment preprocessing. (Should only be used for trusted compilers):", "command": "as -f {{file.s}}"}, {"task": "Include a given path to the list of directories to search for files specified in `.include` directives:", "command": "as -I {{path/to/directory}} {{file.s}}"}]}
{"command": "ascii", "tasks": [{"task": "Show ASCII aliases of a character:", "command": "ascii {{a}}"}, {"task": "Show ASCII aliases in short, script-friendly mode:", "command": "ascii -t {{a}}"}, {"task": "Show ASCII aliases of multiple characters:", "command": "ascii -s {{tldr}}"}, {"task": "Show ASCII table in decimal:", "command": "ascii -d"}, {"task": "Show ASCII table in hexadecimal:", "command": "ascii -x"}, {"task": "Show ASCII table in octal:", "command": "ascii -o"}, {"task": "Show ASCII table in binary:", "command": "ascii -b"}, {"task": "Show options summary and complete ASCII table:", "command": "ascii"}]}
{"command": "asciiart", "tasks": [{"task": "Read an image from a file and print in ASCII:", "command": "asciiart {{path/to/image.jpg}}"}, {"task": "Read an image from a URL and print in ASCII:", "command": "asciiart {{www.example.com/image.jpg}}"}, {"task": "Choose the output width (default is 100):", "command": "asciiart --width {{50}} {{path/to/image.jpg}}"}, {"task": "Colorize the ASCII output:", "command": "asciiart --color {{path/to/image.jpg}}"}, {"task": "Choose the output format (default format is text):", "command": "asciiart --format {{text|html}} {{path/to/image.jpg}}"}, {"task": "Invert the character map:", "command": "asciiart --invert-chars {{path/to/image.jpg}}"}]}
{"command": "aspell", "tasks": [{"task": "Spell check a single file:", "command": "aspell check {{path/to/file}}"}, {"task": "List misspelled words from `stdin`:", "command": "cat {{path/to/file}} | aspell list"}, {"task": "Show available dictionary languages:", "command": "aspell dicts"}, {"task": "Run `aspell` with a different language (takes two-letter ISO 639 language code):", "command": "aspell --lang={{cs}}"}, {"task": "List misspelled words from `stdin` and ignore words from personal word list:", "command": "cat {{path/to/file}} | aspell --personal={{personal-word-list.pws}} list"}]}
{"command": "asterisk", "tasks": [{"task": "[R]econnect to a running server, and turn on logging 3 levels of [v]erbosity:", "command": "asterisk -r -vvv"}, {"task": "[R]econnect to a running server, run a single command, and return:", "command": "asterisk -r -x \"{{command}}\""}, {"task": "Show chan_SIP clients (phones):", "command": "asterisk -r -x \"sip show peers\""}, {"task": "Show active calls and channels:", "command": "asterisk -r -x \"core show channels\""}, {"task": "Show voicemail mailboxes:", "command": "asterisk -r -x \"voicemail show users\""}, {"task": "Terminate a channel:", "command": "asterisk -r -x \"hangup request {{channel_ID}}\""}, {"task": "Reload chan_SIP configuration:", "command": "asterisk -r -x \"sip reload\""}]}
{"command": "at", "tasks": [{"task": "Open an `at` prompt to create a new set of scheduled commands, press `Ctrl + D` to save and exit:", "command": "at {{hh:mm}}"}, {"task": "Execute the commands and email the result using a local mailing program such as Sendmail:", "command": "at {{hh:mm}} -m"}, {"task": "Execute a script at the given time:", "command": "at {{hh:mm}} -f {{path/to/file}}"}, {"task": "Display a system notification at 11pm on February 18th:", "command": "echo \"notify-send '{{Wake up!}}'\" | at {{11pm}} {{Feb 18}}"}]}
{"command": "atool", "tasks": [{"task": "List files in a zip archive:", "command": "atool --list {{path/to/archive.zip}}"}, {"task": "Unpack a tar.gz archive into a new subdirectory (or current directory if it contains only one file):", "command": "atool --extract {{path/to/archive.tar.gz}}"}, {"task": "Create a new 7zip archive with two files:", "command": "atool --add {{path/to/archive.7z}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Extract all zip and rar archives in the current directory:", "command": "atool --each --extract {{*.zip *.rar}}"}]}
{"command": "atop", "tasks": [{"task": "Start:", "command": "atop"}, {"task": "Start and display memory consumption for each process:", "command": "atop -m"}, {"task": "Start and display disk information:", "command": "atop -d"}, {"task": "Start and display background process information:", "command": "atop -c"}, {"task": "Start and display thread-specific resource utilization information:", "command": "atop -y"}, {"task": "Start and display the number of processes for each user:", "command": "atop -au"}, {"task": "Display help about interactive commands:", "command": "?"}]}
{"command": "aura", "tasks": [{"task": "Search for packages from the official repositories and AUR:", "command": "aura --aursync --both --search {{package_name|search_regex}}"}, {"task": "Install a package from the AUR:", "command": "aura --aursync {{package_name}}"}, {"task": "Update all AUR packages in a verbose mode and remove all make dependencies:", "command": "aura --aursync --diff --sysupgrade --delmakedeps --unsuppress"}, {"task": "Install a package from the official repositories:", "command": "aura --sync {{package_name}}"}, {"task": "Synchronize and update all packages from the official repositories:", "command": "aura --sync --refresh --sysupgrade"}, {"task": "Downgrade a package using the package cache:", "command": "aura --downgrade {{package_name}}"}, {"task": "Remove a package and its dependencies:", "command": "aura --remove --recursive --unneeded {{package_name}}"}, {"task": "Remove orphan packages (installed as dependencies but not required by any package):", "command": "aura --orphans --abandon"}]}
{"command": "auracle", "tasks": [{"task": "Display AUR packages that match a regular expression:", "command": "auracle search '{{regular_expression}}'"}, {"task": "Display package information for a space-separated list of AUR packages:", "command": "auracle info {{package1}} {{package2}}"}, {"task": "Display the `PKGBUILD` file (build information) for a space-separated list of AUR packages:", "command": "auracle show {{package1}} {{package2}}"}, {"task": "Display updates for installed AUR packages:", "command": "auracle outdated"}]}
{"command": "aurman", "tasks": [{"task": "Synchronize and update all packages:", "command": "aurman --sync --refresh --sysupgrade"}, {"task": "Synchronize and update all packages without show changes of `PKGBUILD` files:", "command": "aurman --sync --refresh --sysupgrade --noedit"}, {"task": "Install a new package:", "command": "aurman --sync {{package_name}}"}, {"task": "Install a new package without show changes of `PKGBUILD` files:", "command": "aurman --sync --noedit {{package_name}}"}, {"task": "Install a new package without prompting:", "command": "aurman --sync --noedit --noconfirm {{package_name}}"}, {"task": "Search the package database for a keyword from the official repositories and AUR:", "command": "aurman --sync --search {{keyword}}"}, {"task": "Remove a package and its dependencies:", "command": "aurman --remove --recursive --nosave {{package_name}}"}, {"task": "Clear the package cache (use two `--clean` flags to clean all packages):", "command": "aurman --sync --clean"}]}
{"command": "aurvote", "tasks": [{"task": "Interactively create the file `~/.config/aurvote` containing your AUR username and password:", "command": "aurvote --configure"}, {"task": "Vote for one or more AUR packages:", "command": "aurvote {{package1 package2 ...}}"}, {"task": "Unvote one or more AUR packages:", "command": "aurvote --unvote {{package1 package2 ...}}"}, {"task": "Check if one or more AUR packages have already been voted:", "command": "aurvote --check {{package1 package2 ...}}"}, {"task": "Show help for `aurvote`:", "command": "aurvote --help"}]}
{"command": "ausyscall", "tasks": [{"task": "Display syscall number of a specific system call:", "command": "ausyscall {{search_pattern}}"}, {"task": "Display name of a specific system call number:", "command": "ausyscall {{system_call_number}}"}, {"task": "Display all system calls for a specific architecture:", "command": "ausyscall {{architecture}} --dump"}]}
{"command": "authconfig", "tasks": [{"task": "Display the current configuration (or dry run):", "command": "authconfig --test"}, {"task": "Configure the server to use a different password hashing algorithm:", "command": "authconfig --update --passalgo={{algorithm}}"}, {"task": "Enable LDAP authentication:", "command": "authconfig --update --enableldapauth"}, {"task": "Disable LDAP authentication:", "command": "authconfig --update --disableldapauth"}, {"task": "Enable Network Information Service (NIS):", "command": "authconfig --update --enablenis"}, {"task": "Enable Kerberos:", "command": "authconfig --update --enablekrb5"}, {"task": "Enable Winbind (Active Directory) authentication:", "command": "authconfig --update --enablewinbindauth"}, {"task": "Enable local authorization:", "command": "authconfig --update --enablelocauthorize"}]}
{"command": "auto-cpufreq", "tasks": [{"task": "Run `auto-cpufreq` in a specific mode:", "command": "sudo auto-cpufreq --{{monitor|live|update|remove|stats|force=governor}}"}]}
{"command": "autopkgtest", "tasks": [{"task": "Build the package in the current directory and run all tests directly on the system:", "command": "autopkgtest -- {{null}}"}, {"task": "Run a specific test for the package in the current directory:", "command": "autopkgtest --test-name={{test_name}} -- {{null}}"}, {"task": "Download and build a specific package with `apt-get`, then run all tests:", "command": "autopkgtest {{package}} -- {{null}}"}, {"task": "Test the package in the current directory using a new root directory:", "command": "autopkgtest -- {{chroot}} {{path/to/new/root}}"}, {"task": "Test the package in the current directory without rebuilding it:", "command": "autopkgtest --no-built-binaries -- {{null}}"}]}
{"command": "autorandr", "tasks": [{"task": "Save the current screen layout:", "command": "autorandr --save {{profile_name}}"}, {"task": "Show the saved profiles:", "command": "autorandr"}, {"task": "Load the first detected profile:", "command": "autorandr --change"}, {"task": "Load a specific profile:", "command": "autorandr --load {{profile_name}}"}, {"task": "Set the default profile:", "command": "autorandr --default {{profile_name}}"}]}
{"command": "avahi-browse", "tasks": [{"task": "List services available on the local network along with their addresses and ports, ignoring ones on the local machine:", "command": "avahi-browse --all --resolve --ignore-local"}, {"task": "Quickly list services in the local network in SSV format for scripts:", "command": "avahi-browse --all --terminate --parsable"}, {"task": "List domains in the neighbourhood:", "command": "avahi-browse --browse-domains"}, {"task": "Limit the search to a particular domain:", "command": "avahi-browse --all --domain={{domain}}"}]}
{"command": "avahi-resolve", "tasks": [{"task": "Resolve a local service to its IPv4:", "command": "avahi-resolve -4 --name {{service.local}}"}, {"task": "Resolve an IP to a hostname, verbosely:", "command": "avahi-resolve --verbose --address {{IP}}"}]}
{"command": "avifenc", "tasks": [{"task": "Convert a specific PNG image to AVIF:", "command": "avifenc {{path/to/input.png}} {{path/to/output.avif}}"}, {"task": "Encode with a specific speed (6=default, 0=slowest and 10=fastest):", "command": "avifenc --speed {{2}} {{path/to/input.png}} {{path/to/output.avif}}"}]}
{"command": "backlight_control", "tasks": [{"task": "Increase/decrease the backlight by a specific percent count:", "command": "backlight_control {{+|-}}{{5}}"}, {"task": "Set the backlight strength to a specific percent count:", "command": "backlight_control {{90}}"}, {"task": "Print the help:", "command": "backlight_control"}]}
{"command": "balooctl", "tasks": [{"task": "Display help:", "command": "balooctl"}, {"task": "Display the status of the indexer:", "command": "balooctl status"}, {"task": "Enable/Disable the file indexer:", "command": "balooctl {{enable|disable}}"}, {"task": "Clean the index database:", "command": "balooctl purge"}, {"task": "Suspend the file indexer:", "command": "balooctl suspend"}, {"task": "Resume the file indexer:", "command": "balooctl resume"}, {"task": "Display the disk space used by Baloo:", "command": "balooctl indexSize"}, {"task": "Check for any unindexed files and index them:", "command": "balooctl check"}]}
{"command": "batcat", "tasks": [{"task": "View documentation for the original command:", "command": "tldr bat"}]}
{"command": "battop", "tasks": [{"task": "Display battery information:", "command": "battop"}, {"task": "Change battery information measurement [u]nit (default: human):", "command": "battop -u {{human|si}}"}]}
{"command": "bchunk", "tasks": [{"task": "Convert binary CD into a standard iso9960 image file:", "command": "bchunk {{path/to/image.bin}} {{path/to/image.cue}} {{path/to/output}}"}, {"task": "Convert with verbose mode:", "command": "bchunk -v {{path/to/image.bin}} {{path/to/image.cue}} {{path/to/output}}"}, {"task": "Output audio files in WAV format:", "command": "bchunk -w {{path/to/image.bin}} {{path/to/image.cue}} {{path/to/output}}"}]}
{"command": "beep", "tasks": [{"task": "Play a beep:", "command": "beep"}, {"task": "Play a beep that repeats:", "command": "beep -r {{repetitions}}"}, {"task": "Play a beep at a specified frequency (Hz) and duration (milliseconds):", "command": "beep -f {{frequency}} -l {{duration}}"}, {"task": "Play each new frequency and duration as a distinct beep:", "command": "beep -f {{frequency}} -l {{duration}} -n -f {{frequency}} -l {{duration}}"}, {"task": "Play the C major scale:", "command": "beep -f {{262}} -n -f {{294}} -n -f {{330}} -n -f {{349}} -n -f {{392}} -n -f {{440}} -n -f {{494}} -n -f {{523}}"}]}
{"command": "betterdiscordctl", "tasks": [{"task": "Install BetterDiscord on Discord Stable:", "command": "sudo betterdiscordctl install"}, {"task": "Install BetterDiscord on Discord Canary:", "command": "sudo betterdiscordctl --d-flavors canary install"}, {"task": "Install BetterDiscord on Discord PTB:", "command": "sudo betterdiscordctl --d-flavors ptb install"}, {"task": "Install BetterDiscord on Discord installed with Flatpak:", "command": "sudo betterdiscordctl --d-install flatpak install"}, {"task": "Install BetterDiscord on Discord installed with Snap:", "command": "sudo betterdiscordctl --d-install snap install"}]}
{"command": "betterlockscreen", "tasks": [{"task": "Lock the screen:", "command": "betterlockscreen --lock"}, {"task": "Change the lock screen background:", "command": "betterlockscreen -u {{path/to/image.png}}"}, {"task": "Lock the screen, showing some custom text:", "command": "betterlockscreen -l pixel -t \"{{custom lock screen text}}\""}, {"task": "Lock the screen, with a custom monitor off timeout in seconds:", "command": "betterlockscreen --off {{5}} -l"}]}
{"command": "bitwise", "tasks": [{"task": "Run using interactive mode:", "command": "bitwise"}, {"task": "Convert from decimal:", "command": "bitwise {{12345}}"}, {"task": "Convert from hexadecimal:", "command": "bitwise {{0x563d}}"}, {"task": "Convert a C-style calculation:", "command": "bitwise \"{{0x123 + 0x20 - 30 / 50}}\""}]}
{"command": "blastn", "tasks": [{"task": "Align two or more sequences using megablast (default), with the e-value threshold of 1e-9, pairwise output format (default):", "command": "blastn -query {{query.fa}} -subject {{subject.fa}} -evalue {{1e-9}}"}, {"task": "Align two or more sequences using blastn:", "command": "blastn -task blastn -query {{query.fa}} -subject {{subject.fa}}"}, {"task": "Align two or more sequences, custom tabular output format, output to file:", "command": "blastn -query {{query.fa}} -subject {{subject.fa}} -outfmt {{'6 qseqid qlen qstart qend sseqid slen sstart send bitscore evalue pident'}} -out {{output.tsv}}"}, {"task": "Search nucleotide databases using a nucleotide query, 16 threads (CPUs) to use in the BLAST search, with a maximum number of 10 aligned sequences to keep:", "command": "blastn -query {{query.fa}} -db {{path/to/blast_db}} -num_threads {{16}} -max_target_seqs {{10}}"}, {"task": "Search the remote non-redundant nucleotide database using a nucleotide query:", "command": "blastn -query {{query.fa}} -db {{nt}} -remote"}, {"task": "Display help (use `-help` for detailed help):", "command": "blastn -h"}]}
{"command": "blastp", "tasks": [{"task": "Align two or more sequences using blastp, with the e-value threshold of 1e-9, pairwise output format, output to screen:", "command": "blastp -query {{query.fa}} -subject {{subject.fa}} -evalue {{1e-9}}"}, {"task": "Align two or more sequences using blastp-fast:", "command": "blastp -task blastp-fast -query {{query.fa}} -subject {{subject.fa}}"}, {"task": "Align two or more sequences, custom tabular output format, output to file:", "command": "blastp -query {{query.fa}} -subject {{subject.fa}} -outfmt '{{6 qseqid qlen qstart qend sseqid slen sstart send bitscore evalue pident}}' -out {{output.tsv}}"}, {"task": "Search protein databases using a protein query, 16 threads to use in the BLAST search, with a maximum number of 10 aligned sequences to keep:", "command": "blastp -query {{query.fa}} -db {{blast_database_name}} -num_threads {{16}} -max_target_seqs {{10}}"}, {"task": "Search the remote non-redundant protein database using a protein query:", "command": "blastp -query {{query.fa}} -db {{nr}} -remote"}, {"task": "Display help (use `-help` for detailed help):", "command": "blastp -h"}]}
{"command": "blight", "tasks": [{"task": "Set display brightness to 50%:", "command": "blight set {{50}} -r"}, {"task": "Show current display brightness:", "command": "blight show"}, {"task": "Print maximum display brightness:", "command": "blight max"}, {"task": "Increase display brightness in %:", "command": "blight inc {{number}} -r"}, {"task": "Decrease display brightness with internal units:", "command": "blight dec {{number}}"}]}
{"command": "blkdiscard", "tasks": [{"task": "Discard all sectors on a device, removing all data:", "command": "blkdiscard /dev/{{device}}"}, {"task": "Securely discard all blocks on a device, removing all data:", "command": "blkdiscard --secure /dev/{{device}}"}, {"task": "Discard the first 100 MB of a device:", "command": "blkdiscard --length {{100MB}} /dev/{{device}}"}]}
{"command": "blkid", "tasks": [{"task": "List all partitions:", "command": "sudo blkid"}, {"task": "List all partitions in a table, including current mountpoints:", "command": "sudo blkid -o list"}]}
{"command": "bluetoothctl", "tasks": [{"task": "Enter the `bluetoothctl` shell:", "command": "bluetoothctl"}, {"task": "List all known devices:", "command": "bluetoothctl devices"}, {"task": "Power the Bluetooth controller on or off:", "command": "bluetoothctl power {{on|off}}"}, {"task": "Pair with a device:", "command": "bluetoothctl pair {{mac_address}}"}, {"task": "Remove a device:", "command": "bluetoothctl remove {{mac_address}}"}, {"task": "Connect to a paired device:", "command": "bluetoothctl connect {{mac_address}}"}, {"task": "Disconnect from a paired device:", "command": "bluetoothctl disconnect {{mac_address}}"}, {"task": "Display help:", "command": "bluetoothctl help"}]}
{"command": "bluetoothd", "tasks": [{"task": "Start the daemon:", "command": "bluetoothd"}, {"task": "Start the daemon, logging to `stdout`:", "command": "bluetoothd --nodetach"}, {"task": "Start the daemon with a specific configuration file (defaults to `/etc/bluetooth/main.conf`):", "command": "bluetoothd --configfile {{path/to/file}}"}, {"task": "Start the daemon with verbose output to `stderr`:", "command": "bluetoothd --debug"}, {"task": "Start the daemon with verbose output coming from specific files in the bluetoothd or plugins source:", "command": "bluetoothd --debug={{path/to/file1}}:{{path/to/file2}}:{{path/to/file3}}"}]}
{"command": "blurlock", "tasks": [{"task": "Lock the screen to a blurred screenshot of the current screen:", "command": "blurlock"}, {"task": "Lock the screen and disable the unlock indicator (removes feedback on keypress):", "command": "blurlock --no-unlock-indicator"}, {"task": "Lock the screen and don't hide the mouse pointer:", "command": "blurlock --pointer {{default}}"}, {"task": "Lock the screen and show the number of failed login attempts:", "command": "blurlock --show-failed-attempts"}]}
{"command": "bmon", "tasks": [{"task": "Display the list of all the interfaces:", "command": "bmon -a"}, {"task": "Display data transfer rates in bits per second:", "command": "bmon -b"}, {"task": "Set policy to define which network interface(s) is/are displayed:", "command": "bmon -p {{interface_1,interface_2,interface_3}}"}, {"task": "Set interval (in seconds) in which rate per counter is calculated:", "command": "bmon -R {{2.0}}"}]}
{"command": "boltctl", "tasks": [{"task": "List connected (and authorized) devices:", "command": "boltctl"}, {"task": "List connected devices, including unauthorized ones:", "command": "boltctl list"}, {"task": "Authorize a device temporarily:", "command": "boltctl authorize {{device_uuid}}"}, {"task": "Authorize and remember a device:", "command": "boltctl enroll {{device_uuid}}"}, {"task": "Revoke a previously authorized device:", "command": "boltctl forget {{device_uuid}}"}, {"task": "Show more information about a device:", "command": "boltctl info {{device_uuid}}"}]}
{"command": "bootctl", "tasks": [{"task": "Show information about the system firmware and the bootloaders:", "command": "bootctl status"}, {"task": "Show all available bootloader entries:", "command": "bootctl list"}, {"task": "Set a flag to boot into the system firmware on the next boot (similar to `sudo systemctl reboot --firmware-setup`):", "command": "sudo bootctl reboot-to-firmware true"}, {"task": "Specify the path to the EFI system partition (defaults to `/efi/`, `/boot/` or `/boot/efi`):", "command": "bootctl --esp-path={{/path/to/efi_system_partition/}}"}, {"task": "Install `systemd-boot` into the EFI system partition:", "command": "sudo bootctl install"}, {"task": "Remove all installed versions of `systemd-boot` from the EFI system partition:", "command": "sudo bootctl remove"}]}
{"command": "bpftool", "tasks": [{"task": "List information about loaded `eBPF` programs:", "command": "bpftool prog list"}, {"task": "List `eBPF` program attachments in the kernel networking subsystem:", "command": "bpftool net list"}, {"task": "List all active links:", "command": "bpftool link list"}, {"task": "List all `raw_tracepoint`, `tracepoint`, `kprobe` attachments in the system:", "command": "bpftool perf list"}, {"task": "List `BPF Type Format (BTF)` data:", "command": "bpftool btf list"}, {"task": "List information about loaded maps:", "command": "bpftool map list"}, {"task": "Probe a network device \"eth0\" for supported `eBPF` features:", "command": "bpftool feature probe dev {{eth0}}"}, {"task": "Run commands in batch mode from a file:", "command": "bpftool batch file {{myfile}}"}]}
{"command": "bpftrace", "tasks": [{"task": "Display bpftrace version:", "command": "bpftrace -V"}, {"task": "List all available probes:", "command": "sudo bpftrace -l"}, {"task": "Run a one-liner program (e.g. syscall count by program):", "command": "sudo bpftrace -e '{{tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }}}'"}, {"task": "Run a program from a file:", "command": "sudo bpftrace {{path/to/file}}"}, {"task": "Trace a program by PID:", "command": "sudo bpftrace -e '{{tracepoint:raw_syscalls:sys_enter /pid == 123/ { @[comm] = count(); }}}'"}, {"task": "Do a dry run and display the output in eBPF format:", "command": "sudo bpftrace -d -e '{{one_line_program}}'"}]}
{"command": "br", "tasks": [{"task": "Start and navigate the current directory tree interactively:", "command": "br"}, {"task": "Start displaying the size of files and directories:", "command": "br --sizes"}, {"task": "Start displaying permissions:", "command": "br --permissions"}, {"task": "Start displaying directories only:", "command": "br --only-folders"}, {"task": "Start displaying hidden files and directories:", "command": "br --hidden"}]}
{"command": "braa", "tasks": [{"task": "Walk the SNMP tree of host with public string querying all OIDs under `.1.3.6`:", "command": "braa public@{{ip}}:{{.1.3.6.*}}"}, {"task": "Query the whole subnet `ip_range` for `system.sysLocation.0`:", "command": "braa public@{{ip_range}}:{{.1.3.6.1.2.1.1.6.0}}"}, {"task": "Attempt to set the value of `system.sysLocation.0` to a specific workgroup:", "command": "braa private@{{ip}}:{{.1.3.6.1.2.1.1.6.0}}=s'{{workgroup}}'"}]}
{"command": "brctl", "tasks": [{"task": "Show a list with information about currently existing Ethernet bridges:", "command": "sudo brctl show"}, {"task": "Create a new Ethernet bridge interface:", "command": "sudo brctl add {{bridge_name}}"}, {"task": "Delete an existing Ethernet bridge interface:", "command": "sudo brctl del {{bridge_name}}"}, {"task": "Add an interface to an existing bridge:", "command": "sudo brctl addif {{bridge_name}} {{interface_name}}"}, {"task": "Remove an interface from an existing bridge:", "command": "sudo brctl delif {{bridge_name}} {{interface_name}}"}]}
{"command": "brightnessctl", "tasks": [{"task": "List devices with changeable brightness:", "command": "brightnessctl --list"}, {"task": "Print the current brightness of the display backlight:", "command": "brightnessctl get"}, {"task": "Set the brightness of the display backlight to a specified percentage within range:", "command": "brightnessctl set {{50%}}"}, {"task": "Increase brightness by a specified increment:", "command": "brightnessctl set {{+10%}}"}, {"task": "Decrease brightness by a specified decrement:", "command": "brightnessctl set {{10%-}}"}]}
{"command": "broot", "tasks": [{"task": "Install or reinstall the `br` shell function:", "command": "broot --install"}]}
{"command": "bspc", "tasks": [{"task": "Define two virtual desktop:", "command": "bspc monitor --reset-desktops {{1}} {{2}}"}, {"task": "Focus the given desktop:", "command": "bspc desktop --focus {{number}}"}, {"task": "Close the windows rooted at the selected node:", "command": "bspc node --close"}, {"task": "Send the selected node to the given desktop:", "command": "bspc node --to-desktop {{number}}"}, {"task": "Toggle full screen mode for the selected node:", "command": "bspc node --state ~fullscreen"}]}
{"command": "bspwm", "tasks": [{"task": "Start `bspwm` (note that a pre-existing window manager must not be open when this command is run):", "command": "bspwm -c {{path/to/config}}"}, {"task": "View documentation for `bspc`:", "command": "tldr bspc"}]}
{"command": "btrbk", "tasks": [{"task": "Print statistics about configured subvolumes and snapshots:", "command": "sudo btrbk stats"}, {"task": "List configured subvolumes and snapshots:", "command": "sudo btrbk list"}, {"task": "Print what would happen in a run without making the displayed changes:", "command": "sudo btrbk --verbose dryrun"}, {"task": "Run backup routines verbosely, show progress bar:", "command": "sudo btrbk --progress --verbose run"}, {"task": "Only create snapshots for configured subvolumes:", "command": "sudo btrbk snapshot"}]}
{"command": "btrfs balance", "tasks": [{"task": "Show the status of a running or paused balance operation:", "command": "sudo btrfs balance status {{path/to/btrfs_filesystem}}"}, {"task": "Balance all block groups (slow; rewrites all blocks in filesystem):", "command": "sudo btrfs balance start {{path/to/btrfs_filesystem}}"}, {"task": "Balance data block groups which are less than 15% utilized, running the operation in the background:", "command": "sudo btrfs balance start --bg -dusage={{15}} {{path/to/btrfs_filesystem}}"}, {"task": "Balance a max of 10 metadata chunks with less than 20% utilization and at least 1 chunk on a given device `devid` (see `btrfs filesystem show`):", "command": "sudo btrfs balance start -musage={{20}},limit={{10}},devid={{devid}} {{path/to/btrfs_filesystem}}"}, {"task": "Convert data blocks to the raid6 and metadata to raid1c3 (see mkfs.btrfs(8) for profiles):", "command": "sudo btrfs balance start -dconvert={{raid6}} -mconvert={{raid1c3}} {{path/to/btrfs_filesystem}}"}, {"task": "Convert data blocks to raid1, skipping already converted chunks (e.g. after a previous cancelled conversion operation):", "command": "sudo btrfs balance start -dconvert={{raid1}},soft {{path/to/btrfs_filesystem}}"}, {"task": "Cancel, pause, or resume a running or paused balance operation:", "command": "sudo btrfs balance {{cancel|pause|resume}} {{path/to/btrfs_filesystem}}"}]}
{"command": "btrfs check", "tasks": [{"task": "Check a btrfs filesystem:", "command": "sudo btrfs check {{path/to/partition}}"}, {"task": "Check and repair a btrfs filesystem (dangerous):", "command": "sudo btrfs check --repair {{path/to/partition}}"}, {"task": "Show the progress of the check:", "command": "sudo btrfs check --progress {{path/to/partition}}"}, {"task": "Verify the checksum of each data block (if the filesystem is good):", "command": "sudo btrfs check --check-data-csum {{path/to/partition}}"}, {"task": "Use the `n`-th superblock (`n` can be 0, 1 or 2):", "command": "sudo btrfs check --super {{n}} {{path/to/partition}}"}, {"task": "Rebuild the checksum tree:", "command": "sudo btrfs check --repair --init-csum-tree {{path/to/partition}}"}, {"task": "Rebuild the extent tree:", "command": "sudo btrfs check --repair --init-extent-tree {{path/to/partition}}"}]}
{"command": "btrfs device", "tasks": [{"task": "Add one or more devices to a btrfs filesystem:", "command": "sudo btrfs device add {{path/to/block_device1}} [{{path/to/block_device2}}] {{path/to/btrfs_filesystem}}"}, {"task": "Remove a device from a btrfs filesystem:", "command": "sudo btrfs device remove {{path/to/device|device_id}} [{{...}}]"}, {"task": "Display error statistics:", "command": "sudo btrfs device stats {{path/to/btrfs_filesystem}}"}, {"task": "Scan all disks and inform the kernel of all detected btrfs filesystems:", "command": "sudo btrfs device scan --all-devices"}, {"task": "Display detailed per-disk allocation statistics:", "command": "sudo btrfs device usage {{path/to/btrfs_filesystem}}"}]}
{"command": "btrfs filesystem", "tasks": [{"task": "Show filesystem usage (optionally run as root to show detailed information):", "command": "btrfs filesystem usage {{path/to/btrfs_mount}}"}, {"task": "Show usage by individual devices:", "command": "sudo btrfs filesystem show {{path/to/btrfs_mount}}"}, {"task": "Defragment a single file on a btrfs filesystem (avoid while a deduplication agent is running):", "command": "sudo btrfs filesystem defragment -v {{path/to/file}}"}, {"task": "Defragment a directory recursively (does not cross subvolume boundaries):", "command": "sudo btrfs filesystem defragment -v -r {{path/to/directory}}"}, {"task": "Force syncing unwritten data blocks to disk(s):", "command": "sudo btrfs filesystem sync {{path/to/btrfs_mount}}"}, {"task": "Summarize disk usage for the files in a directory recursively:", "command": "sudo btrfs filesystem du --summarize {{path/to/directory}}"}]}
{"command": "btrfs inspect-internal", "tasks": [{"task": "Print superblock's information:", "command": "sudo btrfs inspect-internal dump-super {{path/to/partition}}"}, {"task": "Print superblock's and all of its copies' information:", "command": "sudo btrfs inspect-internal dump-super --all {{path/to/partition}}"}, {"task": "Print filesystem's metadata information:", "command": "sudo btrfs inspect-internal dump-tree {{path/to/partition}}"}, {"task": "Print list of files in inode `n`-th:", "command": "sudo btrfs inspect-internal inode-resolve {{n}} {{path/to/btrfs_mount}}"}, {"task": "Print list of files at a given logical address:", "command": "sudo btrfs inspect-internal logical-resolve {{logical_address}} {{path/to/btrfs_mount}}"}, {"task": "Print stats of root, extent, csum and fs trees:", "command": "sudo btrfs inspect-internal tree-stats {{path/to/partition}}"}]}
{"command": "btrfs property", "tasks": [{"task": "List available properties (and descriptions) for the given btrfs object:", "command": "sudo btrfs property list {{path/to/btrfs_object}}"}, {"task": "Get all properties for the given btrfs object:", "command": "sudo btrfs property get {{path/to/btrfs_object}}"}, {"task": "Get the `label` property for the given btrfs filesystem or device:", "command": "sudo btrfs property get {{path/to/btrfs_filesystem}} label"}, {"task": "Get all object type-specific properties for the given btrfs filesystem or device:", "command": "sudo btrfs property get -t {{subvol|filesystem|inode|device}} {{path/to/btrfs_filesystem}}"}, {"task": "Set the `compression` property for a given btrfs inode (either a file or directory):", "command": "sudo btrfs property set {{path/to/btrfs_inode}} compression {{zstd|zlib|lzo|none}}"}]}
{"command": "btrfs rescue", "tasks": [{"task": "Rebuild the filesystem metadata tree (very slow):", "command": "sudo btrfs rescue chunk-recover {{path/to/partition}}"}, {"task": "Fix device size alignment related problems (e.g. unable to mount the filesystem with super total bytes mismatch):", "command": "sudo btrfs rescue fix-device-size {{path/to/partition}}"}, {"task": "Recover a corrupted superblock from correct copies (recover the root of filesystem tree):", "command": "sudo btrfs rescue super-recover {{path/to/partition}}"}, {"task": "Recover from an interrupted transactions (fixes log replay problems):", "command": "sudo btrfs rescue zero-log {{path/to/partition}}"}, {"task": "Create a `/dev/btrfs-control` control device when `mknod` is not installed:", "command": "sudo btrfs rescue create-control-device"}]}
{"command": "btrfs restore", "tasks": [{"task": "Restore all files from a btrfs filesystem to a given directory:", "command": "sudo btrfs restore {{path/to/btrfs_device}} {{path/to/target_directory}}"}, {"task": "List (don't write) files to be restored from a btrfs filesystem:", "command": "sudo btrfs restore --dry-run {{path/to/btrfs_device}} {{path/to/target_directory}}"}, {"task": "Restore files matching a given regex ([c]ase-insensitive) files to be restored from a btrfs filesystem (all parent directories of target file(s) must match as well):", "command": "sudo btrfs restore --path-regex {{regex}} -c {{path/to/btrfs_device}} {{path/to/target_directory}}"}, {"task": "Restore files from a btrfs filesystem using a specific root tree `bytenr` (see `btrfs-find-root`):", "command": "sudo btrfs restore -t {{bytenr}} {{path/to/btrfs_device}} {{path/to/target_directory}}"}, {"task": "Restore files from a btrfs filesystem (along with metadata, extended attributes, and Symlinks), overwriting files in the target:", "command": "sudo btrfs restore --metadata --xattr --symlinks --overwrite {{path/to/btrfs_device}} {{path/to/target_directory}}"}]}
{"command": "btrfs scrub", "tasks": [{"task": "Start a scrub:", "command": "sudo btrfs scrub start {{path/to/btrfs_mount}}"}, {"task": "Show the status of an ongoing or last completed scrub:", "command": "sudo btrfs scrub status {{path/to/btrfs_mount}}"}, {"task": "Cancel an ongoing scrub:", "command": "sudo btrfs scrub cancel {{path/to/btrfs_mount}}"}, {"task": "Resume a previously cancelled scrub:", "command": "sudo btrfs scrub resume {{path/to/btrfs_mount}}"}, {"task": "Start a scrub, but wait until the scrub finishes before exiting:", "command": "sudo btrfs scrub start -B {{path/to/btrfs_mount}}"}, {"task": "Start a scrub in quiet mode (does not print errors or statistics):", "command": "sudo btrfs scrub start -q {{path/to/btrfs_mount}}"}]}
{"command": "btrfs subvolume", "tasks": [{"task": "Create a new empty subvolume:", "command": "sudo btrfs subvolume create {{path/to/new_subvolume}}"}, {"task": "List all subvolumes and snapshots in the specified filesystem:", "command": "sudo btrfs subvolume list {{path/to/btrfs_filesystem}}"}, {"task": "Delete a subvolume:", "command": "sudo btrfs subvolume delete {{path/to/subvolume}}"}, {"task": "Create a read-only snapshot of an existing subvolume:", "command": "sudo btrfs subvolume snapshot -r {{path/to/source_subvolume}} {{path/to/target}}"}, {"task": "Create a read-write snapshot of an existing subvolume:", "command": "sudo btrfs subvolume snapshot {{path/to/source_subvolume}} {{path/to/target}}"}, {"task": "Show detailed information about a subvolume:", "command": "sudo btrfs subvolume show {{path/to/subvolume}}"}]}
{"command": "btrfs version", "tasks": [{"task": "Display btrfs-progs version:", "command": "btrfs version"}, {"task": "Display help:", "command": "btrfs version --help"}]}
{"command": "btrfs", "tasks": [{"task": "Create subvolume:", "command": "sudo btrfs subvolume create {{path/to/subvolume}}"}, {"task": "List subvolumes:", "command": "sudo btrfs subvolume list {{path/to/mount_point}}"}, {"task": "Show space usage information:", "command": "sudo btrfs filesystem df {{path/to/mount_point}}"}, {"task": "Enable quota:", "command": "sudo btrfs quota enable {{path/to/subvolume}}"}, {"task": "Show quota:", "command": "sudo btrfs qgroup show {{path/to/subvolume}}"}]}
{"command": "bully", "tasks": [{"task": "Crack the password:", "command": "bully --bssid \"{{mac}}\" --channel \"{{channel}}\" --bruteforce \"{{interface}}\""}, {"task": "Display help:", "command": "bully --help"}]}
{"command": "burpsuite", "tasks": [{"task": "Start Burp Suite:", "command": "burpsuite"}, {"task": "Start Burp Suite using the default configuration:", "command": "burpsuite --use-defaults"}, {"task": "Open a specific project file:", "command": "burpsuite --project-file={{path/to/file}}"}, {"task": "Load a specific configuration file:", "command": "burpsuite --config-file={{path/to/file}}"}, {"task": "Start without extensions:", "command": "burpsuite --disable-extensions"}]}
{"command": "busctl", "tasks": [{"task": "Show all peers on the bus, by their service names:", "command": "busctl list"}, {"task": "Show process information and credentials of a bus service, a process, or the owner of the bus (if no parameter is specified):", "command": "busctl status {{service|pid}}"}, {"task": "Dump messages being exchanged. If no service is specified, show all messages on the bus:", "command": "busctl monitor {{service1 service2 ...}}"}, {"task": "Show an object tree of one or more services (or all services if no service is specified):", "command": "busctl tree {{service1 service2 ...}}"}, {"task": "Show interfaces, methods, properties and signals of the specified object on the specified service:", "command": "busctl introspect {{service}} {{path/to/object}}"}, {"task": "Retrieve the current value of one or more object properties:", "command": "busctl get-property {{service}} {{path/to/object}} {{interface_name}} {{property_name}}"}, {"task": "Invoke a method and show the response:", "command": "busctl call {{service}} {{path/to/object}} {{interface_name}} {{method_name}}"}]}
{"command": "caffeinate", "tasks": [{"task": "Prevent desktop from sleeping (use `Ctrl + C` to exit):", "command": "caffeinate"}]}
{"command": "caffeine-indicator", "tasks": [{"task": "Manually inhibit desktop idleness with a toggle:", "command": "caffeine-indicator"}]}
{"command": "caffeine", "tasks": [{"task": "Start a caffeine server:", "command": "caffeine"}, {"task": "Display help:", "command": "caffeine --help"}, {"task": "Display version:", "command": "caffeine --version"}]}
{"command": "caja", "tasks": [{"task": "Open the current user home directory:", "command": "caja"}, {"task": "Open specific directories in separate windows:", "command": "caja {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Open specific directories in tabs:", "command": "caja --tabs {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Open a directory with a specific window size:", "command": "caja --geometry={{600}}x{{400}} {{path/to/directory}}"}, {"task": "Close all windows:", "command": "caja --quit"}]}
{"command": "cal", "tasks": [{"task": "Display a calendar for the current month:", "command": "cal"}, {"task": "Display previous, current and next month:", "command": "cal -3"}, {"task": "Use Monday as the first day of the week:", "command": "cal --monday"}, {"task": "Display a calendar for a specific year (4 digits):", "command": "cal {{year}}"}, {"task": "Display a calendar for a specific month and year:", "command": "cal {{month}} {{year}}"}]}
{"command": "calcurse", "tasks": [{"task": "Start `calcurse` on interactive mode:", "command": "calcurse"}, {"task": "Print the appointments and events for the current day and exit:", "command": "calcurse --appointment"}, {"task": "Remove all local calcurse items and import remote objects:", "command": "calcurse-caldav --init=keep-remote"}, {"task": "Remove all remote objects and push local calcurse items:", "command": "calcurse-caldav --init=keep-local"}, {"task": "Copy local objects to the CalDAV server and vice versa:", "command": "calcurse-caldav --init=two-way"}]}
{"command": "cam", "tasks": [{"task": "List available cameras:", "command": "cam --list"}, {"task": "List controls of a camera:", "command": "cam --camera {{camera_index}} --list-controls"}, {"task": "Write frames to a folder:", "command": "cam --camera {{camera_index}} --capture={{frames_to_capture}} --file"}, {"task": "Display camera feed in a window:", "command": "cam --camera {{camera_index}} --capture --sdl"}]}
{"command": "cat", "tasks": [{"task": "Print the contents of a file to `stdout`:", "command": "cat {{path/to/file}}"}, {"task": "Concatenate several files into an output file:", "command": "cat {{path/to/file1 path/to/file2 ...}} > {{path/to/output_file}}"}, {"task": "Append several files to an output file:", "command": "cat {{path/to/file1 path/to/file2 ...}} >> {{path/to/output_file}}"}, {"task": "Copy the contents of a file into an output file in [u]nbuffered mode:", "command": "cat -u {{/dev/tty12}} > {{/dev/tty13}}"}, {"task": "Write `stdin` to a file:", "command": "cat - > {{path/to/file}}"}, {"task": "[n]umber all output lines:", "command": "cat -n {{path/to/file}}"}, {"task": "Display non-printable and whitespace characters (with `M-` prefix if non-ASCII):", "command": "cat -v -t -e {{path/to/file}}"}]}
{"command": "cc", "tasks": [{"task": "View documentation for the original command:", "command": "tldr gcc"}]}
{"command": "ceph", "tasks": [{"task": "Check cluster health status:", "command": "ceph status"}, {"task": "Check cluster usage stats:", "command": "ceph df"}, {"task": "Get the statistics for the placement groups in a cluster:", "command": "ceph pg dump --format {{plain}}"}, {"task": "Create a storage pool:", "command": "ceph osd pool create {{pool_name}} {{page_number}}"}, {"task": "Delete a storage pool:", "command": "ceph osd pool delete {{pool_name}}"}, {"task": "Rename a storage pool:", "command": "ceph osd pool rename {{current_name}} {{new_name}}"}, {"task": "Self-repair pool storage:", "command": "ceph pg repair {{pool_name}}"}]}
{"command": "certbot", "tasks": [{"task": "Obtain a new certificate via webroot authorization, but do not install it automatically:", "command": "sudo certbot certonly --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}}"}, {"task": "Obtain a new certificate via nginx authorization, installing the new certificate automatically:", "command": "sudo certbot --nginx --domain {{subdomain.example.com}}"}, {"task": "Obtain a new certificate via apache authorization, installing the new certificate automatically:", "command": "sudo certbot --apache --domain {{subdomain.example.com}}"}, {"task": "Renew all Let's Encrypt certificates that expire in 30 days or less (don't forget to restart any servers that use them afterwards):", "command": "sudo certbot renew"}, {"task": "Simulate the obtaining of a new certificate, but don't actually save any new certificates to disk:", "command": "sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --dry-run"}, {"task": "Obtain an untrusted test certificate instead:", "command": "sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --test-cert"}]}
{"command": "cewl", "tasks": [{"task": "Create a wordlist file from the given URL up to 2 links depth:", "command": "cewl --depth {{2}} --write {{path/to/wordlist.txt}} {{url}}"}, {"task": "Output an alphanumeric wordlist from the given URL with words of minimum 5 characters:", "command": "cewl --with-numbers --min_word_length {{5}} {{url}}"}, {"task": "Output a wordlist from the given URL in debug mode including email addresses:", "command": "cewl --debug --email {{url}}"}, {"task": "Output a wordlist from the given URL using HTTP Basic or Digest authentication:", "command": "cewl --auth_type {{basic|digest}} --auth_user {{username}} --auth_pass {{password}} {{url}}"}, {"task": "Output a wordlist from the given URL through a proxy:", "command": "cewl --proxy_host {{host}} --proxy_port {{port}} {{url}}"}]}
{"command": "cfdisk", "tasks": [{"task": "Start the partition manipulator with a specific device:", "command": "cfdisk {{/dev/sdX}}"}, {"task": "Create a new partition table for a specific device and manage it:", "command": "cfdisk --zero {{/dev/sdX}}"}]}
{"command": "cgcreate", "tasks": [{"task": "Create a new group:", "command": "cgcreate -g {{group_type}}:{{group_name}}"}, {"task": "Create a new group with multiple cgroup types:", "command": "cgcreate -g {{group_type1}},{{group_type2}}:{{group_name}}"}, {"task": "Create a subgroup:", "command": "mkdir /sys/fs/cgroup/{{group_type}}/{{group_name}}/{{subgroup_name}}"}]}
{"command": "cgexec", "tasks": [{"task": "Execute a process in a given cgroup with given controller:", "command": "cgexec -g {{controller}}:{{cgroup_name}} {{process_name}}"}]}
{"command": "cgroups", "tasks": [{"task": "Show the tldr page for `cgclassify`:", "command": "tldr cgclassify"}, {"task": "Show the tldr page for `cgcreate`:", "command": "tldr cgcreate"}, {"task": "Show the tldr page for `cgexec`:", "command": "tldr cgexec"}]}
{"command": "chage", "tasks": [{"task": "List password information for the user:", "command": "chage --list {{username}}"}, {"task": "Enable password expiration in 10 days:", "command": "sudo chage --maxdays {{10}} {{username}}"}, {"task": "Disable password expiration:", "command": "sudo chage --maxdays {{-1}} {{username}}"}, {"task": "Set account expiration date:", "command": "sudo chage --expiredate {{YYYY-MM-DD}} {{username}}"}, {"task": "Force user to change password on next log in:", "command": "sudo chage --lastday {{0}} {{username}}"}]}
{"command": "chattr", "tasks": [{"task": "Make a file or directory immutable to changes and deletion, even by superuser:", "command": "chattr +i {{path/to/file_or_directory}}"}, {"task": "Make a file or directory mutable:", "command": "chattr -i {{path/to/file_or_directory}}"}, {"task": "Recursively make an entire directory and contents immutable:", "command": "chattr -R +i {{path/to/directory}}"}]}
{"command": "chcon", "tasks": [{"task": "View security context of a file:", "command": "ls -lZ {{path/to/file}}"}, {"task": "Change the security context of a target file, using a reference file:", "command": "chcon --reference={{reference_file}} {{target_file}}"}, {"task": "Change the full SELinux security context of a file:", "command": "chcon {{user}}:{{role}}:{{type}}:{{range/level}} {{filename}}"}, {"task": "Change only the user part of SELinux security context:", "command": "chcon -u {{user}} {{filename}}"}, {"task": "Change only the role part of SELinux security context:", "command": "chcon -r {{role}} {{filename}}"}, {"task": "Change only the type part of SELinux security context:", "command": "chcon -t {{type}} {{filename}}"}, {"task": "Change only the range/level part of SELinux security context:", "command": "chcon -l {{range/level}} {{filename}}"}]}
{"command": "chcpu", "tasks": [{"task": "Disable CPUs via a list of CPU ID numbers:", "command": "chcpu -d {{1,3}}"}, {"task": "Enable a set of CPUs via a range of CPU ID numbers:", "command": "chcpu -e {{1-10}}"}]}
{"command": "check-language-support", "tasks": [{"task": "Display a list of missing language packages based on installed software and enabled locales:", "command": "check-language-support"}, {"task": "List packages for a specific locale:", "command": "check-language-support --language {{en}}"}, {"task": "Display installed packages as well as missing ones:", "command": "check-language-support --show-installed"}]}
{"command": "check-support-status", "tasks": [{"task": "Display packages whose support is limited, has already ended or will end earlier than the distribution's end of life:", "command": "check-support-status"}, {"task": "Display only packages whose support has ended:", "command": "check-support-status --type {{ended}}"}, {"task": "Skip printing a headline:", "command": "check-support-status --no-heading"}]}
{"command": "checkinstall", "tasks": [{"task": "Create and install a package with default settings:", "command": "sudo checkinstall --default"}, {"task": "Create a package but don't install it:", "command": "sudo checkinstall --install={{no}}"}, {"task": "Create a package without documentation:", "command": "sudo checkinstall --nodoc"}, {"task": "Create a package and set the name:", "command": "sudo checkinstall --pkgname {{package}}"}, {"task": "Create a package and specify where to save it:", "command": "sudo checkinstall --pakdir {{path/to/directory}}"}]}
{"command": "checkupdates-aur", "tasks": [{"task": "List pending updates for AUR packages:", "command": "checkupdates-aur"}, {"task": "List pending updates for AUR packages in debug mode:", "command": "CHECKUPDATES_DEBUG=1 checkupdates-aur"}, {"task": "Display help:", "command": "checkupdates-aur --help"}]}
{"command": "checkupdates", "tasks": [{"task": "List pending updates:", "command": "checkupdates"}, {"task": "List pending updates and download the packages to the pacman cache:", "command": "checkupdates --download"}, {"task": "List pending updates using a specific pacman database:", "command": "CHECKUPDATES_DB={{path/to/directory}} checkupdates"}, {"task": "Display help:", "command": "checkupdates --help"}]}
{"command": "chfn", "tasks": [{"task": "Update a user's \"Name\" field in the output of `finger`:", "command": "chfn -f {{new_display_name}} {{username}}"}, {"task": "Update a user's \"Office Room Number\" field for the output of `finger`:", "command": "chfn -o {{new_office_room_number}} {{username}}"}, {"task": "Update a user's \"Office Phone Number\" field for the output of `finger`:", "command": "chfn -p {{new_office_telephone_number}} {{username}}"}, {"task": "Update a user's \"Home Phone Number\" field for the output of `finger`:", "command": "chfn -h {{new_home_telephone_number}} {{username}}"}]}
{"command": "chkconfig", "tasks": [{"task": "List services with runlevel:", "command": "chkconfig --list"}, {"task": "Show a service's runlevel:", "command": "chkconfig --list {{ntpd}}"}, {"task": "Enable service at boot:", "command": "chkconfig {{sshd}} on"}, {"task": "Enable service at boot for runlevels 2, 3, 4, and 5:", "command": "chkconfig --level {{2345}} {{sshd}} on"}, {"task": "Disable service at boot:", "command": "chkconfig {{ntpd}} off"}, {"task": "Disable service at boot for runlevel 3:", "command": "chkconfig --level {{3}} {{ntpd}} off"}]}
{"command": "chntpw", "tasks": [{"task": "List all users in the SAM file:", "command": "chntpw -l {{path/to/sam_file}}"}, {"task": "Edit [u]ser interactively:", "command": "chntpw -u {{username}} {{path/to/sam_file}}"}, {"task": "Use chntpw [i]nteractively:", "command": "chntpw -i {{path/to/sam_file}}"}]}
{"command": "chpasswd", "tasks": [{"task": "Change the password for a specific user:", "command": "printf \"{{username}}:{{new_password}}\" | sudo chpasswd"}, {"task": "Change the passwords for multiple users (The input text must not contain any spaces.):", "command": "printf \"{{username_1}}:{{new_password_1}}\\n{{username_2}}:{{new_password_2}}\" | sudo chpasswd"}, {"task": "Change the password for a specific user, and specify it in encrypted form:", "command": "printf \"{{username}}:{{new_encrypted_password}}\" | sudo chpasswd --encrypted"}, {"task": "Change the password for a specific user, and use a specific encryption for the stored password:", "command": "printf \"{{username}}:{{new_password}}\" | sudo chpasswd --crypt-method {{NONE|DES|MD5|SHA256|SHA512}}"}]}
{"command": "chronyc", "tasks": [{"task": "Start `chronyc` in interactive mode:", "command": "chronyc"}, {"task": "Display tracking stats for the Chrony daemon:", "command": "chronyc tracking"}, {"task": "Print the time sources that Chrony is currently using:", "command": "chronyc sources"}, {"task": "Display stats for sources currently used by chrony daemon as a time source:", "command": "chronyc sourcestats"}, {"task": "Step the system clock immediately, bypassing any slewing:", "command": "chronyc makestep"}, {"task": "Display verbose information about each NTP source:", "command": "chronyc ntpdata"}]}
{"command": "chrt", "tasks": [{"task": "Display attributes of a process:", "command": "chrt --pid {{PID}}"}, {"task": "Display attributes of all threads of a process:", "command": "chrt --all-tasks --pid {{PID}}"}, {"task": "Display the min/max priority values that can be used with `chrt`:", "command": "chrt --max"}, {"task": "Set the scheduling policy for a process:", "command": "chrt --pid {{PID}} --{{deadline|idle|batch|rr|fifo|other}}"}]}
{"command": "cloud-init", "tasks": [{"task": "Display the status of the most recent cloud-init run:", "command": "cloud-init status"}, {"task": "Wait for cloud-init to finish running and then report status:", "command": "cloud-init status --wait"}, {"task": "List available top-level metadata keys to query:", "command": "cloud-init query --list-keys"}, {"task": "Query cached instance metadata for data:", "command": "cloud-init query {{dot_delimited_variable_path}}"}, {"task": "Clean logs and artifacts to allow cloud-init to rerun:", "command": "cloud-init clean"}]}
{"command": "cmus", "tasks": [{"task": "Open cmus into the specified directory (this will become your new working directory):", "command": "cmus {{path/to/directory}}"}, {"task": "Add file/directory to library:", "command": ":add {{path/to/file_or_directory}}"}, {"task": "Pause/unpause current song:", "command": "c"}, {"task": "Toggle shuffle mode on/off:", "command": "s"}, {"task": "Quit cmus:", "command": "q"}]}
{"command": "cockpit-bridge", "tasks": [{"task": "List all cockpit packages:", "command": "cockpit-bridge --packages"}, {"task": "Display help:", "command": "cockpit-bridge --help"}]}
{"command": "cockpit-desktop", "tasks": [{"task": "Open a page:", "command": "cockpit-desktop {{url}} {{SSH_host}}"}, {"task": "Open storage page:", "command": "cockpit-desktop {{/cockpit/@localhost/storage/index.html}}"}]}
{"command": "cockpit-tls", "tasks": [{"task": "Serve HTTP requests to a specific port instead of port `9090`:", "command": "cockpit-tls --port {{port}}"}, {"task": "Display help:", "command": "cockpit-tls --help"}]}
{"command": "cockpit-ws", "tasks": [{"task": "Start with authentication via SSH at `127.0.0.1` with port `22` enabled:", "command": "cockpit-ws --local-ssh"}, {"task": "Start an HTTP server on a specific port:", "command": "cockpit-ws --port {{port}}"}, {"task": "Start and bind to a specific IP address (defaults to `0.0.0.0`):", "command": "cockpit-ws --address {{ip_address}}"}, {"task": "Start without TLS:", "command": "cockpit-ws --no-tls"}, {"task": "Display help:", "command": "cockpit-ws --help"}]}
{"command": "collectd", "tasks": [{"task": "Show usage help, including the program version:", "command": "collectd -h"}, {"task": "Test the configuration file and then exit:", "command": "collectd -t"}, {"task": "Test plugin data collection functionality and then exit:", "command": "collectd -T"}, {"task": "Start `collectd`:", "command": "collectd"}, {"task": "Specify a custom configuration file location:", "command": "collectd -C {{path/to/file}}"}, {"task": "Specify a custom PID file location:", "command": "collectd -P {{path/to/file}}"}, {"task": "Don't fork into the background:", "command": "collectd -f"}]}
{"command": "colrm", "tasks": [{"task": "Remove first column of `stdin`:", "command": "colrm {{1 1}}"}, {"task": "Remove from 3rd column till the end of each line:", "command": "colrm {{3}}"}, {"task": "Remove from the 3rd column till the 5th column of each line:", "command": "colrm {{3 5}}"}]}
{"command": "compopt", "tasks": [{"task": "Print the options for the currently executing completion:", "command": "compopt"}, {"task": "Print the completion options for given command:", "command": "compopt {{command}}"}]}
{"command": "compose", "tasks": [{"task": "Compose action can be used to compose any existing file or new on default mailcap edit tool:", "command": "compose {{filename}}"}, {"task": "With `run-mailcap`:", "command": "run-mailcap --action=compose {{filename}}"}]}
{"command": "compsize", "tasks": [{"task": "Calculate the current compression ratio for a file or directory:", "command": "sudo compsize {{path/to/file_or_directory}}"}, {"task": "Don't traverse filesystem boundaries:", "command": "sudo compsize --one-file-system {{path/to/file_or_directory}}"}, {"task": "Show raw byte counts instead of human-readable sizes:", "command": "sudo compsize --bytes {{path/to/file_or_directory}}"}]}
{"command": "conky", "tasks": [{"task": "Launch with default, built-in config:", "command": "conky"}, {"task": "Create a new default config:", "command": "conky -C > ~/.conkyrc"}, {"task": "Launch Conky with a given config file:", "command": "conky -c {{path/to/config}}"}, {"task": "Start in the background (daemonize):", "command": "conky -d"}, {"task": "Align Conky on the desktop:", "command": "conky -a {{top|bottom|middle}}_{{left|right|middle}}"}, {"task": "Pause for 5 seconds at startup before launching:", "command": "conky -p {{5}}"}]}
{"command": "conntrack", "tasks": [{"task": "List all currently tracked connections:", "command": "conntrack --dump"}, {"task": "Display a real-time event log of connection changes:", "command": "conntrack --event"}, {"task": "Display a real-time event log of connection changes and associated timestamps:", "command": "conntrack --event -o timestamp"}, {"task": "Display a real-time event log of connection changes for a specific IP address:", "command": "conntrack --event --orig-src {{ip_address}}"}, {"task": "Delete all flows for a specific source IP address:", "command": "conntrack --delete --orig-src {{ip_address}}"}]}
{"command": "coproc", "tasks": [{"task": "Run a subshell asynchronously:", "command": "coproc { {{command1; command2; ...}}; }"}, {"task": "Create a coprocess with a specific name:", "command": "coproc {{name}} { {{command1; command2; ...}}; }"}, {"task": "Write to a specific coprocess `stdin`:", "command": "echo \"{{input}}\" >&\"${{{name}}[1]}\""}, {"task": "Read from a specific coprocess `stdout`:", "command": "read {{variable}} <&\"${{{name}}[0]}\""}, {"task": "Create a coprocess which repeatedly reads `stdin` and runs some commands on the input:", "command": "coproc {{name}} { while read line; do {{command1; command2; ...}}; done }"}, {"task": "Create a coprocess which repeatedly reads `stdin`, runs a pipeline on the input, and writes the output to `stdout`:", "command": "coproc {{name}} { while read line; do echo \"$line\" | {{command1 | command2 | ...}} | cat /dev/fd/0; done }"}, {"task": "Create and use a coprocess running `bc`:", "command": "coproc BC { bc --mathlib; }; echo \"1/3\" >&\"${BC[1]}\"; read output <&\"${BC[0]}\"; echo \"$output\""}]}
{"command": "coredumpctl", "tasks": [{"task": "List all captured core dumps:", "command": "coredumpctl list"}, {"task": "List captured core dumps for a program:", "command": "coredumpctl list {{program}}"}, {"task": "Show information about the core dumps matching a program with `PID`:", "command": "coredumpctl info {{PID}}"}, {"task": "Invoke debugger using the last core dump of a program:", "command": "coredumpctl debug {{program}}"}, {"task": "Extract the last core dump of a program to a file:", "command": "coredumpctl --output={{path/to/file}} dump {{program}}"}]}
{"command": "cp", "tasks": [{"task": "Copy a file to another location:", "command": "cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}"}, {"task": "Copy a file into another directory, keeping the filename:", "command": "cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}"}, {"task": "Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it):", "command": "cp -r {{path/to/source_directory}} {{path/to/target_directory}}"}, {"task": "Copy a directory recursively, in verbose mode (shows files as they are copied):", "command": "cp -vr {{path/to/source_directory}} {{path/to/target_directory}}"}, {"task": "Copy multiple files at once to a directory:", "command": "cp -t {{path/to/destination_directory}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Copy text files to another location, in interactive mode (prompts user before overwriting):", "command": "cp -i {{*.txt}} {{path/to/target_directory}}"}, {"task": "Follow symbolic links before copying:", "command": "cp -L {{link}} {{path/to/target_directory}}"}, {"task": "Use the full path of source files, creating any missing intermediate directories when copying:", "command": "cp --parents {{source/path/to/file}} {{path/to/target_file}}"}]}
{"command": "cpufreq-aperf", "tasks": [{"task": "Start calculating, defaulting to all CPU cores and 1 second refresh interval:", "command": "sudo cpufreq-aperf"}, {"task": "Start calculating for CPU 1 only:", "command": "sudo cpufreq-aperf -c {{1}}"}, {"task": "Start calculating with a 3 second refresh interval for all CPU cores:", "command": "sudo cpufreq-aperf -i {{3}}"}, {"task": "Calculate only once:", "command": "sudo cpufreq-aperf -o"}]}
{"command": "cpufreq-info", "tasks": [{"task": "Show CPU frequency information for all CPUs:", "command": "cpufreq-info"}, {"task": "Show CPU frequency information for the specified CPU:", "command": "cpufreq-info -c {{cpu_number}}"}, {"task": "Show the allowed minimum and maximum CPU frequency:", "command": "cpufreq-info -l"}, {"task": "Show the current minimum and maximum CPU frequency and policy in table format:", "command": "cpufreq-info -o"}, {"task": "Show available CPU frequency policies:", "command": "cpufreq-info -g"}, {"task": "Show current CPU work frequency in a human-readable format, according to the cpufreq kernel module:", "command": "cpufreq-info -f -m"}, {"task": "Show current CPU work frequency in a human-readable format, by reading it from hardware (only available to root):", "command": "sudo cpufreq-info -w -m"}]}
{"command": "cpufreq-set", "tasks": [{"task": "Set the CPU frequency policy of CPU 1 to \"userspace\":", "command": "sudo cpufreq-set -c {{1}} -g {{userspace}}"}, {"task": "Set the current minimum CPU frequency of CPU 1:", "command": "sudo cpufreq-set -c {{1}} --min {{min_frequency}}"}, {"task": "Set the current maximum CPU frequency of CPU 1:", "command": "sudo cpufreq-set -c {{1}} --max {{max_frequency}}"}, {"task": "Set the current work frequency of CPU 1:", "command": "sudo cpufreq-set -c {{1}} -f {{work_frequency}}"}]}
{"command": "cpuid", "tasks": [{"task": "Display information for all CPUs:", "command": "cpuid"}, {"task": "Display information only for the current CPU:", "command": "cpuid -1"}, {"task": "Display raw hex information with no decoding:", "command": "cpuid -r"}]}
{"command": "cpulimit", "tasks": [{"task": "Limit an existing process with PID 1234 to only use 25% of the CPU:", "command": "cpulimit --pid {{1234}} --limit {{25%}}"}, {"task": "Limit an existing program by its executable name:", "command": "cpulimit --exe {{program}} --limit {{25}}"}, {"task": "Launch a given program and limit it to only use 50% of the CPU:", "command": "cpulimit --limit {{50}} -- {{program arg1 arg2 ...}}"}, {"task": "Launch a program, limit its CPU usage to 50% and run cpulimit in the background:", "command": "cpulimit --limit {{50}} --background -- {{program}}"}, {"task": "Kill its process if the program's CPU usage goes over 50%:", "command": "cpulimit --limit 50 --kill -- {{program}}"}, {"task": "Throttle both it and its child processes so that none go about 25% CPU:", "command": "cpulimit --limit {{25}} --monitor-forks -- {{program}}"}]}
{"command": "cpupower", "tasks": [{"task": "List CPUs:", "command": "sudo cpupower --cpu {{all}} info"}, {"task": "Print information about all cores:", "command": "sudo cpupower --cpu {{all}} info"}, {"task": "Set all CPUs to a power-saving frequency governor:", "command": "sudo cpupower --cpu {{all}} frequency-set --governor {{powersave}}"}, {"task": "Print CPU 0's available frequency [g]overnors:", "command": "sudo cpupower --cpu {{0}} frequency-info g | grep \"analyzing\\|governors\""}, {"task": "Print CPU 4's frequency from the hardware, in a human-readable format:", "command": "sudo cpupower --cpu {{4}} frequency-info --hwfreq --human"}]}
{"command": "create_ap", "tasks": [{"task": "Create an open network with no passphrase:", "command": "create_ap {{wlan0}} {{eth0}} {{access_point_ssid}}"}, {"task": "Use a WPA + WPA2 passphrase:", "command": "create_ap {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}"}, {"task": "Create an access point without Internet sharing:", "command": "create_ap -n {{wlan0}} {{access_point_ssid}} {{passphrase}}"}, {"task": "Create a bridged network with Internet sharing:", "command": "create_ap -m bridge {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}"}, {"task": "Create a bridged network with Internet sharing and a pre-configured bridge interface:", "command": "create_ap -m bridge {{wlan0}} {{br0}} {{access_point_ssid}} {{passphrase}}"}, {"task": "Create an access port for Internet sharing from the same Wi-Fi interface:", "command": "create_ap {{wlan0}} {{wlan0}} {{access_point_ssid}} {{passphrase}}"}, {"task": "Choose a different Wi-Fi adapter driver:", "command": "create_ap --driver {{wifi_adapter}} {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}"}]}
{"command": "createrepo", "tasks": [{"task": "Initialize a basic repository in a directory:", "command": "createrepo {{path/to/directory}}"}, {"task": "Initialize a repository, exclude test RPMs and display verbose logs:", "command": "createrepo -v -x {{test_*.rpm}} {{path/to/directory}}"}, {"task": "Initialize a repository, using SHA1 as the checksum algorithm, and ignoring symbolic links:", "command": "createrepo -S -s {{sha1}} {{path/to/directory}}"}]}
{"command": "cryptcat", "tasks": [{"task": "[l]isten on a specified [p]ort and print any data received:", "command": "cryptcat -k {{password}} -l -p {{port}}"}, {"task": "Connect to a certain port:", "command": "cryptcat -k {{password}} {{ip_address}} {{port}}"}, {"task": "Set a timeout [w]:", "command": "cryptcat -k {{password}} -w {{timeout_in_seconds}} {{ip_address}} {{port}}"}, {"task": "Scan [z] the open ports of a specified host:", "command": "cryptcat -v -z {{ip_address}} {{port}}"}, {"task": "Act as proxy and forward data from a local TCP port to the given remote host:", "command": "cryptcat -k {{password}} -l -p {{local_port}} | cryptcat -k {{password}} {{hostname}} {{remote_port}}"}]}
{"command": "cryptsetup", "tasks": [{"task": "Initialize a LUKS volume (overwrites all data on the partition):", "command": "cryptsetup luksFormat {{/dev/sda1}}"}, {"task": "Open a LUKS volume and create a decrypted mapping at `/dev/mapper/{{target}}`:", "command": "cryptsetup luksOpen {{/dev/sda1}} {{target}}"}, {"task": "Remove an existing mapping:", "command": "cryptsetup luksClose {{target}}"}, {"task": "Change the LUKS volume's passphrase:", "command": "cryptsetup luksChangeKey {{/dev/sda1}}"}]}
{"command": "csplit", "tasks": [{"task": "Split a file at lines 5 and 23:", "command": "csplit {{path/to/file}} {{5}} {{23}}"}, {"task": "Split a file every 5 lines (this will fail if the total number of lines is not divisible by 5):", "command": "csplit {{path/to/file}} {{5}} {*}"}, {"task": "Split a file every 5 lines, ignoring exact-division error:", "command": "csplit -k {{path/to/file}} {{5}} {*}"}, {"task": "Split a file at line 5 and use a custom prefix for the output files:", "command": "csplit {{path/to/file}} {{5}} -f {{prefix}}"}, {"task": "Split a file at a line matching a regular expression:", "command": "csplit {{path/to/file}} /{{regular_expression}}/"}]}
{"command": "ctr", "tasks": [{"task": "List all containers (running and stopped):", "command": "ctr containers list"}, {"task": "List all images:", "command": "ctr images list"}, {"task": "Pull an image:", "command": "ctr images pull {{image}}"}, {"task": "Tag an image:", "command": "ctr images tag {{source_image}}:{{source_tag}} {{target_image}}:{{target_tag}}"}]}
{"command": "ctrlaltdel", "tasks": [{"task": "Get current setting:", "command": "ctrlaltdel"}, {"task": "Set CTRL+ALT+DEL to reboot immediately, without any preparation:", "command": "sudo ctrlaltdel hard"}, {"task": "Set CTRL+ALT+DEL to reboot \"normally\", giving processes a chance to exit first (send SIGINT to PID1):", "command": "sudo ctrlaltdel soft"}]}
{"command": "curlie", "tasks": [{"task": "Send a GET request:", "command": "curlie {{httpbin.org/get}}"}, {"task": "Send a POST request:", "command": "curlie post {{httpbin.org/post}} {{name=john}} {{age:=25}}"}, {"task": "Send a GET request with query parameters (e.g. `first_param=5&second_param=true`):", "command": "curlie get {{httpbin.org/get}} {{first_param==5}} {{second_param==true}}"}, {"task": "Send a GET request with a custom header:", "command": "curlie get {{httpbin.org/get}} {{header-name:header-value}}"}]}
{"command": "cuyo", "tasks": [{"task": "Start a new game:", "command": "cuyo"}, {"task": "Navigate the piece horizontally:", "command": "{{A|D}} OR {{Left|Right}} arrow key"}, {"task": "Turn the piece:", "command": "{{W|Up arrow key}} "}, {"task": "Hard drop the piece:", "command": "{{S|Down arrow key}}"}]}
{"command": "daemon", "tasks": [{"task": "Run a command as a daemon:", "command": "daemon --name=\"{{name}}\" {{command}}"}, {"task": "Run a command as a daemon which will restart if the command crashes:", "command": "daemon --name=\"{{name}}\" --respawn {{command}}"}, {"task": "Run a command as a daemon which will restart if it crashes, with two attempts every 10 seconds:", "command": "daemon --name=\"{{name}}\" --respawn --attempts=2 --delay=10 {{command}}"}, {"task": "Run a command as a daemon, writing logs to a specific file:", "command": "daemon --name=\"{{name}}\" --errlog={{path/to/file.log}} {{command}}"}, {"task": "Kill a daemon (SIGTERM):", "command": "daemon --name=\"{{name}}\" --stop"}, {"task": "List daemons:", "command": "daemon --list"}]}
{"command": "daemonize", "tasks": [{"task": "Run a command as a daemon:", "command": "daemonize {{command}} {{command_arguments}}"}, {"task": "Write the PID to the specified file:", "command": "daemonize -p {{path/to/pidfile}} {{command}} {{command_arguments}}"}, {"task": "Use a lock file to ensure that only one instance runs at a time:", "command": "daemonize -l {{path/to/lockfile}} {{command}} {{command_arguments}}"}, {"task": "Use the specified user account:", "command": "sudo daemonize -u {{user}} {{command}} {{command_arguments}}"}]}
{"command": "datamash", "tasks": [{"task": "Get max, min, mean and median of a single column of numbers:", "command": "seq 3 | datamash max 1 min 1 mean 1 median 1"}, {"task": "Get the mean of a single column of float numbers (floats must use \",\" and not \".\"):", "command": "echo -e '1.0\\n2.5\\n3.1\\n4.3\\n5.6\\n5.7' | tr '.' ',' | datamash mean 1"}, {"task": "Get the mean of a single column of numbers with a given decimal precision:", "command": "echo -e '1\\n2\\n3\\n4\\n5\\n5' | datamash -R {{number_of_decimals_wanted}} mean 1"}, {"task": "Get the mean of a single column of numbers ignoring \"Na\" and \"NaN\" (literal) strings:", "command": "echo -e '1\\n2\\nNa\\n3\\nNaN' | datamash --narm mean 1"}]}
{"command": "dbclient", "tasks": [{"task": "Connect to a remote host:", "command": "dbclient {{user}}@{{host}}"}, {"task": "Connect to a remote host on [p]ort 2222:", "command": "dbclient {{user}}@{{host}} -p 2222"}, {"task": "Connect to a remote host using a specific [i]dentity key in dropbear format:", "command": "dbclient -i {{path/to/key_file}} {{user}}@{{host}}"}, {"task": "Run a command on the remote host with a [t]ty allocation allowing interaction with the remote command:", "command": "dbclient {{user}}@{{host}} -t {{command}} {{argument1 argument2 ...}}"}, {"task": "Connect and forward [A]gent connections to remote host:", "command": "dbclient -A {{user}}@{{host}}"}]}
{"command": "dbus-daemon", "tasks": [{"task": "Run the daemon with a configuration file:", "command": "dbus-daemon --config-file {{path/to/file}}"}, {"task": "Run the daemon with the standard per-login-session message bus configuration:", "command": "dbus-daemon --session"}, {"task": "Run the daemon with the standard systemwide message bus configuration:", "command": "dbus-daemon --system"}, {"task": "Set the address to listen on and override the configuration value for it:", "command": "dbus-daemon --address {{address}}"}, {"task": "Output the process ID to `stdout`:", "command": "dbus-daemon --print-pid"}, {"task": "Force the message bus to write to the system log for messages:", "command": "dbus-daemon --syslog"}]}
{"command": "dconf read", "tasks": [{"task": "Print a specific key value:", "command": "dconf read {{/path/to/key}}"}, {"task": "Print a specific key [d]efault value:", "command": "dconf read -d {{/path/to/key}}"}]}
{"command": "dconf reset", "tasks": [{"task": "Reset a specific key value:", "command": "dconf read {{/path/to/key}}"}, {"task": "Reset a specific directory:", "command": "dconf read -d {{/path/to/directory/}}"}]}
{"command": "dconf write", "tasks": [{"task": "Write a specific key value:", "command": "dconf write {{/path/to/key}} \"{{value}}\""}, {"task": "Write a specific string key value:", "command": "dconf write {{/path/to/key}} \"'{{string}}'\""}, {"task": "Write a specific integer key value:", "command": "dconf write {{/path/to/key}} \"{{5}}\""}, {"task": "Write a specific boolean key value:", "command": "dconf write {{/path/to/key}} \"{{true|false}}\""}, {"task": "Write a specific array key value:", "command": "dconf write {{/path/to/key}} \"[{{'first', 'second', ...}}]\""}, {"task": "Write a specific empty array key value:", "command": "dconf write {{/path/to/key}} \"@as []\""}]}
{"command": "dconf", "tasks": [{"task": "Print a specific key value:", "command": "dconf read {{/path/to/key}}"}, {"task": "Print a specific path sub-directories and sub-keys:", "command": "dconf list {{/path/to/directory/}}"}, {"task": "Write a specific key value:", "command": "dconf write {{/path/to/key}} \"{{value}}\""}, {"task": "Reset a specific key value:", "command": "dconf reset {{/path/to/key}}"}, {"task": "Watch a specific key/directory for changes:", "command": "dconf watch {{/path/to/key|/path/to/directory/}}"}, {"task": "Dump a specific directory in INI file format:", "command": "dconf dump {{/path/to/directory/}}"}]}
{"command": "dd", "tasks": [{"task": "Make a bootable USB drive from an isohybrid file (such like `archlinux-xxx.iso`) and show the progress:", "command": "dd if={{path/to/file.iso}} of={{/dev/usb_drive}} status=progress"}, {"task": "Clone a drive to another drive with 4 MiB block, ignore error and show the progress:", "command": "dd if={{/dev/source_drive}} of={{/dev/dest_drive}} bs={{4M}} conv={{noerror}} status=progress"}, {"task": "Generate a file of 100 random bytes by using kernel random driver:", "command": "dd if=/dev/urandom of={{path/to/random_file}} bs={{100}} count={{1}}"}, {"task": "Benchmark the write performance of a disk:", "command": "dd if=/dev/zero of={{path/to/file_1GB}} bs={{1024}} count={{1000000}}"}, {"task": "Generate a system backup into an IMG file and show the progress:", "command": "dd if={{/dev/drive_device}} of={{path/to/file.img}} status=progress"}, {"task": "Restore a drive from an IMG file and show the progress:", "command": "dd if={{path/to/file.img}} of={{/dev/drive_device}} status=progress"}, {"task": "Check the progress of an ongoing dd operation (run this command from another shell):", "command": "kill -USR1 $(pgrep ^dd)"}]}
{"command": "ddcutil", "tasks": [{"task": "List all compatible displays:", "command": "ddcutil detect"}, {"task": "Change the brightness (option 0x10) of display 1 to 50%:", "command": "ddcutil --display {{1}} setvcp {{10}} {{50}}"}, {"task": "Increase the contrast (option 0x12) of display 1 by 5%:", "command": "ddcutil -d {{1}} setvcp {{12}} {{+}} {{5}}"}, {"task": "Read the settings of display 1:", "command": "ddcutil -d {{1}} getvcp {{ALL}}"}]}
{"command": "ddrescue", "tasks": [{"task": "Take an image of a device, creating a log file:", "command": "sudo ddrescue {{/dev/sdb}} {{path/to/image.dd}} {{path/to/log.txt}}"}, {"task": "Clone Disk A to Disk B, creating a log file:", "command": "sudo ddrescue --force --no-scrape {{/dev/sdX}} {{/dev/sdY}} {{path/to/log.txt}}"}]}
{"command": "debchange", "tasks": [{"task": "Add a new version for a non-maintainer upload to the changelog:", "command": "debchange --nmu"}, {"task": "Add a changelog entry to the current version:", "command": "debchange --append"}, {"task": "Add a changelog entry to close the bug with specified ID:", "command": "debchange --closes {{bug_id}}"}]}
{"command": "debman", "tasks": [{"task": "Read a man page for a command that is provided by a specified package name:", "command": "debman -p {{package_name}} {{command_name}}"}, {"task": "Specify a package version to download:", "command": "debman -p {{package_name}}={{version}} {{command_name}}"}, {"task": "Read a man page in a `.deb` file:", "command": "debman -f {{path/to/filename.deb}} {{command_name}}"}]}
{"command": "debootstrap", "tasks": [{"task": "Create a Debian stable release system inside the `debian-root` directory:", "command": "sudo debootstrap stable {{path/to/debian-root/}} http://deb.debian.org/debian"}, {"task": "Create a minimal system including only required packages:", "command": "sudo debootstrap --variant=minbase stable {{path/to/debian-root/}}"}, {"task": "Create an Ubuntu 20.04 system inside the `focal-root` directory with a local mirror:", "command": "sudo debootstrap focal {{path/to/focal-root/}} {{file:///path/to/mirror/}}"}, {"task": "Switch to a bootstrapped system:", "command": "sudo chroot {{path/to/root}}"}, {"task": "List available releases:", "command": "ls /usr/share/debootstrap/scripts/"}]}
{"command": "deborphan", "tasks": [{"task": "Display library packages (from the \"libs\" section of the package repository) which are not required by another package:", "command": "deborphan"}, {"task": "List orphan packages from the \"libs\" section as well as orphan packages that have a name that looks like a library name:", "command": "deborphan --guess-all"}, {"task": "Find packages which are only recommended or suggested (but not required) by another package:", "command": "deborphan --nice-mode"}]}
{"command": "debsecan", "tasks": [{"task": "List vulnerable installed packages on the current host:", "command": "debsecan"}, {"task": "List vulnerable installed packages of a specific suite:", "command": "debsecan --suite {{release_code_name}}"}, {"task": "List only fixed vulnerabilities:", "command": "debsecan --suite {{release_code_name}} --only-fixed"}, {"task": "List only fixed vulnerabilities of unstable (\"sid\") and mail to root:", "command": "debsecan --suite {{sid}} --only-fixed --format {{report}} --mailto {{root}} --update-history"}, {"task": "Upgrade vulnerable installed packages:", "command": "sudo apt upgrade $(debsecan --only-fixed --format {{packages}})"}]}
{"command": "debtap", "tasks": [{"task": "Update debtap database (before the first run):", "command": "sudo debtap --update"}, {"task": "Convert the specified package:", "command": "debtap {{path/to/package.deb}}"}, {"task": "Convert the specified package bypassing all questions, except for editing metadata files:", "command": "debtap --quiet {{path/to/package.deb}}"}, {"task": "Generate a PKGBUILD file:", "command": "debtap --pkgbuild {{path/to/package.deb}}"}]}
{"command": "debugfs", "tasks": [{"task": "Open the filesystem in read only mode:", "command": "debugfs {{/dev/sdXN}}"}, {"task": "Open the filesystem in read write mode:", "command": "debugfs -w {{/dev/sdXN}}"}, {"task": "Read commands from a specified file, execute them and then exit:", "command": "debugfs -f {{path/to/cmd_file}} {{/dev/sdXN}}"}, {"task": "View the filesystem stats in debugfs console:", "command": "stats"}, {"task": "Close the filesystem:", "command": "close -a"}, {"task": "List all available commands:", "command": "lr"}]}
{"command": "debuild", "tasks": [{"task": "Build the package in the current directory:", "command": "debuild"}, {"task": "Build a binary package only:", "command": "debuild -b"}, {"task": "Do not run lintian after building the package:", "command": "debuild --no-lintian"}]}
{"command": "deluser", "tasks": [{"task": "Remove a user:", "command": "sudo deluser {{username}}"}, {"task": "Remove a user and their home directory:", "command": "sudo deluser --remove-home {{username}}"}, {"task": "Remove a user and their home, but backup their files into a `.tar.gz` file in the specified directory:", "command": "sudo deluser --backup-to {{path/to/backup_directory}} --remove-home {{username}}"}, {"task": "Remove a user, and all files owned by them:", "command": "sudo deluser --remove-all-files {{username}}"}]}
{"command": "dex", "tasks": [{"task": "Execute all programs in the autostart folders:", "command": "dex --autostart"}, {"task": "Execute all programs in the specified folders:", "command": "dex --autostart --search-paths {{path/to/directory1}}:{{path/to/directory2}}:{{path/to/directory3}}:"}, {"task": "Preview the programs would be executed in a GNOME specific autostart:", "command": "dex --autostart --environment {{GNOME}}"}, {"task": "Preview the programs would be executed in a regular autostart:", "command": "dex --autostart --dry-run"}, {"task": "Preview the value of the DesktopEntry property `Name`:", "command": "dex --property {{Name}} {{path/to/file.desktop}}"}, {"task": "Create a DesktopEntry for a program in the current directory:", "command": "dex --create {{path/to/file.desktop}}"}, {"task": "Execute a single program (with `Terminal=true` in the desktop file) in the given terminal:", "command": "dex --term {{terminal}} {{path/to/file.desktop}}"}]}
{"command": "dget", "tasks": [{"task": "Download a binary package:", "command": "dget {{package_name}}"}, {"task": "Download and extract a package source from its `.dsc` file:", "command": "dget {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}"}, {"task": "Download a package source tarball from its `.dsc` file but don't extract it:", "command": "dget -d {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}"}]}
{"command": "diff3", "tasks": [{"task": "Compare files:", "command": "diff3 {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}, {"task": "Show all changes, outlining conflicts:", "command": "diff3 --show-all {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}"}]}
{"command": "dir", "tasks": [{"task": "List all files, including hidden files:", "command": "dir -all"}, {"task": "List files including their author (`-l` is required):", "command": "dir -l --author"}, {"task": "List files excluding those that match a specified blob pattern:", "command": "dir --hide={{pattern}}"}, {"task": "List subdirectories recursively:", "command": "dir --recursive"}, {"task": "Display help:", "command": "dir --help"}]}
{"command": "dirb", "tasks": [{"task": "Scan a webserver using the default wordlist:", "command": "dirb {{https://example.org}}"}, {"task": "Scan a webserver using a custom wordlist:", "command": "dirb {{https://example.org}} {{path/to/wordlist.txt}}"}, {"task": "Scan a webserver non-recursively:", "command": "dirb {{https://example.org}} -r"}, {"task": "Scan a webserver using a specified user-agent and cookie for HTTP-requests:", "command": "dirb {{https://example.org}} -a {{user_agent_string}} -c {{cookie_string}}"}]}
{"command": "dirbuster", "tasks": [{"task": "Start in GUI mode:", "command": "dirbuster -u {{http://example.com}}"}, {"task": "Start in headless (no GUI) mode:", "command": "dirbuster -H -u {{http://example.com}}"}, {"task": "Set the file extension list:", "command": "dirbuster -e {{txt,html}}"}, {"task": "Enable verbose output:", "command": "dirbuster -v"}, {"task": "Set the report location:", "command": "dirbuster -r {{path/to/report.txt}}"}]}
{"command": "disown", "tasks": [{"task": "Disown the current job:", "command": "disown"}, {"task": "Disown a specific job:", "command": "disown %{{job_number}}"}, {"task": "Disown all jobs:", "command": "disown -a"}, {"task": "Keep job (do not disown it), but mark it so that no future SIGHUP is received on shell exit:", "command": "disown -h %{{job_number}}"}]}
{"command": "distrobox-create", "tasks": [{"task": "Create a distrobox container using the Ubuntu image:", "command": "distrobox-create {{container_name}} --image {{ubuntu:latest}}"}, {"task": "Clone a distrobox container:", "command": "distrobox-create --clone {{container_name}} {{cloned_container_name}}"}]}
{"command": "distrobox-enter", "tasks": [{"task": "Enter a distrobox container:", "command": "distrobox-enter {{container_name}}"}, {"task": "Enter a distrobox container and run a command at login:", "command": "distrobox-enter {{container_name}} -- {{sh -l}}"}, {"task": "Enter a distrobox container without instantiating a tty:", "command": "distrobox-enter --name {{container_name}} -- {{uptime -p}}"}]}
{"command": "distrobox-export", "tasks": [{"task": "Export an app from the container to the host (the desktop entry/icon will show up in your host system's application list):", "command": "distrobox-export --app {{package_name}} --extra-flags \"--foreground\""}, {"task": "Export a binary from the container to the host:", "command": "distrobox-export --bin {{path/to/binary}} --export-path {{path/to/binary_on_host}}"}, {"task": "Export a binary from the container to the host (i.e.`$HOME/.local/bin`) :", "command": "distrobox-export --bin {{path/to/binary}} --export-path {{path/to/export}}"}, {"task": "Export a service from the container to the host (`--sudo` will run the service as root inside the container):", "command": "distrobox-export --service {{package}} --extra-flags \"--allow-newer-config\" --sudo"}, {"task": "Unexport/delete an exported application:", "command": "distrobox-export --app {{package}} --delete"}]}
{"command": "distrobox-host-exec", "tasks": [{"task": "Execute command on the host system from inside the distrobox container:", "command": "distrobox-host-exec \"{{command}}\""}, {"task": "Execute the `ls` command on the host system from inside the container:", "command": "distrobox-host-exec ls"}]}
{"command": "distrobox-list", "tasks": [{"task": "List all distrobox containers:", "command": "distrobox-list"}, {"task": "List all distrobox containers with verbose information:", "command": "distrobox-list --verbose"}]}
{"command": "distrobox-rm", "tasks": [{"task": "Remove a distrobox container (Tip: Stop the container before removing it):", "command": "distrobox-rm {{container_name}}"}, {"task": "Remove a distrobox container forcefully:", "command": "distrobox-rm {{container_name}} --force"}]}
{"command": "distrobox-stop", "tasks": [{"task": "Stop a distrobox container:", "command": "distrobox-stop {{container_name}}"}, {"task": "Stop a distrobox container non-interactively (without confirmation):", "command": "distrobox-stop --name {{container_name}} --yes"}]}
{"command": "distrobox-upgrade", "tasks": [{"task": "Upgrade a container using the container's native package manager:", "command": "distrobox-upgrade {{container_name}}"}, {"task": "Upgrade all containers using the container's native package managers:", "command": "distrobox-upgrade --all"}, {"task": "Upgrade specific containers via the container's native package manager:", "command": "distrobox-upgrade {{container1 container2 ...}}"}]}
{"command": "distrobox", "tasks": [{"task": "View documentation for creating containers:", "command": "tldr distrobox-create"}, {"task": "View documentation for listing container's information:", "command": "tldr distrobox-list"}, {"task": "View documentation for entering the container:", "command": "tldr distrobox-enter"}, {"task": "View documentation for executing a command on the host from inside a container:", "command": "tldr distrobox-host-exec"}, {"task": "View documentation for exporting app/service/binary from the container to the host:", "command": "tldr distrobox-export"}, {"task": "View documentation for upgrading containers:", "command": "tldr distrobox-upgrade"}, {"task": "View documentation for stopping the containers:", "command": "tldr distrobox-stop"}, {"task": "View documentation for removing the containers:", "command": "tldr distrobox-rm"}]}
{"command": "dkms", "tasks": [{"task": "List currently installed modules:", "command": "dkms status"}, {"task": "Rebuild all modules for the currently running kernel:", "command": "dkms autoinstall"}, {"task": "Install version 1.2.1 of the acpi_call module for the currently running kernel:", "command": "dkms install -m {{acpi_call}} -v {{1.2.1}}"}, {"task": "Remove version 1.2.1 of the acpi_call module from all kernels:", "command": "dkms remove -m {{acpi_call}} -v {{1.2.1}} --all"}]}
{"command": "dm-tool", "tasks": [{"task": "Show the greeter while keeping current desktop session open and waiting to be restored upon authentication by logged in user:", "command": "dm-tool switch-to-greeter"}, {"task": "Lock the current session:", "command": "dm-tool lock"}, {"task": "Switch to a specific user, showing an authentication prompt if required:", "command": "dm-tool switch-to-user {{username}} {{session}}"}, {"task": "Add a dynamic seat from within a running LightDM session:", "command": "dm-tool add-seat {{xlocal}} {{name}}={{value}}"}]}
{"command": "dmenu", "tasks": [{"task": "Display a menu of the output of the `ls` command:", "command": "{{ls}} | dmenu"}, {"task": "Display a menu with custom items separated by a new line (`\\n`):", "command": "echo -e \"{{red}}\\n{{green}}\\n{{blue}}\" | dmenu"}, {"task": "Let the user choose between multiple items and save the selected one to a file:", "command": "echo -e \"{{red}}\\n{{green}}\\n{{blue}}\" | dmenu > {{color.txt}}"}, {"task": "Launch dmenu on a specific monitor:", "command": "ls | dmenu -m {{1}}"}, {"task": "Display dmenu at the bottom of the screen:", "command": "ls | dmenu -b"}]}
{"command": "dmesg", "tasks": [{"task": "Show kernel messages:", "command": "dmesg"}, {"task": "Show kernel error messages:", "command": "dmesg --level err"}, {"task": "Show kernel messages and keep reading new ones, similar to `tail -f` (available in kernels 3.5.0 and newer):", "command": "dmesg -w"}, {"task": "Show how much physical memory is available on this system:", "command": "dmesg | grep -i memory"}, {"task": "Show kernel messages 1 page at a time:", "command": "dmesg | less"}, {"task": "Show kernel messages with a timestamp (available in kernels 3.5.0 and newer):", "command": "dmesg -T"}, {"task": "Show kernel messages in human-readable form (available in kernels 3.5.0 and newer):", "command": "dmesg -H"}, {"task": "Colorize output (available in kernels 3.5.0 and newer):", "command": "dmesg -L"}]}
{"command": "dmidecode", "tasks": [{"task": "Show all DMI table contents:", "command": "sudo dmidecode"}, {"task": "Show the BIOS version:", "command": "sudo dmidecode -s bios-version"}, {"task": "Show the system's serial number:", "command": "sudo dmidecode -s system-serial-number"}, {"task": "Show BIOS information:", "command": "sudo dmidecode -t bios"}, {"task": "Show CPU information:", "command": "sudo dmidecode -t processor"}, {"task": "Show memory information:", "command": "sudo dmidecode -t memory"}]}
{"command": "dnf", "tasks": [{"task": "Upgrade installed packages to the newest available versions:", "command": "sudo dnf upgrade"}, {"task": "Search packages via keywords:", "command": "dnf search {{keyword1 keyword2 ...}}"}, {"task": "Display details about a package:", "command": "dnf info {{package}}"}, {"task": "Install a new package (use `-y` to confirm all prompts automatically):", "command": "sudo dnf install {{package1 package2 ...}}"}, {"task": "Remove a package:", "command": "sudo dnf remove {{package1 package2 ...}}"}, {"task": "List installed packages:", "command": "dnf list --installed"}, {"task": "Find which packages provide a given command:", "command": "dnf provides {{command}}"}, {"task": "View all past operations:", "command": "dnf history"}]}
{"command": "dnsmap", "tasks": [{"task": "Scan for subdomains using the internal wordlist:", "command": "dnsmap {{example.com}}"}, {"task": "Specify a list of subdomains to check for:", "command": "dnsmap {{example.com}} -w {{path/to/wordlist.txt}}"}, {"task": "Store results to a CSV file:", "command": "dnsmap {{example.com}} -c {{path/to/file.csv}}"}, {"task": "Ignore 2 IPs that are false positives (up to 5 possible):", "command": "dnsmap {{example.com}} -i {{123.45.67.89,98.76.54.32}}"}]}
{"command": "dnsrecon", "tasks": [{"task": "Scan a domain and save the results to a SQLite database:", "command": "dnsrecon --domain {{example.com}} --db {{path/to/database.sqlite}}"}, {"task": "Scan a domain, specifying the nameserver and performing a zone transfer:", "command": "dnsrecon --domain {{example.com}} --name_server {{nameserver.example.com}} --type axfr"}, {"task": "Scan a domain, using a brute-force attack and a dictionary of subdomains and hostnames:", "command": "dnsrecon --domain {{example.com}} --dictionary {{path/to/dictionary.txt}} --type brt"}, {"task": "Scan a domain, performing a reverse lookup of IP ranges from the SPF record and saving the results to a JSON file:", "command": "dnsrecon --domain {{example.com}} -s --json"}, {"task": "Scan a domain, performing a Google enumeration and saving the results to a CSV file:", "command": "dnsrecon --domain {{example.com}} -g --csv"}, {"task": "Scan a domain, performing DNS cache snooping:", "command": "dnsrecon --domain {{example.com}} --type snoop --name_server {{nameserver.example.com}} --dictionary {{path/to/dictionary.txt}}"}, {"task": "Scan a domain, performing zone walking:", "command": "dnsrecon --domain {{example.com}} --type zonewalk"}]}
{"command": "dnstracer", "tasks": [{"task": "Find out where your local DNS got the information on www.example.com:", "command": "dnstracer {{www.example.com}}"}, {"task": "Start with a [s]pecific DNS that you already know:", "command": "dnstracer -s {{dns.example.org}} {{www.example.com}}"}, {"task": "Only query IPv4 servers:", "command": "dnstracer -4 {{www.example.com}}"}, {"task": "Retry each request 5 times on failure:", "command": "dnstracer -r {{5}} {{www.example.com}}"}, {"task": "Display all steps during execution:", "command": "dnstracer -v {{www.example.com}}"}, {"task": "Display an [o]verview of all received answers after execution:", "command": "dnstracer -o {{www.example.com}}"}]}
{"command": "do-release-upgrade", "tasks": [{"task": "Upgrade to the latest release:", "command": "sudo do-release-upgrade"}, {"task": "Upgrade to the latest development release:", "command": "sudo do-release-upgrade --devel-release"}, {"task": "Upgrade to the latest proposed release:", "command": "sudo do-release-upgrade --proposed"}]}
{"command": "dockerd", "tasks": [{"task": "Run docker daemon:", "command": "dockerd"}, {"task": "Run docker daemon and config it to listen to specific sockets (UNIX and TCP):", "command": "dockerd --host unix://{{path/to/tmp.sock}} --host tcp://{{ip}}"}, {"task": "Run with specific daemon PID file:", "command": "dockerd --pidfile {{path/to/pid_file}}"}, {"task": "Run in debug mode:", "command": "dockerd --debug"}, {"task": "Run and set a specific log level:", "command": "dockerd --log-level={{debug|info|warn|error|fatal}}"}]}
{"command": "dolphin", "tasks": [{"task": "Launch the file manager:", "command": "dolphin"}, {"task": "Open specific directories:", "command": "dolphin {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Open with specific files or directories selected:", "command": "dolphin --select {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Open a new window:", "command": "dolphin --new-window"}, {"task": "Open specific directories in split view:", "command": "dolphin --split {{path/to/directory1}} {{path/to/directory2}}"}, {"task": "Launch the daemon (only required to use the DBus interface):", "command": "dolphin --daemon"}, {"task": "Display help:", "command": "dolphin --help"}]}
{"command": "dos2unix", "tasks": [{"task": "Change the line endings of a file:", "command": "dos2unix {{filename}}"}, {"task": "Create a copy with Unix-style line endings:", "command": "dos2unix -n {{filename}} {{new_filename}}"}]}
{"command": "dphys-swapfile", "tasks": [{"task": "Disable the swap file:", "command": "dphys-swapfile swapoff"}, {"task": "Enable the swap file:", "command": "dphys-swapfile swapon"}, {"task": "Create a new swap file:", "command": "dphys-swapfile setup"}]}
{"command": "dpkg-deb", "tasks": [{"task": "Display information about a package:", "command": "dpkg-deb --info {{path/to/file.deb}}"}, {"task": "Display the package's name and version on one line:", "command": "dpkg-deb --show {{path/to/file.deb}}"}, {"task": "List the package's contents:", "command": "dpkg-deb --contents {{path/to/file.deb}}"}, {"task": "Extract package's contents into a directory:", "command": "dpkg-deb --extract {{path/to/file.deb}} {{path/to/directory}}"}, {"task": "Create a package from a specified directory:", "command": "dpkg-deb --build {{path/to/directory}}"}]}
{"command": "dpkg-query", "tasks": [{"task": "List all installed packages:", "command": "dpkg-query --list"}, {"task": "List installed packages matching a pattern:", "command": "dpkg-query --list '{{libc6*}}'"}, {"task": "List all files installed by a package:", "command": "dpkg-query --listfiles {{libc6}}"}, {"task": "Show information about a package:", "command": "dpkg-query --status {{libc6}}"}, {"task": "Search for packages that own files matching a pattern:", "command": "dpkg-query --search {{/etc/ld.so.conf.d}}"}]}
{"command": "dpkg-reconfigure", "tasks": [{"task": "Reconfigure one or more packages:", "command": "dpkg-reconfigure {{package1 package2 ...}}"}]}
{"command": "dpkg", "tasks": [{"task": "Install a package:", "command": "dpkg -i {{path/to/file.deb}}"}, {"task": "Remove a package:", "command": "dpkg -r {{package_name}}"}, {"task": "List installed packages:", "command": "dpkg -l {{pattern}}"}, {"task": "List a package's contents:", "command": "dpkg -L {{package_name}}"}, {"task": "List contents of a local package file:", "command": "dpkg -c {{path/to/file.deb}}"}, {"task": "Find out which package owns a file:", "command": "dpkg -S {{filename}}"}]}
{"command": "drawing", "tasks": [{"task": "Start Drawing:", "command": "drawing"}, {"task": "Open specific files:", "command": "drawing {{path/to/image1 path/to/image2 ...}}"}, {"task": "Open specific files in a new window:", "command": "drawing --new-window {{path/to/image1 path/to/image2 ...}}"}]}
{"command": "dropbearconvert", "tasks": [{"task": "Convert an OpenSSH private key to the Dropbear format:", "command": "dropbearconvert openssh dropbear {{path/to/input_key}} {{path/to/output_key}}"}, {"task": "Convert a Dropbear private key to the OpenSSH format:", "command": "dropbearconvert dropbear openssh {{path/to/input_key}} {{path/to/output_key}}"}]}
{"command": "dropbearkey", "tasks": [{"task": "Generate an SSH key of [t]ype ed25519 and write it to key [f]ile:", "command": "dropbearkey -t {{ed25519}} -f {{path/to/key_file}}"}, {"task": "Generate an SSH key of [t]ype ecdsa and write it to key [f]ile:", "command": "dropbearkey -t {{ecdsa}} -f {{path/to/key_file}}"}, {"task": "Generate an SSH key of [t]ype RSA with 4096-bit key [s]ize and write it to key [f]ile:", "command": "dropbearkey -t {{rsa}} -s {{4096}} -f {{path/to/key_file}}"}, {"task": "Print the private key fingerprint and public key in key [f]ile:", "command": "dropbearkey -y -f {{path/to/key_file}}"}]}
{"command": "dstat", "tasks": [{"task": "Display CPU, disk, net, paging and system statistics:", "command": "dstat"}, {"task": "Display statistics every 5 seconds and 4 updates only:", "command": "dstat {{5}} {{4}}"}, {"task": "Display CPU and memory statistics only:", "command": "dstat --cpu --mem"}, {"task": "List all available dstat plugins:", "command": "dstat --list"}, {"task": "Display the process using the most memory and most CPU:", "command": "dstat --top-mem --top-cpu"}, {"task": "Display battery percentage and remaining battery time:", "command": "dstat --battery --battery-remain"}]}
{"command": "duc", "tasks": [{"task": "Index the /usr directory, writing to the default database location ~/.duc.db:", "command": "duc index {{/usr}}"}, {"task": "List all files and directories under /usr/local, showing relative file sizes in a [g]raph:", "command": "duc ls --classify --graph {{/usr/local}}"}, {"task": "List all files and directories under /usr/local using treeview recursively:", "command": "duc ls --classify --graph --recursive {{/usr/local}}"}, {"task": "Start the graphical interface to explore the file system using sunburst graphs:", "command": "duc gui {{/usr}}"}, {"task": "Run the ncurses console interface to explore the file system:", "command": "duc ui {{/usr}}"}, {"task": "Dump database info:", "command": "duc info"}]}
{"command": "dumpe2fs", "tasks": [{"task": "Display ext2, ext3 and ext4 filesystem information:", "command": "dumpe2fs {{/dev/sdXN}}"}, {"task": "Display the blocks which are reserved as bad in the filesystem:", "command": "dumpe2fs -b {{/dev/sdXN}}"}, {"task": "Force display filesystem information even with unrecognizable feature flags:", "command": "dumpe2fs -f {{/dev/sdXN}}"}, {"task": "Only display the superblock information and not any of the block group descriptor detail information:", "command": "dumpe2fs -h {{/dev/sdXN}}"}, {"task": "Print the detailed group information block numbers in hexadecimal format:", "command": "dumpe2fs -x {{/dev/sdXN}}"}]}
{"command": "dunstctl", "tasks": [{"task": "Pause notifications:", "command": "dunstctl set-paused true"}, {"task": "Un-pause notifications:", "command": "dunstctl set-paused false"}, {"task": "Close all notifications:", "command": "dunstctl close-all"}, {"task": "Display help:", "command": "dunstctl --help"}]}
{"command": "dunstify", "tasks": [{"task": "Show a notification with a given title and message:", "command": "dunstify \"{{Title}}\" \"{{Message}}\""}, {"task": "Show a notification with specified urgency:", "command": "dunstify \"{{Title}}\" \"{{Message}}\" -u {{low|normal|critical}}"}, {"task": "Specify a message ID (overwrites any previous messages with the same ID):", "command": "dunstify \"{{Title}}\" \"{{Message}}\" -r {{123}}"}, {"task": "To see other possible options:", "command": "notify-send --help"}]}
{"command": "duperemove", "tasks": [{"task": "Search for duplicate extents in a directory and show them:", "command": "duperemove -r {{path/to/directory}}"}, {"task": "Deduplicate duplicate extents on a Btrfs or XFS (experimental) filesystem:", "command": "duperemove -r -d {{path/to/directory}}"}, {"task": "Use a hash file to store extent hashes (less memory usage and can be reused on subsequent runs):", "command": "duperemove -r -d --hashfile={{path/to/hashfile}} {{path/to/directory}}"}, {"task": "Limit I/O threads (for hashing and dedupe stage) and CPU threads (for duplicate extent finding stage):", "command": "duperemove -r -d --hashfile={{path/to/hashfile}} --io-threads={{N}} --cpu-threads={{N}} {{path/to/directory}}"}]}
{"command": "e2freefrag", "tasks": [{"task": "Check how many free blocks are present as contiguous and aligned free space:", "command": "e2freefrag {{/dev/sdXN}}"}, {"task": "Specify chunk size in kilobytes to print how many free chunks are available:", "command": "e2freefrag -c {{chunk_size_in_kb}} {{/dev/sdXN}}"}]}
{"command": "e2fsck", "tasks": [{"task": "Check filesystem, reporting any damaged blocks:", "command": "sudo e2fsck {{/dev/sdXN}}"}, {"task": "Check filesystem and automatically repair any damaged blocks:", "command": "sudo e2fsck -p {{/dev/sdXN}}"}, {"task": "Check filesystem in read only mode:", "command": "sudo e2fsck -c {{/dev/sdXN}}"}, {"task": "Perform an exhaustive, non-destructive read-write test for bad blocks and blacklist them:", "command": "sudo e2fsck -fccky {{/dev/sdXN}}"}]}
{"command": "e2image", "tasks": [{"task": "Write metadata located on device to a specific file:", "command": "e2image {{/dev/sdXN}} {{path/to/image_file}}"}, {"task": "Print metadata located on device to `stdout`:", "command": "e2image {{/dev/sdXN}} -"}, {"task": "Restore the filesystem metadata back to the device:", "command": "e2image -I {{/dev/sdXN}} {{path/to/image_file}}"}, {"task": "Create a large raw sparse file with metadata at proper offsets:", "command": "e2image -r {{/dev/sdXN}} {{path/to/image_file}}"}, {"task": "Create a QCOW2 image file instead of a normal or raw image file:", "command": "e2image -Q {{/dev/sdXN}} {{path/to/image_file}}"}]}
{"command": "e2label", "tasks": [{"task": "Change the volume label on a specific ext partition:", "command": "e2label {{/dev/sda1}} \"{{label_name}}\""}]}
{"command": "e2undo", "tasks": [{"task": "Display information about a specific undo file:", "command": "e2undo -h {{path/to/undo_file}} {{/dev/sdXN}}"}, {"task": "Perform a dry-run and display the candidate blocks for replaying:", "command": "e2undo -nv {{path/to/undo_file}} {{/dev/sdXN}}"}, {"task": "Perform an undo operation:", "command": "e2undo {{path/to/undo_file}} {{/dev/sdXN}}"}, {"task": "Perform an undo operation and display verbose information:", "command": "e2undo -v {{path/to/undo_file}} {{/dev/sdXN}}"}, {"task": "Write the old contents of the block to an undo file before overwriting a file system block:", "command": "e2undo -z {{path/to/file.e2undo}} {{path/to/undo_file}} {{/dev/sdXN}}"}]}
{"command": "e4defrag", "tasks": [{"task": "Defragment the filesystem:", "command": "e4defrag {{/dev/sdXN}}"}, {"task": "See how fragmented a filesystem is:", "command": "e4defrag -c {{/dev/sdXN}}"}, {"task": "Print errors and the fragmentation count before and after each file:", "command": "e4defrag -v {{/dev/sdXN}}"}]}
{"command": "ebuild", "tasks": [{"task": "Create or update the package manifest:", "command": "ebuild {{path/to/file.ebuild}} manifest"}, {"task": "Clean the temporary build directories for the build file:", "command": "ebuild {{path/to/file.ebuild}} clean"}, {"task": "Fetch sources if they do not exist:", "command": "ebuild {{path/to/file.ebuild}} fetch"}, {"task": "Extract the sources to a temporary build directory:", "command": "ebuild {{path/to/file.ebuild}} unpack"}, {"task": "Compile the extracted sources:", "command": "ebuild {{path/to/file.ebuild}} compile"}, {"task": "Install the package to a temporary install directory:", "command": "ebuild {{path/to/file.ebuild}} install"}, {"task": "Install the temporary files to the live filesystem:", "command": "ebuild {{path/to/file.ebuild}} qmerge"}, {"task": "Fetch, unpack, compile, install and qmerge the specified ebuild file:", "command": "ebuild {{path/to/file.ebuild}} merge"}]}
{"command": "edit", "tasks": [{"task": "Edit action can be used to view any file on default mailcap explorer:", "command": "edit {{filename}}"}, {"task": "With `run-mailcap`:", "command": "run-mailcap --action=edit {{filename}}"}]}
{"command": "edquota", "tasks": [{"task": "Edit quota of the current user:", "command": "edquota --user $(whoami)"}, {"task": "Edit quota of a specific user:", "command": "sudo edquota --user {{username}}"}, {"task": "Edit quota for a group:", "command": "sudo edquota --group {{group}}"}, {"task": "Restrict operations to a given filesystem (by default edquota operates on all filesystems with quotas):", "command": "sudo edquota --file-system {{filesystem}}"}, {"task": "Edit the default grace period:", "command": "sudo edquota -t"}, {"task": "Duplicate a quota to other users:", "command": "sudo edquota -p {{reference_user}} {{destination_user1}} {{destination_user2}}"}]}
{"command": "efibootmgr", "tasks": [{"task": "List the current settings then bootnums with their name:", "command": "efibootmgr"}, {"task": "List the filepaths:", "command": "efibootmgr -v"}, {"task": "Add UEFI Shell v2 as a boot option:", "command": "sudo efibootmgr -c -d {{/dev/sda1}} -l {{\\EFI\\tools\\Shell.efi}} -L \"{{UEFI Shell}}\""}, {"task": "Change the current boot order:", "command": "sudo efibootmgr -o {{0002,0008,0001,0005}}"}, {"task": "Delete a boot option:", "command": "sudo efibootmgr -b {{0008}} --delete-bootnum"}]}
{"command": "ego", "tasks": [{"task": "Synchronize the Portage tree:", "command": "ego sync"}, {"task": "Update the bootloader configuration:", "command": "ego boot update"}, {"task": "Read a Funtoo wiki page by name:", "command": "ego doc {{wiki_page}}"}, {"task": "Print current profile:", "command": "ego profile show"}, {"task": "Enable/Disable mix-ins:", "command": "ego profile mix-in +{{gnome}} -{{kde-plasma-5}}"}, {"task": "Query Funtoo bugs, related to a specified package:", "command": "ego query bug {{package}}"}]}
{"command": "einfo", "tasks": [{"task": "Print all database names:", "command": "einfo -dbs"}, {"task": "Print all information of the protein database in XML format:", "command": "einfo -db {{protein}}"}, {"task": "Print all fields of the nuccore database:", "command": "einfo -db {{nuccore}} -fields"}, {"task": "Print all links of the protein database:", "command": "einfo -db {{protein}} -links"}]}
{"command": "eix", "tasks": [{"task": "Search for a package:", "command": "eix {{package_name}}"}, {"task": "Search for installed packages:", "command": "eix --installed {{package_name}}"}, {"task": "Search in package descriptions:", "command": "eix --description \"{{description}}\""}, {"task": "Search by package license:", "command": "eix --license {{license}}"}, {"task": "Exclude results from search:", "command": "eix --not --license {{license}}"}]}
{"command": "eject", "tasks": [{"task": "Display the default device:", "command": "eject -d"}, {"task": "Eject the default device:", "command": "eject"}, {"task": "Eject a specific device (the default order is cd-rom, scsi, floppy and tape):", "command": "eject {{/dev/cdrom}}"}, {"task": "Toggle whether a device's tray is open or closed:", "command": "eject -T {{/dev/cdrom}}"}, {"task": "Eject a cd drive:", "command": "eject -r {{/dev/cdrom}}"}, {"task": "Eject a floppy drive:", "command": "eject -f {{/mnt/floppy}}"}, {"task": "Eject a tape drive:", "command": "eject -q {{/mnt/tape}}"}]}
{"command": "elink", "tasks": [{"task": "Search pubmed then find related sequences:", "command": "esearch -db pubmed -query \"{{selective serotonin reuptake inhibitor}}\" | elink -target nuccore"}, {"task": "Search nucleotide then find related biosamples:", "command": "esearch -db nuccore -query \"{{insulin [PROT] AND rodents [ORGN]}}\" | elink -target biosample"}]}
{"command": "emerge", "tasks": [{"task": "Synchronize all packages:", "command": "emerge --sync"}, {"task": "Update all packages, including dependencies:", "command": "emerge -uDNav @world"}, {"task": "Resume a failed updated, skipping the failing package:", "command": "emerge --resume --skipfirst"}, {"task": "Install a new package, with confirmation:", "command": "emerge -av {{package_name}}"}, {"task": "Remove a package, with confirmation:", "command": "emerge -Cav {{package_name}}"}, {"task": "Remove orphaned packages (that were installed only as dependencies):", "command": "emerge -avc"}, {"task": "Search the package database for a keyword:", "command": "emerge -S {{keyword}}"}]}
{"command": "engrampa", "tasks": [{"task": "Start Engrampa:", "command": "engrampa"}, {"task": "Open specific archives:", "command": "engrampa {{path/to/archive1.tar path/to/archive2.tar ...}}"}, {"task": "Archive specific files and/or directories recursively:", "command": "engrampa --add-to={{path/to/compressed.tar}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Extract files and/or directories from archives to a specific path:", "command": "engrampa --extract-to={{path/to/directory}} {{path/to/archive1.tar path/to/archive2.tar ...}}"}]}
{"command": "enum4linux", "tasks": [{"task": "Try to enumerate using all methods:", "command": "enum4linux -a {{remote_host}}"}, {"task": "Enumerate using given login credentials:", "command": "enum4linux -u {{user_name}} -p {{password}} {{remote_host}}"}, {"task": "List usernames from a given host:", "command": "enum4linux -U {{remote_host}}"}, {"task": "List shares:", "command": "enum4linux -S {{remote_host}}"}, {"task": "Get OS information:", "command": "enum4linux -o {{remote_host}}"}]}
{"command": "envycontrol", "tasks": [{"task": "Switch between different GPU modes:", "command": "sudo envycontrol -s {{nvidia|integrated|hybrid}}"}, {"task": "Specify your display manager manually:", "command": "envycontrol --dm"}, {"task": "Check current GPU mode:", "command": "sudo envycontrol --query"}, {"task": "Reset settings:", "command": "sudo envycontrol --reset"}, {"task": "Display version:", "command": "envycontrol --version"}, {"task": "Display help:", "command": "envycontrol --help"}]}
{"command": "eopkg", "tasks": [{"task": "Install a specific package:", "command": "sudo eopkg install {{package_name}}"}, {"task": "Update all packages:", "command": "sudo eopkg upgrade"}, {"task": "Search for packages:", "command": "sudo eopkg search {{search_term}}"}]}
{"command": "equery", "tasks": [{"task": "List all installed packages:", "command": "equery list '*'"}, {"task": "Search for installed packages in the Portage tree and in overlays:", "command": "equery list -po {{package_name}}"}, {"task": "List all packages that depend on a given package:", "command": "equery depends {{package_name}}"}, {"task": "List all packages that a given package depends on:", "command": "equery depgraph {{package_name}}"}, {"task": "List all files installed by a package:", "command": "equery files --tree {{package_name}}"}]}
{"command": "snap", "tasks": [{"task": "Display all updates:", "command": "snap --nosplash --nogui --modules --list --refresh"}, {"task": "Display help:", "command": "snap --help"}]}
{"command": "esearch", "tasks": [{"task": "Search the pubmed database for selective serotonin reuptake inhibitor:", "command": "esearch -db pubmed -query \"{{selective serotonin reuptake inhibitor}}\""}, {"task": "Search the protein database using a query and regexp:", "command": "esearch -db {{protein}} -query {{'Escherichia*'}}"}, {"task": "Search the nucleotide database for sequences whose metadata contain insulin and rodents:", "command": "esearch -db nuccore -query \"{{insulin [PROT] AND rodents [ORGN]}}\""}, {"task": "Display [h]elp:", "command": "esearch -h"}]}
{"command": "etckeeper", "tasks": [{"task": "Set up a Git repo and perform various setup tasks (run from `/etc`):", "command": "sudo etckeeper init"}, {"task": "Commit all changes in `/etc`:", "command": "sudo etckeeper commit {{message}}"}, {"task": "Run arbitrary Git commands:", "command": "sudo etckeeper vcs {{status}}"}, {"task": "Check if there are uncommitted changes (only returns an exit code):", "command": "sudo etckeeper unclean"}, {"task": "Destroy existing repo and stop tracking changes:", "command": "sudo etckeeper uninit"}]}
{"command": "ethtool", "tasks": [{"task": "Display the current settings for an interface:", "command": "ethtool {{eth0}}"}, {"task": "Display the driver information for an interface:", "command": "ethtool --driver {{eth0}}"}, {"task": "Display all supported features for an interface:", "command": "ethtool --show-features {{eth0}}"}, {"task": "Display the network usage statistics for an interface:", "command": "ethtool --statistics {{eth0}}"}, {"task": "Blink one or more LEDs on an interface for 10 seconds:", "command": "ethtool --identify {{eth0}} {{10}}"}, {"task": "Set the link speed, duplex mode, and parameter auto-negotiation for a given interface:", "command": "ethtool -s {{eth0}} speed {{10|100|1000}} duplex {{half|full}} autoneg {{on|off}}"}]}
{"command": "exif", "tasks": [{"task": "Show all recognized EXIF information in an image:", "command": "exif {{path/to/image.jpg}}"}, {"task": "Show a table listing known EXIF tags and whether each one exists in an image:", "command": "exif --list-tags --no-fixup {{image.jpg}}"}, {"task": "Extract the image thumbnail into the file `thumbnail.jpg`:", "command": "exif --extract-thumbnail --output={{thumbnail.jpg}} {{image.jpg}}"}, {"task": "Show the raw contents of the \"Model\" tag in the given image:", "command": "exif --ifd={{0}} --tag={{Model}} --machine-readable {{image.jpg}}"}, {"task": "Change the value of the \"Artist\" tag to John Smith and save to `new.jpg`:", "command": "exif --output={{new.jpg}} --ifd={{0}} --tag=\"{{Artist}}\" --set-value=\"{{John Smith}}\" --no-fixup {{image.jpg}}"}]}
{"command": "expect", "tasks": [{"task": "Execute an expect script from a file:", "command": "expect {{path/to/file}}"}, {"task": "Execute a specified expect script:", "command": "expect -c \"{{commands}}\""}, {"task": "Enter an interactive REPL (use `exit` or Ctrl + D to exit):", "command": "expect -i"}]}
{"command": "extrace", "tasks": [{"task": "Trace all program executions occurring on the system:", "command": "sudo extrace"}, {"task": "Run a command and only trace descendants of this command:", "command": "sudo extrace {{command}}"}, {"task": "Print the current working directory of each process:", "command": "sudo extrace -d"}, {"task": "Resolve the full path of each executable:", "command": "sudo extrace -l"}, {"task": "Display the user running each process:", "command": "sudo extrace -u"}]}
{"command": "extundelete", "tasks": [{"task": "Restore all deleted files inside partition N on device X:", "command": "sudo extundelete {{/dev/sdXN}} --restore-all"}, {"task": "Restore a file from a path relative to root (Do not start the path with `/`):", "command": "extundelete {{/dev/sdXN}} --restore-file {{path/to/file}}"}, {"task": "Restore a directory from a path relative to root (Do not start the path with `/`):", "command": "extundelete {{/dev/sdXN}} --restore-directory {{path/to/directory}}"}, {"task": "Restore all files deleted after January 1st, 2020 (in Unix time):", "command": "extundelete {{/dev/sdXN}} --restore-all --after {{1577840400}}"}]}
{"command": "eyeD3", "tasks": [{"task": "View information about an MP3 file:", "command": "eyeD3 {{filename.mp3}}"}, {"task": "Set the title of an MP3 file:", "command": "eyeD3 --title \"{{A Title}}\" {{filename.mp3}}"}, {"task": "Set the album of all the MP3 files in a directory:", "command": "eyeD3 --album \"{{Album Name}}\" {{*.mp3}}"}, {"task": "Set the front cover art for an MP3 file:", "command": "eyeD3 --add-image {{front_cover.jpeg}}:FRONT_COVER: {{filename.mp3}}"}]}
{"command": "f5fpc", "tasks": [{"task": "Open a new VPN connection:", "command": "sudo f5fpc --start"}, {"task": "Open a new VPN connection to a specific host:", "command": "sudo f5fpc --start --host {{host.example.com}}"}, {"task": "Specify a username (user will be prompted for a password):", "command": "sudo f5fpc --start --host {{host.example.com}} --username {{user}}"}, {"task": "Show the current VPN status:", "command": "sudo f5fpc --info"}, {"task": "Shutdown the VPN connection:", "command": "sudo f5fpc --stop"}]}
{"command": "fail2ban-client", "tasks": [{"task": "Retrieve current status of the jail service:", "command": "fail2ban-client status {{jail}}"}, {"task": "Remove the specified IP from the jail service's ban list:", "command": "fail2ban-client set {{jail}} unbanip {{ip}}"}, {"task": "Verify fail2ban server is alive:", "command": "fail2ban-client ping"}]}
{"command": "faillock", "tasks": [{"task": "List login failures of all users:", "command": "sudo faillock"}, {"task": "List login failures of the specified user:", "command": "sudo faillock --user {{user}}"}, {"task": "Reset the failure records of the specified user:", "command": "sudo faillock --user {{user}} --reset"}]}
{"command": "fakeroot", "tasks": [{"task": "Start the default shell as fakeroot:", "command": "fakeroot"}, {"task": "Run a command as fakeroot:", "command": "fakeroot -- {{command}} {{command_arguments}}"}, {"task": "Run a command as fakeroot and save the environment to a file on exit:", "command": "fakeroot -s {{path/to/file}} -- {{command}} {{command_arguments}}"}, {"task": "Load a fakeroot environment and run a command as fakeroot:", "command": "fakeroot -i {{path/to/file}} -- {{command}} {{command_arguments}}"}, {"task": "Run a command keeping the real ownership of files instead of pretending they are owned by root:", "command": "fakeroot --unknown-is-real -- {{command}} {{command_arguments}}"}, {"task": "Display help:", "command": "fakeroot --help"}]}
{"command": "faketime", "tasks": [{"task": "Fake the time to this evening, before printing the result of `date`:", "command": "faketime '{{today 23:30}}' {{date}}"}, {"task": "Open a new `bash` shell, which uses yesterday as the current date:", "command": "faketime '{{yesterday}}' {{bash}}"}, {"task": "Simulate how a program would act next Friday night:", "command": "faketime '{{next Friday 1 am}}' {{path/to/program}}"}]}
{"command": "fallocate", "tasks": [{"task": "Reserve a file taking up 700 MiB of disk space:", "command": "fallocate --length {{700M}} {{path/to/file}}"}, {"task": "Shrink an already allocated file by 200 MiB:", "command": "fallocate --collapse-range --length {{200M}} {{path/to/file}}"}, {"task": "Shrink 20 MB of space after 100 MiB in a file:", "command": "fallocate --collapse-range --offset {{100M}} --length {{20M}} {{path/to/file}}"}]}
{"command": "farge", "tasks": [{"task": "Display a small preview window of a pixel's color with it's hexadecimal value, and copy this value to the clipboard:", "command": "farge"}, {"task": "Copy a pixel's hexadecimal value to the clipboard without displaying a preview window:", "command": "farge --no-preview"}, {"task": "Output a pixel's hexadecimal value to `stdout`, and copy this value to the clipboard:", "command": "farge --stdout"}, {"task": "Output a pixel's RGB value to `stdout`, and copy this value to the clipboard:", "command": "farge --rgb --stdout"}, {"task": "Display a pixel's hexadecimal value as a notification which expires in 5000 milliseconds, and copy this value to the clipboard:", "command": "farge --notify --expire-time 5000"}]}
{"command": "fatlabel", "tasks": [{"task": "Get the label of a FAT32 partition:", "command": "fatlabel {{/dev/sda1}}"}, {"task": "Set the label of a FAT32 partition:", "command": "fatlabel {{/dev/sdc3}} \"{{new_label}}\""}]}
{"command": "fcrackzip", "tasks": [{"task": "Brute-force a password with a length of 4 to 8 characters, and contains only alphanumeric characters (order matters):", "command": "fcrackzip --brute-force --length 4-8 --charset aA1 {{archive}}"}, {"task": "Brute-force a password in verbose mode with a length of 3 characters that only contains lowercase characters, `$` and `%`:", "command": "fcrackzip -v --brute-force --length 3 --charset a:$% {{archive}}"}, {"task": "Brute-force a password that contains only lowercase and special characters:", "command": "fcrackzip --brute-force --length 4 --charset a! {{archive}}"}, {"task": "Brute-force a password containing only digits, starting from the password `12345`:", "command": "fcrackzip --brute-force --length 5 --charset 1 --init-password 12345 {{archive}}"}, {"task": "Crack a password using a wordlist:", "command": "fcrackzip --use-unzip --dictionary --init-password {{wordlist}} {{archive}}"}, {"task": "Benchmark cracking performance:", "command": "fcrackzip --benchmark"}]}
{"command": "fdisk", "tasks": [{"task": "List partitions:", "command": "sudo fdisk -l"}, {"task": "Start the partition manipulator:", "command": "sudo fdisk {{/dev/sdX}}"}, {"task": "Once partitioning a disk, create a partition:", "command": "n"}, {"task": "Once partitioning a disk, select a partition to delete:", "command": "d"}, {"task": "Once partitioning a disk, view the partition table:", "command": "p"}, {"task": "Once partitioning a disk, write the changes made:", "command": "w"}, {"task": "Once partitioning a disk, discard the changes made:", "command": "q"}, {"task": "Once partitioning a disk, open a help menu:", "command": "m"}]}
{"command": "feedreader", "tasks": [{"task": "Print the count of unread articles:", "command": "feedreader --unreadCount"}, {"task": "Add a URL for a feed to follow:", "command": "feedreader --addFeed={{feed_url}}"}, {"task": "Grab a specific article using its URL:", "command": "feedreader --grabArticle={{article_url}}"}, {"task": "Download all images from a specific article:", "command": "feedreader --url={{feed_url}} --grabImages={{article_path}}"}, {"task": "Play media from a URL:", "command": "feedreader --playMedia={{article_url}}"}]}
{"command": "ffuf", "tasks": [{"task": "Discover directories using a [w]ordlist on a target [u]rl with [c]olorized and [v]erbose output:", "command": "ffuf -w {{path/to/wordlist}} -u {{https://target/FUZZ}} -c -v"}, {"task": "Fuzz host-[H]eaders with a host file on a target website and [m]atch HTTP 200 [c]ode responses:", "command": "ffuf -w {{hosts.txt}} -u {{https://example.org}} -H \"{{Host: FUZZ}}\" -mc {{200}}"}, {"task": "Discover directories using a [w]ordlist on a target website with a max individual job time of 60 seconds and recursion discovery depth of 2 levels:", "command": "ffuf -w {{path/to/wordlist}} -u {{https://target/FUZZ}} -maxtime-job {{60}} -recursion -recursion-depth {{2}}"}, {"task": "Fuzz GET parameter on a target website and [f]ilter out message [s]ize response of 4242 bytes:", "command": "ffuf -w {{path/to/param_names.txt}} -u {{https://target/script.php?FUZZ=test_value}} -fs {{4242}}"}, {"task": "Fuzz POST method with POST [d]ata of password on a target website and [f]ilter out HTTP response [c]ode 401:", "command": "ffuf -w {{path/to/postdata.txt}} -X {{POST}} -d \"{{username=admin\\&password=FUZZ}}\" -u {{https://target/login.php}} -fc {{401}}"}, {"task": "Discover subdomains using a subdomain list on a target website:", "command": "ffuf -w {{subdomains.txt}} -u {{https://website.com}} -H \"{{Host: FUZZ.website.com}}\""}]}
{"command": "rename", "tasks": [{"task": "Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):", "command": "rename {{'s/foo/bar/'}} {{*}}"}, {"task": "Dry-run - display which renames would occur without performing them:", "command": "rename -n {{'s/foo/bar/'}} {{*}}"}, {"task": "Force renaming even if the operation would remove existing destination files:", "command": "rename -f {{'s/foo/bar/'}} {{*}}"}, {"task": "Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent \"already exists\" errors):", "command": "rename 'y/A-Z/a-z/' {{*}}"}, {"task": "Replace whitespace with underscores:", "command": "rename 's/\\s+/_/g' {{*}}"}]}
{"command": "filefrag", "tasks": [{"task": "Display a report for a specific file:", "command": "filefrag {{path/to/file}}"}, {"task": "Display a report for space-separated list of files:", "command": "filefrag {{path/to/file1}} {{path/to/file2}}"}, {"task": "Display a report using a 1024 byte blocksize:", "command": "filefrag -b {{path/to/file}}"}, {"task": "Sync the file before requesting the mapping:", "command": "filefrag -s {{path/to/files}}"}, {"task": "Display mapping of extended attributes:", "command": "filefrag -x {{path/to/files}}"}, {"task": "Display a report with verbose information:", "command": "filefrag -v {{path/to/files}}"}]}
{"command": "finch", "tasks": [{"task": "Launch finch:", "command": "finch"}, {"task": "Quit:", "command": "alt + q or ctrl + c"}, {"task": "Show actions menu:", "command": "alt + a"}, {"task": "Jump to n-th window:", "command": "alt + {{number_key}}"}, {"task": "Close current window:", "command": "alt + c"}, {"task": "Start moving a window, use arrow keys to move, press escape when done:", "command": "alt + m"}, {"task": "Start resizing a window, use arrow keys to resize, press escape when done:", "command": "alt + r"}]}
{"command": "findfs", "tasks": [{"task": "Search block devices by filesystem label:", "command": "findfs LABEL={{label}}"}, {"task": "Search by filesystem UUID:", "command": "findfs UUID={{uuid}}"}, {"task": "Search by partition label (GPT or MAC partition table):", "command": "findfs PARTLABEL={{partition_label}}"}, {"task": "Search by partition UUID (GPT partition table only):", "command": "findfs PARTUUID={{partition_uuid}}"}]}
{"command": "findmnt", "tasks": [{"task": "List all mounted filesystems:", "command": "findmnt"}, {"task": "Search for a device:", "command": "findmnt {{/dev/sdb1}}"}, {"task": "Search for a mountpoint:", "command": "findmnt {{/}}"}, {"task": "Find filesystems in specific type:", "command": "findmnt -t {{ext4}}"}, {"task": "Find filesystems with specific label:", "command": "findmnt LABEL={{BigStorage}}"}]}
{"command": "firejail", "tasks": [{"task": "Integrate firejail with your desktop environment:", "command": "sudo firecfg"}, {"task": "Open a restricted Mozilla Firefox:", "command": "firejail {{firefox}}"}, {"task": "Start a restricted Apache server on a known interface and address:", "command": "firejail --net={{eth0}} --ip={{192.168.1.244}} {{/etc/init.d/apache2}} {{start}}"}, {"task": "List running sandboxes:", "command": "firejail --list"}, {"task": "List network activity from running sandboxes:", "command": "firejail --netstats"}, {"task": "Shutdown a running sandbox:", "command": "firejail --shutdown={{7777}}"}]}
{"command": "firewall-cmd", "tasks": [{"task": "View the available firewall zones:", "command": "firewall-cmd --get-active-zones"}, {"task": "View the rules which are currently applied:", "command": "firewall-cmd --list-all"}, {"task": "Permanently move the interface into the block zone, effectively blocking all communication:", "command": "firewall-cmd --permanent --zone={{block}} --change-interface={{enp1s0}}"}, {"task": "Permanently open the port for a service in the specified zone (like port 443 when in the `public` zone):", "command": "firewall-cmd --permanent --zone={{public}} --add-service={{https}}"}, {"task": "Permanently close the port for a service in the specified zone (like port 80 when in the `public` zone):", "command": "firewall-cmd --permanent --zone={{public}} --remove-service={{http}}"}, {"task": "Permanently open two arbitrary ports in the specified zone:", "command": "firewall-cmd --permanent --zone={{public}} --add-port={{25565/tcp}} --add-port={{19132/udp}}"}, {"task": "Reload firewalld to force rule changes to take effect:", "command": "firewall-cmd --reload"}]}
{"command": "fixfiles", "tasks": [{"task": "If specified with onboot, this fixfiles will record the current date in the `/.autorelabel` file, so that it can be used later to speed up labeling. If used with restore, the restore will only affect files that were modified today:", "command": "fixfiles -B"}, {"task": "[F]orce reset of context to match `file_context` for customizable files:", "command": "fixfiles -F"}, {"task": "Clear `/tmp` directory without confirmation:", "command": "fixfiles -f"}, {"task": "Use the [R]pm database to discover all files within specific packages and restore the file contexts:", "command": "fixfiles -R {{rpm_package_name1,rpm_package_name2 ...}}"}, {"task": "Run a diff on the `PREVIOUS_FILECONTEXT` file to the [C]urrently installed one, and restore the context of all affected files:", "command": "fixfiles -C PREVIOUS_FILECONTEXT"}, {"task": "Only act on files created after a specific date which will be passed to find `--newermt` command:", "command": "fixfiles -N {{YYYY-MM-DD HH:MM}}"}, {"task": "Bind [M]ount filesystems before relabeling them, this allows fixing the context of files or directories that have been mounted over:", "command": "fixfiles -M"}, {"task": "Modify [v]erbosity from progress to verbose and run `restorecon` with `-v` instead of `-p`:", "command": "fixfiles -v"}]}
{"command": "flameshot", "tasks": [{"task": "Create a fullscreen screenshot:", "command": "flameshot full"}, {"task": "Create a screenshot interactively:", "command": "flameshot gui"}, {"task": "Create a screenshot and save it to a specific path:", "command": "flameshot gui --path {{path/to/directory}}"}, {"task": "Create a screenshot interactively in a simplified mode:", "command": "flameshot launcher"}, {"task": "Create a screenshot from a specific monitor:", "command": "flameshot screen --number {{2}}"}, {"task": "Create a screenshot and print it to `stdout`:", "command": "flameshot gui --raw"}, {"task": "Create a screenshot and copy it to the clipboard:", "command": "flameshot gui --clipboard"}, {"task": "Create a screenshot with a specific delay in milliseconds:", "command": "flameshot full --delay {{5000}}"}]}
{"command": "flash", "tasks": [{"task": "Open a menu of available flashcard decks for selection:", "command": "flash"}, {"task": "Display the program version:", "command": "flash -v"}, {"task": "Display information about the flashcard system:", "command": "flash -i"}, {"task": "Display a list of available commands:", "command": "flash -h"}, {"task": "Change the previewer from default `bat` to `cat`:", "command": "flash -p {{cat}}"}]}
{"command": "flashrom", "tasks": [{"task": "Probe the chip, ensuring the wiring is correct:", "command": "flashrom --programmer {{programmer}}"}, {"task": "Read flash and save it to a file:", "command": "flashrom -p {{programmer}} --read {{path/to/file}}"}, {"task": "Write a file to the flash:", "command": "flashrom -p {{programmer}} --write {{path/to/file}}"}, {"task": "Verify the flash against a file:", "command": "flashrom -p {{programmer}} --verify {{path/to/file}}"}, {"task": "Probe the chip using Raspberry Pi:", "command": "flashrom -p {{linux_spi:dev=/dev/spidev0.0}}"}]}
{"command": "flatpak-builder", "tasks": [{"task": "Build a Flatpak and export it to a new repository:", "command": "flatpak-builder {{path/to/build_directory}} {{path/to/manifest}}"}, {"task": "Build a Flatpak and export it to the specified repository:", "command": "flatpak-builder --repo={{repository_name}} {{path/to/build_directory}} {{path/to/manifest}}"}, {"task": "Build a Flatpak and install it locally:", "command": "flatpak-builder --install {{path/to/build_directory}} {{path/to/manifest}}"}, {"task": "Build and sign a Flatpak and export it to the specified repository:", "command": "flatpak-builder --gpg-sign={{key_id}} --repo={{repository_name}} {{path/to/manifest}}"}, {"task": "Run a shell inside of an application sandbox without installing it:", "command": "flatpak-builder --run {{path/to/build_directory}} {{path/to/manifest}} {{sh}}"}]}
{"command": "flatpak", "tasks": [{"task": "Run an installed application:", "command": "flatpak run {{name}}"}, {"task": "Install an application from a remote source:", "command": "flatpak install {{remote}} {{name}}"}, {"task": "List all installed applications and runtimes:", "command": "flatpak list"}, {"task": "Update all installed applications and runtimes:", "command": "flatpak update"}, {"task": "Add a remote source:", "command": "flatpak remote-add --if-not-exists {{remote_name}} {{remote_url}}"}, {"task": "Remove an installed application:", "command": "flatpak remove {{name}}"}, {"task": "Remove all unused applications:", "command": "flatpak remove --unused"}, {"task": "Show information about an installed application:", "command": "flatpak info {{name}}"}]}
{"command": "flock", "tasks": [{"task": "Run a command with a file lock as soon as the lock is not required by others:", "command": "flock {{path/to/lock.lock}} --command \"{{command}}\""}, {"task": "Run a command with a file lock, and exit if the lock doesn't exist:", "command": "flock {{path/to/lock.lock}} --nonblock --command \"{{command}}\""}, {"task": "Run a command with a file lock, and exit with a specific error code if the lock doesn't exist:", "command": "flock {{path/to/lock.lock}} --nonblock --conflict-exit-code {{error_code}} -c \"{{command}}\""}]}
{"command": "fluidsynth", "tasks": [{"task": "Play a MIDI file:", "command": "fluidsynth --audio-driver={{pipewire|pulseaudio}} {{path/to/soundfont.sf2}} {{path/to/file.midi}}"}]}
{"command": "fold", "tasks": [{"task": "Fold lines in a fixed width:", "command": "fold --width {{width}} {{path/to/file}}"}, {"task": "Count width in bytes (the default is to count in columns):", "command": "fold --bytes --width {{width_in_bytes}} {{path/to/file}}"}, {"task": "Break the line after the rightmost blank within the width limit:", "command": "fold --spaces --width {{width}} {{path/to/file}}"}]}
{"command": "foreman", "tasks": [{"task": "Start an application with the Procfile in the current directory:", "command": "foreman start"}, {"task": "Start an application with a specified Procfile:", "command": "foreman start -f {{Procfile}}"}, {"task": "Start a specific application:", "command": "foreman start {{process}}"}, {"task": "Validate Procfile format:", "command": "foreman check"}, {"task": "Run one-off commands with the process's environment:", "command": "foreman run {{command}}"}, {"task": "Start all processes except the one named \"worker\":", "command": "foreman start -m all=1,{{worker}}=0"}]}
{"command": "fprintd", "tasks": [{"task": "Display the man page for `fprintd`:", "command": "man fprintd"}]}
{"command": "fprintd-delete", "tasks": [{"task": "Remove all fingerprints for a specific user:", "command": "fprintd-delete {{username}}"}, {"task": "Remove a specific fingerprints for a specific user:", "command": "fprintd-delete {{username}} --finger {{left-thumb|left-index-finger|left-middle-finger|left-ring-finger|left-little-finger|right-thumb|right-index-finger|right-middle-finger|right-ring-finger|right-little-finger}}"}, {"task": "Display help:", "command": "fprintd-delete"}]}
{"command": "fprintd-enroll", "tasks": [{"task": "Enroll the right index finger for the current user:", "command": "fprintd-enroll"}, {"task": "Enroll a specific finger for the current user:", "command": "fprintd-enroll --finger {{left-thumb|left-index-finger|left-middle-finger|left-ring-finger|left-little-finger|right-thumb|right-index-finger|right-middle-finger|right-ring-finger|right-little-finger}}"}, {"task": "Enroll the right index finger for a specific user:", "command": "fprintd-enroll {{username}}"}, {"task": "Enroll a specific finger for a specific user:", "command": "fprintd-enroll --finger {{finger_name}} {{username}}"}, {"task": "Display help:", "command": "fprintd-enroll --help"}]}
{"command": "fprintd-list", "tasks": [{"task": "List enrolled fingerprints for a specific user:", "command": "fprintd-list {{username}}"}, {"task": "List enrolled fingerprints for a space-separated list of users:", "command": "fprintd-list {{username1 username2 ...}}"}, {"task": "Display help:", "command": "fprintd-list"}]}
{"command": "fprintd-verify", "tasks": [{"task": "Verify all stored fingerprints for the current user:", "command": "fprintd-verify"}, {"task": "Verify a specific fingerprint for the current user:", "command": "fprintd-verify --finger {{left-thumb|left-index-finger|left-middle-finger|left-ring-finger|left-little-finger|right-thumb|right-index-finger|right-middle-finger|right-ring-finger|right-little-finger}}"}, {"task": "Verify fingerprints for a specific user:", "command": "fprint-verify {{username}}"}, {"task": "Verify a specific fingerprint for a specific user:", "command": "fprintd-verify --finger {{finger_name}} {{username}}"}, {"task": "Fail the process if a fingerprint doesn't match with ones stored in the database for the current user:", "command": "fprint-verify --g-fatal-warnings"}, {"task": "Display help:", "command": "fprintd-verify --help"}]}
{"command": "free", "tasks": [{"task": "Display system memory:", "command": "free"}, {"task": "Display memory in Bytes/KB/MB/GB:", "command": "free -{{b|k|m|g}}"}, {"task": "Display memory in human-readable units:", "command": "free -h"}, {"task": "Refresh the output every 2 seconds:", "command": "free -s {{2}}"}]}
{"command": "fsck", "tasks": [{"task": "Check filesystem `/dev/sdXN`, reporting any damaged blocks:", "command": "sudo fsck {{/dev/sdXN}}"}, {"task": "Check filesystem `/dev/sdXN`, reporting any damaged blocks and interactively letting the user choose to repair each one:", "command": "sudo fsck -r {{/dev/sdXN}}"}, {"task": "Check filesystem `/dev/sdXN`, reporting any damaged blocks and automatically repairing them:", "command": "sudo fsck -a {{/dev/sdXN}}"}]}
{"command": "fscrypt", "tasks": [{"task": "Prepare the root filesystem for use with fscrypt:", "command": "fscrypt setup"}, {"task": "Enable filesystem encryption for a directory:", "command": "fscrypt encrypt {{path/to/directory}}"}, {"task": "Unlock an encrypted directory:", "command": "fscrypt unlock {{path/to/encrypted_directory}}"}, {"task": "Lock an encrypted directory:", "command": "fscrypt lock {{path/to/encrypted_directory}}"}]}
{"command": "fstrim", "tasks": [{"task": "Trim unused blocks on all mounted partitions that support it:", "command": "sudo fstrim --all"}, {"task": "Trim unused blocks on a specified partition:", "command": "sudo fstrim {{/}}"}, {"task": "Display statistics after trimming:", "command": "sudo fstrim --verbose {{/}}"}]}
{"command": "fuser", "tasks": [{"task": "Find which processes are accessing a file or directory:", "command": "fuser {{path/to/file_or_directory}}"}, {"task": "Show more fields (`USER`, `PID`, `ACCESS` and `COMMAND`):", "command": "fuser --verbose {{path/to/file_or_directory}}"}, {"task": "Identify processes using a TCP socket:", "command": "fuser --namespace tcp {{port}}"}, {"task": "Kill all processes accessing a file or directory (sends the `SIGKILL` signal):", "command": "fuser --kill {{path/to/file_or_directory}}"}, {"task": "Find which processes are accessing the filesystem containing a specific file or directory:", "command": "fuser --mount {{path/to/file_or_directory}}"}, {"task": "Kill all processes with a TCP connection on a specific port:", "command": "fuser --kill {{port}}/tcp"}]}
{"command": "fwupdmgr", "tasks": [{"task": "Display all devices detected by fwupd:", "command": "fwupdmgr get-devices"}, {"task": "Download the latest firmware metadata from LVFS:", "command": "fwupdmgr refresh"}, {"task": "List the updates available for devices on your system:", "command": "fwupdmgr get-updates"}, {"task": "Install firmware updates:", "command": "fwupdmgr update"}]}
{"command": "gbp", "tasks": [{"task": "Convert an existing Debian package to gbp:", "command": "gbp import-dsc {{path/to/package.dsc}}"}, {"task": "Build the package in the current directory using the default builder (`debuild`):", "command": "gbp buildpackage -jauto -us -uc"}, {"task": "Build a package in a `pbuilder` environment for Debian Bullseye:", "command": "DIST={{bullseye}} ARCH={{amd64}} gbp buildpackage -jauto -us -uc --git-builder={{git-pbuilder}}"}, {"task": "Specify a package to be a source-only upload in the `.changes` file (see https://wiki.debian.org/SourceOnlyUpload):", "command": "gbp buildpackage -jauto -us -uc --changes-options={{-S}}"}, {"task": "Import a new upstream release:", "command": "gbp import-orig --pristine-tar {{path/to/package.tar.gz}}"}]}
{"command": "gcov", "tasks": [{"task": "Generate a coverage report named `file.cpp.gcov`:", "command": "gcov {{path/to/file.cpp}}"}, {"task": "Write individual execution counts for every basic block:", "command": "gcov --all-blocks {{path/to/file.cpp}}"}, {"task": "Write branch frequencies to the output file and print summary information to `stdout` as a percentage:", "command": "gcov --branch-probabilities {{path/to/file.cpp}}"}, {"task": "Write branch frequencies as the number of branches taken, rather than the percentage:", "command": "gcov --branch-counts {{path/to/file.cpp}}"}, {"task": "Do not create a `gcov` output file:", "command": "gcov --no-output {{path/to/file.cpp}}"}, {"task": "Write file level as well as function level summaries:", "command": "gcov --function-summaries {{path/to/file.cpp}}"}]}
{"command": "gdebi", "tasks": [{"task": "Install local `.deb` packages resolving and installing its dependencies:", "command": "gdebi {{path/to/package.deb}}"}, {"task": "Display the program version:", "command": "gdebi --version"}, {"task": "Do not show progress information:", "command": "gdebi {{path/to/package.deb}} --quiet"}, {"task": "Set an APT configuration option:", "command": "gdebi {{path/to/package.deb}} --option={{APT_OPTS}}"}, {"task": "Use alternative root dir:", "command": "gdebi {{path/to/package.deb}} --root={{path/to/root_dir}}"}]}
{"command": "gedit", "tasks": [{"task": "Open a text file:", "command": "gedit {{path/to/file}}"}, {"task": "Open multiple text files:", "command": "gedit {{file1 file2 ...}}"}, {"task": "Open a text file with a specific encoding:", "command": "gedit --encoding={{UTF-8}} {{path/to/file}}"}, {"task": "Display a list of supported encodings:", "command": "gedit --list-encodings"}]}
{"command": "genfstab", "tasks": [{"task": "Display an fstab compatible output based on a volume label:", "command": "genfstab -L {{path/to/mount_point}}"}, {"task": "Display an fstab compatible output based on a volume UUID:", "command": "genfstab -U {{path/to/mount_point}}"}, {"task": "A usual way to generate an fstab file, requires root permissions:", "command": "genfstab -U {{/mnt}} >> {{/mnt/etc/fstab}}"}, {"task": "Append a volume into an fstab file to mount it automatically:", "command": "genfstab -U {{path/to/mount_point}} | sudo tee -a /etc/fstab"}]}
{"command": "genid", "tasks": [{"task": "Generate a UUIDv4:", "command": "genid uuid"}, {"task": "Generate a UUIDv5 using a namespace UUID and a specific name:", "command": "genid uuidv5 {{{ce598faa-8dd0-49ee-8525-9e24fff71dca}}} {{name}}"}, {"task": "Generate a Discord Snowflake, without a trailing newline (useful in shell scripts):", "command": "genid --script snowflake"}, {"task": "Generate a Generic Anonymous ID with a specific \"real ID\":", "command": "genid gaid {{real_id}}"}, {"task": "Generate a Snowflake with the epoch set to a specific date:", "command": "genid snowflake --epoch={{unix_epoch_time}}"}]}
{"command": "genie", "tasks": [{"task": "Initialize the bottle (run once, at start):", "command": "genie -i"}, {"task": "Run a login shell inside the bottle:", "command": "genie -s"}, {"task": "Run a specified command inside the bottle:", "command": "genie -c {{command}}"}]}
{"command": "genisoimage", "tasks": [{"task": "Create an ISO image from the given source directory:", "command": "genisoimage -o {{myimage.iso}} {{path/to/source_directory}}"}, {"task": "Create an ISO image with files larger than 2GiB by reporting a smaller apparent size for ISO9660 filesystems:", "command": "genisoimage -o -allow-limited-size {{myimage.iso}} {{path/to/source_directory}}"}]}
{"command": "genkernel", "tasks": [{"task": "Automatically compile and install a generic kernel:", "command": "sudo genkernel all"}, {"task": "Build and install the bzImage|initramfs|kernel|ramdisk only:", "command": "sudo genkernel {{bzImage|initramfs|kernel|ramdisk}}"}, {"task": "Apply changes to the kernel configuration before compiling and installing:", "command": "sudo genkernel --menuconfig all"}, {"task": "Generate a kernel with a custom name:", "command": "sudo genkernel --kernname={{custom_name}} all"}, {"task": "Use a kernel source outside the default directory `/usr/src/linux`:", "command": "sudo genkernel --kerneldir={{path/to/directory}} all"}]}
{"command": "getcap", "tasks": [{"task": "Get capabilities for the given files:", "command": "getcap {{path/to/file1 path/to/file2 ...}}"}, {"task": "Get capabilities for all the files recursively under the given directories:", "command": "getcap -r {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Displays all searched entries even if no capabilities are set:", "command": "getcap -v {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "getconf", "tasks": [{"task": "List [a]ll configuration values available:", "command": "getconf -a"}, {"task": "List the configuration values for a specific directory:", "command": "getconf -a {{path/to/directory}}"}, {"task": "Check if your linux system is a 32-bit or 64-bit:", "command": "getconf LONG_BIT"}, {"task": "Check how many processes the current user can run at once:", "command": "getconf CHILD_MAX"}, {"task": "List every configuration value and then find patterns with the grep command (i.e every value with MAX in it):", "command": "getconf -a | grep MAX"}]}
{"command": "getent", "tasks": [{"task": "Get list of all groups:", "command": "getent group"}, {"task": "See the members of a group:", "command": "getent group {{group_name}}"}, {"task": "Get list of all services:", "command": "getent services"}, {"task": "Find a username by UID:", "command": "getent passwd 1000"}, {"task": "Perform a reverse DNS lookup:", "command": "getent hosts {{host}}"}]}
{"command": "getfacl", "tasks": [{"task": "Display the file access control list:", "command": "getfacl {{path/to/file_or_directory}}"}, {"task": "Display the file access control list with numeric user and group IDs:", "command": "getfacl -n {{path/to/file_or_directory}}"}, {"task": "Display the file access control list with tabular output format:", "command": "getfacl -t {{path/to/file_or_directory}}"}]}
{"command": "getopt", "tasks": [{"task": "Parse optional `verbose`/`version` flags with shorthands:", "command": "getopt --options vV --longoptions verbose,version -- --version --verbose"}, {"task": "Add a `--file` option with a required argument with shorthand `-f`:", "command": "getopt --options f: --longoptions file: -- --file=somefile"}, {"task": "Add a `--verbose` option with an optional argument with shorthand `-v`, and pass a non-option parameter `arg`:", "command": "getopt --options v:: --longoptions verbose:: -- --verbose arg"}, {"task": "Accept a `-r` and `--verbose` flag, a `--accept` option with an optional argument and add a `--target` with a required argument option with shorthands:", "command": "getopt --options rv::s::t: --longoptions verbose,source::,target: -- -v --target target"}]}
{"command": "gnome-calculator", "tasks": [{"task": "Launch the GNOME Calculator GUI:", "command": "gnome-calculator"}, {"task": "Solve the specified equation without launching the desktop application:", "command": "gnome-calculator --solve {{2^5 * 2 + 5}}"}, {"task": "Display the version:", "command": "gnome-calculator --version"}]}
{"command": "gnome-extensions", "tasks": [{"task": "Display the version:", "command": "gnome-extensions version"}, {"task": "List all the installed extensions:", "command": "gnome-extensions list"}, {"task": "Display information about a specific extension:", "command": "gnome-extensions info \"{{extension_id}}\""}, {"task": "Display help for a subcommand (like `list`):", "command": "gnome-extensions help {{subcommand}}"}, {"task": "Enable a specific extension:", "command": "gnome-extensions enable \"{{extension_id}}\""}, {"task": "Disable a specific extension:", "command": "gnome-extension disable \"{{extension_id}}\""}, {"task": "Uninstall a specific extension:", "command": "gnome-extension uninstall \"{{extension_id}}\""}]}
{"command": "gnome-screenshot", "tasks": [{"task": "Take a screenshot and save it to the default location, normally `~/Pictures`:", "command": "gnome-screenshot"}, {"task": "Take a screenshot and save it to the named file location:", "command": "gnome-screenshot --file {{path/to/file}}"}, {"task": "Take a screenshot and save it to the clipboard:", "command": "gnome-screenshot --clipboard"}, {"task": "Take a screenshot after the specified number of seconds:", "command": "gnome-screenshot --delay {{5}}"}, {"task": "Launch the GNOME Screenshot GUI:", "command": "gnome-screenshot --interactive"}, {"task": "Take a screenshot of the current window and save it to the specified file location:", "command": "gnome-screenshot --window --file {{path/to/file}}"}, {"task": "Take a screenshot after the specified number of seconds and save it to the clipboard:", "command": "gnome-screenshot --delay {{10}} --clipboard"}, {"task": "Display the version:", "command": "gnome-screenshot --version"}]}
{"command": "gnome-software", "tasks": [{"task": "Launch the GNOME Software GUI if it's not already running:", "command": "gnome-software"}, {"task": "Launch the GNOME Software GUI if it's not open, and navigate to the specified page:", "command": "gnome-software --mode {{updates|updated|installed|overview}}"}, {"task": "Launch the GNOME Software GUI if it's not open, and view the specified package:", "command": "gnome-software --details {{package_name}}"}, {"task": "Display the version:", "command": "gnome-software --version"}]}
{"command": "gnome-terminal", "tasks": [{"task": "Open a new GNOME terminal window:", "command": "gnome-terminal"}, {"task": "Run a specific command in a new terminal window:", "command": "gnome-terminal -- {{command}}"}, {"task": "Open a new tab in the last opened window instead:", "command": "gnome-terminal --tab"}, {"task": "Set the title of the new tab:", "command": "gnome-terminal --tab --title \"{{title}}\""}]}
{"command": "goaccess", "tasks": [{"task": "Analyze one or more log files in interactive mode:", "command": "goaccess {{path/to/logfile1 path/to/file2 ...}}"}, {"task": "Use a specific log-format (or pre-defined formats like \"combined\"):", "command": "goaccess {{path/to/logfile}} --log-format={{format}}"}, {"task": "Analyze a log from `stdin`:", "command": "tail -f {{path/to/logfile}} | goaccess -"}, {"task": "Analyze a log and write it to an HTML file in real-time:", "command": "goaccess {{path/to/logfile}} --output {{path/to/file.html}} --real-time-html"}]}
{"command": "goldeneye.py", "tasks": [{"task": "Test a specific website:", "command": "./goldeneye.py {{url}}"}, {"task": "Test a specific website with 100 user agents and 200 concurrent sockets:", "command": "./goldeneye.py {{url}} --useragents 100 --sockets 200"}, {"task": "Test a specific website without verifying the SSL certificate:", "command": "./goldeneye.py {{url}} --nosslcheck"}, {"task": "Test a specific website in debug mode:", "command": "./goldeneye.py {{url}} --debug"}, {"task": "Display help:", "command": "./goldeneye.py --help"}]}
{"command": "goobook", "tasks": [{"task": "Allow `goobook` to access Google contacts using OAuth2:", "command": "goobook authenticate"}, {"task": "Dump all contacts to XML (`stdout`):", "command": "goobook dump_contacts"}]}
{"command": "gpasswd", "tasks": [{"task": "Define group administrators:", "command": "sudo gpasswd -A {{user1,user2}} {{group}}"}, {"task": "Set the list of group members:", "command": "sudo gpasswd -M {{user1,user2}} {{group}}"}, {"task": "Create a password for the named group:", "command": "gpasswd {{group}}"}, {"task": "Add a user to the named group:", "command": "gpasswd -a {{user}} {{group}}"}, {"task": "Remove a user from the named group:", "command": "gpasswd -d {{user}} {{group}}"}]}
{"command": "grim", "tasks": [{"task": "Screenshot all outputs:", "command": "grim"}, {"task": "Screenshot a specific output:", "command": "grim -o {{path/to/output_file}}"}, {"task": "Screenshot a specific region:", "command": "grim -g \"{{<x_position>,<y_position> <width>x<height>}}\""}, {"task": "Select a specific region and screenshot it, (using slurp):", "command": "grim -g \"{{$(slurp)}}\""}, {"task": "Use a custom filename:", "command": "grim \"{{path/to/file.png}}\""}, {"task": "Screenshot and copy to clipboard:", "command": "grim - | {{clipboard_manager}}"}]}
{"command": "groupadd", "tasks": [{"task": "Create a new group:", "command": "sudo groupadd {{group_name}}"}, {"task": "Create a new system group:", "command": "sudo groupadd --system {{group_name}}"}, {"task": "Create a new group with the specific groupid:", "command": "sudo groupadd --gid {{id}} {{group_name}}"}]}
{"command": "groupdel", "tasks": [{"task": "Delete an existing group:", "command": "sudo groupdel {{group_name}}"}]}
{"command": "groupmod", "tasks": [{"task": "Change the group name:", "command": "sudo groupmod --new-name {{new_group}} {{group_name}}"}, {"task": "Change the group id:", "command": "sudo groupmod --gid {{new_id}} {{group_name}}"}]}
{"command": "grub-bios-setup", "tasks": [{"task": "Set up a device to boot with GRUB:", "command": "grub-bios-setup {{/dev/sdX}}"}, {"task": "Install even if problems are detected:", "command": "grub-bios-setup --force {{/dev/sdX}}"}, {"task": "Install GRUB in a specific directory:", "command": "grub-bios-setup --directory={{/boot/grub}} {{/dev/sdX}}"}]}
{"command": "grub-file", "tasks": [{"task": "Check if a file is an ARM EFI image:", "command": "grub-file --is-arm-efi {{path/to/file}}"}, {"task": "Check if a file is an i386 EFI image:", "command": "grub-file --is-i386-efi {{path/to/file}}"}, {"task": "Check if a file is an x86_64 EFI image:", "command": "grub-file --is-x86_64-efi {{path/to/file}}"}, {"task": "Check if a file is an ARM image (Linux kernel):", "command": "grub-file --is-arm-linux {{path/to/file}}"}, {"task": "Check if a file is an x86 image (Linux kernel):", "command": "grub-file --is-x86-linux {{path/to/file}}"}, {"task": "Check if a file is an x86_64 XNU image (Mac OS X kernel):", "command": "grub-file --is-x86_64-xnu {{path/to/file}}"}]}
{"command": "grub-install", "tasks": [{"task": "Install GRUB on a BIOS system:", "command": "grub-install --target={{i386-pc}} {{path/to/device}}"}, {"task": "Install GRUB on an UEFI system:", "command": "grub-install --target={{x86_64-efi}} --efi-directory={{path/to/efi_directory}} --bootloader-id={{GRUB}}"}, {"task": "Install GRUB pre-loading specific modules:", "command": "grub-install --target={{x86_64-efi}} --efi-directory={{path/to/efi_directory}} --modules=\"{{part_gpt part_msdos}}\""}]}
{"command": "grub-mkconfig", "tasks": [{"task": "Do a dry run and print the configuration to `stdout`:", "command": "sudo grub-mkconfig"}, {"task": "Generate the configuration file:", "command": "sudo grub-mkconfig --output={{/boot/grub/grub.cfg}}"}, {"task": "Print the help page:", "command": "grub-mkconfig --help"}]}
{"command": "grub-reboot", "tasks": [{"task": "Set the default boot entry to an entry number, name or identifier for the next boot:", "command": "sudo grub-reboot {{entry_number}}"}, {"task": "Set the default boot entry to an entry number, name or identifier for an alternative boot directory for the next boot:", "command": "sudo grub-reboot --boot-directory {{/path/to/boot_directory}} {{entry_number}}"}]}
{"command": "grub-script-check", "tasks": [{"task": "Check a specific script file for syntax errors:", "command": "grub-script-check {{path/to/grub_config_file}}"}, {"task": "Display each line of input after reading it:", "command": "grub-script-check --verbose"}, {"task": "Display version:", "command": "grub-script-check --version"}, {"task": "Display help:", "command": "grub-script-check --help"}]}
{"command": "grub-set-default", "tasks": [{"task": "Set the default boot entry to an entry number, name or identifier:", "command": "sudo grub-set-default {{entry_number}}"}, {"task": "Set the default boot entry to an entry number, name or identifier for an alternative boot directory:", "command": "sudo grub-set-default --boot-directory {{/path/to/boot_directory}} {{entry_number}}"}]}
{"command": "gs", "tasks": [{"task": "To view a file:", "command": "gs -dQUIET -dBATCH {{file.pdf}}"}, {"task": "Reduce PDF file size to 150 dpi images for reading on a e-book device:", "command": "gs -dNOPAUSE -dQUIET -dBATCH -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook -sOutputFile={{output.pdf}} {{input.pdf}}"}, {"task": "Convert PDF file (pages 1 through 3) to an image with 150 dpi resolution:", "command": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=jpeg -r150 -dFirstPage={{1}} -dLastPage={{3}} -sOutputFile={{output_%d.jpg}} {{input.pdf}}"}, {"task": "Extract pages from a PDF file:", "command": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.pdf}}"}, {"task": "Merge PDF files:", "command": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input1.pdf}} {{input2.pdf}}"}, {"task": "Convert from PostScript file to PDF file:", "command": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.ps}}"}]}
{"command": "gsettings", "tasks": [{"task": "Set the value of a key. Fails if the key doesn't exist or the value is out of range:", "command": "gsettings set {{org.example.schema}} {{example-key}} {{value}}"}, {"task": "Print the value of a key or the schema-provided default if the key has not been set in `dconf`:", "command": "gsettings get {{org.example.schema}} {{example-key}}"}, {"task": "Unset a key, so that its schema default value will be used:", "command": "gsettings reset {{org.example.schema}} {{example-key}}"}, {"task": "Display all (non-relocatable) schemas, keys, and values:", "command": "gsettings list-recursively"}, {"task": "Display all keys and values (default if not set) from one schema:", "command": "gsettings list-recursively {{org.example.schema}}"}, {"task": "Display schema-allowed values for a key (helpful with enum keys):", "command": "gsettings range {{org.example.schema}} {{example-key}}"}, {"task": "Display the human-readable description of a key:", "command": "gsettings describe {{org.example.schema}} {{example-key}}"}]}
{"command": "guake", "tasks": [{"task": "Toggle Guake visibility:", "command": "F12"}, {"task": "Toggle fullscreen mode:", "command": "F11"}, {"task": "Open a new tab:", "command": "Ctrl+Shift+T"}, {"task": "Close the terminal:", "command": "Super+X"}, {"task": "Go to the previous tab:", "command": "Ctrl+PageUp"}, {"task": "Search the selected text in the browser:", "command": "Shift+Ctrl+L"}]}
{"command": "guix package", "tasks": [{"task": "Install a new package:", "command": "guix package -i {{package_name}}"}, {"task": "Remove a package:", "command": "guix package -r {{package_name}}"}, {"task": "Search the package database for a regular expression:", "command": "guix package -s \"{{search_pattern}}\""}, {"task": "List installed packages:", "command": "guix package -I"}, {"task": "List generations:", "command": "guix package -l"}, {"task": "Roll back to the previous generation:", "command": "guix package --roll-back"}]}
{"command": "gummy", "tasks": [{"task": "Set the screen temperature to 3000K:", "command": "gummy --temperature {{3000}}"}, {"task": "Set the screen backlight to 50%:", "command": "gummy --backlight {{50}}"}, {"task": "Set the screen pixel brightness to 45%:", "command": "gummy --brightness {{45}}"}, {"task": "Increase current screen pixel brightness by 10%:", "command": "gummy --brightness {{+10}}"}, {"task": "Decrease current screen pixel brightness by 10%:", "command": "gummy --brightness {{-10}}"}, {"task": "Set the temperature and pixel brightness for the second screen:", "command": "gummy --screen {{1}} --temperature {{3800}} --brightness {{65}}"}]}
{"command": "halt", "tasks": [{"task": "Halt the system:", "command": "halt"}, {"task": "Power off the system (same as `poweroff`):", "command": "halt --poweroff"}, {"task": "Reboot the system (same as `reboot`):", "command": "halt --reboot"}, {"task": "Halt immediately without contacting the system manager:", "command": "halt --force --force"}, {"task": "Write the wtmp shutdown entry without halting the system:", "command": "halt --wtmp-only"}]}
{"command": "handlr", "tasks": [{"task": "Open a URL in the default application:", "command": "handlr open {{https://example.com}}"}, {"task": "Open a PDF in the default PDF viewer:", "command": "handlr open {{path/to/file.pdf}}"}, {"task": "Set imv as the default application for PNG files:", "command": "handlr set {{.png}} {{imv.desktop}}"}, {"task": "Set MPV as the default application for all audio files:", "command": "handlr set {{'audio/*'}} {{mpv.desktop}}"}, {"task": "List all default apps:", "command": "handlr list"}, {"task": "Print the default application for PNG files:", "command": "handlr get {{.png}}"}]}
{"command": "hardinfo", "tasks": [{"task": "Start `hardinfo`:", "command": "hardinfo"}, {"task": "Print report to `stdout`:", "command": "hardinfo -r"}, {"task": "Save report to HTML file:", "command": "hardinfo -r -f html > hardinfo.html"}]}
{"command": "hcitool", "tasks": [{"task": "Scan for Bluetooth devices:", "command": "hcitool scan"}, {"task": "Output the name of a device, returning its MAC address:", "command": "hcitool name {{bdaddr}}"}, {"task": "Fetch information about a remote Bluetooth device:", "command": "hcitool info {{bdaddr}}"}, {"task": "Check the link quality to a Bluetooth device:", "command": "hcitool lq {{bdaddr}}"}, {"task": "Modify the transmit power level:", "command": "hcitool tpl {{bdaddr}} {{0|1}}"}, {"task": "Display the link policy:", "command": "hcitool lp"}, {"task": "Request authentication with a specific device:", "command": "hcitool auth {{bdaddr}}"}, {"task": "Display local devices:", "command": "hcitool dev"}]}
{"command": "hdparm", "tasks": [{"task": "Request the identification info of a given device:", "command": "sudo hdparm -I /dev/{{device}}"}, {"task": "Get the Advanced Power Management level:", "command": "sudo hdparm -B /dev/{{device}}"}, {"task": "Set the Advanced Power Management value (values 1-127 permit spin-down, and values 128-254 do not):", "command": "sudo hdparm -B {{1}} /dev/{{device}}"}, {"task": "Display the device's current power mode status:", "command": "sudo hdparm -C /dev/{{device}}"}, {"task": "Force a drive to immediately enter standby mode (usually causes a drive to spin down):", "command": "sudo hdparm -y /dev/{{device}}"}, {"task": "Put the drive into idle (low-power) mode, also setting its standby timeout:", "command": "sudo hdparm -S {{standby_timeout}} {{device}}"}, {"task": "Test the read speed of a specific device:", "command": "sudo hdparm -tT {{device}}"}]}
{"command": "head", "tasks": [{"task": "Output the first few lines of a file:", "command": "head --lines {{count}} {{path/to/file}}"}, {"task": "Output the first few bytes of a file:", "command": "head --bytes {{count}} {{path/to/file}}"}, {"task": "Output everything but the last few lines of a file:", "command": "head --lines -{{count}} {{path/to/file}}"}, {"task": "Output everything but the last few bytes of a file:", "command": "head --bytes -{{count}} {{path/to/file}}"}]}
{"command": "help", "tasks": [{"task": "Display the full list of builtin commands:", "command": "help"}, {"task": "Print instructions on how to use the `while` loop construct:", "command": "help while"}, {"task": "Print instructions on how to use the `for` loop construct:", "command": "help for"}, {"task": "Print instructions on how to use `[[ ]]` for conditional commands:", "command": "help [[ ]]"}, {"task": "Print instruction on how to use `(( ))` to evaluate arithmetic expressions:", "command": "help \\( \\)"}, {"task": "Print instructions on how to use the `cd` command:", "command": "help cd"}]}
{"command": "hlint", "tasks": [{"task": "Display suggestions for a given file:", "command": "hlint {{path/to/file}} options"}, {"task": "Check all Haskell files and generate a report:", "command": "hlint {{path/to/directory}} --report"}, {"task": "Automatically apply most suggestions:", "command": "hlint {{path/to/file}} --refactor"}, {"task": "Display additional options:", "command": "hlint {{path/to/file}} --refactor-options"}, {"task": "Generate a settings file ignoring all outstanding hints:", "command": "hlint {{path/to/file}} --default > {{.hlint.yaml}}"}]}
{"command": "homectl", "tasks": [{"task": "List user accounts and their associated home directories:", "command": "homectl list"}, {"task": "Create a user account and their associated home directory:", "command": "sudo homectl create {{username}}"}, {"task": "Remove a specific user and the associated home directory:", "command": "sudo homectl remove {{username}}"}, {"task": "Change the password for a specific user:", "command": "sudo homectl passwd {{username}}"}, {"task": "Run a shell or a command with access to a specific home directory:", "command": "sudo homectl with {{username}} -- {{command}} {{command_arguments}}"}, {"task": "Lock or unlock a specific home directory:", "command": "sudo homectl {{lock|unlock}} {{username}}"}, {"task": "Change the disk space assigned to a specific home directory to 100 GiB:", "command": "sudo homectl resize {{username}} {{100G}}"}, {"task": "Display help:", "command": "homectl --help"}]}
{"command": "homeshick", "tasks": [{"task": "Create a new castle:", "command": "homeshick generate {{castle_name}}"}, {"task": "Add a file to your castle:", "command": "homeshick track {{castle_name}} {{path/to/file}}"}, {"task": "Go to a castle:", "command": "homeshick cd {{castle_name}}"}, {"task": "Clone a castle:", "command": "homeshick clone {{github_username}}/{{repository_name}}"}, {"task": "Symlink all files from a castle:", "command": "homeshick link {{castle_name}}"}]}
{"command": "hostnamectl", "tasks": [{"task": "Get the hostname of the computer:", "command": "hostnamectl"}, {"task": "Set the hostname of the computer:", "command": "sudo hostnamectl set-hostname \"{{hostname}}\""}, {"task": "Set a pretty hostname for the computer:", "command": "sudo hostnamectl set-hostname --static \"{{hostname.example.com}}\" && sudo hostnamectl set-hostname --pretty \"{{hostname}}\""}, {"task": "Reset hostname to its default value:", "command": "sudo hostnamectl set-hostname --pretty \"\""}]}
{"command": "htpdate", "tasks": [{"task": "Synchronize date and time:", "command": "sudo htpdate {{host}}"}, {"task": "Perform simulation of synchronization, without any action:", "command": "htpdate -q {{host}}"}, {"task": "Compensate the systematic clock drift:", "command": "sudo htpdate -x {{host}}"}, {"task": "Set time immediate after the synchronization:", "command": "sudo htpdate -s {{host}}"}]}
{"command": "http-prompt", "tasks": [{"task": "Launch a session targeting the default URL of http://localhost:8000 or the previous session:", "command": "http-prompt"}, {"task": "Launch a session with a given URL:", "command": "http-prompt {{http://example.com}}"}, {"task": "Launch a session with some initial options:", "command": "http-prompt {{localhost:8000/api}} --auth {{username:password}}"}]}
{"command": "http_load", "tasks": [{"task": "Emulate 20 requests based on a given URL list file per second for 60 seconds:", "command": "http_load -rate {{20}} -seconds {{60}} {{path/to/urls.txt}}"}, {"task": "Emulate 5 concurrent requests based on a given URL list file for 60 seconds:", "command": "http_load -parallel {{5}} -seconds {{60}} {{path/to/urls.txt}}"}, {"task": "Emulate 1000 requests at 20 requests per second, based on a given URL list file:", "command": "http_load -rate {{20}} -fetches {{1000}} {{path/to/urls.txt}}"}, {"task": "Emulate 1000 requests at 5 concurrent requests at a time, based on a given URL list file:", "command": "http_load -parallel {{5}} -fetches {{1000}} {{path/to/urls.txt}}"}]}
{"command": "httpie", "tasks": [{"task": "Send a GET request (default method with no request data):", "command": "http {{https://example.com}}"}, {"task": "Send a POST request (default method with request data):", "command": "http {{https://example.com}} {{hello=World}}"}, {"task": "Send a POST request with redirected input:", "command": "http {{https://example.com}} < {{file.json}}"}, {"task": "Send a PUT request with a given JSON body:", "command": "http PUT {{https://example.com/todos/7}} {{hello=world}}"}, {"task": "Send a DELETE request with a given request header:", "command": "http DELETE {{https://example.com/todos/7}} {{API-Key:foo}}"}, {"task": "Show the whole HTTP exchange (both request and response):", "command": "http -v {{https://example.com}}"}, {"task": "Download a file:", "command": "http --download {{https://example.com}}"}, {"task": "Follow redirects and show intermediary requests and responses:", "command": "http --follow --all {{https://example.com}}"}]}
{"command": "hwclock", "tasks": [{"task": "Display the current time as reported by the hardware clock:", "command": "hwclock"}, {"task": "Write the current software clock time to the hardware clock (sometimes used during system setup):", "command": "hwclock --systohc"}, {"task": "Write the current hardware clock time to the software clock:", "command": "hwclock --hctosys"}]}
{"command": "i3-scrot", "tasks": [{"task": "Capture a screenshot of the whole screen and save it to the default directory:", "command": "i3-scrot"}, {"task": "Capture a screenshot of the active window:", "command": "i3-scrot --window"}, {"task": "Capture a screenshot of a specific rectangular selection:", "command": "i3-scrot --select"}, {"task": "Capture a screenshot of the whole screen and copy it to the clipboard:", "command": "i3-scrot --desk-to-clipboard"}, {"task": "Capture a screenshot of the active window and copy it to the clipboard:", "command": "i3-scrot --window-to-clipboard"}, {"task": "Capture a screenshot of a specific selection and copy it to the clipboard:", "command": "i3-scrot --select-to-clipboard"}, {"task": "Capture a screenshot of the active window after a delay of 5 seconds:", "command": "i3-scrot --window {{5}}"}]}
{"command": "i3", "tasks": [{"task": "Start i3 (Note that a pre-existing window manager must not be open when this command is run.):", "command": "i3"}, {"task": "Open a new terminal window:", "command": "Super + Return"}, {"task": "Create a new workspace:", "command": "Super + Shift + {{number}}"}, {"task": "Switch to workspace {{number}}:", "command": "Super + {{number}}"}, {"task": "Open new window horizontally:", "command": "Super + h"}, {"task": "Open new window vertically:", "command": "Super + v"}, {"task": "Open application (type out application name after executing command):", "command": "Super + D"}]}
{"command": "i3exit", "tasks": [{"task": "Log out of i3:", "command": "i3exit logout"}, {"task": "Lock i3:", "command": "i3exit lock"}, {"task": "Shut down the system:", "command": "i3exit shutdown"}, {"task": "Suspend the system:", "command": "i3exit suspend"}, {"task": "Switch to the login screen to log in as a different user:", "command": "i3exit switch_user"}, {"task": "Hibernate the system:", "command": "i3exit hibernate"}, {"task": "Reboot the system:", "command": "i3exit reboot"}]}
{"command": "i3lock", "tasks": [{"task": "Lock the screen showing a white background:", "command": "i3lock"}, {"task": "Lock the screen with a simple color background (rrggbb format):", "command": "i3lock --color {{0000ff}}"}, {"task": "Lock the screen to a PNG background:", "command": "i3lock --image {{path/to/file.png}}"}, {"task": "Lock the screen and disable the unlock indicator (removes feedback on keypress):", "command": "i3lock --no-unlock-indicator"}, {"task": "Lock the screen and don't hide the mouse pointer:", "command": "i3lock --pointer {{default}}"}, {"task": "Lock the screen to a PNG background tiled over all monitors:", "command": "i3lock --image {{path/to/file.png}} --tiling"}, {"task": "Lock the screen and show the number of failed login attempts:", "command": "i3lock --show-failed-attempts"}]}
{"command": "i3status", "tasks": [{"task": "Print the status line to `stdout` periodically, using the default configuration:", "command": "i3status"}, {"task": "Print the status line to `stdout` periodically, using a specific configuration:", "command": "i3status -c {{path/to/i3status.conf}}"}, {"task": "Display the `i3status` version and help:", "command": "i3status -h"}]}
{"command": "i7z", "tasks": [{"task": "Start i7z (needs to be run in superuser mode):", "command": "sudo i7z"}]}
{"command": "id3v2", "tasks": [{"task": "List all genres:", "command": "id3v2 ‐‐list‐genres"}, {"task": "List all tags of specific files:", "command": "id3v2 --list-tags {{path/to/file1 path/to/file2 ...}}"}, {"task": "Delete all `id3v2` or `id3v1` tags of specific files:", "command": "id3v2 {{--delete‐v2|--delete‐v1}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Display help:", "command": "id3v2 --help"}, {"task": "Display version:", "command": "id3v2 ‐‐version"}]}
{"command": "ifdown", "tasks": [{"task": "Disable interface eth0:", "command": "ifdown {{eth0}}"}, {"task": "Disable all interfaces which are enabled:", "command": "ifdown -a"}]}
{"command": "ifmetric", "tasks": [{"task": "Set the priority of the specified network interface (a higher number indicates lower priority):", "command": "sudo ifmetric {{interface}} {{value}}"}, {"task": "Reset the priority of the specified network interface:", "command": "sudo ifmetric {{interface}} {{0}}"}]}
{"command": "iftop", "tasks": [{"task": "Show the bandwidth usage:", "command": "sudo iftop"}, {"task": "Show the bandwidth usage of a given interface:", "command": "sudo iftop -i {{interface}}"}, {"task": "Show the bandwidth usage with port information:", "command": "sudo iftop -P"}, {"task": "Do not show bar graphs of traffic:", "command": "sudo iftop -b"}, {"task": "Do not look up hostnames:", "command": "sudo iftop -n"}, {"task": "Get help about interactive commands:", "command": "?"}]}
{"command": "ifup", "tasks": [{"task": "Enable interface eth0:", "command": "ifup {{eth0}}"}, {"task": "Enable all the interfaces defined with \"auto\" in `/etc/network/interfaces`:", "command": "ifup -a"}]}
{"command": "img2txt", "tasks": [{"task": "Set output column count to a specific value:", "command": "img2txt --width={{10}}"}, {"task": "Set output line count to a specific value:", "command": "img2txt --height={{5}}"}, {"task": "Set output font width to a specific value:", "command": "img2txt --font-width={{12}}"}, {"task": "Set output font height to a specific value:", "command": "img2txt --font-height={{14}}"}, {"task": "Set image brightness to a specific value:", "command": "img2txt --brightness={{2}}"}]}
{"command": "imgp", "tasks": [{"task": "Convert single images and/or whole directories containing valid image formats:", "command": "imgp -x {{1366x1000}} {{path/to/directory}} {{path/to/file}}"}, {"task": "Scale an image by 75% and overwrite the source image to a target resolution:", "command": "imgp -x {{75}} -w {{path/to/file}}"}, {"task": "Rotate an image clockwise by 90 degrees:", "command": "imgp -o {{90}} {{path/to/file}}"}]}
{"command": "inotifywait", "tasks": [{"task": "Watch a specific file for events, exiting after the first one:", "command": "inotifywait {{path/to/file}}"}, {"task": "Continuously watch a specific file for events without exiting:", "command": "inotifywait --monitor {{path/to/file}}"}, {"task": "Watch a directory recursively for events:", "command": "inotifywait --monitor --recursive {{path/to/directory}}"}, {"task": "Watch a directory for changes, excluding files, whose names match a regular expression:", "command": "inotifywait --monitor --recursive --exclude \"{{regular_expression}}\" {{path/to/directory}}"}, {"task": "Watch a file for changes, exiting when no event occurs for 30 seconds:", "command": "inotifywait --monitor --timeout {{30}} {{path/to/file}}"}, {"task": "Only watch a file for file modification events:", "command": "inotifywait --event {{modify}} {{path/to/file}}"}, {"task": "Watch a file printing only events, and no status messages:", "command": "inotifywait --quiet {{path/to/file}}"}, {"task": "Run a command when a file is accessed:", "command": "inotifywait --event {{access}} {{path/to/file}} && {{command}}"}]}
{"command": "insmod", "tasks": [{"task": "Insert a kernel module into the Linux kernel:", "command": "insmod {{path/to/module.ko}}"}]}
{"command": "instaloader", "tasks": [{"task": "Download a profile:", "command": "instaloader {{profile_name}}"}, {"task": "Download highlights:", "command": "instaloader --highlights {{profile_name}}"}, {"task": "Download posts with geotags (if available), suppressing any user interaction:", "command": "instaloader --quiet --geotags {{profile_name}}"}, {"task": "Specify a user agent for HTTP requests:", "command": "instaloader --user-agent {{user_agent}} {{profile_name}}"}, {"task": "Specify login info and download posts (useful for private profiles):", "command": "instaloader --login {{username}} --password {{password}} {{profile_name}}"}, {"task": "Skip a target if the first downloaded file has been found (useful for updating Instagram archives):", "command": "instaloader --fast-update {{profile_name}}"}, {"task": "Download stories and IGTV videos (login required):", "command": "instaloader --login {{username}} --password {{password}} --stories --igtv {{profile_name}}"}, {"task": "Download all types of posts (login required):", "command": "instaloader --login {{username}} --password {{password}} --stories --igtv --highlights {{profile_name}}"}]}
{"command": "inxi", "tasks": [{"task": "Print a summary of CPU, memory, hard drive and kernel information:", "command": "inxi"}, {"task": "Print a full description of CPU, memory, disk, network and process information:", "command": "inxi -Fz"}, {"task": "Print information about the distribution's repository:", "command": "inxi -r"}]}
{"command": "iostat", "tasks": [{"task": "Display a report of CPU and disk statistics since system startup:", "command": "iostat"}, {"task": "Display a report of CPU and disk statistics with units converted to megabytes:", "command": "iostat -m"}, {"task": "Display CPU statistics:", "command": "iostat -c"}, {"task": "Display disk statistics with disk names (including LVM):", "command": "iostat -N"}, {"task": "Display extended disk statistics with disk names for device \"sda\":", "command": "iostat -xN {{sda}}"}, {"task": "Display incremental reports of CPU and disk statistics every 2 seconds:", "command": "iostat {{2}}"}]}
{"command": "ip address", "tasks": [{"task": "List network interfaces and their associated IP addresses:", "command": "ip address"}, {"task": "Filter to show only active network interfaces:", "command": "ip address show up"}, {"task": "Display information about a specific network interface:", "command": "ip address show dev {{eth0}}"}, {"task": "Add an IP address to a network interface:", "command": "ip address add {{ip_address}} dev {{eth0}}"}, {"task": "Remove an IP address from a network interface:", "command": "ip address delete {{ip_address}} dev {{eth0}}"}, {"task": "Delete all IP addresses in a given scope from a network interface:", "command": "ip address flush dev {{eth0}} scope {{global|host|link}}"}]}
{"command": "ip link", "tasks": [{"task": "Show information about all network interfaces:", "command": "ip link"}, {"task": "Show information about a specific network interface:", "command": "ip link show {{ethN}}"}, {"task": "Bring a network interface up or down:", "command": "ip link set {{ethN}} {{up|down}}"}, {"task": "Give a meaningful name to a network interface:", "command": "ip link set {{ethN}} alias \"{{LAN Interface}}\""}, {"task": "Change the MAC address of a network interface:", "command": "ip link set {{ethN}} address {{ff:ff:ff:ff:ff:ff}}"}, {"task": "Change the MTU size for a network interface to use jumbo frames:", "command": "ip link set {{ethN}} mtu {{9000}}"}]}
{"command": "ip neighbour", "tasks": [{"task": "Display the neighbour/ARP table entries:", "command": "ip neighbour"}, {"task": "Remove entries in the neighbour table on device `eth0`:", "command": "sudo ip neighbour flush dev {{eth0}}"}, {"task": "Perform a neighbour lookup and return a neighbour entry:", "command": "ip neighbour get {{lookup_ip}} dev {{eth0}}"}, {"task": "Add or delete an ARP entry for the neighbour IP address to `eth0`:", "command": "sudo ip neighbour {{add|del}} {{ip_address}} lladdr {{mac_address}} dev {{eth0}} nud reachable"}, {"task": "Change or replace an ARP entry for the neighbour IP address to `eth0`:", "command": "sudo ip neighbour {{change|replace}} {{ip_address}} lladdr {{new_mac_address}} dev {{eth0}}"}]}
{"command": "ip route list", "tasks": [{"task": "View documentation for the original command:", "command": "tldr ip-route-show"}]}
{"command": "ip route show", "tasks": [{"task": "Display the routing table:", "command": "ip route show"}, {"task": "Display the main routing table (same as first example):", "command": "ip route show {{main|254}}"}, {"task": "Display the local routing table:", "command": "ip route show table {{local|255}}"}, {"task": "Display all routing tables:", "command": "ip route show table {{all|unspec|0}}"}, {"task": "List routes from a given device only:", "command": "ip route show dev {{eth0}}"}, {"task": "List routes within a given scope:", "command": "ip route show scope link"}, {"task": "Display the routing cache:", "command": "ip route show cache"}, {"task": "Display only IPv6 or IPv4 routes:", "command": "ip {{-6|-4}} route show"}]}
{"command": "ip route", "tasks": [{"task": "Display the routing table:", "command": "ip route {{show|list}}"}, {"task": "Add a default route using gateway forwarding:", "command": "sudo ip route add default via {{gateway_ip}}"}, {"task": "Add a default route using `eth0`:", "command": "sudo ip route add default dev {{eth0}}"}, {"task": "Add a static route:", "command": "sudo ip route add {{destination_ip}} via {{gateway_ip}} dev {{eth0}}"}, {"task": "Delete a static route:", "command": "sudo ip route del {{destination_ip}} dev {{eth0}}"}, {"task": "Change or replace a static route:", "command": "sudo ip route {{change|replace}} {{destination_ip}} via {{gateway_ip}} dev {{eth0}}"}, {"task": "Show which route will be used by the kernel to reach an IP address:", "command": "ip route get {{destination_ip}}"}]}
{"command": "ip rule", "tasks": [{"task": "Display the routing policy:", "command": "ip rule {{show|list}}"}, {"task": "Add a new rule based on packet source addresses:", "command": "sudo ip rule add from {{192.168.178.2/32}}"}, {"task": "Add a new rule based on packet destination addresses:", "command": "sudo ip rule add to {{192.168.178.2/32}}"}, {"task": "Delete a rule based on packet source addresses:", "command": "sudo ip rule delete from {{192.168.178.2/32}}"}, {"task": "Delete a rule based on packet destination addresses:", "command": "sudo ip rule delete to {{192.168.178.2/32}}"}, {"task": "Flush all deleted rules:", "command": "ip rule flush"}, {"task": "Save all rules to a file:", "command": "ip rule save > {{path/to/ip_rules.dat}}"}, {"task": "Restore all rules from a file:", "command": "ip rule restore < {{path/to/ip_rules.dat}}"}]}
{"command": "ip", "tasks": [{"task": "List interfaces with detailed info:", "command": "ip address"}, {"task": "List interfaces with brief network layer info:", "command": "ip -brief address"}, {"task": "List interfaces with brief link layer info:", "command": "ip -brief link"}, {"task": "Display the routing table:", "command": "ip route"}, {"task": "Show neighbors (ARP table):", "command": "ip neighbour"}, {"task": "Make an interface up/down:", "command": "ip link set {{interface}} up/down"}, {"task": "Add/Delete an IP address to an interface:", "command": "ip addr add/del {{ip}}/{{mask}} dev {{interface}}"}, {"task": "Add a default route:", "command": "ip route add default via {{ip}} dev {{interface}}"}]}
{"command": "ipcalc", "tasks": [{"task": "Show information about an address or network with a given subnet mask:", "command": "ipcalc {{1.2.3.4}} {{255.255.255.0}}"}, {"task": "Show information about an address or network in CIDR notation:", "command": "ipcalc {{1.2.3.4}}/{{24}}"}, {"task": "Show the broadcast address of an address or network:", "command": "ipcalc -b {{1.2.3.4}}/{{30}}"}, {"task": "Show the network address of provided IP address and netmask:", "command": "ipcalc -n {{1.2.3.4}}/{{24}}"}, {"task": "Display geographic information about a given IP address:", "command": "ipcalc -g {{1.2.3.4}}"}]}
{"command": "ipcmk", "tasks": [{"task": "Create a shared memory segment:", "command": "ipcmk --shmem {{segment_size_in_bytes}}"}, {"task": "Create a semaphore:", "command": "ipcmk --semaphore {{element_size}}"}, {"task": "Create a message queue:", "command": "ipcmk --queue"}, {"task": "Create a shared memory segment with specific permissions (default is 0644):", "command": "ipcmk --shmem {{segment_size_in_bytes}} {{octal_permissions}}"}]}
{"command": "ipcrm", "tasks": [{"task": "Delete a shared memory segment by ID:", "command": "ipcrm --shmem-id {{shmem_id}}"}, {"task": "Delete a shared memory segment by key:", "command": "ipcrm --shmem-key {{shmem_key}}"}, {"task": "Delete an IPC queue by ID:", "command": "ipcrm --queue-id {{ipc_queue_id}}"}, {"task": "Delete an IPC queue by key:", "command": "ipcrm --queue-key {{ipc_queue_key}}"}, {"task": "Delete a semaphore by ID:", "command": "ipcrm --semaphore-id {{semaphore_id}}"}, {"task": "Delete a semaphore by key:", "command": "ipcrm --semaphore-key {{semaphore_key}}"}, {"task": "Delete all IPC resources:", "command": "ipcrm --all"}]}
{"command": "ipset", "tasks": [{"task": "Create an empty IP set which will contain IP addresses:", "command": "ipset create {{set_name}} hash:ip"}, {"task": "Destroy a specific IP set:", "command": "ipset destroy {{set_name}}"}, {"task": "Add an IP address to a specific set:", "command": "ipset add {{set_name}} {{192.168.1.25}}"}, {"task": "Delete a specific IP address from a set:", "command": "ipset del {{set_name}} {{192.168.1.25}}"}, {"task": "Save an IP set:", "command": "ipset save {{set_name}} > {{path/to/ip_set}}"}]}
{"command": "iptables", "tasks": [{"task": "View chains, rules, and packet/byte counters for the filter table:", "command": "sudo iptables -vnL"}, {"task": "Set chain policy rule:", "command": "sudo iptables -P {{chain}} {{rule}}"}, {"task": "Append rule to chain policy for IP:", "command": "sudo iptables -A {{chain}} -s {{ip}} -j {{rule}}"}, {"task": "Append rule to chain policy for IP considering protocol and port:", "command": "sudo iptables -A {{chain}} -s {{ip}} -p {{protocol}} --dport {{port}} -j {{rule}}"}, {"task": "Add a NAT rule to translate all traffic from the `192.168.0.0/24` subnet to the host's public IP:", "command": "sudo iptables -t {{nat}} -A {{POSTROUTING}} -s {{192.168.0.0/24}} -j {{MASQUERADE}}"}, {"task": "Delete chain rule:", "command": "sudo iptables -D {{chain}} {{rule_line_number}}"}, {"task": "Save iptables configuration of a given table to a file:", "command": "sudo iptables-save -t {{tablename}} > {{path/to/iptables_file}}"}, {"task": "Restore iptables configuration from a file:", "command": "sudo iptables-restore < {{path/to/iptables_file}}"}]}
{"command": "isoinfo", "tasks": [{"task": "List all the files included in an ISO image:", "command": "isoinfo -f -i {{path/to/image.iso}}"}, {"task": "E[x]tract a specific file from an ISO image and send it out `stdout`:", "command": "isoinfo -i {{path/to/image.iso}} -x {{/PATH/TO/FILE/INSIDE/ISO.EXT}}"}, {"task": "Show header information for an ISO disk image:", "command": "isoinfo -d -i {{path/to/image.iso}}"}]}
{"command": "isosize", "tasks": [{"task": "Display the size of an ISO file:", "command": "isosize {{path/to/file.iso}}"}, {"task": "Display the block count and block size of an ISO file:", "command": "isosize --sectors {{path/to/file.iso}}"}, {"task": "Display the size of an ISO file divided by a given number (only usable when --sectors is not given):", "command": "isosize --divisor={{number}} {{path/to/file.iso}}"}]}
{"command": "ispell", "tasks": [{"task": "Start an interactive session:", "command": "ispell"}, {"task": "Check for typos in the specified file and interactively apply suggestions:", "command": "ispell {{path/to/file}}"}, {"task": "Display the version:", "command": "ispell -v"}]}
{"command": "iw", "tasks": [{"task": "Scan for available wireless networks:", "command": "iw dev {{wlp}} scan"}, {"task": "Join an open wireless network:", "command": "iw dev {{wlp}} connect {{SSID}}"}, {"task": "Close the current connection:", "command": "iw dev {{wlp}} disconnect"}, {"task": "Show information about the current connection:", "command": "iw dev {{wlp}} link"}]}
{"command": "iwconfig", "tasks": [{"task": "Show the parameters and statistics of all the interfaces:", "command": "iwconfig"}, {"task": "Show the parameters and statistics of the specified interface:", "command": "iwconfig {{interface}}"}, {"task": "Set the ESSID (network name) of the specified interface (e.g. eth0 or wlp2s0):", "command": "iwconfig {{interface}} {{new_network_name}}"}, {"task": "Set the operating mode of the specified interface:", "command": "iwconfig {{interface}} mode {{ad hoc|Managed|Master|Repeater|Secondary|Monitor|Auto}}"}]}
{"command": "iwctl", "tasks": [{"task": "Start the interactive mode, in this mode you can enter the commands directly, with autocompletion:", "command": "iwctl"}, {"task": "Call general help:", "command": "iwctl --help"}, {"task": "Display your Wi-Fi stations:", "command": "iwctl station list"}, {"task": "Start looking for networks with a station:", "command": "iwctl station {{station}} scan"}, {"task": "Display the networks found by a station:", "command": "iwctl station {{station}} get-networks"}, {"task": "Connect to a network with a station, if credentials are needed they will be asked:", "command": "iwctl station {{station}} connect {{network_name}}"}]}
{"command": "jobs", "tasks": [{"task": "View jobs spawned by the current shell:", "command": "jobs"}, {"task": "List jobs and their process IDs:", "command": "jobs -l"}, {"task": "Display information about jobs with changed status:", "command": "jobs -n"}, {"task": "Display only process IDs:", "command": "jobs -p"}, {"task": "Display running processes:", "command": "jobs -r"}, {"task": "Display stopped processes:", "command": "jobs -s"}]}
{"command": "journalctl", "tasks": [{"task": "Show all messages with priority level 3 (errors) from this [b]oot:", "command": "journalctl -b --priority={{3}}"}, {"task": "Show all messages from last [b]oot:", "command": "journalctl -b -1"}, {"task": "Delete journal logs which are older than 2 days:", "command": "journalctl --vacuum-time={{2d}}"}, {"task": "[f]ollow new messages (like `tail -f` for traditional syslog):", "command": "journalctl -f"}, {"task": "Show all messages by a specific [u]nit:", "command": "journalctl -u {{unit}}"}, {"task": "Filter messages within a time range (either timestamp or placeholders like \"yesterday\"):", "command": "journalctl --since {{now|today|yesterday|tomorrow}} --until {{YYYY-MM-DD HH:MM:SS}}"}, {"task": "Show all messages by a specific process:", "command": "journalctl _PID={{pid}}"}, {"task": "Show all messages by a specific executable:", "command": "journalctl {{path/to/executable}}"}]}
{"command": "jpegtran", "tasks": [{"task": "Mirror an image horizontally or vertically:", "command": "jpegtran -flip {{horizontal|vertical}} {{path/to/image.jpg}} > {{path/to/output.jpg}}"}, {"task": "Rotate an image 90, 180 or 270 degrees clockwise:", "command": "jpegtran -rotate {{90|180|270}} {{path/to/image.jpg}} > {{path/to/output.jpg}}"}, {"task": "Transpose the image across the upper-left to lower right axis:", "command": "jpegtran -transpose {{path/to/image.jpg}} > {{path/to/output.jpg}}"}, {"task": "Transverse the image across the upper right to lower left axis:", "command": "jpegtran -transverse {{path/to/image.jpg}} > {{path/to/output.jpg}}"}, {"task": "Convert the image to grayscale:", "command": "jpegtran -grayscale {{path/to/image.jpg}} > {{path/to/output.jpg}}"}, {"task": "Crop the image to a rectangular region of width `W` and height `H` from the upper-left corner, saving the output to a specific file:", "command": "jpegtran -crop {{W}}x{{H}} -outfile {{path/to/output.jpg}} {{path/to/image.jpg}}"}, {"task": "Crop the image to a rectangular region of width `W` and height `H`, starting at point `X` and `Y` from the upper-left corner:", "command": "jpegtran -crop {{W}}x{{H}}+{{X}}+{{Y}} {{path/to/image.jpg}} > {{path/to/output.jpg}}"}]}
{"command": "just", "tasks": [{"task": "Start a REPL (interactive shell):", "command": "just"}, {"task": "Run a JavaScript file:", "command": "just {{path/to/file.js}}"}, {"task": "Evaluate JavaScript code by passing it as an argument:", "command": "just eval \"{{code}}\""}, {"task": "Initialize a new project in a directory of the same name:", "command": "just init {{project_name}}"}, {"task": "Build a JavaScript application into an executable:", "command": "just build {{path/to/file.js}} --static"}]}
{"command": "kde-inhibit", "tasks": [{"task": "Inhibit power management:", "command": "kde-inhibit --power {{command}} {{command_arguments}}"}, {"task": "Inhibit screen saver:", "command": "kde-inhibit --screenSaver {{command}} {{command_arguments}}"}, {"task": "Launch VLC, and inhibit color correction (night mode) while it's running:", "command": "kde-inhibit --colorCorrect {{vlc}}"}]}
{"command": "kdialog", "tasks": [{"task": "Open a dialog box displaying a specific message:", "command": "kdialog --msgbox \"{{message}}\" \"{{optional_detailed_message}}\""}, {"task": "Open a question dialog with a `yes` and `no` button, returning `0` and `1`, respectively:", "command": "kdialog --yesno \"{{message}}\""}, {"task": "Open a warning dialog with a `yes`, `no`, and `cancel` button, returning `0`, `1`, or `2` respectively:", "command": "kdialog --warningyesnocancel \"{{message}}\""}, {"task": "Open an input dialog box and print the input to `stdout` when `OK` is pressed:", "command": "kdialog --inputbox \"{{message}}\" \"{{optional_default_text}}\""}, {"task": "Open a dialog to prompt for a specific password and print it to `stdout`:", "command": "kdialog --password \"{{message}}\""}, {"task": "Open a dialog containing a specific dropdown menu and print the selected item to `stdout`:", "command": "kdialog --combobx \"{{message}}\" \"{{item1}}\" \"{{item2}}\" \"{{...}}\""}, {"task": "Open a file chooser dialog and print the selected file's path to `stdout`:", "command": "kdialog --getopenfilename"}, {"task": "Open a progressbar dialog and print a DBUS reference for communication to `stdout`:", "command": "kdialog --progressbar \"{{message}}\""}]}
{"command": "kdocker", "tasks": [{"task": "Display a cursor to send a window to the system tray when pressing the left mouse button (press any other mouse button to cancel):", "command": "kdocker"}, {"task": "Open an application and send it to the system tray:", "command": "kdocker {{application}}"}, {"task": "Send focused window to the system tray:", "command": "kdocker -f"}, {"task": "Display a cursor to send a window to the system tray with a custom icon when pressing the left mouse button:", "command": "kdocker -i {{/path/to/icon}}"}, {"task": "Open an application, send it to the system tray and if focus is lost, minimize it:", "command": "kdocker -l {{application}}"}, {"task": "Print version:", "command": "kdocker --version"}]}
{"command": "kexec", "tasks": [{"task": "Load a new kernel:", "command": "kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --command-line={{arguments}}"}, {"task": "Load a new kernel with current boot parameters:", "command": "kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --reuse-cmdline"}, {"task": "Execute a currently loaded kernel:", "command": "kexec -e"}, {"task": "Unload current kexec target kernel:", "command": "kexec -u"}]}
{"command": "keyctl", "tasks": [{"task": "List keys in a specific keyring:", "command": "keyctl list {{target_keyring}}"}, {"task": "List current keys in the user default session:", "command": "keyctl list {{@us}}"}, {"task": "Store a key in a specific keyring:", "command": "keyctl add {{type_keyring}} {{key_name}} {{key_value}} {{target_keyring}}"}, {"task": "Store a key with its value from `stdin`:", "command": "echo -n {{key_value}} | keyctl padd {{type_keyring}} {{key_name}} {{target_keyring}}"}, {"task": "Put a timeout on a key:", "command": "keyctl timeout {{key_name}} {{timeout_in_seconds}}"}, {"task": "Read a key and format it as a hex-dump if not printable:", "command": "keyctl read {{key_name}}"}, {"task": "Read a key and format as-is:", "command": "keyctl pipe {{key_name}}"}, {"task": "Revoke a key and prevent any further action on it:", "command": "keyctl revoke {{key_name}}"}]}
{"command": "killall", "tasks": [{"task": "Terminate a process using the default SIGTERM (terminate) signal:", "command": "killall {{process_name}}"}, {"task": "List available signal names (to be used without the 'SIG' prefix):", "command": "killall --list"}, {"task": "Interactively ask for confirmation before termination:", "command": "killall -i {{process_name}}"}, {"task": "Terminate a process using the SIGINT (interrupt) signal, which is the same signal sent by pressing `Ctrl + C`:", "command": "killall -INT {{process_name}}"}, {"task": "Force kill a process:", "command": "killall -KILL {{process_name}}"}]}
{"command": "kjv", "tasks": [{"task": "Display books:", "command": "kjv -l"}, {"task": "Open a specific book:", "command": "kjv {{Genesis}}"}, {"task": "Open a specific chapter of a book:", "command": "kjv {{Genesis}} {{2}}"}, {"task": "Open a specific verse of a specific chapter of a book:", "command": "kjv {{John}} {{3}}:{{16}}"}, {"task": "Open a specific range of verses of a book's chapter:", "command": "kjv {{Proverbs}} {{3}}:{{1-6}}"}, {"task": "Display a specific range of verses of a book from different chapters:", "command": "kjv {{Matthew}} {{1}}:{{7}}-{{2}}:{{6}}"}, {"task": "Display all verses that match a pattern:", "command": "kjv /{{Plagues}}"}, {"task": "Display all verses that match a pattern in a specific book:", "command": "kjv {{1Jn}}/{{antichrist}}"}]}
{"command": "konsave", "tasks": [{"task": "Save the current configuration as a profile:", "command": "konsave --save {{profile_name}}"}, {"task": "Apply a profile:", "command": "konsave --apply {{profile_name}}"}, {"task": "Save the current configuration as a profile, overwriting existing profiles if they exist with the same name:", "command": "konsave -s {{profile_name}} --force"}, {"task": "List all profiles:", "command": "konsave --list"}, {"task": "Remove a profile:", "command": "konsave --remove {{profile_name}}"}, {"task": "Export a profile as a `.knsv` to the home directory:", "command": "konsave --export-profile {{profile_name}}"}, {"task": "Import a `.knsv` profile:", "command": "konsave --import-profile {{path/to/profile_name.knsv}}"}]}
{"command": "konsole", "tasks": [{"task": "Open the terminal in a specific directory:", "command": "konsole --workdir {{path/to/directory}}"}, {"task": "[e]xecute a specific command and don't close the window after it exits:", "command": "konsole --noclose -e \"{{command}}\""}, {"task": "Open a new tab:", "command": "konsole --new-tab"}, {"task": "Open the terminal in the background and bring to the front when `Ctrl+Shift+F12` is pressed:", "command": "konsole --background-mode"}]}
{"command": "kpackagetool5", "tasks": [{"task": "List all known package types that can be installed:", "command": "kpackagetool5 --list-types"}, {"task": "Install the package from a directory:", "command": "kpackagetool5 --type {{package_type}} --install {{path/to/directory}}"}, {"task": "Update installed package from a directory:", "command": "kpackagetool5 --type {{package_type}} --upgrade {{path/to/directory}}"}, {"task": "List installed plasmoids (--global for all users):", "command": "kpackagetool5 --type Plasma/Applet --list --global"}, {"task": "Remove a plasmoid by name:", "command": "kpackagetool5 --type Plasma/Applet --remove \"{{name}}\""}]}
{"command": "kpartx", "tasks": [{"task": "Add partition mappings:", "command": "kpartx -a {{whole_disk.img}}"}, {"task": "Delete partition mappings:", "command": "kpartx -d {{whole_disk.img}}"}, {"task": "List partition mappings:", "command": "kpartx -l {{whole_disk.img}}"}]}
{"command": "kreadconfig5", "tasks": [{"task": "Read a key from the global configuration:", "command": "kreadconfig5 --group {{group_name}} --key {{key_name}}"}, {"task": "Read a key from a specific configuration file:", "command": "kwriteconfig5 --file {{path/to/file}} --group {{group_name}} --key {{key_name}}"}, {"task": "Check if systemd is used to start the Plasma session:", "command": "kreadconfig5 --file {{startkderc}} --group {{General}} --key {{systemdBoot}}"}]}
{"command": "krita", "tasks": [{"task": "Start Krita:", "command": "krita"}, {"task": "Open specific files:", "command": "krita {{path/to/image1 path/to/image2 ...}}"}, {"task": "Start without a splash screen:", "command": "krita --nosplash"}, {"task": "Start with a specific workspace:", "command": "krita --workspace {{Animation}}"}, {"task": "Start in fullscreen mode:", "command": "krita --fullscreen"}]}
{"command": "kscreen-console", "tasks": [{"task": "Show all outputs and configuration files to attach to a bug report:", "command": "kscreen-console bug"}, {"task": "Show paths to KScreen configuration files:", "command": "kscreen-console config"}, {"task": "Show KScreen output information and configuration:", "command": "kscreen-console outputs"}, {"task": "Monitor for changes:", "command": "kscreen-console monitor"}, {"task": "Show the current KScreen configuration as JSON:", "command": "kscreen-console json"}, {"task": "Display help:", "command": "kscreen-console --help"}, {"task": "Display help including Qt specific command-line options:", "command": "kscreen-console --help-all"}]}
{"command": "kscreen-doctor", "tasks": [{"task": "Show display output information:", "command": "kscreen-doctor --outputs"}, {"task": "Set the rotation of a display output with an ID of 1 to the right:", "command": "kscreen-doctor {{output.1.rotation.right}}"}, {"task": "Set the scale of a display output with an ID of `HDMI-2` to 2 (200%):", "command": "kscreen-doctor {{output.HDMI-2.scale.2}}"}]}
{"command": "ksvgtopng5", "tasks": [{"task": "Convert an SVG file (should be an absolute path) to PNG:", "command": "ksvgtopng5 {{width}} {{height}} {{path/to/file.svg}} {{output_filename.png}}"}]}
{"command": "kwrite", "tasks": [{"task": "Open a text file:", "command": "kwrite {{path/to/file}}"}, {"task": "Open multiple text files:", "command": "kwrite {{file1 file2 ...}}"}, {"task": "Open a text file with a specific encoding:", "command": "kwrite --encoding={{UTF-8}} {{path/to/file}}"}, {"task": "Open a text file and navigate to a specific line and column:", "command": "kwrite --line {{line_number}} --column {{column_number}} {{path/to/file}}"}]}
{"command": "kwriteconfig5", "tasks": [{"task": "Display help:", "command": "kwriteconfig5 --help"}, {"task": "Set a global configuration key:", "command": "kwriteconfig5 --group {{group_name}} --key {{key}} {{value}}"}, {"task": "Set a key in a specific configuration file:", "command": "kwriteconfig5 --file {{path/to/file}} --group {{group_name}} --key {{key}} {{value}}"}, {"task": "Delete a key:", "command": "kwriteconfig5 --group {{group_name}} --key {{key}} --delete"}, {"task": "Use systemd to start the Plasma session when available:", "command": "kwriteconfig5 --file {{startkderc}} --group {{General}} --key {{systemdBoot}} {{true}}"}, {"task": "Hide the title bar when a window is maximized (like Ubuntu):", "command": "kwriteconfig5 --file {{~/.config/kwinrc}} --group {{Windows}} --key {{BorderlessMaximizedWindows}} {{true}}"}, {"task": "Configure KRunner to open with the Meta (Command/Windows) global hotkey:", "command": "kwriteconfig5 --file {{~/.config/kwinrc}} --group {{ModifierOnlyShortcuts}} --key {{Meta}} {{\"org.kde.kglobalaccel,/component/krunner_desktop,org.kde.kglobalaccel.Component,invokeShortcut,_launch\"}}"}]}
{"command": "laptop-detect", "tasks": [{"task": "Return an exit status of 0 if the current device is likely a laptop, else returns 1:", "command": "laptop-detect"}, {"task": "Print the type of device that the current system is detected as:", "command": "laptop-detect --verbose"}, {"task": "Display the version:", "command": "laptop-detect --version"}]}
{"command": "larasail", "tasks": [{"task": "Set up the server with Laravel dependencies using the default PHP version:", "command": "larasail setup"}, {"task": "Set up the server with Laravel dependencies using a specific PHP version:", "command": "larasail setup {{php71}}"}, {"task": "Add a new Laravel site:", "command": "larasail host {{domain}} {{path/to/site_directory}}"}, {"task": "Retrieve the Larasail user password:", "command": "larasail pass"}, {"task": "Retrieve the Larasail MySQL password:", "command": "larasail mysqlpass"}]}
{"command": "lastb", "tasks": [{"task": "Show a list of all last logged in users:", "command": "sudo lastb"}, {"task": "Show a list of all last logged in users since a given time:", "command": "sudo lastb --since {{YYYY-MM-DD}}"}, {"task": "Show a list of all last logged in users until a given time:", "command": "sudo lastb --until {{YYYY-MM-DD}}"}, {"task": "Show a list of all logged in users at a specific time:", "command": "sudo lastb --present {{hh:mm}}"}, {"task": "Show a list of all last logged in users and translate the IP into a hostname:", "command": "sudo lastb --dns"}]}
{"command": "lastcomm", "tasks": [{"task": "Print information about all the commands in the acct (record file):", "command": "lastcomm"}, {"task": "Display commands executed by a given user:", "command": "lastcomm --user {{user}}"}, {"task": "Display information about a given command executed on the system:", "command": "lastcomm --command {{command}}"}, {"task": "Display information about commands executed on a given terminal:", "command": "lastcomm --tty {{terminal_name}}"}]}
{"command": "lastlog", "tasks": [{"task": "Display the most recent login of all users:", "command": "lastlog"}, {"task": "Display the lastlog record of the specified user:", "command": "lastlog --user {{username}}"}, {"task": "Display records older than 7 days:", "command": "lastlog --before {{7}}"}, {"task": "Display records more recent than 3 days:", "command": "lastlog -time {{3}}"}]}
{"command": "latte-dock", "tasks": [{"task": "Clear QML cache:", "command": "latte-dock --clear-cache"}, {"task": "Import and load default layout on startup:", "command": "latte-dock --default-layout"}, {"task": "Load a specific layout on startup:", "command": "latte-dock --layout {{layout_name}}"}, {"task": "Import and load a specific layout:", "command": "latte-dock --import-layout {{path/to/file}}"}]}
{"command": "lci", "tasks": [{"task": "Run a LOLCODE file:", "command": "lci {{path/to/file}}"}, {"task": "Display version:", "command": "lci -v"}, {"task": "Display help:", "command": "lci -h"}]}
{"command": "ldapdomaindump", "tasks": [{"task": "Dump all information using the given LDAP account:", "command": "ldapdomaindump --user {{domain}}\\\\{{administrator}} --password {{password|ntlm_hash}} {{hostname|ip}}"}, {"task": "Dump all information, resolving computer hostnames:", "command": "ldapdomaindump --resolve --user {{domain}}\\\\{{administrator}} --password {{password}} {{hostname|ip}}"}, {"task": "Dump all information, resolving computer hostnames with the selected DNS server:", "command": "ldapdomaindump --resolve --dns-server {{domain_controller_ip}} --user {{domain}}\\\\{{administrator}} --password {{password}} {{hostname|ip}}"}, {"task": "Dump all information to the given directory without JSON output:", "command": "ldapdomaindump --no-json --outdir {{path/to/directory}} --user {{domain}}\\\\{{administrator}} --password {{password}} {{hostname|ip}}"}]}
{"command": "ldconfig", "tasks": [{"task": "Update symlinks and rebuild the cache (usually run when a new library is installed):", "command": "sudo ldconfig"}, {"task": "Update the symlinks for a given directory:", "command": "sudo ldconfig -n {{path/to/directory}}"}, {"task": "Print the libraries in the cache and check whether a given library is present:", "command": "ldconfig -p | grep {{library_name}}"}]}
{"command": "ldd", "tasks": [{"task": "Display shared library dependencies of a binary:", "command": "ldd {{path/to/binary}}"}, {"task": "Display all information about dependencies:", "command": "ldd --verbose {{path/to/binary}}"}, {"task": "Display unused direct dependencies:", "command": "ldd --unused {{path/to/binary}}"}, {"task": "Report missing data objects and perform data relocations:", "command": "ldd --data-relocs {{path/to/binary}}"}, {"task": "Report missing data objects and functions, and perform relocations for both:", "command": "ldd --function-relocs {{path/to/binary}}"}]}
{"command": "lddd", "tasks": [{"task": "Scan directories to find and list packages with broken library links that need to be rebuilt:", "command": "lddd"}]}
{"command": "ledctl", "tasks": [{"task": "Turn on the \"Locate\" LED for specified device(s):", "command": "sudo ledctl locate={{/dev/sda,/dev/sdb,...}}"}, {"task": "Turn off the \"Locate\" LED for specified device(s):", "command": "sudo ledctl locate_off={{/dev/sda,/dev/sdb,...}}"}, {"task": "Turn off the \"Status\" LED and \"Failure\" LED for specified device(s):", "command": "sudo ledctl off={{/dev/sda,/dev/sdb,...}}"}, {"task": "Turn off the \"Status\" LED, \"Failure\" LED and \"Locate\" LED for specified device(s):", "command": "sudo ledctl normal={{/dev/sda,/dev/sdb,...}}"}]}
{"command": "legit", "tasks": [{"task": "Switch to a specified branch, stashing and restoring unstaged changes:", "command": "git switch {{target_branch}}"}, {"task": "Synchronize current branch, automatically merging or rebasing, and stashing and unstashing:", "command": "git sync"}, {"task": "Publish a specified branch to the remote server:", "command": "git publish {{branch_name}}"}, {"task": "Remove a branch from the remote server:", "command": "git unpublish {{branch_name}}"}, {"task": "List all branches and their publication status:", "command": "git branches {{glob_pattern}}"}, {"task": "Remove the last commit from the history:", "command": "git undo {{--hard}}"}]}
{"command": "lex", "tasks": [{"task": "Generate an analyzer from a Lex file:", "command": "lex {{analyzer.l}}"}, {"task": "Specify the output file:", "command": "lex {{analyzer.l}} --outfile {{analyzer.c}}"}, {"task": "Compile a C file generated by Lex:", "command": "cc {{path/to/lex.yy.c}} --output {{executable}}"}]}
{"command": "lftp", "tasks": [{"task": "Connect to an FTP server:", "command": "lftp --user {{username}} {{ftp.example.com}}"}, {"task": "Download multiple files (glob expression):", "command": "mget {{path/to/*.png}}"}, {"task": "Upload multiple files (glob expression):", "command": "mput {{path/to/*.zip}}"}, {"task": "Delete multiple files on the remote server:", "command": "mrm {{path/to/*.txt}}"}, {"task": "Rename a file on the remote server:", "command": "mv {{original_filename}} {{new_filename}}"}, {"task": "Download or update an entire directory:", "command": "mirror {{path/to/remote_dir}} {{path/to/local_output_dir}}"}, {"task": "Upload or update an entire directory:", "command": "mirror -R {{path/to/local_dir}} {{path/to/remote_output_dir}}"}]}
{"command": "libreoffice", "tasks": [{"task": "Open a space-separated list of files in read-only mode:", "command": "libreoffice --view {{path/to/file1}} {{path/to/file2}}"}, {"task": "Display the content of specific files:", "command": "libreoffice --cat {{path/to/file1}} {{path/to/file2}}"}, {"task": "Print files to a specific printer:", "command": "libreoffice --pt {{printer_name}} {{path/to/file1}} {{path/to/file2}}"}, {"task": "Convert all `.doc` files in current directory to PDF:", "command": "libreoffice --convert-to {{pdf}} {{*.doc}}"}]}
{"command": "light", "tasks": [{"task": "Get the current backlight value in percent:", "command": "light"}, {"task": "Set the backlight value to 50 percent:", "command": "light -S {{50}}"}, {"task": "Reduce 20 percent from the current backlight value:", "command": "light -U {{20}}"}, {"task": "Add 20 percent to the current backlight value:", "command": "light -A {{20}}"}]}
{"command": "line", "tasks": [{"task": "Read input:", "command": "line"}]}
{"command": "links", "tasks": [{"task": "Visit a website:", "command": "links {{https://example.com}}"}, {"task": "Apply restrictions for anonymous account:", "command": "links -anonymous {{https://example.com}}"}, {"task": "Enable Cookies (`1` to enable):", "command": "links -enable-cookies {{0|1}} {{https://example.com}}"}, {"task": "Navigate forwards and backwards through the links on a page:", "command": "Up arrow key, Down arrow key"}, {"task": "Go forwards and backwards one page:", "command": "Left arrow key, Right arrow key"}, {"task": "Exit:", "command": "q then y"}]}
{"command": "lnav", "tasks": [{"task": "View logs of a program, specifying log files, directories or URLs:", "command": "lnav {{path/to/log_or_directory|url}}"}, {"task": "View logs of a specific remote host (SSH passwordless login required):", "command": "lnav {{ssh}} {{user}}@{{host1.example.com}}:{{/var/log/syslog.log}}"}, {"task": "Validate the format of log files against the configuration and report any errors:", "command": "lnav -C {{path/to/log_directory}}"}]}
{"command": "loadkeys", "tasks": [{"task": "Load a default keymap:", "command": "loadkeys --default"}, {"task": "Load default keymap when an unusual keymap is loaded and `-` sign cannot be found:", "command": "loadkeys defmap"}, {"task": "Create a kernel source table:", "command": "loadkeys --mktable"}, {"task": "Create a binary keymap:", "command": "loadkeys --bkeymap"}, {"task": "Search and parse keymap without action:", "command": "loadkeys --parse"}, {"task": "Load the keymap suppressing all output:", "command": "loadkeys --quiet"}, {"task": "Load a keymap from the specified file for the console:", "command": "loadkeys --console {{/dev/ttyN}} {{/path/to/file}}"}, {"task": "Use standard names for keymaps of different locales:", "command": "loadkeys --console {{/dev/ttyN}} {{uk}}"}]}
{"command": "locale", "tasks": [{"task": "List all global environment variables describing the user's locale:", "command": "locale"}, {"task": "List all available locales:", "command": "locale --all-locales"}, {"task": "Display all available locales and the associated metadata:", "command": "locale --all-locales --verbose"}, {"task": "Display the current date format:", "command": "locale date_fmt"}]}
{"command": "localectl", "tasks": [{"task": "Show the current settings of the system locale and keyboard mapping:", "command": "localectl"}, {"task": "List available locales:", "command": "localectl list-locales"}, {"task": "Set a system locale variable:", "command": "localectl set-locale {{LANG}}={{en_US.UTF-8}}"}, {"task": "List available keymaps:", "command": "localectl list-keymaps"}, {"task": "Set the system keyboard mapping for the console and X11:", "command": "localectl set-keymap {{us}}"}]}
{"command": "locate", "tasks": [{"task": "Look for pattern in the database. Note: the database is recomputed periodically (usually weekly or daily):", "command": "locate {{pattern}}"}, {"task": "Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`):", "command": "locate '*/{{filename}}'"}, {"task": "Recompute the database. You need to do it if you want to find recently added files:", "command": "sudo updatedb"}]}
{"command": "login", "tasks": [{"task": "Log in as a user:", "command": "login {{user}}"}, {"task": "Log in as user without authentication if user is preauthenticated:", "command": "login -f {{user}}"}, {"task": "Log in as user and preserve environment:", "command": "login -p {{user}}"}, {"task": "Log in as a user on a remote host:", "command": "login -h {{host}} {{user}}"}]}
{"command": "loginctl", "tasks": [{"task": "Print all current sessions:", "command": "loginctl list-sessions"}, {"task": "Print all properties of a specific session:", "command": "loginctl show-session {{session_id}} --all"}, {"task": "Print all properties of a specific user:", "command": "loginctl show-user {{username}}"}, {"task": "Print a specific property of a user:", "command": "loginctl show-user {{username}} --property={{property_name}}"}, {"task": "Execute a `loginctl` operation on a remote host:", "command": "loginctl list-users -H {{hostname}}"}]}
{"command": "logrotate", "tasks": [{"task": "Trigger a run manually:", "command": "logrotate {{path/to/logrotate.conf}} --force"}, {"task": "Run using a specific command to mail reports:", "command": "logrotate {{path/to/logrotate.conf}} --mail {{/usr/bin/mail_command}}"}, {"task": "Run without using a state (lock) file:", "command": "logrotate {{path/to/logrotate.conf}} --state /dev/null"}, {"task": "Run and skip the state (lock) file check:", "command": "logrotate {{path/to/logrotate.conf}} --skip-state-lock"}, {"task": "Tell `logrotate` to log verbose output into the log file:", "command": "logrotate {{path/to/logrotate.conf}} --log {{path/to/log_file}}"}]}
{"command": "logsave", "tasks": [{"task": "Execute command with specified argument(s) and save its output to log file:", "command": "logsave {{path/to/logfile}} {{command}}"}, {"task": "Take input from `stdin` and save it in a log file:", "command": "logsave {{logfile}} -"}, {"task": "Append the output to a log file, instead of replacing its current contents:", "command": "logsave -a {{logfile}} {{command}}"}, {"task": "Show verbose output:", "command": "logsave -v {{logfile}} {{command}}"}]}
{"command": "logwatch", "tasks": [{"task": "Analyze logs for a range of dates at a certain level of detail:", "command": "logwatch --range {{yesterday|today|all|help}} --detail {{low|medium|others}}'"}, {"task": "Restrict report to only include information for a selected service:", "command": "logwatch --range {{all}} --service {{apache|pam_unix|etc}}"}]}
{"command": "losetup", "tasks": [{"task": "List loop devices with detailed info:", "command": "losetup -a"}, {"task": "Attach a file to a given loop device:", "command": "sudo losetup /dev/{{loop}} /{{path/to/file}}"}, {"task": "Attach a file to a new free loop device and scan the device for partitions:", "command": "sudo losetup --show --partscan -f /{{path/to/file}}"}, {"task": "Attach a file to a read-only loop device:", "command": "sudo losetup --read-only /dev/{{loop}} /{{path/to/file}}"}, {"task": "Detach all loop devices:", "command": "sudo losetup -D"}, {"task": "Detach a given loop device:", "command": "sudo losetup -d /dev/{{loop}}"}]}
{"command": "lrunzip", "tasks": [{"task": "Decompress a file:", "command": "lrunzip {{filename.lrz}}"}, {"task": "Decompress a file using a specific number of processor threads:", "command": "lrunzip -p {{8}} {{filename.lrz}}"}, {"task": "Decompress a file and silently overwrite files if they exist:", "command": "lrunzip -f {{filename.lrz}}"}, {"task": "Keep broken or damaged files instead of deleting them when decompressing:", "command": "lrunzip -K {{filename.lrz}}"}, {"task": "Specify output file name and/or path:", "command": "lrunzip -o {{outfilename}} {{filename.lrz}}"}]}
{"command": "lrzip", "tasks": [{"task": "Compress a file with LZMA - slow compression, fast decompression:", "command": "lrzip {{filename}}"}, {"task": "Compress a file with BZIP2 - good middle ground for compression/speed:", "command": "lrzip -b {{filename}}"}, {"task": "Compress with ZPAQ - extreme compression, but very slow:", "command": "lrzip -z {{filename}}"}, {"task": "Compress with LZO - light compression, extremely fast decompression:", "command": "lrzip -l {{filename}}"}, {"task": "Compress a file and password protect/encrypt it:", "command": "lrzip -e {{filename}}"}, {"task": "Override the number of processor threads to use:", "command": "lrzip -p {{8}} {{filename}}"}]}
{"command": "lrztar", "tasks": [{"task": "Archive a directory with `tar`, then compress:", "command": "lrztar {{path/to/directory}}"}, {"task": "Same as above, with ZPAQ - extreme compression, but very slow:", "command": "lrztar -z {{path/to/directory}}"}, {"task": "Specify the output file:", "command": "lrztar -o {{path/to/file}} {{path/to/directory}}"}, {"task": "Override the number of processor threads to use:", "command": "lrztar -p {{8}} {{path/to/directory}}"}, {"task": "Force overwriting of existing files:", "command": "lrztar -f {{path/to/directory}}"}]}
{"command": "lrzuntar", "tasks": [{"task": "Decompress from a file to the current directory:", "command": "lrzuntar {{path/to/archive.tar.lrz}}"}, {"task": "Decompress from a file to the current directory using a specific number of processor threads:", "command": "lrzuntar -p {{8}} {{path/to/archive.tar.lrz}}"}, {"task": "Decompress from a file to the current directory and silently overwrite items that already exist:", "command": "lrzuntar -f {{archive.tar.lrz}}"}, {"task": "Specify the output path:", "command": "lrzuntar -O {{path/to/directory}} {{archive.tar.lrz}}"}, {"task": "Delete the compressed file after decompression:", "command": "lrzuntar -D {{path/to/archive.tar.lrz}}"}]}
{"command": "lsattr", "tasks": [{"task": "Display the attributes of the files in the current directory:", "command": "lsattr"}, {"task": "List the attributes of files in a particular path:", "command": "lsattr {{path}}"}, {"task": "List file attributes recursively in the current and subsequent directories:", "command": "lsattr -R"}, {"task": "Show attributes of all the files in the current directory, including hidden ones:", "command": "lsattr -a"}, {"task": "Display attributes of directories in the current directory:", "command": "lsattr -d"}]}
{"command": "lsb_release", "tasks": [{"task": "Print all available information:", "command": "lsb_release -a"}, {"task": "Print a description (usually the full name) of the operating system:", "command": "lsb_release -d"}, {"task": "Print only the operating system name (ID), suppressing the field name:", "command": "lsb_release -i -s"}, {"task": "Print the release number and codename of the distribution, suppressing the field names:", "command": "lsb_release -rcs"}]}
{"command": "lsblk", "tasks": [{"task": "List all storage devices in a tree-like format:", "command": "lsblk"}, {"task": "Also list empty devices:", "command": "lsblk -a"}, {"task": "Print the SIZE column in bytes rather than in a human-readable format:", "command": "lsblk -b"}, {"task": "Output info about filesystems:", "command": "lsblk -f"}, {"task": "Use ASCII characters for tree formatting:", "command": "lsblk -i"}, {"task": "Output info about block-device topology:", "command": "lsblk -t"}, {"task": "Exclude the devices specified by the comma-separated list of major device numbers:", "command": "lsblk -e {{1,7}}"}, {"task": "Display a customized summary using a comma-separated list of columns:", "command": "lsblk --output {{NAME}},{{SERIAL}},{{MODEL}},{{TRAN}},{{TYPE}},{{SIZE}},{{FSTYPE}},{{MOUNTPOINT}}"}]}
{"command": "lscpu", "tasks": [{"task": "Display information about all CPUs:", "command": "lscpu"}, {"task": "Display information in a table:", "command": "lscpu --extended"}, {"task": "Display only information about offline CPUs in a table:", "command": "lscpu --extended --offline"}]}
{"command": "lshw", "tasks": [{"task": "Launch the GUI:", "command": "sudo lshw -X"}, {"task": "List all hardware in tabular format:", "command": "sudo lshw -short"}, {"task": "List all disks and storage controllers in tabular format:", "command": "sudo lshw -class disk -class storage -short"}, {"task": "Save all network interfaces to an HTML file:", "command": "sudo lshw -class network -html > {{interfaces.html}}"}]}
{"command": "lslocks", "tasks": [{"task": "List all local system locks:", "command": "lslocks"}, {"task": "List locks with defined column headers:", "command": "lslocks --output {{PID}},{{COMMAND}},{{PATH}}"}, {"task": "List locks producing a raw output (no columns), and without column headers:", "command": "lslocks --raw --noheadings"}, {"task": "List locks by PID input:", "command": "lslocks --pid {{PID}}"}, {"task": "List locks with JSON output to `stdout`:", "command": "lslocks --json"}]}
{"command": "lslogins", "tasks": [{"task": "Display users in the system:", "command": "lslogins"}, {"task": "Display users belonging to a specific group:", "command": "lslogins --groups={{groups}}"}, {"task": "Display user accounts:", "command": "lslogins --user-accs"}, {"task": "Display last logins:", "command": "lslogins --last"}, {"task": "Display system accounts:", "command": "lslogins --system-accs"}, {"task": "Display supplementary groups:", "command": "lslogins --supp-groups"}]}
{"command": "lsmod", "tasks": [{"task": "List all currently loaded kernel modules:", "command": "lsmod"}]}
{"command": "lsns", "tasks": [{"task": "List all namespaces:", "command": "lsns"}, {"task": "List namespaces in JSON format:", "command": "lsns --json"}, {"task": "List namespaces associated with {{pid}}:", "command": "lsns --task {{pid}}"}, {"task": "List the specified type of namespaces only:", "command": "lsns --type <mnt|net|ipc|user|pid|uts|cgroup|time>"}, {"task": "List namespaces, only showing the namespace ID, type, PID, and command:", "command": "lsns --output NS,TYPE,PID,COMMAND"}]}
{"command": "lspci", "tasks": [{"task": "Show a brief list of devices:", "command": "lspci"}, {"task": "Display additional info:", "command": "lspci -v"}, {"task": "Display drivers and modules handling each device:", "command": "lspci -k"}, {"task": "Show a specific device:", "command": "lspci -s {{00:18.3}}"}, {"task": "Dump info in a readable form:", "command": "lspci -vm"}]}
{"command": "lsscsi", "tasks": [{"task": "List all SCSI devices:", "command": "lsscsi"}, {"task": "List all SCSI devices with detailed attributes:", "command": "lsscsi -L"}, {"task": "List all SCSI devices with human-readable disk capacity:", "command": "lsscsi -s"}]}
{"command": "lsusb", "tasks": [{"task": "List all the USB devices available:", "command": "lsusb"}, {"task": "List the USB hierarchy as a tree:", "command": "lsusb -t"}, {"task": "List verbose information about USB devices:", "command": "lsusb --verbose"}, {"task": "List detailed information about a USB device:", "command": "lsusb --verbose -s {{bus}}:{{device number}}"}, {"task": "List devices with a specified vendor and product ID only:", "command": "lsusb -d {{vendor}}:{{product}}"}]}
{"command": "ltrace", "tasks": [{"task": "Print (trace) library calls of a program binary:", "command": "ltrace ./{{program}}"}, {"task": "Count library calls. Print a handy summary at the bottom:", "command": "ltrace -c {{path/to/program}}"}, {"task": "Trace calls to malloc and free, omit those done by libc:", "command": "ltrace -e malloc+free-@libc.so* {{path/to/program}}"}, {"task": "Write to file instead of terminal:", "command": "ltrace -o {{file}} {{path/to/program}}"}]}
{"command": "lvcreate", "tasks": [{"task": "Create a logical volume of 10 gigabytes in the volume group vg1:", "command": "lvcreate -L {{10G}} {{vg1}}"}, {"task": "Create a 1500 megabyte linear logical volume named mylv in the volume group vg1:", "command": "lvcreate -L {{1500}} -n {{mylv}} {{vg1}}"}, {"task": "Create a logical volume called mylv that uses 60% of the total space in volume group vg1:", "command": "lvcreate -l {{60%VG}} -n {{mylv}} {{vg1}}"}, {"task": "Create a logical volume called mylv that uses all the unallocated space in the volume group vg1:", "command": "lvcreate -l {{100%FREE}} -n {{mylv}} {{vg1}}"}]}
{"command": "lvdisplay", "tasks": [{"task": "Display information about all logical volumes:", "command": "sudo lvdisplay"}, {"task": "Display information about all logical volumes in volume group vg1:", "command": "sudo lvdisplay {{vg1}}"}, {"task": "Display information about logical volume lv1 in volume group vg1:", "command": "sudo lvdisplay {{vg1/lv1}}"}]}
{"command": "lvextend", "tasks": [{"task": "Increase a volume's size to 120 GB:", "command": "lvextend --size {{120G}} {{logical_volume}}"}, {"task": "Increase a volume's size by 40 GB as well as the underlying filesystem:", "command": "lvextend --size +{{40G}} -r {{logical_volume}}"}, {"task": "Increase a volume's size to 100% of the free physical volume space:", "command": "lvextend --size {{100}}%FREE {{logical_volume}}"}]}
{"command": "lvm", "tasks": [{"task": "Start the Logical Volume Manager interactive shell:", "command": "sudo lvm"}, {"task": "List the Logical Volume Manager commands:", "command": "sudo lvm help"}, {"task": "Initialize a drive or partition to be used as a physical volume:", "command": "sudo lvm pvcreate {{/dev/sdXY}}"}, {"task": "Display information about physical volumes:", "command": "sudo lvm pvdisplay"}, {"task": "Create a volume group called vg1 from the physical volume on `/dev/sdXY`:", "command": "sudo lvm vgcreate {{vg1}} {{/dev/sdXY}}"}, {"task": "Display information about volume groups:", "command": "sudo lvm vgdisplay"}, {"task": "Create a logical volume with size 10G from volume group vg1:", "command": "sudo lvm lvcreate -L {{10G}} {{vg1}}"}, {"task": "Display information about logical volumes:", "command": "sudo lvm lvdisplay"}]}
{"command": "lvreduce", "tasks": [{"task": "Reduce a volume's size to 120 GB:", "command": "lvreduce --size {{120G}} {{logical_volume}}"}, {"task": "Reduce a volume's size by 40 GB as well as the underlying filesystem:", "command": "lvreduce --size -{{40G}} -r {{logical_volume}}"}]}
{"command": "lvremove", "tasks": [{"task": "Remove a logical volume in a volume group:", "command": "sudo lvremove {{volume_group}}/{{logical_volume}}"}, {"task": "Remove all logical volumes in a volume group:", "command": "sudo lvremove {{volume_group}}"}]}
{"command": "lvresize", "tasks": [{"task": "Change the size of a logical volume to 120 GB:", "command": "lvresize --size {{120G}} {{volume_group}}/{{logical_volume}}"}, {"task": "Extend the size of a logical volume as well as the underlying filesystem by 120 GB:", "command": "lvresize --size +{{120G}} --resizefs {{volume_group}}/{{logical_volume}}"}, {"task": "Extend the size of a logical volume to 100% of the free physical volume space:", "command": "lvresize --size {{100}}%FREE {{volume_group}}/{{logical_volume}}"}, {"task": "Reduce the size of a logical volume as well as the underlying filesystem by 120 GB:", "command": "lvresize --size -{{120G}} --resizefs {{volume_group}}/{{logical_volume}}"}]}
{"command": "lvs", "tasks": [{"task": "Display information about logical volumes:", "command": "lvs"}, {"task": "Display all logical volumes:", "command": "lvs -a"}, {"task": "Change default display to show more details:", "command": "lvs -v"}, {"task": "Display only specific fields:", "command": "lvs -o {{field_name_1}},{{field_name_2}}"}, {"task": "Append field to default display:", "command": "lvs -o +{{field_name}}"}, {"task": "Suppress heading line:", "command": "lvs --noheadings"}, {"task": "Use a separator to separate fields:", "command": "lvs --separator {{=}}"}]}
{"command": "lxc network", "tasks": [{"task": "List all available networks:", "command": "lxc network list"}, {"task": "Show the configuration of a specific network:", "command": "lxc network show {{network_name}}"}, {"task": "Add a running instance to a specific network:", "command": "lxc network attach {{network_name}} {{container_name}}"}, {"task": "Create a new managed network:", "command": "lxc network create {{network_name}}"}, {"task": "Set a bridge interface of a specific network:", "command": "lxc network set {{network_name}} bridge.external_interfaces {{eth0}}"}, {"task": "Disable NAT for a specific network:", "command": "lxc network set {{network_name}} ipv{{4}}.nat false"}]}
{"command": "lxc profile", "tasks": [{"task": "List all available profiles:", "command": "lxc profile list"}, {"task": "Show the configuration of a specific profile:", "command": "lxc profile show {{profile_name}}"}, {"task": "Edit a specific profile in the default editor:", "command": "lxc profile edit {{profile_name}}"}, {"task": "Edit a specific profile importing the configuration values from a file:", "command": "lxc profile edit {{profile_name}} < {{config.yaml}}"}, {"task": "Launch a new container with specific profiles:", "command": "lxc launch {{container_image}} {{container_name}} --profile {{profile1}} --profile {{profile2}}"}, {"task": "Change the profiles of a running container:", "command": "lxc profile assign {{container_name}} {{profile1,profile2}}"}]}
{"command": "lxc", "tasks": [{"task": "List local containers matching a string. Omit the string to list all local containers:", "command": "lxc list {{match_string}}"}, {"task": "List images matching a string. Omit the string to list all images:", "command": "lxc image list [{{remote}}:]{{match_string}}"}, {"task": "Create a new container from an image:", "command": "lxc init [{{remote}}:]{{image}} {{container}}"}, {"task": "Start a container:", "command": "lxc start [{{remote}}:]{{container}}"}, {"task": "Stop a container:", "command": "lxc stop [{{remote}}:]{{container}}"}, {"task": "Show detailed info about a container:", "command": "lxc info [{{remote}}:]{{container}}"}, {"task": "Take a snapshot of a container:", "command": "lxc snapshot [{{remote}}:]{{container}} {{snapshot}}"}, {"task": "Execute a specific command inside a container:", "command": "lxc exec [{{remote}}:]{{container}} {{command}}"}]}
{"command": "lxi", "tasks": [{"task": "Discover LXI devices on available networks:", "command": "lxi discover"}, {"task": "Capture a screenshot, detecting a plugin automatically:", "command": "lxi screenshot --address {{ip_address}}"}, {"task": "Capture a screenshot using a specified plugin:", "command": "lxi screenshot --address {{ip_address}} --plugin {{rigol-1000z}}"}, {"task": "Send an SCPI command to an instrument:", "command": "lxi scpi --address {{ip_address}} \"{{*IDN?}}\""}, {"task": "Run a benchmark for request and response performance:", "command": "lxi benchmark --address {{ip_address}}"}]}
{"command": "lxterminal", "tasks": [{"task": "Open an LXTerminal window:", "command": "lxterminal"}, {"task": "Open an LXTerminal window, run a command, and then exit:", "command": "lxterminal -e \"{{command}}\""}, {"task": "Open an LXTerminal window with multiple tabs:", "command": "lxterminal --tabs={{tab_name1,tab_name2,...}}"}, {"task": "Open an LXTerminal window with a specific title:", "command": "lxterminal --title={{title_name}}"}, {"task": "Open an LXTerminal window with a specific working directory:", "command": "lxterminal --working-directory={{path/to/directory}}"}]}
{"command": "lynis", "tasks": [{"task": "Check that Lynis is up-to-date:", "command": "sudo lynis update info"}, {"task": "Run a security audit of the system:", "command": "sudo lynis audit system"}, {"task": "Run a security audit of a Dockerfile:", "command": "sudo lynis audit dockerfile {{path/to/dockerfile}}"}]}
{"command": "mac2unix", "tasks": [{"task": "Change the line endings of a file:", "command": "mac2unix {{filename}}"}, {"task": "Create a copy with Unix-style line endings:", "command": "mac2unix -n {{filename}} {{new_filename}}"}]}
{"command": "macchanger", "tasks": [{"task": "View the current and permanent MAC addresses of a interface:", "command": "macchanger --show {{interface}}"}, {"task": "Set interface to a random MAC:", "command": "macchanger --random {{interface}}"}, {"task": "Set interface to a specific MAC:", "command": "macchanger --mac {{XX:XX:XX:XX:XX:XX}} {{interface}}"}, {"task": "Reset interface to its permanent hardware MAC:", "command": "macchanger --permanent {{interface}}"}]}
{"command": "maim", "tasks": [{"task": "Capture a screenshot and save it to the given path:", "command": "maim {{path/to/screenshot.png}}"}, {"task": "Capture a screenshot of the selected region:", "command": "maim --select {{path/to/screenshot.png}}"}, {"task": "Capture a screenshot of the selected region and save it in the clipboard (requires `xclip`):", "command": "maim --select | xclip -selection clipboard -target image/png"}, {"task": "Capture a screenshot of the current active window (requires `xdotool`):", "command": "maim --window $(xdotool getactivewindow) {{path/to/screenshot.png}}"}]}
{"command": "makepkg", "tasks": [{"task": "Make a package:", "command": "makepkg"}, {"task": "Make a package and install its dependencies:", "command": "makepkg --syncdeps"}, {"task": "Make a package, install its dependencies then install it to the system:", "command": "makepkg --syncdeps --install"}, {"task": "Make a package, but skip checking the source's hashes:", "command": "makepkg --skipchecksums"}, {"task": "Clean up work directories after a successful build:", "command": "makepkg --clean"}, {"task": "Verify the hashes of the sources:", "command": "makepkg --verifysource"}, {"task": "Generate and save the source information into `.SRCINFO`:", "command": "makepkg --printsrcinfo > .SRCINFO"}]}
{"command": "man", "tasks": [{"task": "Display the man page for a command:", "command": "man {{command}}"}, {"task": "Display the man page for a command from section 7:", "command": "man {{7}} {{command}}"}, {"task": "List all available sections for a command:", "command": "man --whatis {{command}}"}, {"task": "Display the path searched for manpages:", "command": "man --path"}, {"task": "Display the location of a manpage rather than the manpage itself:", "command": "man --where {{command}}"}, {"task": "Display the man page using a specific locale:", "command": "man --locale={{locale}} {{command}}"}, {"task": "Search for manpages containing a search string:", "command": "man --apropos \"{{search_string}}\""}]}
{"command": "mandb", "tasks": [{"task": "Purge and process manual pages:", "command": "mandb"}, {"task": "Update a single entry:", "command": "mandb --filename {{path/to/file}}"}, {"task": "Create entries from scratch instead of updating:", "command": "mandb --create"}, {"task": "Only process user databases:", "command": "mandb --user-db"}, {"task": "Do not purge obsolete entries:", "command": "mandb --no-purge"}, {"task": "Check the validity of manual pages:", "command": "mandb --test"}]}
{"command": "manpath", "tasks": [{"task": "Display the search path used to find man pages:", "command": "manpath"}, {"task": "Show the entire global manpath:", "command": "manpath --global"}]}
{"command": "mashtree", "tasks": [{"task": "Fastest method in mashtree to create a tree from fastq and/or fasta files using multiple threads, piping into a newick file:", "command": "mashtree --numcpus {{12}} {{*.fastq.gz}} {{*.fasta}} > {{mashtree.dnd}}"}, {"task": "Most accurate method in mashtree to create a tree from fastq and/or fasta files using multiple threads, piping into a newick file:", "command": "mashtree --mindepth {{0}} --numcpus {{12}} {{*.fastq.gz}} {{*.fasta}} > {{mashtree.dnd}}"}, {"task": "Most accurate method to create a tree with confidence values (note that any options for `mashtree` itself has to be on the right side of the `--`):", "command": "mashtree_bootstrap.pl --reps {{100}} --numcpus {{12}} {{*.fastq.gz}} -- --min-depth {{0}} > {{mashtree.bootstrap.dnd}}"}]}
{"command": "mate-about", "tasks": [{"task": "Print MATE version:", "command": "mate-about --version"}]}
{"command": "mate-calc-cmd", "tasks": [{"task": "Start an interactive calculator session:", "command": "mate-calc-cmd"}, {"task": "Calculate a specific mathematic expression:", "command": "{{2 + 5}}"}]}
{"command": "mate-calc", "tasks": [{"task": "Start the calculator:", "command": "mate-calc"}, {"task": "Calculate a specific mathematic expression:", "command": "mate-calc --solve {{2 + 5}}"}]}
{"command": "mate-screenshot", "tasks": [{"task": "Create a fullscreen screenshot:", "command": "mate-screenshot"}, {"task": "Create an active window screenshot:", "command": "mate-screenshot --window"}, {"task": "Create a specific area screenshot:", "command": "mate-screenshot --area"}, {"task": "Create a screenshot interactively:", "command": "mate-screenshot --interactive"}, {"task": "Create a screenshot without borders:", "command": "mate-screenshot --window --remove-border"}, {"task": "Create a screenshot with a specific effect:", "command": "mate-screenshot --effect={{shadow|border|none}}"}, {"task": "Create a screenshot with a specific delay in seconds:", "command": "mate-screenshot --delay={{5}}"}]}
{"command": "mate-search-tool", "tasks": [{"task": "Search files containing a specific string in their name in a specific directory:", "command": "mate-search-tool --named={{string}} --path={{path/to/directory}}"}, {"task": "Search files without waiting a user confirmation:", "command": "mate-search-tool --start --named={{string}} --path={{path/to/directory}}"}, {"task": "Search files with name matching a specific regular expression:", "command": "mate-search-tool --start --regex={{string}} --path={{path/to/directory}}"}, {"task": "Set a sorting order in search results:", "command": "mate-search-tool --start --named={{string}} --path={{path/to/directory}} --sortby={{name|folder|size|type|date}}"}, {"task": "Set a descending sorting order:", "command": "mate-search-tool --start --named={{string}} --path={{path/to/directory}} --descending"}, {"task": "Search files owned by a specific user/group:", "command": "mate-search-tool --start --{{user|group}}={{value}} --path={{path/to/directory}}"}]}
{"command": "mcookie", "tasks": [{"task": "Generate a random number:", "command": "mcookie"}, {"task": "Generate a random number, using the contents of a file as a seed for the randomness:", "command": "mcookie --file {{path/to/file}}"}, {"task": "Generate a random number, using a specific number of bytes from a file as a seed for the randomness:", "command": "mcookie --file {{path/to/file}} --max-size {{number_of_bytes}}"}, {"task": "Print the details of the randomness used, such as the origin and seed for each source:", "command": "mcookie --verbose"}]}
{"command": "mdadm", "tasks": [{"task": "Create array:", "command": "sudo mdadm --create {{/dev/md/MyRAID}} --level {{raid_level}} --raid-devices {{number_of_disks}} {{/dev/sdXN}}"}, {"task": "Stop array:", "command": "sudo mdadm --stop {{/dev/md0}}"}, {"task": "Mark disk as failed:", "command": "sudo mdadm --fail {{/dev/md0}} {{/dev/sdXN}}"}, {"task": "Remove disk:", "command": "sudo mdadm --remove {{/dev/md0}} {{/dev/sdXN}}"}, {"task": "Add disk to array:", "command": "sudo mdadm --assemble {{/dev/md0}} {{/dev/sdXN}}"}, {"task": "Show RAID info:", "command": "sudo mdadm --detail {{/dev/md0}}"}, {"task": "Reset disk by deleting RAID metadata:", "command": "sudo mdadm --zero-superblock {{/dev/sdXN}}"}]}
{"command": "mdbook", "tasks": [{"task": "Create a mdbook project in the current directory:", "command": "mdbook init"}, {"task": "Create a mdbook project in a specific directory:", "command": "mdbook init {{path/to/directory}}"}, {"task": "Clean the directory with the generated book:", "command": "mdbook clean"}, {"task": "Serve a book at `http://localhost:3000`, auto build when file changes:", "command": "mdbook serve"}, {"task": "Watch a set of Markdown files and automatically build when a file is changed:", "command": "mdbook watch"}]}
{"command": "mediamtx", "tasks": [{"task": "Run MediaMTX:", "command": "mediamtx"}, {"task": "Run MediaMTX with a custom config location:", "command": "mediamtx {{path/to/config}}.yml"}, {"task": "Start MediaMTX as a daemon:", "command": "systemctl start mediamtx"}]}
{"command": "Medusa", "tasks": [{"task": "Execute brute force against an FTP server using a file containing usernames and a file containing passwords:", "command": "medusa -M ftp -h host -U {{path/to/username_file}} -P {{path/to/password_file}}"}, {"task": "Execute a login attempt against an HTTP server using the username, password and user-agent specified:", "command": "medusa -M HTTP -h host -u {{username}} -p {{password}} -m USER-AGENT:\"{{Agent}}\""}, {"task": "Execute a brute force against a MySQL server using a file containing usernames and a hash:", "command": "medusa -M mysql -h host -U {{path/to/username_file}} -p {{hash}} -m PASS:HASH"}, {"task": "Execute a brute force against a list of SMB servers using a username and a pwdump file:", "command": "medusa -M smbnt -H {{path/to/hosts_file}} -C {{path/to/pwdump_file}} -u {{username}} -m PASS:HASH"}]}
{"command": "megadl", "tasks": [{"task": "View documentation for the original command:", "command": "tldr megatools-dl"}]}
{"command": "megatools-dl", "tasks": [{"task": "Download files from a `mega.nz` link into the current directory:", "command": "megatools-dl {{https://mega.nz/...}}"}, {"task": "Download files from a `mega.nz` link into a specific directory:", "command": "megatools-dl --path {{path/to/directory}} {{https://mega.nz/...}}"}, {"task": "Interactively choose which files to download:", "command": "megatools-dl --choose-files {{https://mega.nz/...}}"}, {"task": "Limit the download speed in KiB/s:", "command": "megatools-dl --limit-speed {{speed}} {{https://mega.nz/...}}"}]}
{"command": "microcom", "tasks": [{"task": "Open a serial port using the specified baud rate:", "command": "microcom --port {{path/to/serial_port}} --speed {{baud_rate}}"}, {"task": "Establish a telnet connection to the specified host:", "command": "microcom --telnet {{hostname}}:{{port}}"}]}
{"command": "mimetype", "tasks": [{"task": "Print the MIME type of a given file:", "command": "mimetype {{path/to/file}}"}, {"task": "Display only the MIME type, and not the filename:", "command": "mimetype --brief {{path/to/file}}"}, {"task": "Display a description of the MIME type:", "command": "mimetype --describe {{path/to/file}}"}, {"task": "Determine the MIME type of `stdin` (does not check a filename):", "command": "{{command}} | mimetype --stdin"}, {"task": "Display debug information about how the MIME type was determined:", "command": "mimetype --debug {{path/to/file}}"}, {"task": "Display all the possible MIME types of a given file in confidence order:", "command": "mimetype --all {{path/to/file}}"}, {"task": "Explicitly specify the 2-letter language code of the output:", "command": "mimetype --language {{path/to/file}}"}]}
{"command": "minicom", "tasks": [{"task": "Open a given serial port:", "command": "sudo minicom --device {{/dev/ttyUSB0}}"}, {"task": "Open a given serial port with a given baud rate:", "command": "sudo minicom --device {{/dev/ttyUSB0}} --baudrate {{115200}}"}, {"task": "Enter the configuration menu before communicating with a given serial port:", "command": "sudo minicom --device {{/dev/ttyUSB0}} --setup"}]}
{"command": "mke2fs", "tasks": [{"task": "Create an ext2 filesystem in partition 1 of device b (`sdb1`):", "command": "mkfs.ext2 {{/dev/sdb1}}"}, {"task": "Create an ext3 filesystem in partition 1 of device b (`sdb1`):", "command": "mkfs.ext3 {{/dev/sdb1}}"}, {"task": "Create an ext4 filesystem in partition 1 of device b (`sdb1`):", "command": "mkfs.ext4 {{/dev/sdb1}}"}]}
{"command": "mkfs.btrfs", "tasks": [{"task": "Create a btrfs filesystem on a single device:", "command": "sudo mkfs.btrfs --metadata single --data single {{/dev/sda}}"}, {"task": "Create a btrfs filesystem on multiple devices with raid1:", "command": "sudo mkfs.btrfs --metadata raid1 --data raid1 {{/dev/sda}} {{/dev/sdb}} {{/dev/sdN}}"}, {"task": "Set a label for the filesystem:", "command": "sudo mkfs.btrfs --label \"{{label}}\" {{/dev/sda}} [{{/dev/sdN}}]"}]}
{"command": "mkfs.cramfs", "tasks": [{"task": "Create a ROM filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.cramfs {{/dev/sdb1}}"}, {"task": "Create a ROM filesystem with a volume-name:", "command": "mkfs.cramfs -n {{volume_name}} {{/dev/sdb1}}"}]}
{"command": "mkfs.exfat", "tasks": [{"task": "Create an exfat filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.exfat {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-name:", "command": "mkfs.exfat -n {{volume_name}} {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-id:", "command": "mkfs.exfat -i {{volume_id}} {{/dev/sdb1}}"}]}
{"command": "mkfs.ext4", "tasks": [{"task": "Create an ext4 filesystem inside partition 1 on device b (`sdb1`):", "command": "sudo mkfs.ext4 {{/dev/sdb1}}"}, {"task": "Create an ext4 filesystem with a volume-label:", "command": "sudo mkfs.ext4 -L {{volume_label}} {{/dev/sdb1}}"}]}
{"command": "mkfs.fat", "tasks": [{"task": "Create a fat filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.fat {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-name:", "command": "mkfs.fat -n {{volume_name}} {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-id:", "command": "mkfs.fat -i {{volume_id}} {{/dev/sdb1}}"}, {"task": "Use 5 instead of 2 file allocation tables:", "command": "mkfs.fat -f 5 {{/dev/sdb1}}"}]}
{"command": "mkfs", "tasks": [{"task": "Build a Linux ext2 filesystem on a partition:", "command": "mkfs {{path/to/partition}}"}, {"task": "Build a filesystem of a specified type:", "command": "mkfs -t {{ext4}} {{path/to/partition}}"}, {"task": "Build a filesystem of a specified type and check for bad blocks:", "command": "mkfs -c -t {{ntfs}} {{path/to/partition}}"}]}
{"command": "mkfs.minix", "tasks": [{"task": "Create a Minix filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.minix {{/dev/sdb1}}"}]}
{"command": "mkfs.ntfs", "tasks": [{"task": "Create a NTFS filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.ntfs {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-label:", "command": "mkfs.ntfs -L {{volume_label}} {{/dev/sdb1}}"}, {"task": "Create filesystem with specific UUID:", "command": "mkfs.ntfs -U {{UUID}} {{/dev/sdb1}}"}]}
{"command": "mkfs.vfat", "tasks": [{"task": "Create a vfat filesystem inside partition 1 on device b (`sdb1`):", "command": "mkfs.vfat {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-name:", "command": "mkfs.vfat -n {{volume_name}} {{/dev/sdb1}}"}, {"task": "Create filesystem with a volume-id:", "command": "mkfs.vfat -i {{volume_id}} {{/dev/sdb1}}"}, {"task": "Use 5 instead of 2 file allocation tables:", "command": "mkfs.vfat -f 5 {{/dev/sdb1}}"}]}
{"command": "mkhomedir_helper", "tasks": [{"task": "Create a home directory for a user based on `/etc/skel` with umask 022:", "command": "sudo mkhomedir_helper {{username}}"}, {"task": "Create a home directory for a user based on `/etc/skel` with all permissions for owner (0) and read permission for group (3):", "command": "sudo mkhomedir_helper {{username}} {{037}}"}, {"task": "Create a home directory for a user based on a custom skeleton:", "command": "sudo mkhomedir_helper {{username}} {{umask}} {{path/to/skeleton_directory}}"}]}
{"command": "mkinitcpio", "tasks": [{"task": "Perform a dry run (print what would be done without actually doing it):", "command": "mkinitcpio"}, {"task": "Generate a ramdisk environment based on the `linux` preset:", "command": "mkinitcpio --preset {{linux}}"}, {"task": "Generate a ramdisk environment based on the `linux-lts` preset:", "command": "mkinitcpio --preset {{linux-lts}}"}, {"task": "Generate ramdisk environments based on all existing presets (used to regenerate all the initramfs images after a change in `/etc/mkinitcpio.conf`):", "command": "mkinitcpio --allpresets"}, {"task": "Generate an initramfs image using an alternative configuration file:", "command": "mkinitcpio --config {{path/to/mkinitcpio.conf}} --generate {{path/to/initramfs.img}}"}, {"task": "Generate an initramfs image for a kernel other than the one currently running (the installed kernel releases can be found in `/usr/lib/modules/`):", "command": "mkinitcpio --kernel {{kernel_version}} --generate {{path/to/initramfs.img}}"}, {"task": "List all available hooks:", "command": "mkinitcpio --listhooks"}, {"task": "Display help for a specific hook:", "command": "mkinitcpio --hookhelp {{hook_name}}"}]}
{"command": "mkisofs", "tasks": [{"task": "Create an ISO from a directory:", "command": "mkisofs -o {{filename.iso}} {{path/to/source_directory}}"}, {"task": "Set the disc label when creating an ISO:", "command": "mkisofs -o {{filename.iso}} -V \"{{label_name}}\" {{path/to/source_directory}}"}]}
{"command": "mklost+found", "tasks": [{"task": "Create a `lost+found` directory in the current directory:", "command": "mklost+found"}]}
{"command": "mknod", "tasks": [{"task": "Create a block device:", "command": "sudo mknod {{path/to/device_file}} b {{major_device_number}} {{minor_device_number}}"}, {"task": "Create a character device:", "command": "sudo mknod {{path/to/device_file}} c {{major_device_number}} {{minor_device_number}}"}, {"task": "Create a FIFO (queue) device:", "command": "sudo mknod {{path/to/device_file}} p"}, {"task": "Create a device file with default SELinux security context:", "command": "sudo mknod -Z {{path/to/device_file}} {{type}} {{major_device_number}} {{minor_device_number}}"}]}
{"command": "mksquashfs", "tasks": [{"task": "Create or append files and directories to a squashfs filesystem (compressed using `gzip` by default):", "command": "mksquashfs {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} {{filesystem.squashfs}}"}, {"task": "Create or append files and directories to a squashfs filesystem, using a specific [comp]ression algorithm:", "command": "mksquashfs {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} {{filesystem.squashfs}} -comp {{gzip|lzo|lz4|xz|zstd|lzma}}"}, {"task": "Create or append files and directories to a squashfs filesystem, [e]xcluding some of them:", "command": "mksquashfs {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} {{filesystem.squashfs}} -e {{file|directory1 file|directory2 ...}}"}, {"task": "Create or append files and directories to a squashfs filesystem, [e]xcluding those ending with `.gz`:", "command": "mksquashfs {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} {{filesystem.squashfs}} -wildcards -e \"{{*.gz}}\""}, {"task": "Create or append files and directories to a squashfs filesystem, [e]xcluding those matching a regular expression:", "command": "mksquashfs {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} {{filesystem.squashfs}} -regex -e \"{{regular_expression}}\""}]}
{"command": "mkswap", "tasks": [{"task": "Set up a given swap area:", "command": "sudo mkswap {{path/to/file}}"}, {"task": "Check a partition for bad blocks before creating the swap area:", "command": "sudo mkswap -c {{path/to/file}}"}, {"task": "Specify a label for the partition (to allow `swapon` to use the label):", "command": "sudo mkswap -L {{label}} {{/dev/sda1}}"}]}
{"command": "mktemp", "tasks": [{"task": "Create an empty temporary file and print the absolute path to it:", "command": "mktemp"}, {"task": "Create an empty temporary file with a given suffix and print the absolute path to file:", "command": "mktemp --suffix \"{{.ext}}\""}, {"task": "Create a temporary directory and print the absolute path to it:", "command": "mktemp --directory"}]}
{"command": "mlabel", "tasks": [{"task": "Set a filesystem label:", "command": "mlabel -i /dev/{{sda}} ::\"{{new_label}}\""}]}
{"command": "mmcli", "tasks": [{"task": "List available modems:", "command": "mmcli --list-modems"}, {"task": "Print information about a modem:", "command": "mmcli --modem={{modem}}"}, {"task": "Enable a modem:", "command": "mmcli --modem={{modem}} --enable"}, {"task": "List SMS messages available on the modem:", "command": "sudo mmcli --modem={{modem}} --messaging-list-sms"}, {"task": "Delete a message from the modem, specifying its path:", "command": "sudo mmcli --modem={{modem}} --messaging-delete-sms={{path/to/message_file}}"}]}
{"command": "mmdebstrap", "tasks": [{"task": "Create a Debian Stable directory chroot:", "command": "sudo mmdebstrap stable {{path/to/debian-root/}}"}, {"task": "Create a Debian Bookworm tarball chroot using a mirror:", "command": "mmdebstrap bookworm {{path/to/debian-bookworm.tar}} {{http://mirror.example.org/debian}}"}, {"task": "Create a Debian Sid tarball chroot with additional packages:", "command": "mmdebstrap sid {{path/to/debian-sid.tar}} --include={{pkg1,pkg2}}"}]}
{"command": "mocp", "tasks": [{"task": "Launch the MOC terminal UI:", "command": "mocp"}, {"task": "Launch the MOC terminal UI in a specific directory:", "command": "mocp {{path/to/directory}}"}, {"task": "Start the MOC server in the background, without launching the MOC terminal UI:", "command": "mocp --server"}, {"task": "Add a specific song to the play queue while MOC is in the background:", "command": "mocp --enqueue {{path/to/audio_file}}"}, {"task": "Add songs recursively to the play queue while MOC is in the background:", "command": "mocp --append {{path/to/directory}}"}, {"task": "Clear the play queue while MOC is in the background:", "command": "mocp --clear"}, {"task": "Play or stop the currently queued song while MOC is in the background:", "command": "mocp --{{play|stop}}"}, {"task": "Stop the MOC server while it's in the background:", "command": "mocp --exit"}]}
{"command": "modinfo", "tasks": [{"task": "List all attributes of a kernel module:", "command": "modinfo {{kernel_module}}"}, {"task": "List the specified attribute only:", "command": "modinfo -F {{author|description|license|parm|filename}} {{kernel_module}}"}]}
{"command": "modprobe", "tasks": [{"task": "Pretend to load a module into the kernel, but don't actually do it:", "command": "sudo modprobe --dry-run {{module_name}}"}, {"task": "Load a module into the kernel:", "command": "sudo modprobe {{module_name}}"}, {"task": "Remove a module from the kernel:", "command": "sudo modprobe --remove {{module_name}}"}, {"task": "Remove a module and those that depend on it from the kernel:", "command": "sudo modprobe --remove-dependencies {{module_name}}"}, {"task": "Show a kernel module's dependencies:", "command": "sudo modprobe --show-depends {{module_name}}"}]}
{"command": "module", "tasks": [{"task": "Display available modules:", "command": "module avail"}, {"task": "Search for a module by name:", "command": "module avail {{module_name}}"}, {"task": "Load a module:", "command": "module load {{module_name}}"}, {"task": "Display loaded modules:", "command": "module list"}, {"task": "Unload a specific loaded module:", "command": "module unload {{module_name}}"}, {"task": "Unload all loaded modules:", "command": "module purge"}, {"task": "Specify user-created modules:", "command": "module use {{path/to/modulefiles}}"}]}
{"command": "mokutil", "tasks": [{"task": "Show if Secure Boot is enabled:", "command": "mokutil --sb-state"}, {"task": "Enable Secure Boot:", "command": "mokutil --enable-validation"}, {"task": "Disable Secure Boot:", "command": "mokutil --disable-validation"}, {"task": "List enrolled keys:", "command": "mokutil --list-enrolled"}, {"task": "Enroll a new key:", "command": "mokutil --import {{path/to/key.der}}"}, {"task": "List the keys to be enrolled:", "command": "mokutil --list-new"}, {"task": "Set shim verbosity:", "command": "mokutil --set-verbosity true"}]}
{"command": "mono", "tasks": [{"task": "Run a .NET assembly in debug mode:", "command": "mono --debug {{path/to/program.exe}}"}, {"task": "Run a .NET assembly:", "command": "mono {{path/to/program.exe}}"}]}
{"command": "mons", "tasks": [{"task": "Enable only the primary monitor:", "command": "mons -o"}, {"task": "Enable only the secondary monitor:", "command": "mons -s"}, {"task": "Duplicate the primary monitor onto the secondary monitor, using the resolution of the primary monitor:", "command": "mons -d"}, {"task": "Mirror the primary monitor onto the secondary monitor, using the resolution of the secondary monitor:", "command": "mons -m"}]}
{"command": "mount.cifs", "tasks": [{"task": "Connect using the specified username or `$USER` by default (you will be prompted for a password):", "command": "mount.cifs -o user={{username}} //{{server}}/{{share_name}} {{mountpoint}}"}, {"task": "Connect as the guest user (without a password):", "command": "mount.cifs -o guest //{{server}}/{{share_name}} {{mountpoint}}"}, {"task": "Set ownership information for the mounted directory:", "command": "mount.cifs -o uid={{user_id|username}},gid={{group_id|groupname}} //{{server}}/{{share_name}} {{mountpoint}}"}]}
{"command": "mount.smb3", "tasks": [{"task": "View documentation for the original command:", "command": "tldr mount.cifs"}]}
{"command": "mountpoint", "tasks": [{"task": "Check if a directory is a mountpoint:", "command": "mountpoint {{path/to/directory}}"}, {"task": "Check if a directory is a mountpoint without showing any output:", "command": "mountpoint -q {{path/to/directory}}"}, {"task": "Show major/minor numbers of a mountpoint's filesystem:", "command": "mountpoint --fs-devno {{path/to/directory}}"}]}
{"command": "mpg123", "tasks": [{"task": "Play the specified mp3 files:", "command": "mpg123 {{path/to/file1.mp3 path/to/file2.mp3 ...}}"}, {"task": "Play the mp3 from `stdin`:", "command": "cat {{file.mp3}} | mpg123 -"}, {"task": "Jump forward to the next song:", "command": "f"}, {"task": "Jump back to the beginning for the song:", "command": "b"}, {"task": "Stop or replay the current file:", "command": "s"}, {"task": "Fast forward:", "command": "."}, {"task": "Quit:", "command": "q"}]}
{"command": "mpicc", "tasks": [{"task": "Compile a source code file into an object file:", "command": "mpicc -c {{path/to/file.c}}"}, {"task": "Link an object file and make an executable:", "command": "mpicc -o {{executable}} {{path/to/object_file.o}}"}, {"task": "Compile and link source code in a single command:", "command": "mpicc -o {{executable}} {{path/to/file.c}}"}]}
{"command": "mpstat", "tasks": [{"task": "Display CPU statistics every 2 seconds:", "command": "mpstat {{2}}"}, {"task": "Display 5 reports, one by one, at 2 second intervals:", "command": "mpstat {{2}} {{5}}"}, {"task": "Display 5 reports, one by one, from a given processor, at 2 second intervals:", "command": "mpstat -P {{0}} {{2}} {{5}}"}]}
{"command": "mssh", "tasks": [{"task": "Open a new window and connect to multiple SSH servers:", "command": "mssh {{user@host1}} {{user@host2}} {{...}}"}, {"task": "Open a new window and connect to a group of servers predefined in `~/.mssh_clusters`:", "command": "mssh --alias {{alias_name}}"}]}
{"command": "mt", "tasks": [{"task": "Check the status of a tape drive:", "command": "mt -f {{/dev/nstX}} status"}, {"task": "Rewind the tape to beginning:", "command": "mt -f {{/dev/nstX}} rewind"}, {"task": "Move forward a given files, then position the tape on first block of next file:", "command": "mt -f {{/dev/nstX}} fsf {{count}}"}, {"task": "Rewind the tape, then position the tape at beginning of the given file:", "command": "mt -f {{/dev/nstX}} asf {{count}}"}, {"task": "Position the tape at the end of valid data:", "command": "mt -f {{/dev/nstX}} eod"}, {"task": "Rewind the tape and unload/eject it:", "command": "mt -f {{/dev/nstX}} eject"}, {"task": "Write EOF (End-of-file) mark at the current position:", "command": "mt -f {{/dev/nstX} eof"}]}
{"command": "mycli", "tasks": [{"task": "Connect to a database with the currently logged in user:", "command": "mycli {{database_name}}"}, {"task": "Connect to a database with the specified user:", "command": "mycli -u {{user}} {{database_name}}"}, {"task": "Connect to a database on the specified host with the specified user:", "command": "mycli -u {{user}} -h {{host}} {{database_name}}"}]}
{"command": "nala", "tasks": [{"task": "Install a package, or update it to the latest available version:", "command": "sudo nala install {{package}}"}, {"task": "Remove a package:", "command": "sudo nala remove {{package}}"}, {"task": "Remove a package and its configuration files:", "command": "nala purge {{package}}"}, {"task": "Search package names and descriptions using a word, regex (default) or glob:", "command": "nala search \"{{pattern}}\""}, {"task": "Update the list of available packages and upgrade the system:", "command": "sudo nala upgrade"}, {"task": "Remove all unused packages and dependencies from your system:", "command": "sudo nala autoremove"}, {"task": "Fetch fast mirrors to improve download speeds:", "command": "sudo nala fetch"}, {"task": "Display the history of all transactions:", "command": "nala history"}]}
{"command": "namcap", "tasks": [{"task": "Check a specific `PKGBUILD` file:", "command": "namcap {{path/to/pkgbuild}}"}, {"task": "Check a specific package file:", "command": "namcap {{path/to/package.pkg.tar.zst}}"}, {"task": "Check a file, printing extra [i]nformational messages:", "command": "namcap -i {{path/to/file}}"}]}
{"command": "named", "tasks": [{"task": "Read the default configuration file `/etc/named.conf`, read any initial data and listen for queries:", "command": "named"}, {"task": "Read a custom configuration file:", "command": "named -c {{path/to/named.conf}}"}, {"task": "Use IPv4 or IPv6 only, even if the host machine is capable of utilising other protocols:", "command": "named {{-4|-6}}"}, {"task": "Listen for queries on a specific port instead of the default port 53:", "command": "named -p {{port}}"}, {"task": "Run the server in the foreground and do not daemonize:", "command": "named -f"}]}
{"command": "namei", "tasks": [{"task": "Resolve the pathnames specified as the argument parameters:", "command": "namei {{path/to/a}} {{path/to/b}} {{path/to/c}}"}, {"task": "Display the results in a long-listing format:", "command": "namei --long {{path/to/a}} {{path/to/b}} {{path/to/c}}"}, {"task": "Show the mode bits of each file type in the style of `ls`:", "command": "namei --modes {{path/to/a}} {{path/to/b}} {{path/to/c}}"}, {"task": "Show owner and group name of each file:", "command": "namei --owners {{path/to/a}} {{path/to/b}} {{path/to/c}}"}, {"task": "Don't follow symlinks while resolving:", "command": "namei --nosymlinks {{path/to/a}} {{path/to/b}} {{path/to/c}}"}]}
{"command": "nautilus", "tasks": [{"task": "Launch Nautilus:", "command": "nautilus"}, {"task": "Launch Nautilus as root user:", "command": "sudo nautilus"}, {"task": "Launch Nautilus and display a specific directory:", "command": "nautilus {{path/to/directory}}"}, {"task": "Launch Nautilus with a specific file or directory selected:", "command": "nautilus --select {{path/to/file_or_directory}}"}, {"task": "Launch Nautilus in a separated window:", "command": "nautilus --new-window"}, {"task": "Close all Nautilus instances:", "command": "nautilus --quit"}, {"task": "Display help:", "command": "nautilus --help"}]}
{"command": "ncal", "tasks": [{"task": "View documentation for the original command:", "command": "tldr cal"}]}
{"command": "ncat", "tasks": [{"task": "Listen for input on the specified port and write it to the specified file:", "command": "ncat -l {{port}} > {{path/to/file}}"}, {"task": "Accept multiple connections and keep ncat open after they have been closed:", "command": "ncat -lk {{port}}"}, {"task": "Write output of specified file to the specified host on the specified port:", "command": "ncat {{address}} {{port}} < {{path/to/file}}"}]}
{"command": "ndctl", "tasks": [{"task": "Create an 'fsdax' mode namespace:", "command": "ndctl create-namespace --mode={{fsdax}}"}, {"task": "Change the mode of a namespace to 'raw':", "command": "ndctl create-namespace --reconfigure={{namespaceX.Y}} --mode={{raw}}"}, {"task": "Check a sector mode namespace for consistency, and repair if needed:", "command": "ndctl check-namespace --repair {{namespaceX.Y}}"}, {"task": "List all namespaces, regions, and buses (including disabled ones):", "command": "ndctl list --namespaces --regions --buses --idle"}, {"task": "List a specific namespace and include lots of additional information:", "command": "ndctl list -vvv --namespace={{namespaceX.Y}}"}, {"task": "Run a monitor to watch for SMART health events for NVDIMMs on the 'ACPI.NFIT' bus:", "command": "ndctl monitor --bus={{ACPI.NFIT}}"}, {"task": "Remove a namespace (when applicable) or reset it to an initial state:", "command": "ndctl destroy-namespace --force {{namespaceX.Y}}"}]}
{"command": "needrestart", "tasks": [{"task": "List outdated processes:", "command": "needrestart"}, {"task": "Interactively restart services:", "command": "sudo needrestart"}, {"task": "List outdated processes in [v]erbose or [q]uiet mode:", "command": "needrestart -{{v|q}}"}, {"task": "Check if the [k]ernel is outdated:", "command": "needrestart -k"}, {"task": "Check if the CPU microcode is outdated:", "command": "needrestart -w"}, {"task": "List outdated processes in [b]atch mode:", "command": "needrestart -b"}, {"task": "List outdated processed using a specific [c]onfiguration file:", "command": "needrestart -c {{path/to/config}}"}, {"task": "Display help:", "command": "needrestart --help"}]}
{"command": "nemo", "tasks": [{"task": "Open the current user home directory:", "command": "nemo"}, {"task": "Open specific directories in separate windows:", "command": "nemo {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Open specific directories in tabs:", "command": "nemo --tabs {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Open a directory with a specific window size:", "command": "nemo --geometry={{600}}x{{400}} {{path/to/directory}}"}, {"task": "Close all windows:", "command": "nemo --quit"}]}
{"command": "nethogs", "tasks": [{"task": "Start NetHogs as root (default device is `eth0`):", "command": "sudo nethogs"}, {"task": "Monitor bandwidth on specific device:", "command": "sudo nethogs {{device}}"}, {"task": "Monitor bandwidth on multiple devices:", "command": "sudo nethogs {{device1}} {{device2}}"}, {"task": "Specify refresh rate:", "command": "sudo nethogs -t {{seconds}}"}]}
{"command": "netselect-apt", "tasks": [{"task": "Create `sources.list` using the lowest latency server:", "command": "sudo netselect-apt"}, {"task": "Specify Debian branch, stable is used by default:", "command": "sudo netselect-apt {{testing}}"}, {"task": "Include non-free section:", "command": "sudo netselect-apt --non-free"}, {"task": "Specify a country for the mirror list lookup:", "command": "sudo netselect-apt -c {{India}}"}]}
{"command": "netselect", "tasks": [{"task": "Choose the server with the lowest latency:", "command": "sudo netselect {{host_1}} {{host_2}}"}, {"task": "Display nameserver resolution and statistics:", "command": "sudo netselect -vv {{host_1}} {{host_2}}"}, {"task": "Define maximum TTL (time to live):", "command": "sudo netselect -m {{10}} {{host_1}} {{host_2}}"}, {"task": "Print fastest N servers among the hosts:", "command": "sudo netselect -s {{N}} {{host_1}} {{host_2}} {{host_3}}"}, {"task": "List available options:", "command": "netselect"}]}
{"command": "networkctl", "tasks": [{"task": "Show a list of existing links and their status:", "command": "networkctl list"}, {"task": "Show an overall network status:", "command": "networkctl status"}, {"task": "Bring network devices up:", "command": "networkctl up {{interface1 interface2 ...}}"}, {"task": "Bring network devices down:", "command": "networkctl down {{interface1 interface2 ...}}"}, {"task": "Renew dynamic configurations (e.g. IP addresses received from a DHCP server):", "command": "networkctl renew {{interface1 interface2 ...}}"}, {"task": "Reload configuration files (.netdev and .network):", "command": "networkctl reload"}, {"task": "Reconfigure network interfaces (if you edited the config, you need to call `networkctl reload` first):", "command": "networkctl reconfigure {{interface1 interface2 ...}}"}]}
{"command": "newgrp", "tasks": [{"task": "Change user's primary group membership:", "command": "newgrp {{group_name}}"}, {"task": "Reset primary group membership to user's default group in `/etc/passwd`:", "command": "newgrp"}]}
{"command": "nft", "tasks": [{"task": "View current configuration:", "command": "sudo nft list ruleset"}, {"task": "Add a new table with family \"inet\" and table \"filter\":", "command": "sudo nft add table {{inet}} {{filter}}"}, {"task": "Add a new chain to accept all inbound traffic:", "command": "sudo nft add chain {{inet}} {{filter}} {{input}} \\{ type {{filter}} hook {{input}} priority {{0}} \\; policy {{accept}} \\}"}, {"task": "Add a new rule to accept several TCP ports:", "command": "sudo nft add rule {{inet}} {{filter}} {{input}} {{tcp}} {{dport \\{ telnet, ssh, http, https \\} accept}}"}, {"task": "Add a NAT rule to translate all traffic from the `192.168.0.0/24` subnet to the host's public IP:", "command": "sudo nft add rule {{nat}} {{postrouting}} ip saddr {{192.168.0.0/24}} {{masquerade}}"}, {"task": "Show rule handles:", "command": "sudo nft --handle --numeric list chain {{family}} {{table}} {{chain}}"}, {"task": "Delete a rule:", "command": "sudo nft delete rule {{inet}} {{filter}} {{input}} handle {{3}}"}, {"task": "Save current configuration:", "command": "sudo nft list ruleset > {{/etc/nftables.conf}}"}]}
{"command": "nitrogen", "tasks": [{"task": "View and set the wallpapers from a specific directory:", "command": "nitrogen {{path/to/directory}}"}, {"task": "Set the wallpaper with automatic size settings:", "command": "nitrogen --set-auto {{path/to/file}}"}, {"task": "Restore the previous wallpaper:", "command": "nitrogen --restore"}]}
{"command": "nixos-container", "tasks": [{"task": "List running containers:", "command": "sudo nixos-container list"}, {"task": "Create a NixOS container with a specific configuration file:", "command": "sudo nixos-container create {{container_name}} --config-file {{nix_config_file_path}}"}, {"task": "Start, stop, terminate, or destroy a specific container:", "command": "sudo nixos-container {{start|stop|terminate|destroy|status}} {{container_name}}"}, {"task": "Run a command in a running container:", "command": "sudo nixos-container run {{container_name}} -- {{command}} {{command_arguments}}"}, {"task": "Update a container configuration:", "command": "sudo $EDITOR /var/lib/container/{{container_name}}/etc/nixos/configuration.nix && sudo nixos-container update {{container_name}}"}, {"task": "Enter an interactive shell session on an already-running container:", "command": "sudo nixos-container root-login {{container_name}}"}]}
{"command": "nixos-option", "tasks": [{"task": "List all subkeys of a given option key:", "command": "nixos-option {{option_key}}"}, {"task": "List current boot kernel modules:", "command": "nixos-option boot.kernelModules"}, {"task": "List authorized keys for a specific user:", "command": "nixos-option users.users.{{username}}.openssh.authorizedKeys.{{keyFiles|keys}}"}, {"task": "List all remote builders:", "command": "nixos-option nix.buildMachines"}, {"task": "List all subkeys of a given key on another NixOS configuration:", "command": "NIXOS_CONFIG={{path_to_configuration.nix}} nixos-option {{option_key}}"}, {"task": "Show recursively all values of a user:", "command": "nixos-option -r users.users.{{user}}"}]}
{"command": "nixos-rebuild", "tasks": [{"task": "Build and switch to the new configuration, making it the boot default:", "command": "sudo nixos-rebuild switch"}, {"task": "Build and switch to the new configuration, making it the boot default and naming the boot entry:", "command": "sudo nixos-rebuild switch -p {{name}}"}, {"task": "Build and switch to the new configuration, making it the boot default and installing updates:", "command": "sudo nixos-rebuild switch --upgrade"}, {"task": "Rollback changes to the configuration, switching to the previous generation:", "command": "sudo nixos-rebuild switch --rollback"}, {"task": "Build the new configuration and make it the boot default without switching to it:", "command": "sudo nixos-rebuild boot"}, {"task": "Build and activate the new configuration, but don't make a boot entry (for testing purposes):", "command": "sudo nixos-rebuild test"}, {"task": "Build the configuration and open it in a virtual machine:", "command": "sudo nixos-rebuild build-vm"}]}
{"command": "nm-online", "tasks": [{"task": "Find out whether the network is connected and print the result to `stdout`:", "command": "nm-online"}, {"task": "Wait `n` seconds for a connection (30 by default):", "command": "nm-online --timeout {{n}}"}]}
{"command": "nmcli agent", "tasks": [{"task": "Register `nmcli` as a secret agent and listen for secret requests:", "command": "nmcli agent secret"}, {"task": "Register `nmcli` as a polkit agent and listen for authorization requests:", "command": "nmcli agent polkit"}, {"task": "Register `nmcli` as a secret agent and a polkit agent:", "command": "nmcli agent all"}]}
{"command": "nmcli connection", "tasks": [{"task": "List all NetworkManager connections (shows name, UUID, type and device):", "command": "nmcli connection"}, {"task": "Activate a connection:", "command": "nmcli connection up uuid {{uuid}}"}, {"task": "Deactivate a connection:", "command": "nmcli connection down uuid {{uuid}}"}, {"task": "Create an auto-configured dual stack connection:", "command": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ipv4.method {{auto}} ipv6.method {{auto}}"}, {"task": "Create a static IPv6-only connection:", "command": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ip6 {{2001:db8::2/64}} gw6 {{2001:db8::1}} ipv6.dns {{2001:db8::1}} ipv4.method {{ignore}}"}, {"task": "Create a static IPv4-only connection:", "command": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ip4 {{10.0.0.7/8}} gw4 {{10.0.0.1}} ipv4.dns {{10.0.0.1}} ipv6.method {{ignore}}"}, {"task": "Create a VPN connection using OpenVPN from an OVPN file:", "command": "nmcli connection import type {{openvpn}} file {{path/to/vpn_config.ovpn}}"}]}
{"command": "nmcli device", "tasks": [{"task": "Print the statuses of all network interfaces:", "command": "nmcli device status"}, {"task": "Print the available Wi-Fi access points:", "command": "nmcli device wifi"}, {"task": "Connect to a Wi-Fi network with the specified SSID (you will be prompted for a password):", "command": "nmcli --ask device wifi connect {{ssid}}"}, {"task": "Print the password and QR code for the current Wi-Fi network:", "command": "nmcli device wifi show-password"}]}
{"command": "nmcli general", "tasks": [{"task": "Show the general status of NetworkManager:", "command": "nmcli general"}, {"task": "Show the hostname of the current device:", "command": "nmcli general hostname"}, {"task": "Change the hostname of the current device:", "command": "sudo nmcli general hostname {{new_hostname}}"}, {"task": "Show the permissions of NetworkManager:", "command": "nmcli general permissions"}, {"task": "Show the current logging level and domains:", "command": "nmcli general logging"}, {"task": "Set the logging level and/or domains (see `man NetworkManager.conf` for all available domains):", "command": "nmcli general logging level {{INFO|OFF|ERR|WARN|DEBUG|TRACE}} domain {{domain_1,domain_2,...}}"}]}
{"command": "nmcli monitor", "tasks": [{"task": "Start monitoring NetworkManager changes:", "command": "nmcli monitor"}]}
{"command": "nmcli networking", "tasks": [{"task": "Show the networking status of NetworkManager:", "command": "nmcli networking"}, {"task": "Enable or disable networking and all interfaces managed by NetworkManager:", "command": "nmcli networking {{on|off}}"}, {"task": "Show the last known connectivity state:", "command": "nmcli networking connectivity"}, {"task": "Show the current connectivity state:", "command": "nmcli networking connectivity check"}]}
{"command": "nmcli radio", "tasks": [{"task": "Show status of Wi-Fi:", "command": "nmcli radio wifi"}, {"task": "Turn Wi-Fi on or off:", "command": "nmcli radio wifi {{on|off}}"}, {"task": "Show status of WWAN:", "command": "nmcli radio wwan"}, {"task": "Turn WWAN on or off:", "command": "nmcli radio wwan {{on|off}}"}, {"task": "Show status of both switches:", "command": "nmcli radio all"}, {"task": "Turn both switches on or off:", "command": "nmcli radio all {{on|off}}"}]}
{"command": "nmcli", "tasks": [{"task": "View documentation for running `nmcli` as a NetworkManager secret/polkit agent:", "command": "tldr nmcli agent"}, {"task": "View documentation for managing network connections:", "command": "tldr nmcli connection"}, {"task": "View documentation for managing network interfaces and establishing new Wi-Fi connections:", "command": "tldr nmcli device"}, {"task": "View documentation for managing general settings of NetworkManager:", "command": "tldr nmcli general"}, {"task": "View documentation for NetworkManager's activity monitor:", "command": "tldr nmcli monitor"}, {"task": "View documentation for enabling/disabling and checking the status of networking:", "command": "tldr nmcli networking"}, {"task": "View documentation for managing radio switches:", "command": "tldr nmcli radio"}]}
{"command": "nmon", "tasks": [{"task": "Start `nmon`:", "command": "nmon"}, {"task": "Save records to file (\"-s 300 -c 288\" by default):", "command": "nmon -f"}, {"task": "Save records to file with a total of 240 measurements, by taking 30 seconds between each measurement:", "command": "nmon -f -s {{30}} -c {{240}}"}]}
{"command": "nmtui-connect", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nmtui"}]}
{"command": "nmtui-edit", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nmtui"}]}
{"command": "nmtui-hostname", "tasks": [{"task": "View documentation for the original command:", "command": "tldr nmtui"}]}
{"command": "nmtui", "tasks": [{"task": "Open the user interface:", "command": "nmtui"}, {"task": "Show a list of available connections, with the option to activate or deactivate them:", "command": "nmtui connect"}, {"task": "Connect to a given network:", "command": "nmtui connect {{name|uuid|device|SSID}}"}, {"task": "Edit/Add/Delete a given network:", "command": "nmtui edit {{name|id}}"}, {"task": "Set the system hostname:", "command": "nmtui hostname"}]}
{"command": "nologin", "tasks": [{"task": "Set a user's login shell to `nologin` to prevent the user from logging in:", "command": "chsh -s {{user}} nologin"}, {"task": "Customize message for users with the login shell of `nologin`:", "command": "echo \"{{declined_login_message}}\" > /etc/nologin.txt"}]}
{"command": "nordvpn", "tasks": [{"task": "Interactively log into a NordVPN account:", "command": "nordvpn login"}, {"task": "Display the connection status:", "command": "nordvpn status"}, {"task": "Connect to the nearest NordVPN server:", "command": "nordvpn connect"}, {"task": "List all available countries:", "command": "nordvpn countries"}, {"task": "Connect to a NordVPN server in a specific country:", "command": "nordvpn connect {{Germany}}"}, {"task": "Connect to a NordVPN server in a specific country and city:", "command": "nordvpn connect {{Germany}} {{Berlin}}"}, {"task": "Set autoconnect option:", "command": "nordvpn set autoconnect on"}]}
{"command": "notify-send", "tasks": [{"task": "Show a notification with the title \"Test\" and the content \"This is a test\":", "command": "notify-send \"{{Test}}\" \"{{This is a test}}\""}, {"task": "Show a notification with a custom icon:", "command": "notify-send -i {{icon.png}} \"{{Test}}\" \"{{This is a test}}\""}, {"task": "Show a notification for 5 seconds:", "command": "notify-send -t 5000 \"{{Test}}\" \"{{This is a test}}\""}, {"task": "Show a notification with an app's icon and name:", "command": "notify-send \"{{Test}}\" --icon={{google-chrome}} --app-name=\"{{Google Chrome}}\""}]}
{"command": "nova", "tasks": [{"task": "List VMs on current tenant:", "command": "nova list"}, {"task": "List VMs of all tenants (admin user only):", "command": "nova list --all-tenants"}, {"task": "Boot a VM on a specific host:", "command": "nova boot --nic net-id={{net_id}} --image {{image_id}} --flavor {{flavor}} --availability-zone nova:{{host_name}} {{vm_name}}"}, {"task": "Start a server:", "command": "nova start {{server}}"}, {"task": "Stop a server:", "command": "nova stop {{server}}"}, {"task": "Attach a network interface to a specific VM:", "command": "nova interface-attach --net-id {{net_id}} {{server}}"}]}
{"command": "nsenter", "tasks": [{"task": "Run a specific command using the same namespaces as an existing process:", "command": "nsenter --target {{pid}} --all {{command}} {{command_arguments}}"}, {"task": "Run a specific command in an existing process's network namespace:", "command": "nsenter --target {{pid}} --net {{command}} {{command_arguments}}"}, {"task": "Run a specific command in an existing process's PID namespace:", "command": "nsenter --target {{pid}} --pid {{command}} {{command_arguments}}"}, {"task": "Run a specific command in an existing process's IPC namespace:", "command": "nsenter --target {{pid}} --ipc {{command}} {{command_arguments}}"}, {"task": "Run a specific command in an existing process's UTS, time, and IPC namespaces:", "command": "nsenter --target {{pid}} --uts --time --ipc -- {{command}} {{command_arguments}}"}, {"task": "Run a specific command in an existing process's namespace by referencing procfs:", "command": "nsenter --pid=/proc/{{pid}}/pid/net -- {{command}} {{command_arguments}}"}]}
{"command": "nsnake", "tasks": [{"task": "Start a snake game:", "command": "nsnake"}, {"task": "Navigate the snake:", "command": "{{Up|Down|Left|Right}} arrow key"}, {"task": "Pause/unpause the game:", "command": "p"}, {"task": "Quit the game:", "command": "q"}, {"task": "Show help during the game:", "command": "h"}]}
{"command": "nsxiv", "tasks": [{"task": "Open images:", "command": "nsxiv {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open images from directories in image mode:", "command": "nsxiv {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Search directories recursively for images to view:", "command": "nsxiv -r {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Quit nsxiv:", "command": "q"}, {"task": "Switch to thumbnail mode or open selected image in image mode:", "command": "Return"}, {"task": "Count images forward in image mode:", "command": "n"}, {"task": "Count images backward in image mode:", "command": "p"}]}
{"command": "ntfsfix", "tasks": [{"task": "Fix a given NTFS partition:", "command": "sudo ntfsfix {{/dev/sdXN}}"}]}
{"command": "ntpdate", "tasks": [{"task": "Synchronize and set date and time:", "command": "sudo ntpdate {{host}}"}, {"task": "Query the host without setting the time:", "command": "ntpdate -q {{host}}"}, {"task": "Use an unprivileged port in case a firewall is blocking privileged ports:", "command": "sudo ntpdate -u {{host}}"}, {"task": "Force time to be stepped using `settimeofday` instead of `slewed`:", "command": "sudo ntpdate -b {{host}}"}]}
{"command": "ntpq", "tasks": [{"task": "Start `ntpq` in interactive mode:", "command": "ntpq --interactive"}, {"task": "Print a list of NTP peers:", "command": "ntpq --peers"}, {"task": "Print a list of NTP peers without resolving hostnames from IP addresses:", "command": "ntpq --numeric --peers"}, {"task": "Use `ntpq` in debugging mode:", "command": "ntpq --debug-level"}, {"task": "Print NTP system variables values:", "command": "ntpq --command={{rv}}"}]}
{"command": "numactl", "tasks": [{"task": "Run a command on node 0 with memory allocated on node 0 and 1:", "command": "numactl --cpunodebind={{0}} --membind={{0,1}} -- {{command}} {{command_arguments}}"}, {"task": "Run a command on CPUs (cores) 0-4 and 8-12 of the current cpuset:", "command": "numactl --physcpubind={{+0-4,8-12}} -- {{command}} {{command_arguments}}"}, {"task": "Run a command with its memory interleaved on all CPUs:", "command": "numactl --interleave={{all}} -- {{command}} {{command_arguments}}"}]}
{"command": "numlockx", "tasks": [{"task": "Show the current number lock status:", "command": "numlockx status"}, {"task": "Turn the number lock on:", "command": "numlockx on"}, {"task": "Turn the number lock off:", "command": "numlockx off"}, {"task": "Toggle the current state:", "command": "numlockx toggle"}]}
{"command": "obabel", "tasks": [{"task": "Convert a .mol file to XYZ coordinates:", "command": "obabel {{path/to/file.mol}} -O {{path/to/output_file.xyz}}"}, {"task": "Convert a SMILES string to a 500x500 picture:", "command": "obabel -:\"{{SMILES}} -O {{path/to/output_file.png}} -xp 500"}, {"task": "Convert a file of SMILES string to separate 3D .mol files:", "command": "obabel {{path/to/file.smi}} -O {{path/to/output_file.mol}} --gen3D -m"}, {"task": "Render multiple inputs into one picture:", "command": "obabel {{path/to/file1}} {{path/to/file2}} -O {{path/to/output_file.png}}"}]}
{"command": "oomctl", "tasks": [{"task": "Show the current state of the cgroups and system contexts stored by `systemd-oomd`:", "command": "oomctl dump"}]}
{"command": "openfortivpn", "tasks": [{"task": "Connect to a VPN with a username and password:", "command": "openfortivpn --username={{username}} --password={{password}}"}, {"task": "Connect to a VPN using a specific configuration file (defaults to `/etc/openfortivpn/config`):", "command": "sudo openfortivpn --config={{path/to/config}}"}, {"task": "Connect to a VPN by specifying the host and port:", "command": "openfortivpn {{host}}:{{port}}"}, {"task": "Trust a given gateway by passing in its certificate's sha256 sum:", "command": "openfortivpn --trusted-cert={{sha256_sum}}"}]}
{"command": "openrc", "tasks": [{"task": "Change to a specific runlevel:", "command": "sudo openrc {{runlevel_name}}"}, {"task": "Change to a specific runlevel, but don't stop any existing services:", "command": "sudo openrc --no-stop {{runlevel_name}}"}]}
{"command": "openvpn3", "tasks": [{"task": "Start a new VPN session:", "command": "openvpn3 session-start --config {{path/to/config.conf}}"}, {"task": "List established sessions:", "command": "openvpn3 sessions-list"}, {"task": "Disconnect the currently established session started with given configuration:", "command": "openvpn3 session-manage --config {{path/to/config.conf}} --disconnect"}, {"task": "Import VPN configuration:", "command": "openvpn3 config-import --config {{path/to/config.conf}}"}, {"task": "List imported configurations:", "command": "openvpn3 configs-list"}]}
{"command": "opkg", "tasks": [{"task": "Install a package:", "command": "opkg install {{package}}"}, {"task": "Remove a package:", "command": "opkg remove {{package}}"}, {"task": "Update the list of available packages:", "command": "opkg update"}, {"task": "Upgrade all the installed packages:", "command": "opkg upgrade"}, {"task": "Upgrade one or more specific package(s):", "command": "opkg upgrade {{package(s)}}"}, {"task": "Display information for a specific package:", "command": "opkg info {{package}}"}, {"task": "List all the available packages:", "command": "opkg list"}]}
{"command": "ostree", "tasks": [{"task": "Initialize a repository of the files in `$PWD` with metadata in `$PWD/{{path/to/repo}}`:", "command": "ostree init --repo {{path/to/repo}}"}, {"task": "Create a commit (snapshot) of the files:", "command": "ostree commit --repo {{path/to/repo}} --branch {{branch_name}}"}, {"task": "Show files in commit:", "command": "ostree ls --repo {{path/to/repo}} {{commit_id}}"}, {"task": "Show metadata of commit:", "command": "ostree show --repo {{path/to/repo}} {{commit_id}}"}, {"task": "Show list of commits:", "command": "ostree log --repo {{path/to/repo}} {{branch_name}}"}, {"task": "Show repo summary:", "command": "ostree summary --repo {{path/to/repo}} --view"}, {"task": "Show available refs (branches):", "command": "ostree refs --repo {{path/to/repo}}"}]}
{"command": "pacaur", "tasks": [{"task": "Synchronize and update all packages (includes AUR):", "command": "pacaur -Syu"}, {"task": "Synchronize and update only AUR packages:", "command": "pacaur -Syua"}, {"task": "Install a new package (includes AUR):", "command": "pacaur -S {{package_name}}"}, {"task": "Remove a package and its dependencies (includes AUR packages):", "command": "pacaur -Rs {{package_name}}"}, {"task": "Search the package database for a keyword (includes AUR):", "command": "pacaur -Ss {{keyword}}"}, {"task": "List all currently installed packages (includes AUR packages):", "command": "pacaur -Qs"}]}
{"command": "paccache", "tasks": [{"task": "Remove all but the 3 most recent package versions from the pacman cache:", "command": "paccache -r"}, {"task": "Set the number of package versions to keep:", "command": "paccache -rk {{num_versions}}"}, {"task": "Perform a dry-run and show the number of candidate packages for deletion:", "command": "paccache -d"}, {"task": "Move candidate packages to a directory instead of deleting them:", "command": "paccache -m {{path/to/directory}}"}]}
{"command": "pacdiff", "tasks": [{"task": "Review files that need maintenance in interactive mode:", "command": "pacdiff"}, {"task": "Use sudo and sudoedit to remove and merge files:", "command": "pacdiff --sudo"}, {"task": "Review files needing maintenance, creating `.bak`ups of the original if you `(O)verwrite`:", "command": "pacdiff --sudo --backup"}, {"task": "Use a specific editor to view and merge configuration files (default is `vim -d`):", "command": "DIFFPROG={{editor}} pacdiff"}, {"task": "Scan for configuration files with `locate` instead of using pacman database:", "command": "pacdiff --locate"}, {"task": "Display help:", "command": "pacdiff --help"}]}
{"command": "pacman --database", "tasks": [{"task": "Mark a package as implicitly installed:", "command": "sudo pacman --database --asdeps {{package_name}}"}, {"task": "Mark a package as explicitly installed:", "command": "sudo pacman --database --asexplicit {{package_name}}"}, {"task": "Check that all the package dependencies are installed:", "command": "pacman --database --check"}, {"task": "Check the repositories to ensure all specified dependencies are available:", "command": "pacman --database --check --check"}, {"task": "Display only error messages:", "command": "pacman --database --check --quiet"}, {"task": "Display help:", "command": "pacman --database --help"}]}
{"command": "pacman --deptest", "tasks": [{"task": "Print the package names of the dependencies that aren't installed:", "command": "pacman --deptest {{package_name1}} {{package_name2}}"}, {"task": "Check if the installed package satisfies the given minimum version:", "command": "pacman --deptest \"{{bash>=5}}\""}, {"task": "Check if a later version of a package is installed:", "command": "pacman --deptest \"{{bash>5}}\""}, {"task": "Display help:", "command": "pacman --deptest --help"}]}
{"command": "pacman --files", "tasks": [{"task": "Update the package database:", "command": "sudo pacman --files --refresh"}, {"task": "Find the package that owns a specific file:", "command": "pacman --files {{filename}}"}, {"task": "Find the package that owns a specific file, using a regular expression:", "command": "pacman --files --regex '{{regular_expression}}'"}, {"task": "List only the package names:", "command": "pacman --files --quiet {{filename}}"}, {"task": "List the files owned by a specific package:", "command": "pacman --files --list {{package_name}}"}, {"task": "Display help:", "command": "pacman --files --help"}]}
{"command": "pacman-key", "tasks": [{"task": "Initialize the pacman keyring:", "command": "sudo pacman-key --init"}, {"task": "Add the default Arch Linux keys:", "command": "sudo pacman-key --populate {{archlinux}}"}, {"task": "List keys from the public keyring:", "command": "pacman-key --list-keys"}, {"task": "Add the specified keys:", "command": "sudo pacman-key --add {{path/to/keyfile.gpg}}"}, {"task": "Receive a key from a key server:", "command": "sudo pacman-key --recv-keys \"{{uid|name|email}}\""}, {"task": "Print the fingerprint of a specific key:", "command": "pacman-key --finger \"{{uid|name|email}}\""}, {"task": "Sign an imported key locally:", "command": "sudo pacman-key --lsign-key \"{{uid|name|email}}\""}, {"task": "Remove a specific key:", "command": "sudo pacman-key --delete \"{{uid|name|email}}\""}]}
{"command": "pacman-mirrors", "tasks": [{"task": "Generate a mirrorlist using the default settings:", "command": "sudo pacman-mirrors --fasttrack"}, {"task": "Get the status of the current mirrors:", "command": "pacman-mirrors --status"}, {"task": "Display the current branch:", "command": "pacman-mirrors --get-branch"}, {"task": "Switch to a different branch:", "command": "sudo pacman-mirrors --api --set-branch {{stable|unstable|testing}}"}, {"task": "Generate a mirrorlist, only using mirrors in your country:", "command": "sudo pacman-mirrors --geoip"}]}
{"command": "pacman --query", "tasks": [{"task": "List installed packages and versions:", "command": "pacman --query"}, {"task": "List only packages and versions that were explicitly installed:", "command": "pacman --query --explicit"}, {"task": "Find which package owns a file:", "command": "pacman --query --owns {{filename}}"}, {"task": "Display information about an installed package:", "command": "pacman --query --info {{package_name}}"}, {"task": "List files owned by a package:", "command": "pacman --query --list {{package_name}}"}, {"task": "List orphan packages (installed as dependencies but not required by any package):", "command": "pacman --query --unrequired --deps --quiet"}, {"task": "List installed packages not found in the repositories:", "command": "pacman --query --foreign"}, {"task": "List outdated packages:", "command": "pacman --query --upgrades"}]}
{"command": "pacman --remove", "tasks": [{"task": "Remove a package and its dependencies:", "command": "sudo pacman --remove --recursive {{package_name}}"}, {"task": "Remove a package and both its dependencies and configuration files:", "command": "sudo pacman --remove --recursive --nosave {{package_name}}"}, {"task": "Remove a package without prompting:", "command": "sudo pacman --remove --noconfirm {{package_name}}"}, {"task": "Remove orphan packages (installed as dependencies but not required by any package):", "command": "sudo pacman --remove --recursive --nosave $(pacman --query --unrequired --deps --quiet)"}, {"task": "Remove a package and all packages that depend on it:", "command": "sudo pacman --remove --cascade {{package_name}}"}, {"task": "List packages that would be affected (does not remove any packages):", "command": "pacman --remove --print {{package_name}}"}, {"task": "Display help for this subcommand:", "command": "pacman --remove --help"}]}
{"command": "pacman --sync", "tasks": [{"task": "Install a new package:", "command": "sudo pacman --sync {{package_name}}"}, {"task": "Synchronize and update all packages (add `--downloadonly` to download the packages and not update them):", "command": "sudo pacman --sync --refresh --sysupgrade"}, {"task": "Update all packages and install a new one without prompting:", "command": "sudo pacman --sync --refresh --sysupgrade --noconfirm {{package_name}}"}, {"task": "Search the package database for a regular expression or keyword:", "command": "pacman --sync --search \"{{search_pattern}}\""}, {"task": "Display information about a package:", "command": "pacman --sync --info {{package_name}}"}, {"task": "Overwrite conflicting files during a package update:", "command": "sudo pacman --sync --refresh --sysupgrade --overwrite {{path/to/file}}"}, {"task": "Synchronize and update all packages, but ignore a specific package (can be used more than once):", "command": "sudo pacman --sync --refresh --sysupgrade --ignore {{package_name}}"}, {"task": "Remove not installed packages and unused repositories from the cache (use two `--clean` flags to clean all packages):", "command": "sudo pacman --sync --clean"}]}
{"command": "pacman --upgrade", "tasks": [{"task": "Install one or more packages from files:", "command": "sudo pacman --upgrade {{path/to/package1.pkg.tar.zst}} {{path/to/package2.pkg.tar.zst}}"}, {"task": "Install a package without prompting:", "command": "sudo pacman --upgrade --noconfirm {{path/to/package.pkg.tar.zst}}"}, {"task": "Overwrite conflicting files during a package installation:", "command": "sudo pacman --upgrade --overwrite {{path/to/file}} {{path/to/package.pkg.tar.zst}}"}, {"task": "Install a package, skipping the dependency version checks:", "command": "sudo pacman --upgrade --nodeps {{path/to/package.pkg.tar.zst}}"}, {"task": "List packages that would be affected (does not install any packages):", "command": "pacman --upgrade --print {{path/to/package.pkg.tar.zst}}"}, {"task": "Display help:", "command": "pacman --upgrade --help"}]}
{"command": "pacman", "tasks": [{"task": "Synchronize and update all packages:", "command": "sudo pacman -Syu"}, {"task": "Install a new package:", "command": "sudo pacman -S {{package_name}}"}, {"task": "Remove a package and its dependencies:", "command": "sudo pacman -Rs {{package_name}}"}, {"task": "Search the database for packages containing a specific file:", "command": "pacman -F \"{{file_name}}\""}, {"task": "List installed packages and versions:", "command": "pacman -Q"}, {"task": "List only the explicitly installed packages and versions:", "command": "pacman -Qe"}, {"task": "List orphan packages (installed as dependencies but not actually required by any package):", "command": "pacman -Qtdq"}, {"task": "Empty the entire pacman cache:", "command": "sudo pacman -Scc"}]}
{"command": "pacman4console", "tasks": [{"task": "Start a game at Level 1:", "command": "pacman4console"}, {"task": "Start a game on a certain level (there are nine official levels):", "command": "pacman4console --level={{level_number}}"}, {"task": "Start the pacman4console level editor, saving to a specified text file:", "command": "pacman4consoleedit {{path/to/level_file}}"}, {"task": "Play a custom level:", "command": "pacman4console --level={{path/to/level_file}}"}]}
{"command": "pacstall", "tasks": [{"task": "Search the package database for a package name:", "command": "pacstall --search {{package_name}}"}, {"task": "Install a package:", "command": "pacstall --install {{package_name}}"}, {"task": "Remove a package:", "command": "pacstall --remove {{package_name}}"}, {"task": "Add a repository to the database (only GitHub and GitLab are supported):", "command": "pacstall --add-repo {{remote_repository_location}}"}, {"task": "Update pacstall's scripts:", "command": "pacstall --update"}, {"task": "Update all packages:", "command": "pacstall --upgrade"}, {"task": "Display information about a package:", "command": "pacstall --query-info {{package_name}}"}, {"task": "List all installed packages:", "command": "pacstall --list"}]}
{"command": "pacstrap", "tasks": [{"task": "Install the `base` package, Linux kernel and firmware for common hardware:", "command": "pacstrap {{path/to/new/root}} {{base}} {{linux}} {{linux-firmware}}"}, {"task": "Install the `base` package, Linux LTS kernel and `base-devel` build tools:", "command": "pacstrap {{path/to/new/root}} {{base}} {{base-devel}} {{linux-lts}}"}, {"task": "Install packages without copy the host's mirrorlist to the target:", "command": "pacstrap -M {{path/to/new/root}} {{packages}}"}, {"task": "Use an alternate configuration file for Pacman:", "command": "pacstrap -C {{path/to/pacman.conf}} {{path/to/new/root}} {{packages}}"}, {"task": "Install packages using the package cache on the host instead of on the target:", "command": "pacstrap -c {{path/to/new/root}} {{packages}}"}, {"task": "Install packages without copy the host's pacman keyring to the target:", "command": "pacstrap -G {{path/to/new/root}} {{packages}}"}, {"task": "Install packages in interactive mode (prompts for confirmation):", "command": "pacstrap -i {{path/to/new/root}} {{packages}}"}, {"task": "Install packages using package files:", "command": "pacstrap -U {{path/to/new/root}} {{path/to/package1}} {{path/to/package2}}"}]}
{"command": "pactree", "tasks": [{"task": "Print the dependency tree of a specific package:", "command": "pactree {{package}}"}, {"task": "Print what packages depend on a specific package:", "command": "pactree --reverse {{package}}"}, {"task": "Dump dependencies one per line, skipping duplicates:", "command": "pactree --unique {{package}}"}, {"task": "Include optional dependencies of a specific package and colorize the output:", "command": "pactree --optional --color {{package}}"}, {"task": "Display help:", "command": "pactree"}]}
{"command": "pamac", "tasks": [{"task": "Install a new package:", "command": "pamac install {{package_name}}"}, {"task": "Remove a package and its no longer required dependencies (orphans):", "command": "pamac remove --orphans {{package_name}}"}, {"task": "Search the package database for a package:", "command": "pamac search {{package_name}}"}, {"task": "List installed packages:", "command": "pamac list --installed"}, {"task": "Check for package updates:", "command": "pamac checkupdates"}, {"task": "Upgrade all packages:", "command": "pamac upgrade"}]}
{"command": "parted", "tasks": [{"task": "List partitions on all block devices:", "command": "sudo parted --list"}, {"task": "Start interactive mode with the specified disk selected:", "command": "sudo parted {{/dev/sdX}}"}, {"task": "Create a new partition table of the specified label-type:", "command": "sudo parted --script {{/dev/sdX}} mklabel {{aix|amiga|bsd|dvh|gpt|loop|mac|msdos|pc98|sun}}"}, {"task": "Show partition information in interactive mode:", "command": "print"}, {"task": "Select a disk in interactive mode:", "command": "select {{/dev/sdX}}"}, {"task": "Create a 16 GB partition with the specified filesystem in interactive mode:", "command": "mkpart {{primary|logical|extended}} {{btrfs|ext2|ext3|ext4|fat16|fat32|hfs|hfs+|linux-swap|ntfs|reiserfs|udf|xfs}} {{0%}} {{16G}}"}, {"task": "Resize a partition in interactive mode:", "command": "resizepart {{/dev/sdXN}} {{end_position_of_partition}}"}, {"task": "Remove a partition in interactive mode:", "command": "rm {{/dev/sdXN}}"}]}
{"command": "partprobe", "tasks": [{"task": "Notify the operating system kernel of partition table changes:", "command": "sudo partprobe"}, {"task": "Notify the kernel of partition table changes and show a summary of devices and their partitions:", "command": "sudo partprobe --summary"}, {"task": "Show a summary of devices and their partitions but don't notify the kernel:", "command": "sudo partprobe --summary --dry-run"}]}
{"command": "partx", "tasks": [{"task": "List the partitions on a block device or disk image:", "command": "sudo partx --list {{path/to/device_or_disk_image}}"}, {"task": "Add all the partitions found in a given block device to the kernel:", "command": "sudo partx --add --verbose {{path/to/device_or_disk_image}}"}, {"task": "Delete all the partitions found from the kernel (does not alter partitions on disk):", "command": "sudo partx --delete {{path/to/device_or_disk_image}}"}]}
{"command": "paru", "tasks": [{"task": "Interactively search for and install a package:", "command": "paru {{package_name_or_search_term}}"}, {"task": "Synchronize and update all packages:", "command": "paru"}, {"task": "Upgrade AUR packages:", "command": "paru -Sua"}, {"task": "Get information about a package:", "command": "paru -Si {{package_name}}"}, {"task": "Download `PKGBUILD` and other package source files from the AUR or ABS:", "command": "paru --getpkgbuild {{package_name}}"}, {"task": "Display the `PKGBUILD` file of a package:", "command": "paru --getpkgbuild --print {{package_name}}"}]}
{"command": "pasuspender", "tasks": [{"task": "Suspend PulseAudio while running `jackd`:", "command": "pasuspender -- {{jackd -d alsa --device hw:0}}"}]}
{"command": "pdbedit", "tasks": [{"task": "List all Samba users (use verbose flag to show their settings):", "command": "sudo pdbedit --list --verbose"}, {"task": "Add an existing Unix user to Samba (will prompt for password):", "command": "sudo pdbedit --user {{username}} --create"}, {"task": "Remove a Samba user:", "command": "sudo pdbedit --user {{username}} --delete"}, {"task": "Reset a Samba user's failed password counter:", "command": "sudo pdbedit --user {{username}} --bad-password-count-reset"}]}
{"command": "pdftoppm", "tasks": [{"task": "Specify the range of pages to convert (N-first page, M-last page):", "command": "pdftoppm -f {{N}} -l {{M}} {{path/to/file.pdf}} {{image_name_prefix}}"}, {"task": "Convert only the first page of a PDF:", "command": "pdftoppm -singlefile {{path/to/file.pdf}} {{image_name_prefix}}"}, {"task": "Generate a monochrome PBM file (instead of a color PPM file):", "command": "pdftoppm -mono {{path/to/file.pdf}} {{image_name_prefix}}"}, {"task": "Generate a grayscale PGM file (instead of a color PPM file):", "command": "pdftoppm -gray {{path/to/file.pdf}} {{image_name_prefix}}"}, {"task": "Generate a PNG file instead a PPM file:", "command": "pdftoppm -png {{path/to/file.pdf}} {{image_name_prefix}}"}]}
{"command": "pdfxup", "tasks": [{"task": "Create a 2-up PDF:", "command": "pdfxup -o {{path/to/output.pdf}} {{path/to/input.pdf}}"}, {"task": "Create a PDF with 3 columns and 2 lines per page:", "command": "pdfxup -x {{3}} -y {{2}} -o {{path/to/output.pdf}} {{path/to/input.pdf}}"}, {"task": "Create a PDF in booklet mode (2-up, and pages are sorted to form a book when folded):", "command": "pdfxup -b -o {{path/to/output.pdf}} {{path/to/input.pdf}}"}]}
{"command": "perf", "tasks": [{"task": "Display basic performance counter stats for a command:", "command": "perf stat {{gcc hello.c}}"}, {"task": "Display system-wide real-time performance counter profile:", "command": "sudo perf top"}, {"task": "Run a command and record its profile into `perf.data`:", "command": "sudo perf record {{command}}"}, {"task": "Record the profile of an existing process into `perf.data`:", "command": "sudo perf record -p {{pid}}"}, {"task": "Read `perf.data` (created by `perf record`) and display the profile:", "command": "sudo perf report"}]}
{"command": "rename", "tasks": [{"task": "Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):", "command": "rename {{'s/foo/bar/'}} {{*}}"}, {"task": "Dry-run - display which renames would occur without performing them:", "command": "rename -n {{'s/foo/bar/'}} {{*}}"}, {"task": "Force renaming even if the operation would remove existing destination files:", "command": "rename -f {{'s/foo/bar/'}} {{*}}"}, {"task": "Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent \"already exists\" errors):", "command": "rename 'y/A-Z/a-z/' {{*}}"}, {"task": "Replace whitespace with underscores:", "command": "rename 's/\\s+/_/g' {{*}}"}]}
{"command": "phar", "tasks": [{"task": "Add space-separated files or directories to a Phar file:", "command": "phar add -f {{path/to/phar_file}} {{files_or_directories}}"}, {"task": "Display the contents of a Phar file:", "command": "phar list -f {{path/to/phar_file}}"}, {"task": "Delete the specified file or directory from a Phar file:", "command": "phar delete -f {{path/to/phar_file}} -e {{file_or_directory}}"}, {"task": "Display full usage information and available hashing/compression algorithms:", "command": "phar help"}, {"task": "Compress or uncompress files and directories in a Phar file:", "command": "phar compress -f {{path/to/phar_file}} -c {{algorithm}}"}, {"task": "Get information about a Phar file:", "command": "phar info -f {{path/to/phar_file}}"}, {"task": "Sign a Phar file with a specific hash algorithm:", "command": "phar sign -f {{path/to/phar_file}} -h {{algorithm}}"}, {"task": "Sign a Phar file with an OpenSSL private key:", "command": "phar sign -f {{path/to/phar_file}} -h openssl -y {{path/to/private_key}}"}]}
{"command": "photorec", "tasks": [{"task": "Run PhotoRec on a specific device:", "command": "sudo photorec {{/dev/sdb}}"}, {"task": "Run PhotoRec on a disk image (`image.dd`):", "command": "sudo photorec {{path/to/image.dd}}"}]}
{"command": "phpdismod", "tasks": [{"task": "Disable the JSON extension for every SAPI of every PHP version:", "command": "sudo phpdismod {{json}}"}, {"task": "Disable the JSON extension for PHP 7.3 with the cli SAPI:", "command": "sudo phpdismod -v {{7.3}} -s {{cli}} {{json}}"}]}
{"command": "phpenmod", "tasks": [{"task": "Enable the JSON extension for every SAPI of every PHP version:", "command": "sudo phpenmod {{json}}"}, {"task": "Enable the JSON extension for PHP 7.3 with the cli SAPI:", "command": "sudo phpenmod -v {{7.3}} -s {{cli}} {{json}}"}]}
{"command": "phpquery", "tasks": [{"task": "List available PHP versions:", "command": "sudo phpquery -V"}, {"task": "List available SAPIs for PHP 7.3:", "command": "sudo phpquery -v {{7.3}} -S"}, {"task": "List enabled extensions for PHP 7.3 with the cli SAPI:", "command": "sudo phpquery -v {{7.3}} -s {{cli}} -M"}, {"task": "Check if the JSON extension is enabled for PHP 7.3 with the apache2 SAPI:", "command": "sudo phpquery -v {{7.3}} -s {{apache2}} -m {{json}}"}]}
{"command": "physlock", "tasks": [{"task": "Lock every console (require current user or root to unlock):", "command": "physlock"}, {"task": "Mute kernel messages on console while locked:", "command": "physlock -m"}, {"task": "Disable SysRq mechanism while locked:", "command": "physlock -s"}, {"task": "Display a message before the password prompt:", "command": "physlock -p \"{{Locked!}}\""}, {"task": "Fork and detach physlock (useful for suspend or hibernate scripts):", "command": "physlock -d"}]}
{"command": "pi", "tasks": [{"task": "Display 100 decimal digits of Archimedes' constant Pi:", "command": "pi"}, {"task": "Display a specified number of decimal digits of Archimedes' constant Pi:", "command": "pi {{number}}"}, {"task": "Display help:", "command": "pi --help"}, {"task": "Display version:", "command": "pi --version"}, {"task": "Display recommended readings:", "command": "pi --bibliography"}]}
{"command": "picom", "tasks": [{"task": "Enable `picom` during a session:", "command": "picom &"}, {"task": "Start `picom` as a background process:", "command": "picom -b"}, {"task": "Use a custom configuration file:", "command": "picom --config {{path/to/config_file}}"}]}
{"command": "pidof", "tasks": [{"task": "List all process IDs with given name:", "command": "pidof {{bash}}"}, {"task": "List a single process ID with given name:", "command": "pidof -s {{bash}}"}, {"task": "List process IDs including scripts with given name:", "command": "pidof -x {{script.py}}"}, {"task": "Kill all processes with given name:", "command": "kill $(pidof {{name}})"}]}
{"command": "pidstat", "tasks": [{"task": "Show CPU statistics at a 2 second interval for 10 times:", "command": "pidstat {{2}} {{10}}"}, {"task": "Show page faults and memory utilization:", "command": "pidstat -r"}, {"task": "Show input/output usage per process id:", "command": "pidstat -d"}, {"task": "Show information on a specific PID:", "command": "pidstat -p {{PID}}"}, {"task": "Show memory statistics for all processes whose command name include \"fox\" or \"bird\":", "command": "pidstat -C \"{{fox|bird}}\" -r -p ALL"}]}
{"command": "pihole", "tasks": [{"task": "Check the Pi-hole daemon's status:", "command": "pihole status"}, {"task": "Update Pi-hole and Gravity:", "command": "pihole -up"}, {"task": "Monitor detailed system status:", "command": "pihole chronometer"}, {"task": "Start or stop the daemon:", "command": "pihole {{enable|disable}}"}, {"task": "Restart the daemon (not the server itself):", "command": "pihole restartdns"}, {"task": "Whitelist or blacklist a domain:", "command": "pihole {{whitelist|blacklist}} {{example.com}}"}, {"task": "Search the lists for a domain:", "command": "pihole query {{example.com}}"}, {"task": "Open a real-time log of connections:", "command": "pihole tail"}]}
{"command": "pinout", "tasks": [{"task": "View the pinout information and GPIO header diagram for the current Raspberry Pi:", "command": "pinout"}, {"task": "Open https://pinout.xyz/ in the default browser:", "command": "pinout -x"}]}
{"command": "pivpn", "tasks": [{"task": "Add a new client device:", "command": "sudo pivpn add"}, {"task": "List all client devices:", "command": "sudo pivpn list"}, {"task": "List currently connected devices and their statistics:", "command": "sudo pivpn clients"}, {"task": "Revoke a previously authenticated device:", "command": "sudo pivpn revoke"}, {"task": "Uninstall PiVPN:", "command": "sudo pivpn uninstall"}]}
{"command": "pkcon", "tasks": [{"task": "Install a package:", "command": "pkcon install {{package}}"}, {"task": "Remove a package:", "command": "pkcon remove {{package}}"}, {"task": "Refresh the package cache:", "command": "pkcon refresh"}, {"task": "Update packages:", "command": "pkcon update"}, {"task": "Search for a specific package:", "command": "pkcon search {{package}}"}, {"task": "List all available packages:", "command": "pkcon get-packages"}]}
{"command": "pkgadd", "tasks": [{"task": "Install a local software package:", "command": "pkgadd {{package_name}}"}, {"task": "Update an already installed package from a local package:", "command": "pkgadd -u {{package_name}}"}]}
{"command": "pkgctl auth", "tasks": [{"task": "Authenticate `pkgctl` with the GitLab instance:", "command": "pkgctl auth login"}, {"task": "View authentication status:", "command": "pkgctl auth status"}]}
{"command": "pkgctl diff", "tasks": [{"task": "Compare package files in tar content [l]ist different mode (default):", "command": "pkgctl diff --list {{path/to/file|pkgname}}"}, {"task": "Compare package files in [d]iffoscope different mode:", "command": "pkgctl diff --diffoscope {{path/to/file|pkgname}}"}, {"task": "Compare package files in `.PKGINFO` different mode:", "command": "pkgctl diff --pkginfo {{path/to/file|pkgname}}"}, {"task": "Compare package files in `.BUILDINFO` different mode:", "command": "pkgctl diff --buildinfo {{path/to/file|pkgname}}"}]}
{"command": "pkgctl repo", "tasks": [{"task": "Clone a package repository (requires setting an SSH key in your Arch Linux GitLab account):", "command": "pkgctl repo clone {{pkgname}}"}, {"task": "Clone a package repository over HTTPS:", "command": "pkgctl repo clone --protocol=https {{pkgname}}"}, {"task": "Create a new GitLab package repository and clone it after creation (requires valid GitLab API authentication):", "command": "pkgctl repo create {{pkgbase}}"}, {"task": "Switch a package repository to a specified version:", "command": "pkgctl repo switch {{version}} {{pkgbase}}"}, {"task": "Open a package repository's website:", "command": "pkgctl repo web {{pkgbase}}"}]}
{"command": "pkgctl version", "tasks": [{"task": "Display version:", "command": "pkgctl version"}]}
{"command": "pkgctl", "tasks": [{"task": "Download PKGBUILD of a package in a folder named `package_name`:", "command": "pkgctl repo clone --protocol=https {{package_name}}"}]}
{"command": "pkgfile", "tasks": [{"task": "Synchronize the pkgfile database:", "command": "sudo pkgfile --update"}, {"task": "Search for a package that owns a specific file:", "command": "pkgfile {{filename}}"}, {"task": "List all files provided by a package:", "command": "pkgfile --list {{package_name}}"}, {"task": "List only files provided by a package located within the `bin` or `sbin` directory:", "command": "pkgfile --list --binaries {{package_name}}"}, {"task": "Search for a package that owns a specific file using case-insensitive matching:", "command": "pkgfile --ignorecase {{filename}}"}, {"task": "Search for a package that owns a specific file in the `bin` or `sbin` directory:", "command": "pkgfile --binaries {{filename}}"}, {"task": "Search for a package that owns a specific file, displaying the package version:", "command": "pkgfile --verbose {{filename}}"}, {"task": "Search for a package that owns a specific file in a specific repository:", "command": "pkgfile --repo {{repository_name}} {{filename}}"}]}
{"command": "pkginfo", "tasks": [{"task": "List installed packages and their versions:", "command": "pkginfo -i"}, {"task": "List files owned by a package:", "command": "pkginfo -l {{package_name}}"}, {"task": "List the owner(s) of files matching a pattern:", "command": "pkginfo -o {{pattern}}"}, {"task": "Print the footprint of a file:", "command": "pkginfo -f {{path/to/file}}"}]}
{"command": "pkgmk", "tasks": [{"task": "Make and download a package:", "command": "pkgmk -d"}, {"task": "Install the package after making it:", "command": "pkgmk -d -i"}, {"task": "Upgrade the package after making it:", "command": "pkgmk -d -u"}, {"task": "Ignore the footprint when making a package:", "command": "pkgmk -d -if"}, {"task": "Ignore the MD5 sum when making a package:", "command": "pkgmk -d -im"}, {"task": "Update the package's footprint:", "command": "pkgmk -uf"}]}
{"command": "pkgrm", "tasks": [{"task": "Remove an installed package:", "command": "pkgrm {{package_name}}"}]}
{"command": "playerctl", "tasks": [{"task": "Toggle play:", "command": "playerctl play-pause"}, {"task": "Next media:", "command": "playerctl next"}, {"task": "Previous media:", "command": "playerctl previous"}, {"task": "List all players:", "command": "playerctl --list-all"}, {"task": "Send a command to a specific player:", "command": "playerctl --player={{player_name}} {{command}}"}, {"task": "Send a command to all players:", "command": "playerctl --all-players {{command}}"}, {"task": "Show now playing:", "command": "playerctl metadata --format \"Now playing: {{artist}} - {{album}} - {{title}}\""}]}
{"command": "pluma", "tasks": [{"task": "Start the editor:", "command": "pluma"}, {"task": "Open specific documents:", "command": "pluma {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open documents using a specific encoding:", "command": "pluma --encoding {{WINDOWS-1252}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Print all supported encodings:", "command": "pluma --list-encodings"}, {"task": "Open document and go to a specific line:", "command": "pluma +{{10}} {{path/to/file}}"}]}
{"command": "pmap", "tasks": [{"task": "Print memory map for a specific process id (PID):", "command": "pmap {{pid}}"}, {"task": "Show the extended format:", "command": "pmap --extended {{pid}}"}, {"task": "Show the device format:", "command": "pmap --device {{pid}}"}, {"task": "Limit results to a memory address range specified by `low` and `high`:", "command": "pmap --range {{low}},{{high}}"}, {"task": "Print memory maps for multiple processes:", "command": "pmap {{pid1 pid2 ...}}"}]}
{"command": "pmount", "tasks": [{"task": "Mount a device below `/media/` (using device as mount point):", "command": "pmount {{/dev/to/block/device}}"}, {"task": "Mount a device with a specific filesystem type to `/media/label`:", "command": "pmount --type {{filesystem}} {{/dev/to/block/device}} {{label}}"}, {"task": "Mount a CD-ROM (filesystem type ISO9660) in read-only mode:", "command": "pmount --type {{iso9660}} --read-only {{/dev/cdrom}}"}, {"task": "Mount an NTFS-formatted disk, forcing read-write access:", "command": "pmount --type {{ntfs}} --read-write {{/dev/sdX}}"}, {"task": "Display all mounted removable devices:", "command": "pmount"}]}
{"command": "pngcheck", "tasks": [{"task": "Verify the integrity of an image file:", "command": "pngcheck {{path/to/file.png}}"}, {"task": "Check the file with [v]erbose and [c]olorized output:", "command": "pngcheck -vc {{path/to/file.png}}"}, {"task": "Display contents of [t]ext chunks and [s]earch for PNGs within a specific file:", "command": "pngcheck -ts {{path/to/file.png}}"}, {"task": "Search for, and e[x]tract embedded PNGs within a specific file:", "command": "pngcheck -x {{path/to/file.png}}"}]}
{"command": "po4a-gettextize", "tasks": [{"task": "Convert a text file to PO file:", "command": "po4a-gettextize --format {{text}} --master {{path/to/master.txt}} --po {{path/to/result.po}}"}, {"task": "Get a list of available formats:", "command": "po4a-gettextize --help-format"}, {"task": "Convert a text file along with a translated document to a PO file (`-l` option can be provided multiple times):", "command": "po4a-gettextize --format {{text}} --master {{path/to/master.txt}} --localized {{path/to/translated.txt}} --po {{path/to/result.po}}"}]}
{"command": "po4a-translate", "tasks": [{"task": "Convert a translated PO file back to a document:", "command": "po4a-translate --format {{text}} --master {{path/to/master.doc}} --po {{path/to/result.po}} --localized {{path/to/translated.txt}}"}, {"task": "Get a list of available formats:", "command": "po4a-translate --help-format"}]}
{"command": "po4a-updatepo", "tasks": [{"task": "Update a PO file according to the modification of its origin file:", "command": "po4a-updatepo --format {{text}} --master {{path/to/master.txt}} --po {{path/to/result.po}}"}, {"task": "Get a list of available formats:", "command": "po4a-updatepo --help-format"}, {"task": "Update several PO files according to the modification of their origin file:", "command": "po4a-updatepo --format {{text}} --master {{path/to/master.txt}} --po {{path/to/po1.po}} --po {{path/to/po2.po}}"}]}
{"command": "po4a", "tasks": [{"task": "Update PO files and documents according to the specified config file:", "command": "po4a {{path/to/config_file}}"}]}
{"command": "ports", "tasks": [{"task": "Update the ports tree:", "command": "ports -u"}, {"task": "List the ports in the current tree:", "command": "ports -l"}, {"task": "Check the differences between installed packages and the ports tree:", "command": "ports -d"}]}
{"command": "postfix", "tasks": [{"task": "Check the configuration:", "command": "sudo postfix check"}, {"task": "Check the status of the Postfix daemon:", "command": "sudo postfix status"}, {"task": "Start Postfix:", "command": "sudo postfix start"}, {"task": "Gracefully stop Postfix:", "command": "sudo postfix stop"}, {"task": "Flush the mail queue:", "command": "sudo postfix flush"}, {"task": "Reload the configuration files:", "command": "sudo postfix reload"}]}
{"command": "poweroff", "tasks": [{"task": "Power off the system:", "command": "poweroff"}, {"task": "Halt the system (same as `halt`):", "command": "poweroff --halt"}, {"task": "Reboot the system (same as `reboot`):", "command": "poweroff --reboot"}, {"task": "Shut down immediately without contacting the system manager:", "command": "poweroff --force --force"}, {"task": "Write the wtmp shutdown entry without shutting down the system:", "command": "poweroff --wtmp-only"}]}
{"command": "powerprofilesctl", "tasks": [{"task": "List available power profiles:", "command": "powerprofilesctl list"}, {"task": "Set a specific power profile:", "command": "powerprofilesctl set {{profile_name}}"}]}
{"command": "powerstat", "tasks": [{"task": "Measure power with the default of 10 samples with an interval of 10 seconds:", "command": "powerstat"}, {"task": "Measure power with custom number of samples and interval duration:", "command": "powerstat {{interval}} {{number_of_samples}}"}, {"task": "Measure power using Intel's RAPL interface:", "command": "powerstat -R {{interval}} {{number_of_samples}}"}, {"task": "Show a histogram of the power measurements:", "command": "powerstat -H {{interval}} {{number_of_samples}}"}, {"task": "Enable all statistics gathering options:", "command": "powerstat -a {{interval}} {{number_of_samples}}"}]}
{"command": "powertop", "tasks": [{"task": "Calibrate power usage measurements:", "command": "sudo powertop --calibrate"}, {"task": "Generate HTML power usage report in the current directory:", "command": "sudo powertop --html={{power_report.html}}"}, {"task": "Tune to optimal settings:", "command": "sudo powertop --auto-tune"}, {"task": "Generate a report for a specified number of seconds (instead of 20 by default):", "command": "sudo powertop --time={{5}}"}]}
{"command": "rename", "tasks": [{"task": "Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):", "command": "rename {{'s/foo/bar/'}} {{*}}"}, {"task": "Dry-run - display which renames would occur without performing them:", "command": "rename -n {{'s/foo/bar/'}} {{*}}"}, {"task": "Force renaming even if the operation would remove existing destination files:", "command": "rename -f {{'s/foo/bar/'}} {{*}}"}, {"task": "Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent \"already exists\" errors):", "command": "rename 'y/A-Z/a-z/' {{*}}"}, {"task": "Replace whitespace with underscores:", "command": "rename 's/\\s+/_/g' {{*}}"}]}
{"command": "pridecat", "tasks": [{"task": "Print the contents of a file in pride colors to `stdout`:", "command": "pridecat {{path/to/file}}"}, {"task": "Print contents of a file in trans colors:", "command": "pridecat {{path/to/file}} --{{transgender|trans}}"}, {"task": "Alternate between lesbian and bisexual pride flags:", "command": "pridecat {{path/to/file}} --lesbian --bi"}, {"task": "Print contents of a file with the background colors changed:", "command": "pridecat {{path/to/file}} -b"}, {"task": "List directory contents in pride flag colors:", "command": "ls | pridecat --{{flag}}"}]}
{"command": "print", "tasks": [{"task": "Print action can be used to print any file on default run-mailcap tool:", "command": "print {{filename}}"}, {"task": "With `run-mailcap`:", "command": "run-mailcap --action=print {{filename}}"}]}
{"command": "prlimit", "tasks": [{"task": "Display limit values for all current resources for the running parent process:", "command": "prlimit"}, {"task": "Display limit values for all current resources of a specified process:", "command": "prlimit --pid {{pid number}}"}, {"task": "Run a command with a custom number of open files limit:", "command": "prlimit --nofile={{10}} {{command}}"}]}
{"command": "pro", "tasks": [{"task": "Connect your system to the Ubuntu Pro support contract:", "command": "sudo pro attach"}, {"task": "Display the status of Ubuntu Pro services:", "command": "pro status"}, {"task": "Check if the system is affected by a specific vulnerability (and apply a fix if possible):", "command": "pro fix {{CVE-number}}"}, {"task": "Display the number of unsupported packages:", "command": "pro security-status"}, {"task": "List packages that are no longer available for download:", "command": "pro security-status --unavailable"}, {"task": "List third-party packages:", "command": "pro security-status --thirdparty"}]}
{"command": "protontricks", "tasks": [{"task": "Run the protontricks GUI:", "command": "protontricks --gui"}, {"task": "Run Winetricks for a specific game:", "command": "protontricks {{appid}} {{winetricks_args}}"}, {"task": "Run a command within a game's installation directory:", "command": "protontricks -c {{command}} {{appid}}"}, {"task": "[l]ist all installed games:", "command": "protontricks -l"}, {"task": "[s]earch for a game's App ID by name:", "command": "protontricks -s {{game_name}}"}, {"task": "Show the protontricks help message:", "command": "protontricks --help"}]}
{"command": "protonvpn-cli connect", "tasks": [{"task": "Connect to ProtonVPN interactively:", "command": "protonvpn-cli connect"}, {"task": "Connect to ProtonVPN using the fastest server available:", "command": "protonvpn-cli connect --fastest"}, {"task": "Connect to ProtonVPN using a specific server with a specific protocol:", "command": "protonvpn-cli connect {{server_name}} --protocol {{udp|tcp}}"}, {"task": "Connect to ProtonVPN using a random server with a specific protocol:", "command": "protonvpn-cli connect --random --protocol {{udp|tcp}}"}, {"task": "Connect to ProtonVPN using the fastest Tor-supporting server:", "command": "protonvpn-cli connect --tor"}, {"task": "Display help:", "command": "protonvpn-cli connect --help"}]}
{"command": "protonvpn-cli", "tasks": [{"task": "Log in to the ProtonVPN account:", "command": "protonvpn-cli login {{username}}"}, {"task": "Start a kill switch upon connecting to ProtonVPN:", "command": "protonvpn-cli killswitch --on"}, {"task": "Connect to ProtonVPN interactively:", "command": "protonvpn-cli connect"}, {"task": "Display connection status:", "command": "protonvpn-cli status"}, {"task": "Block malware using ProtonVPN NetShield:", "command": "protonvpn-cli netshield --malware"}, {"task": "Disconnect from ProtonVPN:", "command": "protonvpn-cli disconnect"}, {"task": "Display the current ProtonVPN configuration:", "command": "protonvpn-cli config --list"}, {"task": "Display help for a subcommand:", "command": "protonvpn-cli {{subcommand}} --help"}]}
{"command": "prt-get", "tasks": [{"task": "Install a package:", "command": "prt-get install {{package_name}}"}, {"task": "Install a package with dependency handling:", "command": "prt-get depinst {{package_name}}"}, {"task": "Update a package manually:", "command": "prt-get upgrade {{package_name}}"}, {"task": "Remove a package:", "command": "prt-get remove {{package_name}}"}, {"task": "Upgrade the system from the local ports tree:", "command": "prt-get sysup"}, {"task": "Search the ports tree:", "command": "prt-get search {{package_name}}"}, {"task": "Search for a file in a package:", "command": "prt-get fsearch {{file}}"}]}
{"command": "pstree", "tasks": [{"task": "Display a tree of processes:", "command": "pstree"}, {"task": "Display a tree of processes with PIDs:", "command": "pstree -p"}, {"task": "Display all process trees rooted at processes owned by specified user:", "command": "pstree {{user}}"}]}
{"command": "ptx", "tasks": [{"task": "Generate a permuted index where the first field of each line is an index reference:", "command": "ptx --references {{path/to/file}}"}, {"task": "Generate a permuted index with automatically generated index references:", "command": "ptx --auto-reference {{path/to/file}}"}, {"task": "Generate a permuted index with a fixed width:", "command": "ptx --width={{width_in_columns}} {{path/to/file}}"}, {"task": "Generate a permuted index with a list of filtered words:", "command": "ptx --only-file={{path/to/filter}} {{path/to/file}}"}, {"task": "Generate a permuted index with SYSV-style behaviors:", "command": "ptx --traditional {{path/to/file}}"}]}
{"command": "pulseaudio", "tasks": [{"task": "Check if PulseAudio is running (a non-zero exit code means it is not running):", "command": "pulseaudio --check"}, {"task": "Start the PulseAudio daemon in the background:", "command": "pulseaudio --start"}, {"task": "Kill the running PulseAudio daemon:", "command": "pulseaudio --kill"}, {"task": "List available modules:", "command": "pulseaudio --dump-modules"}, {"task": "Load a module into the currently running daemon with the specified arguments:", "command": "pulseaudio --load=\"{{module_name}} {{arguments}}\""}]}
{"command": "pvcreate", "tasks": [{"task": "Initialize the `/dev/sda1` volume for use by LVM:", "command": "pvcreate {{/dev/sda1}}"}, {"task": "Force the creation without any confirmation prompts:", "command": "pvcreate --force {{/dev/sda1}}"}]}
{"command": "pvdisplay", "tasks": [{"task": "Display information about all physical volumes:", "command": "sudo pvdisplay"}, {"task": "Display information about the physical volume on drive `/dev/sdXY`:", "command": "sudo pvdisplay {{/dev/sdXY}}"}]}
{"command": "pvs", "tasks": [{"task": "Display information about physical volumes:", "command": "pvs"}, {"task": "Display non-physical volumes:", "command": "pvs -a"}, {"task": "Change default display to show more details:", "command": "pvs -v"}, {"task": "Display only specific fields:", "command": "pvs -o {{field_name_1}},{{field_name_2}}"}, {"task": "Append field to default display:", "command": "pvs -o +{{field_name}}"}, {"task": "Suppress heading line:", "command": "pvs --noheadings"}, {"task": "Use separator to separate fields:", "command": "pvs --separator {{special_character}}"}]}
{"command": "pw-cat", "tasks": [{"task": "List all available playback targets:", "command": "pw-cat --playback --list-targets"}, {"task": "Play a WAV file over the default target:", "command": "pw-cat --playback {{path/to/file.wav}}"}, {"task": "List all available record targets:", "command": "pw-cat --record --list-targets"}, {"task": "Record a sample recording at a different volume level:", "command": "pw-cat --record --volume={{0.1}} {{path/to/file.wav}}"}, {"task": "Record a sample recording using a different sample rate:", "command": "pw-cat --record --rate={{6000}} {{path/to/file.wav}}"}]}
{"command": "pw-cli", "tasks": [{"task": "Print all nodes (sinks and sources) along with their IDs:", "command": "pw-cli list-objects Node"}, {"task": "Print information about an object with a specific ID:", "command": "pw-cli info {{4}}"}, {"task": "Print all objects' information:", "command": "pw-cli info all"}]}
{"command": "pw-link", "tasks": [{"task": "List all audio output and input ports:", "command": "pw-link --output --input"}, {"task": "Create a link between an output and an input port:", "command": "pw-link {{output_port_name}} {{input_port_name}}"}, {"task": "Disconnect two ports:", "command": "pw-link --disconnect {{output_port_name}} {{input_port_name}}"}, {"task": "Display help:", "command": "pw-link -h"}]}
{"command": "pw-loopback", "tasks": [{"task": "Create a loopback device with the default loopback behavior:", "command": "pw-loopback"}, {"task": "Create a loopback device that automatically connects to the speakers:", "command": "pw-loopback -m '{{[FL FR]}}' --capture-props='{{media.class=Audio/Sink}}'"}, {"task": "Create a loopback device that automatically connects to the microphone:", "command": "pw-loopback -m '{{[FL FR]}}' --playback-props='{{media.class=Audio/Source}}'"}, {"task": "Create a dummy loopback device that doesn't automatically connect to anything:", "command": "pw-loopback -m '{{[FL FR]}}' --capture-props='{{media.class=Audio/Sink}}' --playback-props='{{media.class=Audio/Source}}'"}, {"task": "Create a loopback device that automatically connects to the speakers and swaps the left and right channels between the sink and source:", "command": "pw-loopback --capture-props='{{media.class=Audio/Sink audio.position=[FL FR]}}' --playback-props='{{audio.position=[FR FL]}}'"}, {"task": "Create a loopback device that automatically connects to the microphone and swaps the left and right channels between the sink and source:", "command": "pw-loopback --capture-props='{{audio.position=[FR FL]}}' --playback-props='{{media.class=Audio/Source audio.position=[FL FR]}}'"}]}
{"command": "pw-play", "tasks": [{"task": "Play a wav sound file over the default target:", "command": "pw-play {{path/to/file.wav}}"}, {"task": "Play a wav sound file at a different volume level:", "command": "pw-play --volume={{0.1}} {{path/to/file.wav}}"}]}
{"command": "pw-record", "tasks": [{"task": "List all available record targets:", "command": "pw-record --list-targets"}, {"task": "Record a sample recording using the default target:", "command": "pw-record {{path/to/file.wav}}"}, {"task": "Record a sample recording at a different volume level:", "command": "pw-record --volume={{0.1}} {{path/to/file.wav}}"}, {"task": "Record a sample recording using a different sample rate:", "command": "pw-record --rate={{6000}} {{path/to/file.wav}}"}]}
{"command": "pwd", "tasks": [{"task": "Print the current directory:", "command": "pwd"}, {"task": "Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path):", "command": "pwd --physical"}, {"task": "Print the current logical directory:", "command": "pwd --logical"}]}
{"command": "pwdx", "tasks": [{"task": "Print current working directory of a process:", "command": "pwdx {{process_id}}"}]}
{"command": "pyrit", "tasks": [{"task": "Display system cracking speed:", "command": "pyrit benchmark"}, {"task": "List available cores:", "command": "pyrit list_cores"}, {"task": "Set [e]SSID:", "command": "pyrit -e \"{{ESSID}}\" create_essid"}, {"task": "[r]ead and analyze a specific packet capture file:", "command": "pyrit -r {{path/to/file.cap|path/to/file.pcap}} analyze"}, {"task": "Read and [i]mport passwords to the current database:", "command": "pyrit -i {{path/to/file}} {{import_unique_passwords|unique_passwords|import_passwords}}"}, {"task": "Exp[o]rt passwords from database to a specific file:", "command": "pyrit -o {{path/to/file}} export_passwords"}, {"task": "Translate passwords with Pired Master Keys:", "command": "pyrit batch"}, {"task": "[r]ead the capture file and crack the password:", "command": "pyrit -r {{path/to/file}} attack_db"}]}
{"command": "qjoypad", "tasks": [{"task": "Start QJoyPad:", "command": "qjoypad"}, {"task": "Start QJoyPad and look for devices in a specific directory:", "command": "qjoypad --device={{path/to/directory}}"}, {"task": "Start QJoyPad but don't show a system tray icon:", "command": "qjoypad --notray"}, {"task": "Start QJoyPad and force the window manager to use a system tray icon:", "command": "qjoypad --force-tray"}, {"task": "Force a running instance of QJoyPad to update its list of devices and layouts:", "command": "qjoypad --update"}, {"task": "Load the given layout in an already running instance of QJoyPad, or start QJoyPad using the given layout:", "command": "qjoypad \"{{layout}}\""}]}
{"command": "qm cleanup", "tasks": [{"task": "Clean up resources:", "command": "qm cleanup {{vm_id}} {{clean-shutdown}} {{guest-requested}}"}]}
{"command": "qm clone", "tasks": [{"task": "Copy a virtual machine:", "command": "qm copy {{vm_id}} {{new_vm_id}}"}, {"task": "Copy a virtual machine using a specific name:", "command": "qm copy {{vm_id}} {{new_vm_id}} --name {{name}}"}, {"task": "Copy a virtual machine using a specific descriptionn:", "command": "qm copy {{vm_id}} {{new_vm_id}} --description {{description}}"}, {"task": "Copy a virtual machine creating a full copy of all disks:", "command": "qm copy {{vm_id}} {{new_vm_id}} --full"}, {"task": "Copy a virtual machine using a specific format for file storage (requires `--full`):", "command": "qm copy {{vm_id}} {{new_vm_id}} --full --format {{qcow2|raw|vmdk}}"}, {"task": "Copy a virtual machine then add it to a specific pool:", "command": "qm copy {{vm_id}} {{new_vm_id}} --pool {{pool_name}}"}]}
{"command": "qm cloudinit dump", "tasks": [{"task": "Generate a cloudinit file for a specific configuration type:", "command": "qm cloudinit dump {{virtual_machine_id}} {{meta|network|user}}"}]}
{"command": "qm config", "tasks": [{"task": "Display the virtual machine configuration:", "command": "qm config {{vm_id}}"}, {"task": "Display the current configuration values instead of pending values for the virtual machine:", "command": "qm config --current {{true}} {{vm_id}}"}, {"task": "Fetch the configuration values from the given snapshot:", "command": "qm config --snapshot {{snapshot_name}} {{vm_id}}"}]}
{"command": "qm create", "tasks": [{"task": "Create a virtual machine:", "command": "qm create {{100}}"}, {"task": "Automatically start the machine after creation:", "command": "qm create {{100}} --start 1"}, {"task": "Specify the type of operating system on the machine:", "command": "qm create {{100}} --ostype {{win10}}"}, {"task": "Replace an existing machine (requires archiving it):", "command": "qm create {{100}} --archive {{path/to/backup_file.tar}} --force 1"}, {"task": "Specify a script that is executed automatically depending on the state of the virtual machine:", "command": "qm create {{100}} --hookscript {{path/to/script.pl}}"}]}
{"command": "qm delsnapshot", "tasks": [{"task": "Delete a snapshot:", "command": "qm delsnapshot {{vm_id}} {{snapshot_name}}"}, {"task": "Delete a snapshot from a configuration file (even if removing the disk snapshot fails):", "command": "qm delsnapshot {{vm_id}} {{snapshot_name}} --force 1"}]}
{"command": "qm destroy", "tasks": [{"task": "Destroy a specific virtual machine:", "command": "qm destroy {{vm_id}}"}, {"task": "Destroy all disks that are not explicitly referenced in a specific virtual machine's configuration:", "command": "qm destroy {{vm_id}} --destroy-unreferenced-disks"}, {"task": "Destroy a virtual machine and remove from all locations (inventory, backup jobs, high availability managers, etc.):", "command": "qm destroy {{vm_id}} --purge"}, {"task": "Destroy a specific virtual machine ignoring locks and forcing destroy:", "command": "sudo qm destroy {{vm_id}} --skiplock"}]}
{"command": "qm disk import", "tasks": [{"task": "Import a VMDK/qcow2/raw disk image using a specific storage name:", "command": "qm importdisk {{vm_id}} {{path/to/disk}} {{storage_name}} --format {{qcow2|raw|vmdk}}"}]}
{"command": "qm disk move", "tasks": [{"task": "Move a virtual disk:", "command": "qm disk move {{vm_id}} {{destination}} {{index}}"}, {"task": "Delete the previous copy of the virtual disk:", "command": "qm disk move -delete {{vm_id}} {{destination}} {{index}}"}]}
{"command": "qm disk resize", "tasks": [{"task": "Add `n` gigabytes to a virtual disk:", "command": "qm disk resize {{vm_id}} {{disk_name}} +{{n}}G"}]}
{"command": "qm guest cmd", "tasks": [{"task": "Execute a specific QEMU Guest Agent command:", "command": "qm guest cmd {{virtual_machine_id}} {{fsfreeze-freeze|fsfreeze-status|fsfreeze-thaw|fstrim|get-fsinfo|...}}"}]}
{"command": "qm guest exec-status", "tasks": [{"task": "Print the status of a specific PID:", "command": "qm guest exec-status {{vm_id}} {{pid}}"}]}
{"command": "qm guest exec", "tasks": [{"task": "Execute a specific command via a guest agent:", "command": "qm guest exec {{vm_id}} {{command}} {{arg1 arg2 ...}}"}, {"task": "Execute a specific command via a guest agent asynchronously:", "command": "qm guest exec {{vm_id}} {{arg1 arg2 ...}} --synchronous 0"}, {"task": "Execute a specific command via a guest agent with a specified timeout of 10 seconds:", "command": "qm guest exec {{vm_id}} {{arg1 arg2 ...}} --timeout {{10}}"}, {"task": "Execute a specific command via a guest agent and forward input from STDIN until EOF to the guest agent:", "command": "qm guest exec {{vm_id}} {{arg1 arg2 ...}} --pass-stdin 1"}]}
{"command": "qm guest passwd", "tasks": [{"task": "Set a password for a specific user in a virtual machine interactively:", "command": "qm guest passwd {{vm_id}} {{username}}"}, {"task": "Set an already hashed password for a specific user in a virtual machine interactively:", "command": "qm guest passwd {{vm_id}} {{username}} --crypted 1"}]}
{"command": "qm help", "tasks": [{"task": "Display help for a specific command:", "command": "qm help {{command}}"}, {"task": "Display help for a specific command with detailed information:", "command": "qm help {{command}} --verbose {{true|false}}"}]}
{"command": "qm importdisk", "tasks": [{"task": "View documentation for the original command:", "command": "tldr qm disk import"}]}
{"command": "qm list", "tasks": [{"task": "List all virtual machines:", "command": "qm list"}, {"task": "List all virtual machines with a full status about the ones which are currently running:", "command": "qm list --full 1"}]}
{"command": "qm listsnapshot", "tasks": [{"task": "List all snapshots of a specific virtual machine:", "command": "qm listsnapshot {{vm_id}}"}]}
{"command": "qm migrate", "tasks": [{"task": "Migrate a specific virtual machine:", "command": "qm migrate {{vm_id}} {{target}}"}, {"task": "Override the current I/O bandwidth limit with 10 KiB/s:", "command": "qm migrate {{vm_id}} {{target}} --bwlimit 10"}, {"task": "Allow migration of virtual machines using local devices (root only):", "command": "qm migrate {{vm_id}} {{target}} --force true"}, {"task": "Use online/live migration if a virtual machine is running:", "command": "qm migrate {{vm_id}} {{target}} --online true"}, {"task": "Enable live storage migration for local disks:", "command": "qm migrate {{vm_id}} {{target}} --with-local-disks true"}]}
{"command": "qm monitor", "tasks": [{"task": "Enter the QEMU Monitor interface of a specific virtual machine:", "command": "qm monitor {{vm_id}}"}]}
{"command": "qm move_disk", "tasks": [{"task": "View documentation for the original command:", "command": "tldr qm-disk-move"}]}
{"command": "qm mtunnel", "tasks": [{"task": "Command used by `qmigrate` during data migration from a VM to another host:", "command": "qm mtunnel"}]}
{"command": "qm pending", "tasks": [{"task": "Get the virtual machine configuration of a specific virtual machine:", "command": "qm pending {{vm_id}}"}]}
{"command": "qm reboot", "tasks": [{"task": "Reboot a virtual machine:", "command": "qm reboot {{vm_id}}"}, {"task": "Reboot a virtual machine after wait for at most 10 seconds:", "command": "qm reboot --timeout {{10}} {{vm_id}}"}]}
{"command": "qm rescan", "tasks": [{"task": "Rescan all storages and update disk sizes and unused disk images of a specific virtual machine:", "command": "qm rescan {{vm_id}}"}, {"task": "Perform a dry-run of rescan on a specific virtual machine and do not write any changes to configurations:", "command": "qm rescan --dryrun {{true}} {{vm_id}}"}]}
{"command": "qm reset", "tasks": [{"task": "Reset a virtual machine:", "command": "qm reset {{vm_id}}"}, {"task": "Reset a virtual machine and skip lock (only root can use this option):", "command": "qm reset --skiplock {{true}} {{vm_id}}"}]}
{"command": "qm resize", "tasks": [{"task": "View documentation for the original command:", "command": "tldr qm-disk-resize"}]}
{"command": "qm resume", "tasks": [{"task": "Resume a specific virtual machine:", "command": "qm resume {{vm_id}}"}, {"task": "Resume a specific virtual machine ignoring locks (requires root):", "command": "sudo qm resume {{vm_id}} --skiplock true"}]}
{"command": "qm rollback", "tasks": [{"task": "Rollback the state of a specific VM to a specified snapshot:", "command": "qm rollback {{vm_id}} {{snap_name}}"}]}
{"command": "qm sendkey", "tasks": [{"task": "Send the specified key event to a specific virtual machine:", "command": "qm sendkey {{vm_id}} {{key}}"}, {"task": "Allow root user to send key event and ignore locks:", "command": "qm sendkey --skiplock {{true}} {{vm_id}} {{key}}"}]}
{"command": "qm showcmd", "tasks": [{"task": "Show command-line for a specific virtual machine:", "command": "qm showcmd {{vm_id}}"}, {"task": "Put each option on a new line to enhance human readability:", "command": "qm showcmd --pretty {{true}} {{vm_id}}"}, {"task": "Fetch config values from a specific snapshot:", "command": "qm showcmd --snapshot {{string}} {{vm_id}}"}]}
{"command": "qm shutdown", "tasks": [{"task": "Shutdown a virtual machine:", "command": "qm shutdown {{VM_ID}}"}, {"task": "Shutdown a virtual machine after wait for at most 10 seconds:", "command": "qm shutdown --timeout {{10}} {{VM_ID}}"}, {"task": "Shutdown a virtual machine and do not deactivate storage volumes:", "command": "qm shutdown --keepActive {{true}} {{VM_ID}}"}, {"task": "Shutdown a virtual machine and skip lock (only root can use this option):", "command": "qm shutdown --skiplock {{true}} {{VM_ID}}"}, {"task": "Stop and shutdown a virtual machine:", "command": "qm shutdown --forceStop {{true}} {{VM_ID}}"}]}
{"command": "qm snapshot", "tasks": [{"task": "Create a snapshot of a specific virtual machine:", "command": "qm snapshot {{vm_id}} {{snapshot_name}}"}, {"task": "Create a snapshot with a specific description:", "command": "qm snapshot {{vm_id}} {{snapshot_name}} --description {{description}}"}, {"task": "Create a snapshot including the vmstate:", "command": "qm snapshot {{vm_id}} {{snapshot_name}} --description {{description}} --vmstate 1"}]}
{"command": "qm start", "tasks": [{"task": "Start a specific virtual machine:", "command": "qm start {{100}}"}, {"task": "Specify the QEMU machine type (i.e. the CPU to emulate):", "command": "qm start {{100}} --machine {{q35}}"}, {"task": "Start a specific virtual machine with a timeout in 60 seconds:", "command": "qm start {{100}} --timeout {{60}}"}]}
{"command": "qm status", "tasks": [{"task": "Display the status of a specific virtual machine:", "command": "qm status {{vm_id}}"}, {"task": "Display detailed status of a specific virtual machine:", "command": "qm status --verbose {{true}} {{vm_id}}"}]}
{"command": "qm suspend", "tasks": [{"task": "Suspend a virtual machine by id:", "command": "qm suspend {{vm_id}} {{integer}}"}, {"task": "Skip the lock check when suspending the VM:", "command": "qm suspend {{vm_id}} {{integer}} --skiplock"}, {"task": "Skip the lock check for storage when suspending the VM:", "command": "qm suspend {{vm_id}} {{integer}} --skiplockstorage"}]}
{"command": "qm template", "tasks": [{"task": "Create a template out of a specific virtual machine:", "command": "qm template {{vm_id}}"}]}
{"command": "qm unlock", "tasks": [{"task": "Unlock a specific virtual machine:", "command": "qm unlock {{vm_id}}"}]}
{"command": "qm vncproxy", "tasks": [{"task": "Proxy a specific virtual machine:", "command": "qm vncproxy {{vm_id}}"}]}
{"command": "qm wait", "tasks": [{"task": "Wait until the virtual machine is stopped:", "command": "qm wait {{vm_id}}"}, {"task": "Wait until the virtual machine is stopped with a 10 second timeout:", "command": "qm wait --timeout {{10}} {{vm_id}}"}, {"task": "Send a shutdown request, then wait until the virtual machine is stopped with a 10 second timeout:", "command": "qm shutdown {{vm_id}} && qm wait --timeout {{10}} {{vm_id}}"}]}
{"command": "qm", "tasks": [{"task": "List all virtual machines:", "command": "qm list"}, {"task": "Using an ISO file uploaded on the local storage, create a virtual machine with a 4 GB IDE disk on the `local-lvm` storage and an ID of 100:", "command": "qm create {{100}} -ide0 {{local-lvm:4}} -net0 {{e1000}} -cdrom {{local:iso/proxmox-mailgateway_2.1.iso}}"}, {"task": "Show the configuration of a virtual machine, specifying its ID:", "command": "qm config {{100}}"}, {"task": "Start a specific virtual machine:", "command": "qm start {{100}}"}, {"task": "Send a shutdown request, then wait until the virtual machine is stopped:", "command": "qm shutdown {{100}} && qm wait {{100}}"}, {"task": "Destroy a virtual machine and remove all related resources:", "command": "qm destroy {{100}} --purge"}]}
{"command": "qmrestore", "tasks": [{"task": "Restore virtual machine from given backup file on the original storage:", "command": "qmrestore {{path/to/vzdump-qemu-100.vma.lzo}} {{100}}"}, {"task": "Overwrite existing virtual machine from a given backup file on the original storage:", "command": "qmrestore {{path/to/vzdump-qemu-100.vma.lzo}} {{100}} --force true"}, {"task": "Restore the virtual machine from a given backup file on specific storage:", "command": "qmrestore {{path/to/vzdump-qemu-100.vma.lzo}} {{100}} --storage {{local}}"}, {"task": "Start virtual machine immediately from the backup while restoring in the background (only on Proxmox Backup Server):", "command": "qmrestore {{path/to/vzdump-qemu-100.vma.lzo}} {{100}} --live-restore true"}]}
{"command": "qrcp", "tasks": [{"task": "Send a file or directories:", "command": "qrcp send {{path/to/file_or_directory path/to/file_directory ...}}"}, {"task": "Receive files:", "command": "qrcp receive"}, {"task": "Compress content before transferring:", "command": "qrcp send --zip {{path/to/file_or_directory}}"}, {"task": "Specify a [p]ort to use:", "command": "qrcp {{send|receive}} --port {{port_number}}"}, {"task": "Specify the network [i]nterface to use:", "command": "qrcp {{send|receive}} --interface interface"}, {"task": "Keep the server alive:", "command": "qrcp {{send|receive}} --keep-alive"}]}
{"command": "qsub", "tasks": [{"task": "Submit a script with default settings (depends on TORQUE settings):", "command": "qsub {{script.sh}}"}, {"task": "Submit a script with a specified wallclock runtime limit of 1 hour, 2 minutes and 3 seconds:", "command": "qsub -l walltime={{1}}:{{2}}:{{3}} {{script.sh}}"}, {"task": "Submit a script that is executed on 2 nodes using 4 cores per node:", "command": "qsub -l nodes={{2}}:ppn={{4}} {{script.sh}}"}, {"task": "Submit a script to a specific queue. Note that different queues can have different maximum and minimum runtime limits:", "command": "qsub -q {{queue_name}} {{script.sh}}"}]}
{"command": "qtchooser", "tasks": [{"task": "List available Qt versions from the configuration files:", "command": "qtchooser --list-versions"}, {"task": "Print environment information:", "command": "qtchooser --print-env"}, {"task": "Run the specified tool using the specified Qt version:", "command": "qtchooser --run-tool={{tool}} --qt={{version_name}}"}, {"task": "Add a Qt version entry to be able to choose from:", "command": "qtchooser --install {{version_name}} {{path/to/qmake}}"}, {"task": "Display all available options:", "command": "qtchooser --help"}]}
{"command": "qtile", "tasks": [{"task": "Start the window manager, if it is not running already (should ideally be run from `.xsession` or similar):", "command": "qtile start"}, {"task": "Check the configuration file for any compilation errors (default location is `~/.config/qtile/config.py`):", "command": "qtile check"}, {"task": "Show current resource usage information:", "command": "qtile top --force"}, {"task": "Open the program `xterm` as a floating window on the group named `test-group`:", "command": "qtile run-cmd --group {{test-group}} --float {{xterm}}"}, {"task": "Restart the window manager:", "command": "qtile cmd-obj --object cmd --function restart"}]}
{"command": "quotacheck", "tasks": [{"task": "Check quotas on all mounted non-NFS filesystems:", "command": "sudo quotacheck --all"}, {"task": "Force check even if quotas are enabled (this can cause damage or loss to quota files):", "command": "sudo quotacheck --force {{mountpoint}}"}, {"task": "Check quotas on a given filesystem in debug mode:", "command": "sudo quotacheck --debug {{mountpoint}}"}, {"task": "Check quotas on a given filesystem, displaying the progress:", "command": "sudo quotacheck --verbose {{mountpoint}}"}, {"task": "Check user quotas:", "command": "sudo quotacheck --user {{user}} {{mountpoint}}"}, {"task": "Check group quotas:", "command": "sudo quotacheck --group {{group}} {{mountpoint}}"}]}
{"command": "radeontop", "tasks": [{"task": "Show the utilization of the default AMD GPU:", "command": "radeontop"}, {"task": "Enable colored output:", "command": "radeontop --color"}, {"task": "Select a specific GPU (the bus number is the first number in the output of `lspci`):", "command": "radeontop --bus {{bus_number}}"}, {"task": "Specify the display refresh rate (higher means more GPU overhead):", "command": "radeontop --ticks {{samples_per_second}}"}]}
{"command": "rankmirrors", "tasks": [{"task": "Rank a mirror list:", "command": "rankmirrors {{/etc/pacman.d/mirrorlist}}"}, {"task": "Output only a given number of the top ranking servers:", "command": "rankmirrors -n {{number}} {{/etc/pacman.d/mirrorlist}}"}, {"task": "Be verbose when generating the mirrorlist:", "command": "rankmirrors -v {{/etc/pacman.d/mirrorlist}}"}, {"task": "Test only a specific URL:", "command": "rankmirrors --url {{url}}"}, {"task": "Output only the response times instead of a full mirrorlist:", "command": "rankmirrors --times {{/etc/pacman.d/mirrorlist}}"}]}
{"command": "raspi-config", "tasks": [{"task": "Start `raspi-config`:", "command": "sudo raspi-config"}]}
{"command": "raspinfo", "tasks": [{"task": "Display system information:", "command": "raspinfo"}]}
{"command": "raw", "tasks": [{"task": "Bind a raw character device to a block device:", "command": "raw /dev/raw/raw{{1}} {{/dev/block_device}}"}, {"task": "Query an existing binding instead of setting a new one:", "command": "raw /dev/raw/raw{{1}}"}, {"task": "Query all bound raw devices:", "command": "raw -qa"}]}
{"command": "rc-service", "tasks": [{"task": "Show a service's status:", "command": "rc-service {{service_name}} status"}, {"task": "Start a service:", "command": "sudo rc-service {{service_name}} start"}, {"task": "Stop a service:", "command": "sudo rc-service {{service_name}} stop"}, {"task": "Restart a service:", "command": "sudo rc-service {{service_name}} restart"}, {"task": "Simulate running a service's custom command:", "command": "sudo rc-service --dry-run {{service_name}} {{command_name}}"}, {"task": "Actually run a service's custom command:", "command": "sudo rc-service {{service_name}} {{command_name}}"}, {"task": "Resolve the location of a service definition on disk:", "command": "sudo rc-service --resolve {{service_name}}"}]}
{"command": "rc-status", "tasks": [{"task": "Show a summary of services and their status:", "command": "rc-status"}, {"task": "Include services in all runlevels in the summary:", "command": "rc-status --all"}, {"task": "List services that have crashed:", "command": "rc-status --crashed"}, {"task": "List manually started services:", "command": "rc-status --manual"}, {"task": "List supervised services:", "command": "rc-status --supervised"}, {"task": "Get the current runlevel:", "command": "rc-status --runlevel"}, {"task": "List all runlevels:", "command": "rc-status --list"}]}
{"command": "rc-update", "tasks": [{"task": "List all services and the runlevels they are added to:", "command": "rc-update show"}, {"task": "Add a service to a runlevel:", "command": "sudo rc-update add {{service_name}} {{runlevel}}"}, {"task": "Delete a service from a runlevel:", "command": "sudo rc-update delete {{service_name}} {{runlevel}}"}, {"task": "Delete a service from all runlevels:", "command": "sudo rc-update --all delete {{service_name}}"}]}
{"command": "rdesktop", "tasks": [{"task": "Connect to a remote computer (default port is 3389):", "command": "rdesktop -u {{username}} -p {{password}} {{host:port}}"}, {"task": "Simple Examples:", "command": "rdesktop -u Administrator -p passwd123 192.168.1.111:3389"}, {"task": "Connect to a remote computer with full screen (press `Ctrl + Alt + Enter` to exist):", "command": "rdesktop -u {{username}} -p {{password}} -f {{host:port}}"}, {"task": "Use the customed resolution (use the letter 'x' between the number):", "command": "rdesktop -u {{username}} -p {{password}} -g 1366x768 {{host:port}}"}, {"task": "Connect to a remote computer using domain user:", "command": "rdesktop -u {{username}} -p {{password}} -d {{domainname}} {{host:port}}"}, {"task": "Use the 16-bit color (speed up):", "command": "rdesktop -u {{username}} -p {{password}} -a 16 {{host:port}}"}]}
{"command": "read", "tasks": [{"task": "Store data that you type from the keyboard:", "command": "read {{variable}}"}, {"task": "Store each of the next lines you enter as values of an array:", "command": "read -a {{array}}"}, {"task": "Specify the number of maximum characters to be read:", "command": "read -n {{character_count}} {{variable}}"}, {"task": "Use a specific character as a delimiter instead of a new line:", "command": "read -d {{new_delimiter}} {{variable}}"}, {"task": "Do not let backslash (\\\\) act as an escape character:", "command": "read -r {{variable}}"}, {"task": "Display a prompt before the input:", "command": "read -p \"{{Enter your input here: }}\" {{variable}}"}, {"task": "Do not echo typed characters (silent mode):", "command": "read -s {{variable}}"}, {"task": "Read `stdin` and perform an action on every line:", "command": "while read line; do echo \"$line\"; done"}]}
{"command": "readelf", "tasks": [{"task": "Display all information about the ELF file:", "command": "readelf -all {{path/to/binary}}"}, {"task": "Display all the headers present in the ELF file:", "command": "readelf --headers {{path/to/binary}}"}, {"task": "Display the entries in symbol table section of the ELF file, if it has one:", "command": "readelf --symbols {{path/to/binary}}"}, {"task": "Display the information contained in the ELF header at the start of the file:", "command": "readelf --file-header {{path/to/binary}}"}]}
{"command": "readpe", "tasks": [{"task": "Display all information about a PE file:", "command": "readpe {{path/to/executable}}"}, {"task": "Display all the headers present in a PE file:", "command": "readpe --all-headers {{path/to/executable}}"}, {"task": "Display all the sections present in a PE file:", "command": "readpe --all-sections {{path/to/executable}}"}, {"task": "Display a specific header from a PE file:", "command": "readpe --header {{dos|coff|optional}} {{path/to/executable}}"}, {"task": "List all imported functions:", "command": "readpe --imports {{path/to/executable}}"}, {"task": "List all exported functions:", "command": "readpe --exports {{path/to/executable}}"}]}
{"command": "reboot", "tasks": [{"task": "Reboot the system:", "command": "reboot"}, {"task": "Power off the system (same as `poweroff`):", "command": "reboot --poweroff"}, {"task": "Halt the system (same as `halt`):", "command": "reboot --halt"}, {"task": "Reboot immediately without contacting the system manager:", "command": "reboot --force"}, {"task": "Write the wtmp shutdown entry without rebooting the system:", "command": "reboot --wtmp-only"}]}
{"command": "reflector", "tasks": [{"task": "Get all mirrors, sort for download speed and save them:", "command": "sudo reflector --sort {{rate}} --save {{/etc/pacman.d/mirrorlist}}"}, {"task": "Only get German HTTPS mirrors:", "command": "reflector --country {{Germany}} --protocol {{https}}"}, {"task": "Only get the 10 recently sync'd mirrors:", "command": "reflector --latest {{10}}"}]}
{"command": "register_new_matrix_user", "tasks": [{"task": "Create a user interactively:", "command": "register_new_matrix_user --config {{path/to/homeserver.yaml}}"}, {"task": "Create an admin user interactively:", "command": "register_new_matrix_user --config {{path/to/homeserver.yaml}} --admin"}, {"task": "Create an admin user non-interactively (not recommended):", "command": "register_new_matrix_user --config {{path/to/homeserver.yaml}} --user {{username}} --password {{password}} --admin"}]}
{"command": "rename", "tasks": [{"task": "Rename files using simple substitutions (substitute 'foo' with 'bar' wherever found):", "command": "rename {{foo}} {{bar}} {{*}}"}, {"task": "Dry-run - display which renames would occur without performing them:", "command": "rename -vn {{foo}} {{bar}} {{*}}"}, {"task": "Do not overwrite existing files:", "command": "rename -o {{foo}} {{bar}} {{*}}"}, {"task": "Change file extensions:", "command": "rename {{.ext}} {{.bak}} {{*.ext}}"}, {"task": "Prepend \"foo\" to all filenames in the current directory:", "command": "rename {{''}} {{'foo'}} {{*}}"}, {"task": "Rename a group of increasingly numbered files zero-padding the numbers up to 3 digits:", "command": "rename {{foo}} {{foo00}} {{foo?}} && rename {{foo}} {{foo0}} {{foo??}}"}]}
{"command": "repo-add", "tasks": [{"task": "Add all package binaries in the current directory and remove the old database file:", "command": "repo-add --remove {{path/to/database.db.tar.gz}} {{*.pkg.tar.zst}}"}, {"task": "Add all package binaries in the current directory in silent mode except for warning and error messages:", "command": "repo-add --quiet {{path/to/database.db.tar.gz}} {{*.pkg.tar.zst}}"}, {"task": "Add all package binaries in the current directory without showing color:", "command": "repo-add --nocolor {{path/to/database.db.tar.gz}} {{*.pkg.tar.zst}}"}]}
{"command": "reportbug", "tasks": [{"task": "Generate a bug report about a specific package, then send it by e-mail:", "command": "reportbug {{package}}"}, {"task": "Report a bug that is not about a specific package (general problem, infrastructure, etc.):", "command": "reportbug other"}, {"task": "Write the bug report to a file instead of sending it by e-mail:", "command": "reportbug -o {{filename}} {{package}}"}]}
{"command": "repquota", "tasks": [{"task": "Report stats for all quotas in use:", "command": "sudo repquota -all"}, {"task": "Report quota stats for all users, even those who aren't using any of their quota:", "command": "sudo repquota -v {{filesystem}}"}, {"task": "Report on quotas for users only:", "command": "repquota --user {{filesystem}}"}, {"task": "Report on quotas for groups only:", "command": "sudo repquota --group {{filesystem}}"}, {"task": "Report on used quota and limits in a human-readable format:", "command": "sudo repquota --human-readable {{filesystem}}"}, {"task": "Report on all quotas for users and groups in a human-readable format:", "command": "sudo repquota -augs"}]}
{"command": "reptyr", "tasks": [{"task": "Move a running process to your current terminal:", "command": "reptyr {{pid}}"}]}
{"command": "reset", "tasks": [{"task": "Reinitialize the current terminal:", "command": "reset"}, {"task": "Display the terminal type instead:", "command": "reset -q"}]}
{"command": "resize2fs", "tasks": [{"task": "Automatically resize a filesystem:", "command": "resize2fs {{/dev/sdXN}}"}, {"task": "Resize the filesystem to a size of 40G, displaying a progress bar:", "command": "resize2fs -p {{/dev/sdXN}} {{40G}}"}, {"task": "Shrink the filesystem to its minimum possible size:", "command": "resize2fs -M {{/dev/sdXN}}"}]}
{"command": "resolvectl", "tasks": [{"task": "Show DNS settings:", "command": "resolvectl status"}, {"task": "Resolve the IPv4 and IPv6 addresses for one or more domains:", "command": "resolvectl query {{domain1 domain2 ...}}"}, {"task": "Retrieve the domain of a specified IP address:", "command": "resolvectl query {{ip_address}}"}, {"task": "Retrieve an MX record of a domain:", "command": "resolvectl --legend={{no}} --type={{MX}} query {{domain}}"}, {"task": "Resolve an SRV record, for example _xmpp-server._tcp gmail.com:", "command": "resolvectl service _{{service}}._{{protocol}} {{name}}"}, {"task": "Retrieve the public key from an email address from an OPENPGPKEY DNS record:", "command": "resolvectl openpgp {{email}}"}, {"task": "Retrieve a TLS key:", "command": "resolvectl tlsa tcp {{domain}}:443"}]}
{"command": "resolveip", "tasks": [{"task": "Resolve a hostname to an IP address:", "command": "resolveip {{example.org}}"}, {"task": "Resolve an IP address to a hostname:", "command": "resolveip {{1.1.1.1}}"}, {"task": "Silent mode. Produces less output:", "command": "resolveip --silent {{example.org}}"}]}
{"command": "restorecon", "tasks": [{"task": "View the current security context of a file or directory:", "command": "ls -dlZ {{path/to/file_or_directory}}"}, {"task": "Restore the security context of a file or directory:", "command": "restorecon {{path/to/file_or_directory}}"}, {"task": "Restore the security context of a directory recursively, and show all changed labels:", "command": "restorecon -R -v {{path/to/directory}}"}, {"task": "Restore the security context of a directory recursively, using all available threads, and show progress:", "command": "restorecon -R -T {{0}} -p {{path/to/directory}}"}, {"task": "Preview the label changes that would happen without applying them:", "command": "restorecon -R -n -v {{path/to/directory}}"}]}
{"command": "retroarch", "tasks": [{"task": "Start in the menu mode:", "command": "retroarch"}, {"task": "Start in full screen mode:", "command": "retroarch --fullscreen"}, {"task": "List all compiled features:", "command": "retroarch --features"}, {"task": "Set the path of a configuration file:", "command": "retroarch --config={{path/to/config_file}}"}, {"task": "Display help:", "command": "retroarch --help"}, {"task": "Display version:", "command": "retroarch --version"}]}
{"command": "rfkill", "tasks": [{"task": "List devices:", "command": "rfkill"}, {"task": "Filter by columns:", "command": "rfkill -o {{ID,TYPE,DEVICE}}"}, {"task": "Block devices by type (e.g. bluetooth, wlan):", "command": "rfkill block {{bluetooth}}"}, {"task": "Unblock devices by type (e.g. bluetooth, wlan):", "command": "rfkill unblock {{wlan}}"}, {"task": "Output in JSON format:", "command": "rfkill -J"}]}
{"command": "rig", "tasks": [{"task": "Display a random name (male or female) and address:", "command": "rig"}, {"task": "Display a [m]ale (or [f]emale) random name and address:", "command": "rig -{{m|f}}"}, {"task": "Use data files from a specific directory (default is `/usr/share/rig`):", "command": "rig -d {{path/to/directory}}"}, {"task": "Display a specific number of identities:", "command": "rig -c {{number}}"}, {"task": "Display a specific number of female identities:", "command": "rig -f -c {{number}}"}]}
{"command": "rkhunter", "tasks": [{"task": "Check a system for rootkits and malware:", "command": "sudo rkhunter --check"}, {"task": "Update rkhunter:", "command": "sudo rkhunter --update"}, {"task": "Print all available tests:", "command": "sudo rkhunter --list"}, {"task": "Display version:", "command": "sudo rkhunter --versioncheck"}, {"task": "Display help:", "command": "sudo rkhunter --help"}]}
{"command": "rm", "tasks": [{"task": "Remove specific files:", "command": "rm {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files ignoring nonexistent ones:", "command": "rm --force {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files interactively prompting before each removal:", "command": "rm --interactive {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files printing info about each removal:", "command": "rm --verbose {{path/to/file1 path/to/file2 ...}}"}, {"task": "Remove specific files and directories recursively:", "command": "rm --recursive {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}]}
{"command": "rmdir", "tasks": [{"task": "Remove specific directories:", "command": "rmdir {{path/to/directory1 path/to/directory2 ...}}"}, {"task": "Remove specific nested directories recursively:", "command": "rmdir --parents {{path/to/directory1 path/to/directory2 ...}}"}]}
{"command": "rmmod", "tasks": [{"task": "Remove a module from the kernel:", "command": "sudo rmmod {{module_name}}"}, {"task": "Remove a module from the kernel and display verbose information:", "command": "sudo rmmod --verbose {{module_name}}"}, {"task": "Remove a module from the kernel and send errors to syslog instead of `stderr`:", "command": "sudo rmmod --syslog {{module_name}}"}, {"task": "Display help:", "command": "rmmod --help"}, {"task": "Display version:", "command": "rmmod --version"}]}
{"command": "rofi", "tasks": [{"task": "Show the list of apps:", "command": "rofi -show drun"}, {"task": "Show the list of all commands:", "command": "rofi -show run"}, {"task": "Switch between windows:", "command": "rofi -show window"}, {"task": "Pipe a list of items to `stdin` and print the selected item to `stdout`:", "command": "printf \"{{Choice1\\nChoice2\\nChoice3}}\" | rofi -dmenu"}]}
{"command": "rolldice", "tasks": [{"task": "Roll a single 20 sided dice:", "command": "rolldice d{{20}}"}, {"task": "Roll two six sided dice and drop the lowest roll:", "command": "rolldice {{2}}d{{6}}s{{1}}"}, {"task": "Roll two 20 sided dice and add a modifier value:", "command": "rolldice {{2}}d{{20}}{{+5}}"}, {"task": "Roll a 20 sided dice two times:", "command": "rolldice {{2}}xd{{20}}"}]}
{"command": "rpcclient", "tasks": [{"task": "Connect to a remote host:", "command": "rpcclient --user {{domain}}\\{{username}}%{{password}} {{ip}}"}, {"task": "Connect to a remote host on a domain without a password:", "command": "rpcclient --user {{username}} --workgroup {{domain}} --no-pass {{ip}}"}, {"task": "Connect to a remote host, passing the password hash:", "command": "rpcclient --user {{domain}}\\{{username}} --pw-nt-hash {{ip}}"}, {"task": "Execute shell commands on a remote host:", "command": "rpcclient --user {{domain}}\\{{username}}%{{password}} --command {{semicolon_separated_commands}} {{ip}}"}, {"task": "Display domain users:", "command": "rpcclient $> enumdomusers"}, {"task": "Display privileges:", "command": "rpcclient $> enumprivs"}, {"task": "Display information about a specific user:", "command": "rpcclient $> queryuser {{username|rid}}"}, {"task": "Create a new user in the domain:", "command": "rpcclient $> createdomuser {{username}}"}]}
{"command": "rpcinfo", "tasks": [{"task": "Show full table of all RPC services registered on localhost:", "command": "rpcinfo"}, {"task": "Show concise table of all RPC services registered on localhost:", "command": "rpcinfo -s {{localhost}}"}, {"task": "Display table of statistics of rpcbind operations on localhost:", "command": "rpcinfo -m"}, {"task": "Display list of entries of given service name (mountd) and version number (2) on a remote nfs share:", "command": "rpcinfo -l {{remote_nfs_server_ip}} {{mountd}} {{2}}"}, {"task": "Delete the registration for version 1 of the mountd service for all transports:", "command": "rpcinfo -d {{mountd}} {{1}}"}]}
{"command": "rpi-eeprom-update", "tasks": [{"task": "Print information about the current raspberry pi EEPROM installed:", "command": "sudo rpi-eeprom-update"}, {"task": "Update a raspberry pi EEPROM:", "command": "sudo rpi-eeprom-update -a"}, {"task": "Cancel the pending update:", "command": "sudo rpi-eeprom-update -r"}, {"task": "Display help:", "command": "rpi-eeprom-update -h"}]}
{"command": "rpm-ostree", "tasks": [{"task": "Show rpm-ostree deployments in the order they will appear in the bootloader:", "command": "rpm-ostree status"}, {"task": "Show packages which are outdated and can be updated:", "command": "rpm-ostree upgrade --preview"}, {"task": "Prepare a new ostree deployment with upgraded packages and reboot into it:", "command": "rpm-ostree upgrade --reboot"}, {"task": "Reboot into the previous ostree deployment:", "command": "rpm-ostree rollback --reboot"}, {"task": "Install a package into a new ostree deployment and reboot into it:", "command": "rpm-ostree install {{package}} --reboot"}]}
{"command": "rpm", "tasks": [{"task": "Show version of httpd package:", "command": "rpm --query {{httpd}}"}, {"task": "List versions of all matching packages:", "command": "rpm --query --all '{{mariadb*}}'"}, {"task": "Forcibly install a package regardless of currently installed versions:", "command": "rpm --upgrade {{package_name.rpm}} --force"}, {"task": "Identify owner of a file and show version of the package:", "command": "rpm --query --file {{/etc/postfix/main.cf}}"}, {"task": "List package-owned files:", "command": "rpm --query --list {{kernel}}"}, {"task": "Show scriptlets from an RPM file:", "command": "rpm --query --package --scripts {{package_name.rpm}}"}, {"task": "Show changed, missing and/or incorrectly installed files of matching packages:", "command": "rpm --verify --all '{{php-*}}'"}, {"task": "Display the changelog of a specific package:", "command": "rpm --query --changelog {{package_name}}"}]}
{"command": "rpm2cpio", "tasks": [{"task": "Convert an RPM package to a `cpio` archive and save it as `file.cpio` in the current directory:", "command": "rpm2cpio {{path/to/file.rpm}}}"}]}
{"command": "rpmbuild", "tasks": [{"task": "Build binary and source packages:", "command": "rpmbuild -ba {{path/to/spec_file}}"}, {"task": "Build a binary package without source package:", "command": "rpmbuild -bb {{path/to/spec_file}}"}, {"task": "Specify additional variables when building a package:", "command": "rpmbuild -bb {{path/to/spec_file}} --define \"{{variable1}} {{value1}}\" --define \"{{variable2}} {{value2}}\""}]}
{"command": "rpmspec", "tasks": [{"task": "List binary packages which would be generated from a rpm spec file:", "command": "rpmspec --query {{path/to/rpm.spec}}"}, {"task": "List all options for `--queryformat`:", "command": "rpmspec --querytags"}, {"task": "Get summary information for single binary packages generated from a rpm spec file:", "command": "rpmspec --query --queryformat \"{{%{name}: %{summary}\\n}}\" {{path/to/rpm.spec}}"}, {"task": "Get the source package which would be generated from a rpm spec file:", "command": "rpmspec --query --srpm {{path/to/rpm.spec}}"}, {"task": "Parse a rpm spec file to `stdout`:", "command": "rpmspec --parse {{path/to/rpm.spec}}"}]}
{"command": "rspamc", "tasks": [{"task": "Train the bayesian filter to recognise an email as spam:", "command": "rspamc learn_spam {{path/to/email_file}}"}, {"task": "Train the bayesian filter to recognise an email as ham:", "command": "rspamc learn_ham {{path/to/email_file}}"}, {"task": "Generate a manual report on an email:", "command": "rspamc symbols {{path/to/email_file}}"}, {"task": "Show server statistics:", "command": "rspamc stat"}]}
{"command": "rtcwake", "tasks": [{"task": "Show whether an alarm is set or not:", "command": "sudo rtcwake -m show -v"}, {"task": "Suspend to RAM and wakeup after 10 seconds:", "command": "sudo rtcwake -m mem -s {{10}}"}, {"task": "Suspend to disk (higher power saving) and wakeup 15 minutes later:", "command": "sudo rtcwake -m disk --date +{{15}}min"}, {"task": "Freeze the system (more efficient than suspend-to-RAM but version 3.9 or newer of the Linux kernel is required) and wakeup at a given date and time:", "command": "sudo rtcwake -m freeze --date {{YYYYMMDDhhmm}}"}, {"task": "Disable a previously set alarm:", "command": "sudo rtcwake -m disable"}, {"task": "Perform a dry run to wakeup the computer at a given time. (Press Ctrl + C to abort):", "command": "sudo rtcwake -m on --date {{hh:ss}}"}]}
{"command": "rtorrent", "tasks": [{"task": "Add a torrent file or magnet to be downloaded:", "command": "rtorrent {{torrent_or_magnet}}"}, {"task": "Start the download:", "command": "<Ctrl>S"}, {"task": "View details about downloading torrent:", "command": "->"}, {"task": "Close rtorrent safely:", "command": "<Ctrl>Q"}]}
{"command": "ruget", "tasks": [{"task": "Download the contents of a URL to a file:", "command": "ruget {{https://example.com/file}}"}, {"task": "Download the contents of a URL to a specified [o]utput file:", "command": "ruget --output {{file_name}} {{https://example.com/file}}"}]}
{"command": "run-mailcap", "tasks": [{"task": "Individual actions/programs on run-mailcap can be invoked with action flag:", "command": "run-mailcap --action=ACTION [--option[=value]]"}, {"task": "In simple language:", "command": "run-mailcap --action=ACTION {{filename}}"}, {"task": "Turn on extra information:", "command": "run-mailcap --action=ACTION --debug {{filename}}"}, {"task": "Ignore any \"copiousoutput\" directive and forward output to `stdout`:", "command": "run-mailcap --action=ACTION --nopager {{filename}}"}, {"task": "Display the found command without actually executing it:", "command": "run-mailcap --action=ACTION --norun {{filename}}"}]}
{"command": "runcon", "tasks": [{"task": "Determine the current domain:", "command": "runcon"}, {"task": "Specify the domain to run a command in:", "command": "runcon -t {{domain}}_t {{command}}"}, {"task": "Specify the context role to run a command with:", "command": "runcon -r {{role}}_r {{command}}"}, {"task": "Specify the full context to run a command with:", "command": "runcon {{user}}_u:{{role}}_r:{{domain}}_t {{command}}"}]}
{"command": "runlim", "tasks": [{"task": "Print the time and memory usage of a command:", "command": "runlim {{command}} {{command_arguments}}"}, {"task": "Log statistics to a file instead of `stdout`:", "command": "runlim --output-file={{path/to/file}} {{command}} {{command_arguments}}"}, {"task": "Limit time to an upper bound (in seconds):", "command": "runlim --time-limit={{number}} {{command}} {{command_arguments}}"}, {"task": "Limit real-time to an upper bound (in seconds):", "command": "runlim --real-time-limit={{number}} {{command}} {{command_arguments}}"}, {"task": "Limit space to an upper bound (in MB):", "command": "runlim --space-limit={{number}} {{command}} {{command_arguments}}"}]}
{"command": "runuser", "tasks": [{"task": "Run command as a different user:", "command": "runuser {{user}} -c '{{command}}'"}, {"task": "Run command as a different user and group:", "command": "runuser {{user}} -g {{group}} -c '{{command}}'"}, {"task": "Start a login shell as a specific user:", "command": "runuser {{user}} -l"}, {"task": "Specify a shell for running instead of the default shell (also works for login):", "command": "runuser {{user}} -s {{/bin/sh}}"}, {"task": "Preserve the entire environment of root (only if `--login` is not specified):", "command": "runuser {{user}} --preserve-environment -c '{{command}}'"}]}
{"command": "rusnapshot", "tasks": [{"task": "Create a snapshot using a config file:", "command": "sudo rusnapshot --config {{path/to/config.toml}} --cr"}, {"task": "List created snapshots:", "command": "sudo rusnapshot -c {{path/to/config.toml}} --list"}, {"task": "Delete a snapshot by ID or the name of the snapshot:", "command": "sudo rusnapshot -c {{path/to/config.toml}} --del --id {{snapshot_id}}"}, {"task": "Delete all `hourly` snapshots:", "command": "sudo rusnapshot -c {{path/to/config.toml}} --list --keep {{0}} --clean --kind {{hourly}}"}, {"task": "Create a read-write snapshot:", "command": "sudo rusnapshot -c {{path/to/config.toml}} --cr --rw"}, {"task": "Restore a snapshot:", "command": "sudo rusnapshot -c {{path/to/config.toml}} --id {{snapshot_id}} --restore"}]}
{"command": "sa", "tasks": [{"task": "Display executable invocations per user (username not displayed):", "command": "sudo sa"}, {"task": "Display executable invocations per user, showing responsible usernames:", "command": "sudo sa --print-users"}, {"task": "List resources used recently per user:", "command": "sudo sa --user-summary"}]}
{"command": "sacct", "tasks": [{"task": "Display job id, job name, partition, account, number of allocated cpus, job state, and job exit codes for recent jobs:", "command": "sacct"}, {"task": "Display job id, job state, job exit code for recent jobs:", "command": "sacct --brief"}, {"task": "Display the allocations of a job:", "command": "sacct --jobs {{job_id}} --allocations"}, {"task": "Display elapsed time, job name, number of requested CPUs, and memory requested of a job:", "command": "sacct --jobs {{job_id}} --format={{elapsed}},{{jobname}},{{reqcpus}},{{reqmem}}"}]}
{"command": "sacctmgr", "tasks": [{"task": "Show current configuration:", "command": "sacctmgr show configuration"}, {"task": "Add a cluster to the slurm database:", "command": "sacctmgr add cluster {{cluster_name}}"}, {"task": "Add an account to the slurm database:", "command": "sacctmgr add account {{account_name}} cluster={{cluster_of_account}}"}, {"task": "Show details of user/association/cluster/account using a specific format:", "command": "sacctmgr show {{user|association|cluster|account}} format=\"Account%10\" format=\"GrpTRES%30\""}]}
{"command": "sam", "tasks": [{"task": "Initialize a serverless application:", "command": "sam init"}, {"task": "Initialize a serverless application with a specific runtime:", "command": "sam init --runtime {{python3.7}}"}, {"task": "Package a SAM application:", "command": "sam package"}, {"task": "Build your Lambda function code:", "command": "sam build"}, {"task": "Run your serverless application locally:", "command": "sam local start-api"}, {"task": "Deploy an AWS SAM application:", "command": "sam deploy"}]}
{"command": "sar", "tasks": [{"task": "Report I/O and transfer rate issued to physical devices, one per second (press CTRL+C to quit):", "command": "sar -b {{1}}"}, {"task": "Report a total of 10 network device statistics, one per 2 seconds:", "command": "sar -n DEV {{2}} {{10}}"}, {"task": "Report CPU utilization, one per 2 seconds:", "command": "sar -u ALL {{2}}"}, {"task": "Report a total of 20 memory utilization statistics, one per second:", "command": "sar -r ALL {{1}} {{20}}"}, {"task": "Report the run queue length and load averages, one per second:", "command": "sar -q {{1}}"}, {"task": "Report paging statistics, one per 5 seconds:", "command": "sar -B {{5}}"}]}
{"command": "sbatch", "tasks": [{"task": "Submit a batch job:", "command": "sbatch {{path/to/job.sh}}"}, {"task": "Submit a batch job with a custom name:", "command": "sbatch --job-name={{myjob}} {{path/to/job.sh}}"}, {"task": "Submit a batch job with a time limit of 30 minutes:", "command": "sbatch --time={{00:30:00}} {{path/to/job.sh}}"}, {"task": "Submit a job and request multiple nodes:", "command": "sbatch --nodes={{3}} {{path/to/job.sh}}"}]}
{"command": "scancel", "tasks": [{"task": "Cancel a job using its ID:", "command": "scancel {{job_id}}"}, {"task": "Cancel all jobs from a user:", "command": "scancel {{user_name}}"}]}
{"command": "scanimage", "tasks": [{"task": "List available scanners to ensure the target device is connected and recognized:", "command": "scanimage -L"}, {"task": "Scan an image and save it to a file:", "command": "scanimage --format={{pnm|tiff|png|jpeg}} > {{path/to/new_image}}"}]}
{"command": "schroot", "tasks": [{"task": "Run a command in a specific chroot:", "command": "schroot --chroot {{chroot}} {{command}}"}, {"task": "Run a command with options in a specific chroot:", "command": "schroot --chroot {{chroot}} {{command}} -- {{command_options}}"}, {"task": "Run a command in all available chroots:", "command": "schroot --all {{command}}"}, {"task": "Start an interactive shell within a specific chroot as a specific user:", "command": "schroot --chroot {{chroot}} --user {{user}}"}, {"task": "List available chroots:", "command": "schroot --list"}]}
{"command": "scontrol", "tasks": [{"task": "Show information for job:", "command": "scontrol show job {{job_id}}"}, {"task": "Suspend a comma-separated list of running jobs:", "command": "scontrol suspend {{job_id}}"}, {"task": "Resume a comma-separated list of suspended jobs:", "command": "scontrol resume {{job_id}}"}, {"task": "Hold a comma-separated list of queued jobs (Use `release` command to permit the jobs to be scheduled):", "command": "scontrol hold {{job_id}}"}, {"task": "Release a comma-separated list of suspended job:", "command": "scontrol release {{job_id}}"}]}
{"command": "screenkey", "tasks": [{"task": "Display keys which are currently being pressed on the screen:", "command": "screenkey"}, {"task": "Display keys and mouse buttons which are currently being pressed on the screen:", "command": "screenkey --mouse"}, {"task": "Launch the settings menu of screenkey:", "command": "screenkey --show-settings"}, {"task": "Launch screenkey at a specific position:", "command": "screenkey --position {{top|center|bottom|fixed}}"}, {"task": "Change the format of the key modifiers displayed on screen:", "command": "screenkey --mods-mode {{normal|emacs|mac|win|tux}}"}, {"task": "Change the appearance of screenkey:", "command": "screenkey --bg-color \"{{#a1b2c3}}\" --font {{Hack}} --font-color {{yellow}} --opacity {{0.8}}"}, {"task": "Drag and select a window on screen to display screenkey:", "command": "screenkey --position fixed --geometry {{$(slop -n -f '%g')}}"}]}
{"command": "script", "tasks": [{"task": "Record a new session to a file named `typescript` in the current directory:", "command": "script"}, {"task": "Record a new session to a custom filepath:", "command": "script {{path/to/session.out}}"}, {"task": "Record a new session, appending to an existing file:", "command": "script -a {{path/to/session.out}}"}, {"task": "Record timing information (data is outputted to `stderr`):", "command": "script -t 2> {{path/to/timingfile}}"}]}
{"command": "scriptreplay", "tasks": [{"task": "Replay a typescript at the speed it was recorded:", "command": "scriptreplay {{path/to/timing_file}} {{path/to/typescript}}"}, {"task": "Replay a typescript at double the original speed:", "command": "scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 2"}, {"task": "Replay a typescript at half the original speed:", "command": "scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 0.5"}]}
{"command": "scrot", "tasks": [{"task": "Capture a screenshot and save it to the current directory with the current date as the filename:", "command": "scrot"}, {"task": "Capture a screenshot and save it as `capture.png`:", "command": "scrot {{capture.png}}"}, {"task": "Capture a screenshot interactively:", "command": "scrot --select"}, {"task": "Capture a screenshot from the currently focused window:", "command": "scrot --focused"}, {"task": "Display a countdown of 10 seconds before taking a screenshot:", "command": "scrot --count --delay {{10}}"}]}
{"command": "sed", "tasks": [{"task": "Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`:", "command": "{{command}} | sed 's/apple/mango/g'"}, {"task": "Execute a specific script [f]ile and print the result to `stdout`:", "command": "{{command}} | sed -f {{path/to/script.sed}}"}, {"task": "Replace all `apple` (extended regex) occurrences with `APPLE` (extended regex) in all input lines and print the result to `stdout`:", "command": "{{command}} | sed -E 's/(apple)/\\U\\1/g'"}, {"task": "Print just a first line to `stdout`:", "command": "{{command}} | sed -n '1p'"}, {"task": "Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in a specific file and overwrite the original file in place:", "command": "sed -i 's/apple/mango/g' {{path/to/file}}"}]}
{"command": "see", "tasks": [{"task": "See action can be used to view any file (usually image) on default mailcap explorer:", "command": "see {{filename}}"}, {"task": "Using with `run-mailcap`:", "command": "run-mailcap --action=view {{filename}}"}]}
{"command": "select", "tasks": [{"task": "Create a menu out of individual words:", "command": "select {{word}} in {{apple}} {{orange}} {{pear}} {{banana}}; do echo ${{word}}; done"}, {"task": "Create a menu for picking a file or folder from the current directory:", "command": "select {{file}} in *; do echo ${{file}}; done"}, {"task": "Create a menu from a Bash array:", "command": "{{fruits}}=({{apple}} {{orange}} {{pear}} {{banana}}); select {{word}} in ${{{fruits}}[@]}; do echo ${{word}}; done"}]}
{"command": "semanage fcontext", "tasks": [{"task": "List all file labelling rules:", "command": "sudo semanage fcontext --list"}, {"task": "List all user-defined file labelling rules without headings:", "command": "sudo semanage fcontext --list --locallist --noheading"}, {"task": "Add a user-defined rule that labels any path which matches a PCRE regex:", "command": "sudo semanage fcontext --add --type {{samba_share_t}} {{'/mnt/share(/.*)?'}}"}, {"task": "Delete a user-defined rule using its PCRE regex:", "command": "sudo semanage fcontext --delete {{'/mnt/share(/.*)?'}}"}, {"task": "Relabel a directory recursively by applying the new rules:", "command": "restorecon -R -v {{path/to/directory}}"}]}
{"command": "semanage", "tasks": [{"task": "Output local customizations:", "command": "semanage -S {{store}} -o {{path/to/output_file}}"}, {"task": "Take a set of commands from a specified file and load them in a single transaction:", "command": "semanage -S {{store}} -i {{path/to/input_file}}"}, {"task": "Manage booleans. Booleans allow the administrator to modify the confinement of processes based on the current configuration:", "command": "semanage boolean -S {{store}} {{--delete|--modify|--list|--noheading|--deleteall}} {{-on|-off}} -F {{boolean|boolean_file}}"}, {"task": "Manage policy modules:", "command": "semanage module -S {{store}} {{--add|--delete|--list|--modify}} {{--enable|--disable}} {{module_name}}"}, {"task": "Disable/Enable dontaudit rules in policy:", "command": "semanage dontaudit -S {{store}} {{on|off}}"}]}
{"command": "sensible-browser", "tasks": [{"task": "Open a new window of the default browser:", "command": "sensible-browser"}, {"task": "Open a URL in the default browser:", "command": "sensible-browser {{url}}"}]}
{"command": "sensible-editor", "tasks": [{"task": "Open a file in the default editor:", "command": "sensible-editor {{path/to/file}}"}, {"task": "Open a file in the default editor, with the cursor at the end of the file:", "command": "sensible-editor + {{path/to/file}}"}, {"task": "Open a file in the default editor, with the cursor at the beginning of line 10:", "command": "sensible-editor +10 {{path/to/file}}"}, {"task": "Open 3 files in vertically split editor windows at the same time:", "command": "sensible-editor -O3 {{path/to/file1 path/to/file2 path/to/file3}}"}]}
{"command": "sensors", "tasks": [{"task": "Show the current readings of all sensor chips:", "command": "sensors"}, {"task": "Show temperatures in degrees Fahrenheit:", "command": "sensors --fahrenheit"}]}
{"command": "service", "tasks": [{"task": "List the name and status of all services:", "command": "service --status-all"}, {"task": "Start/Stop/Restart/Reload service (start/stop should always be available):", "command": "service {{service_name}} {{start|stop|restart|reload}}"}, {"task": "Do a full restart (runs script twice with start and stop):", "command": "service {{service_name}} --full-restart"}, {"task": "Show the current status of a service:", "command": "service {{service_name}} status"}]}
{"command": "setcap", "tasks": [{"task": "Set capability `cap_net_raw` (to use RAW and PACKET sockets) for a given file:", "command": "setcap '{{cap_net_raw}}' {{path/to/file}}"}, {"task": "Set multiple capabilities on a file (ep behind the capability means \"effective permitted\"):", "command": "setcap '{{cap_dac_read_search,cap_sys_tty_config+ep}}' {{path/to/file}}"}, {"task": "Remove all capabilities from a file:", "command": "setcap -r {{path/to/file}}"}, {"task": "Verify that the specified capabilities are currently associated with the specified file:", "command": "setcap -v '{{cap_net_raw}}' {{path/to/file}}"}, {"task": "The optional `-n {{rootuid}}` argument can be used to set the file capability for use only in a user namespace with this root user ID owner:", "command": "setcap -n {{rootuid}} '{{cap_net_admin}}' {{path/to/file}}"}]}
{"command": "setfacl", "tasks": [{"task": "Modify ACL of a file for user with read and write access:", "command": "setfacl -m u:{{username}}:rw {{file}}"}, {"task": "Modify default ACL of a file for all users:", "command": "setfacl -d -m u::rw {{file}}"}, {"task": "Remove ACL of a file for a user:", "command": "setfacl -x u:{{username}} {{file}}"}, {"task": "Remove all ACL entries of a file:", "command": "setfacl -b {{file}}"}]}
{"command": "setserial", "tasks": [{"task": "Print all information about a specific serial device:", "command": "setserial -a {{/dev/cuaN}}"}, {"task": "Print the configuration summary of a specific serial device (useful for printing during bootup process):", "command": "setserial -b {{device}}"}, {"task": "Set a specific configuration parameter to a device:", "command": "sudo setserial {{device}} {{parameter}}"}, {"task": "Print the configuration of a list of devices:", "command": "setserial -g {{device1 device2 ...}}"}]}
{"command": "setsid", "tasks": [{"task": "Run a program in a new session:", "command": "setsid {{program}}"}, {"task": "Run a program in a new session discarding the resulting output and error:", "command": "setsid {{program}} > /dev/null 2>&1"}, {"task": "Run a program creating a new process:", "command": "setsid --fork {{program}}"}, {"task": "Return the exit code of a program as the exit code of setsid when the program exits:", "command": "setsid --wait {{program}}"}, {"task": "Run a program in a new session setting the current terminal as the controlling terminal:", "command": "setsid --ctty {{program}}"}]}
{"command": "setxkbmap", "tasks": [{"task": "Set the keyboard in French AZERTY:", "command": "setxkbmap {{fr}}"}, {"task": "Set multiple keyboard layouts, their variants and switching option:", "command": "setxkbmap -layout {{us,de}} -variant {{,qwerty}} -option {{'grp:alt_caps_toggle'}}"}, {"task": "Get help:", "command": "setxkbmap -help"}, {"task": "List all layouts:", "command": "localectl list-x11-keymap-layouts"}, {"task": "List variants for the layout:", "command": "localectl list-x11-keymap-variants {{de}}"}, {"task": "List available switching options:", "command": "localectl list-x11-keymap-options | grep grp:"}]}
{"command": "sfill", "tasks": [{"task": "Overwrite free space and inodes of a disk with 38 writes (slow but secure):", "command": "sfill {{/path/to/mounted_disk_directory}}"}, {"task": "Overwrite free space and inodes of a disk with 6 writes (fast but less secure) and show status:", "command": "sfill -l -v {{/path/to/mounted_disk_directory}}"}, {"task": "Overwrite free space and inodes of a disk with 1 write (very fast but insecure) and show status:", "command": "sfill -ll -v {{/path/to/mounted_disk_directory}}"}, {"task": "Overwrite only free space of a disk:", "command": "sfill -I {{/path/to/mounted_disk_directory}}"}, {"task": "Overwrite only free inodes of a disk:", "command": "sfill -i {{/path/to/mounted_disk_directory}}"}]}
{"command": "sherlock", "tasks": [{"task": "Search for a specific username on social networks saving the results to a file:", "command": "sherlock {{username}} --output {{path/to/file}}"}, {"task": "Search for specific usernames on social networks saving the results into a directory:", "command": "sherlock {{username1 username2 ...}} --folderoutput {{path/to/directory}}"}, {"task": "Search for a specific username on social networks using the Tor network:", "command": "sherlock --tor {{username}}"}, {"task": "Make requests over Tor with a new Tor circuit after each request:", "command": "sherlock --unique-tor {{username}}"}, {"task": "Search for a specific username on social networks using a proxy:", "command": "sherlock {{username}} --proxy {{proxy_url}}"}, {"task": "Search for a specific username on social networks and open results in the default web browser:", "command": "sherlock {{username}} --browse"}, {"task": "Display help:", "command": "sherlock --help"}]}
{"command": "shiny-mirrors", "tasks": [{"task": "Get the status of the current mirrors:", "command": "shiny-mirrors status"}, {"task": "Generate a mirror list using the default behavior:", "command": "sudo shiny-mirrors refresh"}, {"task": "Display the current configuration file:", "command": "shiny-mirrors config show"}, {"task": "Switch to a different branch interactively:", "command": "sudo shiny-mirrors config --branch"}]}
{"command": "shutdown", "tasks": [{"task": "Power off (halt) immediately:", "command": "shutdown -h now"}, {"task": "Reboot immediately:", "command": "shutdown -r now"}, {"task": "Reboot in 5 minutes:", "command": "shutdown -r +{{5}} &"}, {"task": "Shutdown at 1:00 pm (Uses 24h clock):", "command": "shutdown -h 13:00"}, {"task": "Cancel a pending shutdown/reboot operation:", "command": "shutdown -c"}]}
{"command": "sic", "tasks": [{"task": "Connect to the default host (irc.ofct.net) with the nickname set in the `$USER` environment variable:", "command": "sic"}, {"task": "Connect to a given host, using a given nickname:", "command": "sic -h {{host}} -n {{nickname}}"}, {"task": "Connect to a given host, using a given nickname and password:", "command": "sic -h {{host}} -n {{nickname}} -k {{password}}"}, {"task": "Join a channel:", "command": ":j #{{channel}}<Enter>"}, {"task": "Send a message to a channel or user:", "command": ":m #{{channel|user}}<Enter>"}, {"task": "Set default channel or user:", "command": ":s #{{channel|user}}<Enter>"}]}
{"command": "silentcast", "tasks": [{"task": "Launch silentcast:", "command": "silentcast"}, {"task": "Launch silentcast on a specific display:", "command": "silentcast --display={{display}}"}]}
{"command": "sinfo", "tasks": [{"task": "Show a quick summary overview of the cluster:", "command": "sinfo --summarize"}, {"task": "View the detailed status of all partitions across the entire cluster:", "command": "sinfo"}, {"task": "View the detailed status of a specific partition:", "command": "sinfo --partition {{partition_name}}"}, {"task": "View information about idle nodes:", "command": "sinfo --states {{idle}}"}, {"task": "Summarise dead nodes:", "command": "sinfo --dead"}, {"task": "List dead nodes and the reasons why:", "command": "sinfo --list-reasons"}]}
{"command": "size", "tasks": [{"task": "Display the size of sections in a given object or executable file:", "command": "size {{path/to/file}}"}, {"task": "Display the size of sections in a given object or executable file in [o]ctal:", "command": "size {{-o|--radix=8}} {{path/to/file}}"}, {"task": "Display the size of sections in a given object or executable file in [d]ecimal:", "command": "size {{-d|--radix=10}} {{path/to/file}}"}, {"task": "Display the size of sections in a given object or executable file in he[x]adecimal:", "command": "size {{-x|--radix=16}} {{path/to/file}}"}]}
{"command": "slapt-get", "tasks": [{"task": "Update the list of available packages and versions:", "command": "slapt-get --update"}, {"task": "Install a package, or update it to the latest available version:", "command": "slapt-get --install {{package_name}}"}, {"task": "Remove a package:", "command": "slapt-get --remove {{package_name}}"}, {"task": "Upgrade all installed packages to their latest available versions:", "command": "slapt-get --upgrade"}, {"task": "Locate packages by the package name, disk set, or version:", "command": "slapt-get --search {{package_name}}"}, {"task": "Show information about a package:", "command": "slapt-get --show {{package_name}}"}]}
{"command": "slapt-src", "tasks": [{"task": "Update the list of available slackbuilds and versions:", "command": "slapt-src --update"}, {"task": "List all available slackbuilds:", "command": "slapt-src --list"}, {"task": "Fetch, build and install the specified slackbuild(s):", "command": "slapt-src --install {{slackbuild_name}}"}, {"task": "Locate slackbuilds by their name or description:", "command": "slapt-src --search {{search_term}}"}, {"task": "Display information about a slackbuild:", "command": "slapt-src --show {{slackbuild_name}}"}]}
{"command": "sleep", "tasks": [{"task": "Delay in seconds:", "command": "sleep {{seconds}}"}, {"task": "Delay in [m]inutes. (Other units [d]ay, [h]our, [s]econd, [inf]inity can also be used):", "command": "sleep {{minutes}}m"}, {"task": "Delay for 1 [d]ay 3 [h]ours:", "command": "sleep 1d 3h"}, {"task": "Execute a specific command after 20 [m]inutes delay:", "command": "sleep 20m && {{command}}"}]}
{"command": "slop", "tasks": [{"task": "Wait for the user to make a selection and output its geometry to `stdout`:", "command": "slop"}, {"task": "Double click, rather than click and drag, to draw a selection:", "command": "slop -D"}, {"task": "Highlight the selection rather than outlining it:", "command": "slop -l"}, {"task": "Specify the output format:", "command": "slop -f {{format_string}}"}, {"task": "Specify the selection rectangle's color:", "command": "slop -c {{red}},{{green}},{{blue}},{{alpha}}"}]}
{"command": "sm", "tasks": [{"task": "Display a message in full-screen:", "command": "sm \"{{Hello World!}}\""}, {"task": "Display a message with inverted colors:", "command": "sm -i \"{{Hello World!}}\""}, {"task": "Display a message with a custom foreground color:", "command": "sm -f {{blue}} \"{{Hello World!}}\""}, {"task": "Display a message with a custom background color:", "command": "sm -b {{#008888}} \"{{Hello World!}}\""}, {"task": "Display a message rotated 3 times (in steps of 90 degrees, counterclockwise):", "command": "sm -r {{3}} \"{{Hello World!}}\""}, {"task": "Display a message using the output from another command:", "command": "{{echo \"Hello World!\"}} | sm -"}]}
{"command": "smbclient", "tasks": [{"task": "Connect to a share (user will be prompted for password; `exit` to quit the session):", "command": "smbclient {{//server/share}}"}, {"task": "Connect with a different username:", "command": "smbclient {{//server/share}} --user {{username}}"}, {"task": "Connect with a different workgroup:", "command": "smbclient {{//server/share}} --workgroup {{domain}} --user {{username}}"}, {"task": "Connect with a username and password:", "command": "smbclient {{//server/share}} --user {{username%password}}"}, {"task": "Download a file from the server:", "command": "smbclient {{//server/share}} --directory {{path/to/directory}} --command \"get {{file.txt}}\""}, {"task": "Upload a file to the server:", "command": "smbclient {{//server/share}} --directory {{path/to/directory}} --command \"put {{file.txt}}\""}, {"task": "List the shares from a server anonymously:", "command": "smbclient --list={{server}} --no-pass"}]}
{"command": "smbget", "tasks": [{"task": "Download a file from a server:", "command": "smbget {{smb://server/share/file}}"}, {"task": "Download a share or directory recursively:", "command": "smbget --recursive {{smb://server/share}}"}, {"task": "Connect with a username and password:", "command": "smbget {{smb://server/share/file}} --user {{username%password}}"}, {"task": "Require encrypted transfers:", "command": "smbget {{smb://server/share/file}} --encrypt"}]}
{"command": "smbmap", "tasks": [{"task": "Display SMB shares and permissions on a host, prompting for user's password or NTLM hash:", "command": "smbmap -u {{username}} --prompt -H {{ip}}"}, {"task": "Display SMB shares and permissions on a host, specifying the domain and passing the password NTLM hash:", "command": "smbmap -u {{username}} --prompt -d {{domain}} -H {{ip}}"}, {"task": "Display SMB shares and list a single level of directories and files:", "command": "smbmap -u {{username}} --prompt -H {{ip}} -r"}, {"task": "Display SMB shares and recursively list a defined number of levels of directories and files:", "command": "smbmap -u {{username}} --prompt -H {{ip}} -R --depth {{3}}"}, {"task": "Display SMB shares and recursively list directories and files, downloading the files matching a regular expression:", "command": "smbmap -u {{username}} --prompt -H {{ip}} -R -A {{pattern}}"}, {"task": "Display SMB shares and recursively list directories and files, searching for file content matching a regular expression:", "command": "smbmap -u {{username}} --prompt -H {{ip}} -R -F {{pattern}}"}, {"task": "Execute a shell command on a remote system:", "command": "smbmap -u {{username}} --prompt -H {{ip}} -x {{command}}"}, {"task": "Upload a file to a remote system:", "command": "smbmap -u {{username}} --prompt -H {{ip}} --upload {{source}} {{destination}}"}]}
{"command": "smbnetfs", "tasks": [{"task": "Make shares available at `mountpoint`:", "command": "smbnetfs {{mountpoint}}"}]}
{"command": "smbpasswd", "tasks": [{"task": "Change the current user's SMB password:", "command": "smbpasswd"}, {"task": "Add a specified user to Samba and set password (user should already exist in system):", "command": "sudo smbpasswd -a {{username}}"}, {"task": "Modify an existing Samba user's password:", "command": "sudo smbpasswd {{username}}"}, {"task": "Delete a Samba user (use `pdbedit` instead if the Unix account has been deleted):", "command": "sudo smbpasswd -x {{username}}"}]}
{"command": "smem", "tasks": [{"task": "Print memory usage for current processes:", "command": "smem"}, {"task": "Print memory usage for current processes for a every user on a system:", "command": "smem --users"}, {"task": "Print memory usage for current processes for a specified user:", "command": "smem --userfilter {{username}}"}, {"task": "Print system memory information:", "command": "smem --system"}]}
{"command": "snake4", "tasks": [{"task": "Start a snake game:", "command": "snake4"}, {"task": "Choose level:", "command": "{{1|2|3|4|5}}"}, {"task": "Navigate the snake:", "command": "{{Up|Down|Left|Right}} arrow key"}, {"task": "Pause game:", "command": "Spacebar"}, {"task": "Quit game:", "command": "q"}, {"task": "Show the high scores:", "command": "snake4 --highscores"}]}
{"command": "snake4scores", "tasks": [{"task": "Show the highscores:", "command": "snake4scores"}]}
{"command": "snap", "tasks": [{"task": "Search for a package:", "command": "snap find {{package_name}}"}, {"task": "Install a package:", "command": "snap install {{package_name}}"}, {"task": "Update a package:", "command": "snap refresh {{package_name}}"}, {"task": "Update a package to another channel (track, risk, or branch):", "command": "snap refresh {{package_name}} --channel={{channel}}"}, {"task": "Update all packages:", "command": "snap refresh"}, {"task": "Display basic information about installed snap software:", "command": "snap list"}, {"task": "Uninstall a package:", "command": "snap remove {{package_name}}"}, {"task": "Check for recent snap changes in the system:", "command": "snap changes"}]}
{"command": "snapper", "tasks": [{"task": "List snapshot configs:", "command": "snapper list-configs"}, {"task": "Create snapper config:", "command": "snapper -c {{config}} create-config {{path/to/directory}}"}, {"task": "Create a snapshot with a description:", "command": "snapper -c {{config}} create -d \"{{snapshot_description}}\""}, {"task": "List snapshots for a config:", "command": "snapper -c {{config}} list"}, {"task": "Delete a snapshot:", "command": "snapper -c {{config}} delete {{snapshot_number}}"}, {"task": "Delete a range of snapshots:", "command": "snapper -c {{config}} delete {{snapshot_X}}-{{snapshot_Y}}"}]}
{"command": "snmpwalk", "tasks": [{"task": "Query the system information of a remote host using SNMPv1 and a community string:", "command": "snmpwalk -v1 -c {{community}} {{ip}}"}, {"task": "Query system information on a remote host by OID using SNMPv2 on a specified port:", "command": "snmpwalk -v2c -c {{community}} {{ip}}:{{port}} {{oid}}"}, {"task": "Query system information on a remote host by OID using SNMPv3 and authentication without encryption:", "command": "snmpwalk -v3 -l {{authNoPriv}} -u {{username}} -a {{MD5|SHA}} -A {{passphrase}} {{ip}} {{oid}}"}, {"task": "Query system information on a remote host by OID using SNMPv3, authentication, and encryption:", "command": "snmpwalk -v3 -l {{authPriv}} -u {{username}} -a {{MD5|SHA}} -A {{auth_passphrase}} -x {{DES|AES}} -X {{enc_passphrase}} {{ip}} {{oid}}"}, {"task": "Query system information on a remote host by OID using SNMPv3 without authentication or encryption:", "command": "snmpwalk -v3 -l {{noAuthNoPriv}} -u {{username}} {{ip}} {{oid}}"}]}
{"command": "spectre-meltdown-checker", "tasks": [{"task": "Check the currently running kernel for Spectre or Meltdown:", "command": "sudo spectre-meltdown-checker"}, {"task": "Check the currently running kernel and show an explanation of the actions to take to mitigate a vulnerability:", "command": "sudo spectre-meltdown-checker --explain"}, {"task": "Check for specific variants (defaults to all):", "command": "sudo spectre-meltdown-checker --variant {{1|2|3|3a|4|l1tf|msbds|mfbds|mlpds|mdsum|taa|mcespc|srbds}}"}, {"task": "Display output using a specific output format:", "command": "sudo spectre-meltdown-checker --batch {{text|json|nrpe|prometheus|short}}"}, {"task": "Don't use the `/sys` interface even if present:", "command": "sudo spectre-meltdown-checker --no-sysfs"}, {"task": "Check a non-running kernel:", "command": "sudo spectre-meltdown-checker --kernel {{path/to/kernel_file}}"}]}
{"command": "speedometer", "tasks": [{"task": "Show graph for a specific interface:", "command": "speedometer -r {{eth0}} -t {{eth0}}"}]}
{"command": "spi", "tasks": [{"task": "Update the list of available packages and slackbuilds:", "command": "spi --update"}, {"task": "Install a package or slackbuild:", "command": "spi --install {{package/slackbuild_name}}"}, {"task": "Upgrade all installed packages to the latest versions available:", "command": "spi --upgrade"}, {"task": "Locate packages or slackbuilds by package name or description:", "command": "spi {{search_terms}}"}, {"task": "Display information about a package or slackbuild:", "command": "spi --show {{package/slackbuild_name}}"}, {"task": "Purge the local package and slackbuild caches:", "command": "spi --clean"}]}
{"command": "sqfscat", "tasks": [{"task": "Display the contents of one or more files from a squashfs filesystem:", "command": "sqfscat {{filesystem.squashfs}} {{file1 file2 ...}}"}]}
{"command": "sqfstar", "tasks": [{"task": "Create a squashfs filesystem (compressed using `gzip` by default) from an uncompressed tar archive:", "command": "sqfstar {{filesystem.squashfs}} < {{archive.tar}}"}, {"task": "Create a squashfs filesystem from a tar archive compressed with `gzip`, and [comp]ress the filesystem using a specific algorithm:", "command": "zcat {{archive.tar.gz}} | sqfstar -comp {{gzip|lzo|lz4|xz|zstd|lzma}} {{filesystem.squashfs}}"}, {"task": "Create a squashfs filesystem from a tar archive compressed with `xz`, excluding some of the files:", "command": "xzcat {{archive.tar.xz}} | sqfstar {{filesystem.squashfs}} {{file1 file2 ...}}"}, {"task": "Create a squashfs filesystem from a tar archive compressed with `zstd`, excluding files ending with `.gz`:", "command": "zstdcat {{archive.tar.zst}} | sqfstar {{filesystem.squashfs}} \"{{*.gz}}\""}, {"task": "Create a squashfs filesystem from a tar archive compressed with `lz4`, excluding files matching a regular expression:", "command": "lz4cat {{archive.tar.lz4}} | sqfstar {{filesystem.squashfs}} -regex \"{{regular_expression}}\""}]}
{"command": "squeue", "tasks": [{"task": "View the queue:", "command": "squeue"}, {"task": "View jobs queued by a specific user:", "command": "squeue -u {{username}}"}, {"task": "View the queue and refresh every 5 seconds:", "command": "squeue -i {{5}}"}, {"task": "View the queue with expected start times:", "command": "squeue --start"}]}
{"command": "sreport", "tasks": [{"task": "Show pipe delimited cluster utilization data:", "command": "sreport --parsable cluster utilization"}, {"task": "Show number of jobs run:", "command": "sreport job sizes printjobcount"}, {"task": "Show users with the highest CPU time use:", "command": "sreport user topuser"}]}
{"command": "srun", "tasks": [{"task": "Submit a basic interactive job:", "command": "srun --pty /bin/bash"}, {"task": "Submit an interactive job with different attributes:", "command": "srun --ntasks-per-node={{num_cores}} --mem-per-cpu={{memory_MB}} --pty /bin/bash"}, {"task": "Connect to a worker node with a job running:", "command": "srun --jobid={{job_id}} --pty /bin/bash"}]}
{"command": "ss", "tasks": [{"task": "Show all TCP/UDP/RAW/UNIX sockets:", "command": "ss -a {{-t|-u|-w|-x}}"}, {"task": "Filter TCP sockets by states, only/exclude:", "command": "ss {{state/exclude}} {{bucket/big/connected/synchronized/...}}"}, {"task": "Show all TCP sockets connected to the local HTTPS port (443):", "command": "ss -t src :{{443}}"}, {"task": "Show all TCP sockets listening on the local 8080 port:", "command": "ss -lt src :{{8080}}"}, {"task": "Show all TCP sockets along with processes connected to a remote ssh port:", "command": "ss -pt dst :{{ssh}}"}, {"task": "Show all UDP sockets connected on specific source and destination ports:", "command": "ss -u 'sport == :{{source_port}} and dport == :{{destination_port}}'"}, {"task": "Show all TCP IPv4 sockets locally connected on the subnet 192.168.0.0/16:", "command": "ss -4t src {{192.168/16}}"}, {"task": "Kill IPv4 or IPv6 Socket Connection with destination IP 192.168.1.17 and destination port 8080:", "command": "ss --kill dst {{192.168.1.17}} dport = {{8080}}"}]}
{"command": "sstat", "tasks": [{"task": "Display status information of a comma-separated list of jobs:", "command": "sstat --jobs={{job_id}}"}, {"task": "Display job ID, average CPU and average virtual memory size of a comma-separated list of jobs, with pipes as column delimiters:", "command": "sstat --parsable --jobs={{job_id}} --format={{JobID}},{{AveCPU}},{{AveVMSize}}"}, {"task": "Display list of fields available:", "command": "sstat --helpformat"}]}
{"command": "st", "tasks": [{"task": "Open a terminal:", "command": "st"}, {"task": "Open a terminal with a specific title:", "command": "st -T {{title}}"}, {"task": "Open a terminal, execute a given command, and write the output to a file:", "command": "st -o {{path/to/file}} -e {{command argument1 argument2}}"}, {"task": "Increase/decrease the font size:", "command": "Ctrl + Shift + {{Page Up|Page Down}}"}, {"task": "Copy/paste from the clipboard:", "command": "Ctrl + Shift + {{C|V}}"}]}
{"command": "startx", "tasks": [{"task": "Start an X session:", "command": "startx"}, {"task": "Start an X session with a predefined depth value:", "command": "startx -- -depth {{value}}"}, {"task": "Start an X session with a predefined dpi value:", "command": "startx -- -dpi {{value}}"}, {"task": "Override the settings in the `.xinitrc` file and start a new X session:", "command": "startx /{{path/to/window_manager_or_desktop_environment}}"}]}
{"command": "steghide", "tasks": [{"task": "Embed data in a PNG, prompting for a passphrase:", "command": "steghide embed --coverfile {{path/to/image.png}} --embedfile {{path/to/data.txt}}"}, {"task": "Extract data from a WAV audio file:", "command": "steghide extract --stegofile {{path/to/sound.wav}}"}, {"task": "Display file information, trying to detect an embedded file:", "command": "steghide info {{path/to/file.jpg}}"}, {"task": "Embed data in a JPEG image, using maximum compression:", "command": "steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --compress {{9}}"}, {"task": "Get the list of supported encryption algorithms and modes:", "command": "steghide encinfo"}, {"task": "Embed encrypted data in a JPEG image, e.g. with Blowfish in CBC mode:", "command": "steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --encryption {{blowfish|...}} {{cbc|...}}"}]}
{"command": "stegsnow", "tasks": [{"task": "Extract [m]essage from file:", "command": "stegsnow {{path/to/file.txt}}"}, {"task": "Extract [C]ompressed and [p]assword protected [m]essage from file:", "command": "stegsnow -C -p {{password}} {{path/to/file.txt}}"}, {"task": "Determine approximate [S]torage capacity with line [l]ength less than 72 for file:", "command": "stegsnow -S -l 72 {{path/to/file.txt}}"}, {"task": "Conceal [m]essage in text from file and save to result:", "command": "stegsnow -m '{{message}}' {{path/to/file.txt}} {{path/to/result.txt}}"}, {"task": "Conceal message [f]ile content [C]ompressed in text from file and save to result:", "command": "stegsnow -C -f '{{path/to/message.txt}}' {{path/to/file.txt}} {{path/to/result.txt}}"}, {"task": "Conceal [m]essage [C]ompressed and [p]assword protected in text from file and save to result:", "command": "stegsnow -C -p {{password}} -m '{{message}}' {{path/to/file.txt}} {{path/to/result.txt}}"}]}
{"command": "strace", "tasks": [{"task": "Start tracing a specific process by its PID:", "command": "strace -p {{pid}}"}, {"task": "Trace a process and filter output by system call:", "command": "strace -p {{pid}} -e {{system_call_name}}"}, {"task": "Count time, calls, and errors for each system call and report a summary on program exit:", "command": "strace -p {{pid}} -c"}, {"task": "Show the time spent in every system call:", "command": "strace -p {{pid}} -T"}, {"task": "Start tracing a program by executing it:", "command": "strace {{program}}"}, {"task": "Start tracing file operations of a program:", "command": "strace -e trace=file {{program}}"}]}
{"command": "stress", "tasks": [{"task": "Spawn 4 workers to stress test CPU:", "command": "stress -c {{4}}"}, {"task": "Spawn 2 workers to stress test IO and timeout after 5 seconds:", "command": "stress -i {{2}} -t {{5}}"}, {"task": "Spawn 2 workers to stress test memory (each worker allocates 256M bytes):", "command": "stress -m {{2}} --vm-bytes {{256M}}"}, {"task": "Spawn 2 workers spinning on write()/unlink() (each worker writes 1G bytes):", "command": "stress -d {{2}} --hdd-bytes {{1GB}}"}]}
{"command": "strip", "tasks": [{"task": "Replace the input file with its stripped version:", "command": "strip {{path/to/file}}"}, {"task": "Strip symbols from a file, saving the output to a specific file:", "command": "strip {{path/to/input_file}} -o {{path/to/output_file}}"}, {"task": "Strip debug symbols only:", "command": "strip --strip-debug {{path/to/file.o}}"}]}
{"command": "swaks", "tasks": [{"task": "Deliver a standard test email to `user@example.com` on port 25 of `test-server.example.net`:", "command": "swaks --to {{user@example.com}} --server {{test-server.example.net}}"}, {"task": "Deliver a standard test email, requiring CRAM-MD5 authentication as user `me@example.com`. An \"X-Test\" header will be added to the email body:", "command": "swaks --to {{user@example.com}} --from {{me@example.com}} --auth {{CRAM-MD5}} --auth-user {{me@example.com}} --header-X-Test \"{{test_email}}\""}, {"task": "Test a virus scanner using EICAR in an attachment. Don't show the message DATA part:", "command": "swaks -t {{user@example.com}} --attach - --server {{test-server.example.com}} --suppress-data {{path/to/eicar.txt}}"}, {"task": "Test a spam scanner using GTUBE in the body of an email, routed via the MX records for `example.com`:", "command": "swaks --to {{user@example.com}} --body {{path/to/gtube_file}}"}, {"task": "Deliver a standard test email to `user@example.com` using the LMTP protocol via a UNIX domain socket file:", "command": "swaks --to {{user@example.com}} --socket {{/var/lda.sock}} --protocol {{LMTP}}"}]}
{"command": "swaplabel", "tasks": [{"task": "Display the current label and UUID of a swap area:", "command": "swaplabel {{path/to/file}}"}, {"task": "Set the label of a swap area:", "command": "swaplabel --label {{new_label}} {{path/to/file}}"}, {"task": "Set the UUID of a swap area (you can generate a UUID using `uuidgen`):", "command": "swaplabel --uuid {{new_uuid}} {{path/to/file}}"}]}
{"command": "swapoff", "tasks": [{"task": "Disable a given swap area:", "command": "swapoff {{path/to/file}}"}, {"task": "Disable all swap areas in `/proc/swaps`:", "command": "swapoff --all"}, {"task": "Disable a swap partition by its label:", "command": "swapoff -L {{label}}"}]}
{"command": "swapon", "tasks": [{"task": "Show swap information:", "command": "swapon"}, {"task": "Enable a given swap area:", "command": "swapon {{path/to/file}}"}, {"task": "Enable all swap areas specified in `/etc/fstab` except those with the `noauto` option:", "command": "swapon --all"}, {"task": "Enable a swap partition by its label:", "command": "swapon -L {{label}}"}]}
{"command": "swupd", "tasks": [{"task": "Update to the latest version:", "command": "sudo swupd update"}, {"task": "Show current version, and check whether a newer one exists:", "command": "swupd check-update"}, {"task": "List installed bundles:", "command": "swupd bundle-list"}, {"task": "Locate the bundle where a wanted package exists:", "command": "swupd search -b {{package}}"}, {"task": "Install a new bundle:", "command": "sudo swupd bundle-add {{bundle}}"}, {"task": "Remove a bundle:", "command": "sudo swupd bundle-remove {{bundle}}"}, {"task": "Correct broken or missing files:", "command": "sudo swupd verify"}]}
{"command": "sxiv", "tasks": [{"task": "Open an image:", "command": "sxiv {{path/to/file}}"}, {"task": "Open an image in fullscreen mode:", "command": "sxiv -f {{path/to/file}}"}, {"task": "Open a newline-separated list of images, reading filenames from `stdin`:", "command": "echo {{path/to/file}} | sxiv -i"}, {"task": "Open a space-separated list of images as a slideshow:", "command": "sxiv -S {{seconds}} {{path/to/file}}"}, {"task": "Open a space-separated list of images in thumbnail mode:", "command": "sxiv -t {{path/to/file}}"}]}
{"command": "synopkg", "tasks": [{"task": "List the names of installed packages:", "command": "synopkg list --name"}, {"task": "List packages which depend on a specific package:", "command": "synopkg list --depend-on {{package}}"}, {"task": "Start/Stop a package:", "command": "sudo synopkg {{start|stop}} {{package}}"}, {"task": "Print the status of a package:", "command": "synopkg status {{package}}"}, {"task": "Uninstall a package:", "command": "sudo synopkg uninstall {{package}}"}, {"task": "Check if updates are available for a package:", "command": "synopkg checkupdate {{package}}"}, {"task": "Upgrade all packages to the latest version:", "command": "sudo synopkg upgradeall"}, {"task": "Install a package from a synopkg file:", "command": "sudo synopkg install {{path/to/package.spk}}"}]}
{"command": "synoupgrade", "tasks": [{"task": "Check if upgrades are available:", "command": "sudo synoupgrade --check"}, {"task": "Check for patches without upgrading the DSM version:", "command": "sudo synoupgrade --check-smallupdate"}, {"task": "Download the latest upgrade available (use `--download-smallupdate` for patches):", "command": "sudo synoupgrade --download"}, {"task": "Start the upgrade process:", "command": "sudo synoupgrade --start"}, {"task": "Upgrade to the latest version automatically:", "command": "sudo synoupgrade --auto"}, {"task": "Apply patches without upgrading the DSM version automatically:", "command": "sudo synoupgrade --auto-smallupdate"}, {"task": "Upgrade the DSM using a patch file (should be an absolute path):", "command": "sudo synoupgrade --patch {{/path/to/file.pat}}"}, {"task": "Display help:", "command": "synoupgrade"}]}
{"command": "sysctl", "tasks": [{"task": "Show all available variables and their values:", "command": "sysctl -a"}, {"task": "Set a changeable kernel state variable:", "command": "sysctl -w {{section.tunable}}={{value}}"}, {"task": "Get currently open file handlers:", "command": "sysctl fs.file-nr"}, {"task": "Get limit for simultaneous open files:", "command": "sysctl fs.file-max"}, {"task": "Apply changes from `/etc/sysctl.conf`:", "command": "sysctl -p"}]}
{"command": "systemctl", "tasks": [{"task": "Show all running services:", "command": "systemctl status"}, {"task": "List failed units:", "command": "systemctl --failed"}, {"task": "Start/Stop/Restart/Reload a service:", "command": "systemctl {{start|stop|restart|reload}} {{unit}}"}, {"task": "Show the status of a unit:", "command": "systemctl status {{unit}}"}, {"task": "Enable/Disable a unit to be started on bootup:", "command": "systemctl {{enable|disable}} {{unit}}"}, {"task": "Mask/Unmask a unit to prevent enablement and manual activation:", "command": "systemctl {{mask|unmask}} {{unit}}"}, {"task": "Reload systemd, scanning for new or changed units:", "command": "systemctl daemon-reload"}, {"task": "Check if a unit is enabled:", "command": "systemctl is-enabled {{unit}}"}]}
{"command": "systemd-ac-power", "tasks": [{"task": "Silently check and return a 0 status code when running on AC power, and a non-zero code otherwise:", "command": "systemd-ac-power"}, {"task": "Additionally print `yes` or `no` to `stdout`:", "command": "systemd-ac-power --verbose"}]}
{"command": "systemd-analyze", "tasks": [{"task": "List all running units, ordered by the time they took to initialize:", "command": "systemd-analyze blame"}, {"task": "Print a tree of the time-critical chain of units:", "command": "systemd-analyze critical-chain"}, {"task": "Create an SVG file showing when each system service started, highlighting the time that they spent on initialization:", "command": "systemd-analyze plot > {{path/to/file.svg}}"}, {"task": "Plot a dependency graph and convert it to an SVG file:", "command": "systemd-analyze dot | dot -T{{svg}} > {{path/to/file.svg}}"}, {"task": "Show security scores of running units:", "command": "systemd-analyze security"}]}
{"command": "systemd-cat", "tasks": [{"task": "Write the output of the specified command to the journal (both output streams are captured):", "command": "systemd-cat {{command}}"}, {"task": "Write the output of a pipeline to the journal (`stderr` stays connected to the terminal):", "command": "{{command}} | systemd-cat"}]}
{"command": "systemd-delta", "tasks": [{"task": "Show all overridden configuration files:", "command": "systemd-delta"}, {"task": "Show only files of specific types (comma-separated list):", "command": "systemd-delta --type {{masked|equivalent|redirected|overridden|extended|unchanged}}"}, {"task": "Show only files whose path starts with the specified prefix (Note: a prefix is a directory containing subdirectories with systemd configuration files):", "command": "systemd-delta {{/etc|/run|/usr/lib|...}}"}, {"task": "Further restrict the search path by adding a suffix (the prefix is optional):", "command": "systemd-delta {{prefix}}/{{tmpfiles.d|sysctl.d|systemd/system|...}}"}]}
{"command": "systemd-firstboot", "tasks": [{"task": "Operate on the specified directory instead of the root directory of the host system:", "command": "sudo systemd-firstboot --root={{path/to/root_directory}}"}, {"task": "Set the system keyboard layout:", "command": "sudo systemd-firstboot --keymap={{keymap}}"}, {"task": "Set the system hostname:", "command": "sudo systemd-firstboot --hostname={{hostname}}"}, {"task": "Set the root user's password:", "command": "sudo systemd-firstboot --root-password={{password}}"}, {"task": "Prompt the user interactively for a specific basic setting:", "command": "sudo systemd-firstboot --prompt={{setting}}"}, {"task": "Force writing configuration even if the relevant files already exist:", "command": "sudo systemd-firstboot --force"}, {"task": "Remove all existing files that are configured by `systemd-firstboot`:", "command": "sudo systemd-firstboot --reset"}, {"task": "Remove the password of the system's root user:", "command": "sudo systemd-firstboot --delete-root-password"}]}
{"command": "systemd-hwdb", "tasks": [{"task": "Update the binary hardware database in `/etc/udev`:", "command": "systemd-hwdb update"}, {"task": "Query the hardware database and print the result for a specific modalias:", "command": "systemd-hwdb query {{modalias}}"}, {"task": "Update the binary hardware database, returning a non-zero exit value on any parsing error:", "command": "systemd-hwdb --strict update"}, {"task": "Update the binary hardware database in `/usr/lib/udev`:", "command": "systemd-hwdb --usr update"}, {"task": "Update the binary hardware database in the specified root path:", "command": "systemd-hwdb --root={{path/to/root}} update"}]}
{"command": "systemd-mount", "tasks": [{"task": "Mount a file system (image or block device) at `/run/media/system/LABEL` where LABEL is the filesystem label or the device name if there is no label:", "command": "systemd-mount {{path/to/file_or_device}}"}, {"task": "Mount a file system (image or block device) at a specific location:", "command": "systemd-mount {{path/to/file_or_device}} {{path/to/mount_point}}"}, {"task": "Show a list of all local, known block devices with file systems that may be mounted:", "command": "systemd-mount --list"}, {"task": "Create an automount point that mounts the actual file system at the time of first access:", "command": "systemd-mount --automount=yes {{path/to/file_or_device}}"}, {"task": "Unmount one or more devices:", "command": "systemd-mount --umount {{path/to/mount_point_or_device1}} {{path/to/mount_point_or_device2}}"}, {"task": "Mount a file system (image or block device) with a specific file system type:", "command": "systemd-mount --type={{file_system_type}} {{path/to/file_or_device}} {{path/to/mount_point}}"}, {"task": "Mount a file system (image or block device) with additional mount options:", "command": "systemd-mount --options={{mount_options}} {{path/to/file_or_device}} {{path/to/mount_point}}"}]}
{"command": "systemd-notify", "tasks": [{"task": "Notify systemd that the service has completed its initialization and is fully started. It should be invoked when the service is ready to accept incoming requests:", "command": "systemd-notify --booted"}, {"task": "Signal to systemd that the service is ready to handle incoming connections or perform its tasks:", "command": "systemd-notify --ready"}, {"task": "Provide a custom status message to systemd (this information is shown by `systemctl status`):", "command": "systemd-notify --status=\"{{Add custom status message here...}}\""}]}
{"command": "systemd-path", "tasks": [{"task": "Display a list of known paths and their current values:", "command": "systemd-path"}, {"task": "Query the specified path and display its value:", "command": "systemd-path \"{{path_name}}\""}, {"task": "Suffix printed paths with `suffix_string`:", "command": "systemd-path --suffix {{suffix_string}}"}, {"task": "Print a short version string and then exit:", "command": "systemd-path --version"}]}
{"command": "systemd-run", "tasks": [{"task": "Start a transient service:", "command": "sudo systemd-run {{command}} {{argument1 argument2 ...}}"}, {"task": "Start a transient service under the service manager of the current user (no privileges):", "command": "systemd-run --user {{command}} {{argument1 argument2 ...}}"}, {"task": "Start a transient service with a custom unit name and description:", "command": "sudo systemd-run --unit={{name}} --description={{string}} {{command}} {{argument1 argument2 ...}}"}, {"task": "Start a transient service that does not get cleaned up after it terminates with a custom environment variable:", "command": "sudo systemd-run --remain-after-exit --set-env={{name}}={{value}} {{command}} {{argument1 argument2 ...}}"}, {"task": "Start a transient timer that periodically runs its transient service (see `man systemd.time` for calendar event format):", "command": "sudo systemd-run --on-calendar={{calendar_event}} {{command}} {{argument1 argument2 ...}}"}, {"task": "Share the terminal with the program (allowing interactive input/output) and make sure the execution details remain after the program exits:", "command": "systemd-run --remain-after-exit --pty {{command}}"}, {"task": "Set properties (e.g. CPUQuota, MemoryMax) of the process and wait until it exits:", "command": "systemd-run --property MemoryMax={{memory_in_bytes}} --property CPUQuota={{percentage_of_CPU_time}}% --wait {{command}}"}, {"task": "Use the program in a shell pipeline:", "command": "{{command1}} | systemd-run --pipe {{command2}} | {{command3}}"}]}
{"command": "systemd-umount", "tasks": [{"task": "View documentation for the original command:", "command": "tldr systemd-mount"}]}
{"command": "tac", "tasks": [{"task": "Concatenate specific files in reversed order:", "command": "tac {{path/to/file1 path/to/file2 ...}}"}, {"task": "Display `stdin` in reversed order:", "command": "{{cat path/to/file}} | tac"}, {"task": "Use a specific separator:", "command": "tac --separator {{,}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Use a specific regex as a separator:", "command": "tac --regex --separator {{[,;]}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Use a separator before each file:", "command": "tac --before {{path/to/file1 path/to/file2 ...}}"}]}
{"command": "taskset", "tasks": [{"task": "Get a running process' CPU affinity by PID:", "command": "taskset --pid --cpu-list {{pid}}"}, {"task": "Set a running process' CPU affinity by PID:", "command": "taskset --pid --cpu-list {{cpu_id}} {{pid}}"}, {"task": "Start a new process with affinity for a single CPU:", "command": "taskset --cpu-list {{cpu_id}} {{command}}"}, {"task": "Start a new process with affinity for multiple non-sequential CPUs:", "command": "taskset --cpu-list {{cpu_id_1}},{{cpu_id_2}},{{cpu_id_3}}"}, {"task": "Start a new process with affinity for CPUs 1 through 4:", "command": "taskset --cpu-list {{cpu_id_1}}-{{cpu_id_4}}"}]}
{"command": "tc", "tasks": [{"task": "Add constant network delay to outbound packages:", "command": "tc qdisc add dev {{eth0}} root netem delay {{delay_in_milliseconds}}ms"}, {"task": "Add normal distributed network delay to outbound packages:", "command": "tc qdisc add dev {{eth0}} root netem delay {{mean_delay_ms}}ms {{delay_std_ms}}ms"}, {"task": "Add package corruption/loss/duplication to a portion of packages:", "command": "tc qdisc add dev {{eth0}} root netem {{corruption|loss|duplication}} {{effect_percentage}}%"}, {"task": "Limit bandwidth, burst rate and max latency:", "command": "tc qdisc add dev eth0 root tbf rate {{max_bandwidth_mb}}mbit burst {{max_burst_rate_kb}}kbit latency {{max_latency_before_drop_ms}}ms"}, {"task": "Show active traffic control policies:", "command": "tc qdisc show dev {{eth0}}"}, {"task": "Delete all traffic control rules:", "command": "tc qdisc del dev {{eth0}}"}, {"task": "Change traffic control rule:", "command": "tc qdisc change dev {{eth0}} root netem {{policy}} {{policy_parameters}}"}]}
{"command": "tcpflow", "tasks": [{"task": "Show all data on the given interface and port:", "command": "tcpflow -c -i {{eth0}} port {{80}}"}]}
{"command": "tcpkill", "tasks": [{"task": "Kill in-progress connections at a specified interface, host and port:", "command": "tcpkill -i {{eth1}} host {{192.95.4.27}} and port {{2266}}"}]}
{"command": "tcptraceroute", "tasks": [{"task": "Trace the route to a host:", "command": "tcptraceroute {{host}}"}, {"task": "Specify the destination port and packet length in bytes:", "command": "tcptraceroute {{host}} {{destination_port}} {{packet_length}}"}, {"task": "Specify the local source port and source address:", "command": "tcptraceroute {{host}} -p {{source_port}} -s {{source_address}}"}, {"task": "Set the first and maximum TTL:", "command": "tcptraceroute {{host}} -f {{first_ttl}} -m {{max_ttl}}"}, {"task": "Specify the wait time and number of queries per hop:", "command": "tcptraceroute {{host}} -w {{wait_time}} -q {{number_of_queries}}"}, {"task": "Specify the interface:", "command": "tcptraceroute {{host}} -i {{interface}}"}]}
{"command": "telinit", "tasks": [{"task": "Power off the machine:", "command": "telinit 0"}, {"task": "Reboot the machine:", "command": "telinit 6"}, {"task": "Change SysV run level:", "command": "telinit {{2|3|4|5}}"}, {"task": "Change to rescue mode:", "command": "telinit 1"}, {"task": "Reload daemon configuration:", "command": "telinit q"}, {"task": "Do not send a wall message before reboot/power-off (6/0):", "command": "telinit --no-wall {{value}}"}]}
{"command": "terminator", "tasks": [{"task": "Start `terminator` window:", "command": "terminator"}, {"task": "Start with a fullscreen window:", "command": "terminator -f"}, {"task": "Split terminals horizontally:", "command": "Ctrl + Shift + O"}, {"task": "Split terminals vertically:", "command": "Ctrl + Shift + E"}, {"task": "Open new tab:", "command": "Ctrl + Shift + T"}]}
{"command": "termusic", "tasks": [{"task": "Open termusic to a specific directory. (It can be set permanently in `~/.config/termusic/config.toml`):", "command": "termusic {path/to/directory}"}, {"task": "Disable showing the album cover for a specific file:", "command": "termusic -c {path/to/music_file}"}, {"task": "View termusic's usage info:", "command": "termusic --help"}]}
{"command": "tftp", "tasks": [{"task": "Connect to a TFTP server specifying its IP address and port:", "command": "tftp {{server_ip}} {{port}}"}, {"task": "Connect to a TFTP server and execute a TFTP [c]ommand:", "command": "tftp {{server_ip}} -c {{command}}"}, {"task": "Connect to a TFTP server using IPv6 and force originating port to be in [R]ange:", "command": "tftp {{server_ip}} -6 -R {{port}}:{{port}}"}, {"task": "Set the transfer mode to binary or ascii through the tftp client:", "command": "mode {{binary|ascii}}"}, {"task": "Download file from a server through the tftp client:", "command": "get {{file}}"}, {"task": "Upload file to a server through the tftp client:", "command": "put {{file}}"}, {"task": "Exit the tftp client:", "command": "quit"}]}
{"command": "thunar", "tasks": [{"task": "Open a new window showing the current directory:", "command": "thunar"}, {"task": "Open the bulk rename utility:", "command": "thunar --bulk-rename"}, {"task": "Close all open thunar windows:", "command": "thunar --quit"}]}
{"command": "tic", "tasks": [{"task": "Compile and install terminfo for a terminal:", "command": "tic -xe {{terminal}} {{path/to/terminal.info}}"}, {"task": "Check terminfo file for errors:", "command": "tic -c {{path/to/terminal.info}}"}, {"task": "Print database locations:", "command": "tic -D"}]}
{"command": "timedatectl", "tasks": [{"task": "Check the current system clock time:", "command": "timedatectl"}, {"task": "Set the local time of the system clock directly:", "command": "timedatectl set-time \"{{yyyy-MM-dd hh:mm:ss}}\""}, {"task": "List available timezones:", "command": "timedatectl list-timezones"}, {"task": "Set the system timezone:", "command": "timedatectl set-timezone {{timezone}}"}, {"task": "Enable Network Time Protocol (NTP) synchronization:", "command": "timedatectl set-ntp on"}, {"task": "Change the hardware clock time standard to localtime:", "command": "timedatectl set-local-rtc 1"}]}
{"command": "timeshift", "tasks": [{"task": "List snapshots:", "command": "sudo timeshift --list"}, {"task": "Create a new snapshot (if scheduled):", "command": "sudo timeshift --check"}, {"task": "Create a new snapshot (even if not scheduled):", "command": "sudo timeshift --create"}, {"task": "Restore a snapshot (selecting which snapshot to restore interactively):", "command": "sudo timeshift --restore"}, {"task": "Restore a specific snapshot:", "command": "sudo timeshift --restore --snapshot '{{snapshot}}'"}, {"task": "Delete a specific snapshot:", "command": "sudo timeshift --delete --snapshot '{{snapshot}}'"}]}
{"command": "tlp-stat", "tasks": [{"task": "Generate status report with configuration and all active settings:", "command": "sudo tlp-stat"}, {"task": "Show battery information:", "command": "sudo tlp-stat -b"}, {"task": "Show configuration:", "command": "sudo tlp-stat -c"}]}
{"command": "tlp", "tasks": [{"task": "Apply settings (according to the actual power source):", "command": "sudo tlp start"}, {"task": "Apply battery settings (ignoring the actual power source):", "command": "sudo tlp bat"}, {"task": "Apply AC settings (ignoring the actual power source):", "command": "sudo tlp ac"}]}
{"command": "toilet", "tasks": [{"task": "Generate ASCII art for a given text:", "command": "toilet {{input_text}}"}, {"task": "Generate ASCII art using a custom font file:", "command": "toilet {{input_text}} -f {{font_filename}}"}, {"task": "Generate ASCII art using a filter:", "command": "toilet {{input_text}} --filter {{filter_name}}"}, {"task": "Show available toilet filters:", "command": "toilet --filter list "}]}
{"command": "tomb", "tasks": [{"task": "Create a new tomb with an initial size of 100 MB:", "command": "tomb dig -s {{100}} {{encrypted_directory.tomb}}"}, {"task": "Create a new key file that can be used to lock a tomb; user will be prompted for a password for the key:", "command": "tomb forge {{encrypted_directory.tomb.key}}"}, {"task": "Forcefully create a new key, even if the tomb isn't allowing key forging (due to swap):", "command": "tomb forge {{encrypted_directory.tomb.key}} -f"}, {"task": "Initialize and lock an empty tomb using a key made with `forge`:", "command": "tomb lock {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}"}, {"task": "Mount a tomb (by default in `/media`) using its key, making it usable as a regular filesystem directory:", "command": "tomb open {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}"}, {"task": "Close a tomb (fails if the tomb is being used by a process):", "command": "tomb close {{encrypted_directory.tomb}}"}, {"task": "Forcefully close all open tombs, killing any applications using them:", "command": "tomb slam all"}, {"task": "List all open tombs:", "command": "tomb list"}]}
{"command": "toolbox create", "tasks": [{"task": "Create a `toolbox` container for a specific distribution:", "command": "toolbox create --distro {{distribution}}"}, {"task": "Create a `toolbox` container for a specific release of the current distribution:", "command": "toolbox create --release {{release}}"}, {"task": "Create a `toolbox` container with a custom image:", "command": "toolbox create --image {{name}}"}, {"task": "Create a `toolbox` container from a custom Fedora image:", "command": "toolbox create --image {{registry.fedoraproject.org/fedora-toolbox:38}}"}, {"task": "Create a `toolbox` container using the default image for Fedora 38:", "command": "toolbox create --distro {{fedora}} --release {{f38}}"}]}
{"command": "toolbox enter", "tasks": [{"task": "Enter a `toolbox` container using the default image of a specific distribution:", "command": "toolbox enter --distro {{distribution}}"}, {"task": "Enter a `toolbox` container using the default image of a specific release of the current distribution:", "command": "toolbox enter --release {{release}}"}, {"task": "Enter a toolbox container using the default image for Fedora 38:", "command": "toolbox enter --distro {{fedora}} --release {{f38}}"}]}
{"command": "toolbox help", "tasks": [{"task": "Display the `toolbox` manual:", "command": "toolbox help"}, {"task": "Display the `toolbox` manual for a specific subcommand:", "command": "toolbox help {{subcommand}}"}]}
{"command": "toolbox init-container", "tasks": [{"task": "Initialize a running toolbox:", "command": "toolbox init-container --gid {{gid}} --home {{home}} --home-link --media-link --mnt-link --monitor-host --shell {{shell}} --uid {{uid}} --user {{user}}"}]}
{"command": "toolbox list", "tasks": [{"task": "List all `toolbox` containers and images:", "command": "toolbox list"}, {"task": "List only `toolbox` containers:", "command": "toolbox list --containers"}, {"task": "List only `toolbox` images:", "command": "toolbox list --images"}]}
{"command": "toolbox rm", "tasks": [{"task": "Remove a toolbox container:", "command": "toolbox rm {{container_name}}"}, {"task": "Remove all `toolbox` containers:", "command": "toolbox rm --all"}, {"task": "Force the removal of a currently active `toolbox` container:", "command": "toolbox rm --force {{container_name}}"}]}
{"command": "toolbox rmi", "tasks": [{"task": "Remove a `toolbox` image:", "command": "toolbox rmi {{image_name}}"}, {"task": "Remove all `toolbox` images:", "command": "toolbox rmi --all"}, {"task": "Force the removal of a `toolbox` image which is currently being used by a container (the container will be removed as well):", "command": "toolbox rmi --force {{image_name}}"}]}
{"command": "toolbox run", "tasks": [{"task": "Run a command inside a specific `toolbox` container:", "command": "toolbox run --container {{container_name}} {{command}}"}, {"task": "Run a command inside a `toolbox` container for a specific release of a distribution:", "command": "toolbox run --distro {{distribution}} --release {{release}} {{command}}"}, {"task": "Run `emacs` inside a `toolbox` container using the default image for Fedora 38:", "command": "toolbox run --distro {{fedora}} --release {{f38}} {{emacs}}"}]}
{"command": "toolbox", "tasks": [{"task": "Run a `toolbox` subcommand:", "command": "toolbox {{subcommand}}"}, {"task": "Show help for a `toolbox` subcommand (such as `create`, `enter`, `rm`, `rmi`, etc.):", "command": "toolbox help {{subcommand}}"}, {"task": "Show general help:", "command": "toolbox --help"}, {"task": "Show the `toolbox` version:", "command": "toolbox --version"}]}
{"command": "top", "tasks": [{"task": "Start `top`:", "command": "top"}, {"task": "Do not show any idle or zombie processes:", "command": "top -i"}, {"task": "Show only processes owned by given user:", "command": "top -u {{username}}"}, {"task": "Sort processes by a field:", "command": "top -o {{field_name}}"}, {"task": "Show the individual threads of a given process:", "command": "top -Hp {{process_id}}"}, {"task": "Show only the processes with the given PID(s), passed as a comma-separated list. (Normally you wouldn't know PIDs off hand. This example picks the PIDs from the process name):", "command": "top -p $(pgrep -d ',' {{process_name}})"}, {"task": "Get help about interactive commands:", "command": "?"}]}
{"command": "trace-cmd", "tasks": [{"task": "Display the status of tracing system:", "command": "trace-cmd stat"}, {"task": "List available tracers:", "command": "trace-cmd list -t"}, {"task": "Start tracing with a specific plugin:", "command": "trace-cmd start -p {{timerlat|osnoise|hwlat|blk|mmiotrace|function_graph|wakeup_dl|wakeup_rt|wakeup|function|nop}}"}, {"task": "View the trace output:", "command": "trace-cmd show"}, {"task": "Stop the tracing but retain the buffers:", "command": "trace-cmd stop"}, {"task": "Clear the trace buffers:", "command": "trace-cmd clear"}, {"task": "Clear the trace buffers and stop tracing:", "command": "trace-cmd reset"}]}
{"command": "tracepath", "tasks": [{"task": "A preferred way to trace the path to a host:", "command": "tracepath -p {{33434}} {{host}}"}, {"task": "Specify the initial destination port, useful with non-standard firewall settings:", "command": "tracepath -p {{destination_port}} {{host}} "}, {"task": "Print both hostnames and numerical IP addresses:", "command": "tracepath -b {{host}}"}, {"task": "Specify a maximum TTL (number of hops):", "command": "tracepath -m {{max_hops}} {{host}}"}, {"task": "Specify the initial packet length (defaults to 65535 for IPv4 and 128000 for IPv6):", "command": "tracepath -l {{packet_length}} {{host}}"}, {"task": "Use only IPv6 addresses:", "command": "tracepath -6 {{host}}"}]}
{"command": "trash", "tasks": [{"task": "Delete a file and send it to the trash:", "command": "trash {{path/to/file}}"}, {"task": "List all files in the trash:", "command": "trash-list"}, {"task": "Interactively restore a file from the trash:", "command": "trash-restore"}, {"task": "Empty the trash:", "command": "trash-empty"}, {"task": "Permanently delete all files in the trash which are older than 10 days:", "command": "trash-empty {{10}}"}, {"task": "Remove all files in the trash, which match a specific blob pattern:", "command": "trash-rm \"{{*.o}}\""}, {"task": "Remove all files with a specific original location:", "command": "trash-rm {{/path/to/file_or_directory}}"}]}
{"command": "trashy", "tasks": [{"task": "Move a specific file to the trash:", "command": "trash {{path/to/file}}"}, {"task": "Move specific files to the trash:", "command": "trash {{path/to/file1 path/to/file2 ...}}"}, {"task": "List items in the trash:", "command": "trash list"}, {"task": "Restore a specific file from the trash:", "command": "trash restore {{file}}"}, {"task": "Remove a specific file from the trash:", "command": "trash empty {{file}}"}, {"task": "Restore all files from the trash:", "command": "trash restore --all"}, {"task": "Remove all files from the trash:", "command": "trash empty --all"}]}
{"command": "trayer", "tasks": [{"task": "Run `trayer`:", "command": "trayer"}, {"task": "Position `trayer` to a specific edge:", "command": "trayer --edge {{left|right|top|bottom}}"}, {"task": "Provide a specific height and width of the panel (in pixels):", "command": "trayer --width {{10}} --height {{32}}"}, {"task": "Provide the width of the panel in pixels or percentages:", "command": "trayer --widthtype {{pixel|percent}} --width {{72}}"}, {"task": "Align `trayer` to a specific direction:", "command": "trayer --align {{left|center|right}}"}, {"task": "Provide spacing between icons (in pixels):", "command": "trayer --iconspacing {{10}}"}]}
{"command": "treetime", "tasks": [{"task": "Infer ancestral sequences maximizing the joint or marginal likelihood:", "command": "treetime ancestral"}, {"task": "Analyze patterns of recurrent mutations aka homoplasies:", "command": "treetime homoplasy"}, {"task": "Estimate molecular clock parameters and reroot the tree:", "command": "treetime clock"}, {"task": "Map discrete character such as host or country to the tree:", "command": "treetime mugration"}]}
{"command": "trizen", "tasks": [{"task": "Synchronize and update all AUR packages:", "command": "trizen -Syua"}, {"task": "Install a new package:", "command": "trizen -S {{package}}"}, {"task": "Remove a package and its dependencies:", "command": "trizen -Rs {{package}}"}, {"task": "Search the package database for a keyword:", "command": "trizen -Ss {{keyword}}"}, {"task": "Show information about a package:", "command": "trizen -Si {{package}}"}, {"task": "List installed packages and versions:", "command": "trizen -Qe"}]}
{"command": "trust", "tasks": [{"task": "List trust policy store items:", "command": "trust list"}, {"task": "List information about specific items in the trust policy store:", "command": "trust list --filter={{blocklist|ca-anchors|certificates|trust-policy}}"}, {"task": "Store a specific trust anchor in the trust policy store:", "command": "trust anchor {{path/to/certificate.crt}}"}, {"task": "Remove a specific anchor from the trust policy store:", "command": "trust anchor --remove {{path/to/certificate.crt}}"}, {"task": "Extract trust policy from the shared trust policy store:", "command": "trust extract --format=x509-directory --filter=ca-anchors {{path/to/directory}}"}, {"task": "Display help for a subcommand:", "command": "trust {{subcommand}} --help"}]}
{"command": "tshark", "tasks": [{"task": "Monitor everything on localhost:", "command": "tshark"}, {"task": "Only capture packets matching a specific capture filter:", "command": "tshark -f '{{udp port 53}}'"}, {"task": "Only show packets matching a specific output filter:", "command": "tshark -Y '{{http.request.method == \"GET\"}}'"}, {"task": "Decode a TCP port using a specific protocol (e.g. HTTP):", "command": "tshark -d tcp.port=={{8888}},{{http}}"}, {"task": "Specify the format of captured output:", "command": "tshark -T {{json|text|ps|…}}"}, {"task": "Select specific fields to output:", "command": "tshark -T {{fields|ek|json|pdml}} -e {{http.request.method}} -e {{ip.src}}"}, {"task": "Write captured packet to a file:", "command": "tshark -w {{path/to/file}}"}, {"task": "Analyze packets from a file:", "command": "tshark -r {{path/to/file.pcap}}"}]}
{"command": "ttyplot", "tasks": [{"task": "Plot the values `1`, `2` and `3` (`cat` prevents ttyplot to exit):", "command": "{ echo {{1 2 3}}; cat } | ttyplot"}, {"task": "Set a specific title and unit:", "command": "{ echo {{1 2 3}}; cat } | ttyplot -t {{title}} -u {{unit}}"}, {"task": "Use a while loop to continuously plot random values:", "command": "{ while {{true}}; do echo {{$RANDOM}}; sleep {{1}}; done } | ttyplot"}, {"task": "Parse the output from `ping` and visualize it:", "command": "ping {{8.8.8.8}} | sed -u '{{s/^.*time=//g; s/ ms//g}}' | ttyplot -t \"{{ping to 8.8.8.8}}\" -u {{ms}}"}]}
{"command": "tune2fs", "tasks": [{"task": "Set the max number of counts before a filesystem is checked to 2:", "command": "tune2fs -c {{2}} {{/dev/sdXN}}"}, {"task": "Set the filesystem label to MY_LABEL:", "command": "tune2fs -L {{'MY_LABEL'}} {{/dev/sdXN}}"}, {"task": "Enable discard and user-specified extended attributes for a filesystem:", "command": "tune2fs -o {{discard,user_xattr}} {{/dev/sdXN}}"}, {"task": "Enable journaling for a filesystem:", "command": "tune2fs -o^{{nobarrier}} {{/dev/sdXN}}"}]}
{"command": "tuxi", "tasks": [{"task": "Make a search using Google:", "command": "tuxi {{search_terms}}"}, {"task": "Display the search results in [r]aw format (no pretty output, no colors):", "command": "tuxi -r {{search_terms}}"}, {"task": "Display only search results (silences \"Did you mean?\", greetings and usage):", "command": "tuxi -q {{search_terms}}"}, {"task": "Display help:", "command": "tuxi -h"}]}
{"command": "ubuntu-bug", "tasks": [{"task": "View documentation for the original command:", "command": "tldr apport-bug"}]}
{"command": "ubuntu-security-status", "tasks": [{"task": "Display the number of unsupported packages:", "command": "ubuntu-security-status"}, {"task": "List packages that are no longer available for download:", "command": "ubuntu-security-status --unavailable"}, {"task": "List third-party packages:", "command": "ubuntu-security-status --thirdparty"}]}
{"command": "udevadm", "tasks": [{"task": "Monitor all device events:", "command": "sudo udevadm monitor"}, {"task": "Print `uevents` sent out by the kernel:", "command": "sudo udevadm monitor --kernel"}, {"task": "Print device events after being processed by `udev`:", "command": "sudo udevadm monitor --udev"}, {"task": "List attributes of a device:", "command": "sudo udevadm info --attribute-walk --path {{/dev/sda1}}"}, {"task": "Reload all `udev` rules:", "command": "sudo udevadm control --reload-rules"}, {"task": "Trigger all `udev` rules to run:", "command": "sudo udevadm trigger"}]}
{"command": "udisksctl", "tasks": [{"task": "Show high-level information about disk drives and block devices:", "command": "udisksctl status"}, {"task": "Show detailed information about a device:", "command": "udisksctl info --block-device {{/dev/sdX}}"}, {"task": "Show detailed information about a device partition:", "command": "udisksctl info --block-device {{/dev/sdXN}}"}, {"task": "Mount a device partition and prints the mount point:", "command": "udisksctl mount --block-device {{/dev/sdXN}}"}, {"task": "Unmount a device partition:", "command": "udisksctl unmount --block-device {{/dev/sdXN}}"}, {"task": "Monitor the daemon for events:", "command": "udisksctl monitor"}]}
{"command": "ufw", "tasks": [{"task": "Enable ufw:", "command": "ufw enable"}, {"task": "Disable ufw:", "command": "ufw disable"}, {"task": "Show ufw rules, along with their numbers:", "command": "ufw status numbered"}, {"task": "Allow incoming traffic on port 5432 on this host with a comment identifying the service:", "command": "ufw allow {{5432}} comment \"{{Service}}\""}, {"task": "Allow only TCP traffic from 192.168.0.4 to any address on this host, on port 22:", "command": "ufw allow proto {{tcp}} from {{192.168.0.4}} to {{any}} port {{22}}"}, {"task": "Deny traffic on port 80 on this host:", "command": "ufw deny {{80}}"}, {"task": "Deny all UDP traffic to ports in range 8412:8500:", "command": "ufw deny proto {{udp}} from {{any}} to {{any}} port {{8412:8500}}"}, {"task": "Delete a particular rule. The rule number can be retrieved from the `ufw status numbered` command:", "command": "ufw delete {{rule_number}}"}]}
{"command": "ul", "tasks": [{"task": "Display the contents of the file with underlines where applicable:", "command": "ul {{file.txt}}"}, {"task": "Display the contents of the file with underlines made of dashes `-`:", "command": "ul -i {{file.txt}}"}]}
{"command": "uname", "tasks": [{"task": "Print all information:", "command": "uname --all"}, {"task": "Print the current kernel name:", "command": "uname --kernel-name"}, {"task": "Print the current network node host name:", "command": "uname --nodename"}, {"task": "Print the current kernel release:", "command": "uname --kernel-release"}, {"task": "Print the current kernel version:", "command": "uname --kernel-version"}, {"task": "Print the current machine hardware name:", "command": "uname --machine"}, {"task": "Print the current processor type:", "command": "uname --processor"}, {"task": "Print the current operating system name:", "command": "uname --operating-system"}]}
{"command": "unix2dos", "tasks": [{"task": "Change the line endings of a file:", "command": "unix2dos {{path/to/file}}"}, {"task": "Create a copy with DOS-style line endings:", "command": "unix2dos -n {{path/to/unix_file}} {{path/to/dos_file}}"}]}
{"command": "unix2mac", "tasks": [{"task": "Change the line endings of a file:", "command": "unix2mac {{path/to/file}}"}, {"task": "Create a copy with macOS-style line endings:", "command": "unix2mac -n {{path/to/unix_file}} {{path/to/mac_file}}"}]}
{"command": "unset", "tasks": [{"task": "Remove the variable `foo`, or if the variable doesn't exist, remove the function `foo`:", "command": "unset {{foo}}"}, {"task": "Remove the variables foo and bar:", "command": "unset -v {{foo}} {{bar}}"}, {"task": "Remove the function my_func:", "command": "unset -f {{my_func}}"}]}
{"command": "unshadow", "tasks": [{"task": "Combine the `/etc/shadow` and `/etc/passwd` of the current system:", "command": "sudo unshadow /etc/passwd /etc/shadow"}, {"task": "Combine two arbitrary shadow and password files:", "command": "sudo unshadow {{path/to/passwd}} {{path/to/shadow}}"}]}
{"command": "unshare", "tasks": [{"task": "Execute a command without sharing access to connected networks:", "command": "unshare --net {{command}} {{command_arguments}}"}, {"task": "Execute a command as a child process without sharing mounts, processes, or networks:", "command": "unshare --mount --pid --net --fork {{command}} {{command_arguments}}"}]}
{"command": "unsquashfs", "tasks": [{"task": "Extract a squashfs filesystem to `squashfs-root` in the current working directory:", "command": "unsquashfs {{filesystem.squashfs}}"}, {"task": "Extract a squashfs filesystem to the specified directory:", "command": "unsquashfs -dest {{path/to/directory}} {{filesystem.squashfs}}"}, {"task": "Display the names of files as they are extracted:", "command": "unsquashfs -info {{filesystem.squashfs}}"}, {"task": "Display the names of files and their attributes as they are extracted:", "command": "unsquashfs -linfo {{filesystem.squashfs}}"}, {"task": "List files inside the squashfs filesystem (without extracting):", "command": "unsquashfs -ls {{filesystem.squashfs}}"}, {"task": "List files and their attributes inside the squashfs filesystem (without extracting):", "command": "unsquashfs -lls {{filesystem.squashfs}}"}]}
{"command": "unzipsfx", "tasks": [{"task": "Create a self-extracting binary file of a `zip` archive:", "command": "cat unzipsfx {{path/to/archive.zip}} > {{filename}} && chmod 755 {{filename}}"}, {"task": "Extract a self-extracting binary in the current directory:", "command": "{{./path/to/binary)}}"}, {"task": "Test a self-extracting binary for errors:", "command": "{{./path/to/binary)}} -t"}, {"task": "Print content of a file in the self-extracting binary without extraction:", "command": "{{./path/to/binary)}} -c {{path/to/filename}}"}, {"task": "Print comments on `zip` archive in the self-extracting binary:", "command": "{{./path/to/binary)}} -z"}]}
{"command": "update-alternatives", "tasks": [{"task": "Add a symbolic link:", "command": "sudo update-alternatives --install {{path/to/symlink}} {{command_name}} {{path/to/command_binary}} {{priority}}"}, {"task": "Configure a symbolic link for `java`:", "command": "sudo update-alternatives --config {{java}}"}, {"task": "Remove a symbolic link:", "command": "sudo update-alternatives --remove {{java}} {{/opt/java/jdk1.8.0_102/bin/java}}"}, {"task": "Display information about a specified command:", "command": "update-alternatives --display {{java}}"}, {"task": "Display all commands and their current selection:", "command": "update-alternatives --get-selections"}]}
{"command": "update-rc.d", "tasks": [{"task": "Install a service:", "command": "update-rc.d {{mysql}} defaults"}, {"task": "Enable a service:", "command": "update-rc.d {{mysql}} enable"}, {"task": "Disable a service:", "command": "update-rc.d {{mysql}} disable"}, {"task": "Forcibly remove a service:", "command": "update-rc.d -f {{mysql}} remove"}]}
{"command": "updatedb", "tasks": [{"task": "Refresh database content:", "command": "sudo updatedb"}, {"task": "Display file names as soon as they are found:", "command": "sudo updatedb --verbose"}]}
{"command": "updpkgsums", "tasks": [{"task": "Update the checksums in a `PKGBUILD`:", "command": "updpkgsums"}, {"task": "Display Version:", "command": "updpkgsums -v"}, {"task": "Display help:", "command": "updpkgsums -h"}]}
{"command": "upower", "tasks": [{"task": "Display power and battery information:", "command": "upower --dump"}, {"task": "List all power devices:", "command": "upower --enumerate"}, {"task": "Watch for and print power status changes:", "command": "upower --monitor"}, {"task": "Watch for and print detailed power status changes:", "command": "upower --monitor-detail"}, {"task": "Display version:", "command": "upower --version"}]}
{"command": "uprecords", "tasks": [{"task": "Display a summary of the top 10 historical uptime records:", "command": "uprecords"}, {"task": "Display the top 25 records:", "command": "uprecords -m {{25}}"}, {"task": "Display the downtime between reboots instead of the kernel version:", "command": "uprecords -d"}, {"task": "Show the most recent reboots:", "command": "uprecords -B"}, {"task": "Don't truncate information:", "command": "uprecords -w"}]}
{"command": "urxvt", "tasks": [{"task": "Open a new urxvt window:", "command": "urxvt"}, {"task": "Run in a specific directory:", "command": "urxvt -cd {{path/to/directory}}"}, {"task": "Run a command in a new urxvt window:", "command": "urxvt -e {{command}}"}, {"task": "Run a command and keep the window open:", "command": "urxvt --hold -e {{command}}"}, {"task": "Run a command within the `sh` shell:", "command": "urxvt -e {{sh}} -c {{command}}"}]}
{"command": "usbip", "tasks": [{"task": "List all local USB devices and their bus ID's:", "command": "usbip list --local"}, {"task": "Start a `usbip` daemon on the server:", "command": "systemctl start usbipd"}, {"task": "Bind a USB device to `usbip` on the server:", "command": "sudo usbip bind --busid={{bus_id}}"}, {"task": "Load the kernel module required by `usbip` on the client:", "command": "sudo modprobe vhci-hcd"}, {"task": "Attach to the `usbip` device on the client (bus ID is the same as on the server):", "command": "sudo usbip attach -r {{ip_address}} --busid={{bus_id}}"}, {"task": "List attached devices:", "command": "usbip port"}, {"task": "Detach from a device:", "command": "sudo usbip detach --port={{port}}"}, {"task": "Unbind a device:", "command": "usbip unbind --busid={{bus_id}}"}]}
{"command": "useradd", "tasks": [{"task": "Create a new user:", "command": "sudo useradd {{username}}"}, {"task": "Create a new user with the specified user id:", "command": "sudo useradd --uid {{id}} {{username}}"}, {"task": "Create a new user with the specified shell:", "command": "sudo useradd --shell {{path/to/shell}} {{username}}"}, {"task": "Create a new user belonging to additional groups (mind the lack of whitespace):", "command": "sudo useradd --groups {{group1,group2,...}} {{username}}"}, {"task": "Create a new user with the default home directory:", "command": "sudo useradd --create-home {{username}}"}, {"task": "Create a new user with the home directory filled by template directory files:", "command": "sudo useradd --skel {{path/to/template_directory}} --create-home {{username}}"}, {"task": "Create a new system user without the home directory:", "command": "sudo useradd --system {{username}}"}]}
{"command": "userdel", "tasks": [{"task": "Remove a user:", "command": "sudo userdel {{username}}"}, {"task": "Remove a user in other root directory:", "command": "sudo userdel --root {{path/to/other/root}} {{username}}"}, {"task": "Remove a user along with the home directory and mail spool:", "command": "sudo userdel --remove {{username}}"}]}
{"command": "usermod", "tasks": [{"task": "Change a username:", "command": "sudo usermod --login {{new_username}} {{username}}"}, {"task": "Change a user id:", "command": "sudo usermod --uid {{id}} {{username}}"}, {"task": "Change a user shell:", "command": "sudo usermod --shell {{path/to/shell}} {{username}}"}, {"task": "Add a user to supplementary groups (mind the lack of whitespace):", "command": "sudo usermod --append --groups {{group1,group2,...}} {{username}}"}, {"task": "Change a user home directory:", "command": "sudo usermod --move-home --home {{path/to/new_home}} {{username}}"}]}
{"command": "utmpdump", "tasks": [{"task": "Dump the `/var/log/wtmp` file to `stdout` as plain text:", "command": "utmpdump {{/var/log/wtmp}}"}, {"task": "Load a previously dumped file into `/var/log/wtmp`:", "command": "utmpdump -r {{dumpfile}} > {{/var/log/wtmp}}"}]}
{"command": "uuid", "tasks": [{"task": "Generate a UUIDv1 (based on time and system's hardware address, if present):", "command": "uuid"}, {"task": "Generate a UUIDv4 (based on random data):", "command": "uuid -v {{4}}"}, {"task": "Generate multiple UUIDv4 identifiers at once:", "command": "uuid -v {{4}} -n {{number_of_uuids}}"}, {"task": "Generate a UUIDv4 and specify the output format:", "command": "uuid -v {{4}} -F {{BIN|STR|SIV}}"}, {"task": "Generate a UUIDv4 and write the output to a file:", "command": "uuid -v {{4}} -o {{path/to/file}}"}, {"task": "Generate a UUIDv5 (based on the supplied object name) with a specified namespace prefix:", "command": "uuid -v {{5}} ns:{{DNS|URL|OID|X500}} {{object_name}}"}, {"task": "Decode a given UUID:", "command": "uuid -d {{uuid}}"}]}
{"command": "uuidd", "tasks": [{"task": "Generate a random UUID:", "command": "uuidd --random"}, {"task": "Generate a bulk number of random UUIDs:", "command": "uuidd --random --uuids {{number_of_uuids}}"}, {"task": "Generate a time-based UUID, based on the current time and MAC address of the system:", "command": "uuidd --time"}]}
{"command": "uuidgen", "tasks": [{"task": "Create a random UUIDv4:", "command": "uuidgen --random"}, {"task": "Create a UUIDv1 based on the current time:", "command": "uuidgen --time"}, {"task": "Create a UUIDv5 of the name with a specified namespace prefix:", "command": "uuidgen --sha1 --namespace {{@dns|@url|@oid|@x500}} --name {{object_name}}"}]}
{"command": "uvcdynctrl", "tasks": [{"task": "List all available cameras:", "command": "uvcdynctrl -l"}, {"task": "Specify the device to use (defaults to `video0`):", "command": "uvcdynctrl -d {{device_name}}"}, {"task": "List available controls:", "command": "uvcdynctrl -c"}, {"task": "Set a new control value (for negative values, add -- before {{-value}}):", "command": "uvcdynctrl -s {{control_name}} {{value}}"}, {"task": "Get the current control value:", "command": "uvcdynctrl -g {{control_name}}"}, {"task": "Save the state of the current controls to a file:", "command": "uvcdynctrl -W {{filename}}"}, {"task": "Load the state of the controls from a file:", "command": "uvcdynctrl -L {{filename}}"}]}
{"command": "v4l2-ctl", "tasks": [{"task": "List all video devices:", "command": "v4l2-ctl --list-devices"}, {"task": "List supported video formats and resolutions of default video device `/dev/video0`:", "command": "v4l2-ctl --list-formats-ext"}, {"task": "List supported video formats and resolutions of a specific video device:", "command": "v4l2-ctl --list-formats-ext --device {{path/to/video_device}}"}, {"task": "Get all details of a video device:", "command": "v4l2-ctl --all --device {{path/to/video_device}}"}, {"task": "Capture a JPEG photo with a specific resolution from video device:", "command": "v4l2-ctl --device {{path/to/video_device}} --set-fmt-video=width={{width}},height={{height}},pixelformat=MJPG --stream-mmap --stream-to={{path/to/output.jpg}} --stream-count=1"}, {"task": "Capture a raw video stream from video device:", "command": "v4l2-ctl --device {{path/to/video_device}} --set-fmt-video=width={{width}},height={{height}},pixelformat={{format}} --stream-mmap --stream-to={{path/to/output}} --stream-count={{number_of_frames_to_capture}}"}, {"task": "List all video device's controls and their values:", "command": "v4l2-ctl --list-ctrls --device {{path/to/video_device}}"}, {"task": "Set the value of a video device control:", "command": "v4l2-ctl --device {{path/to/video_device}} --set-ctrl={{control_name}}={{value}}"}]}
{"command": "vcgencmd", "tasks": [{"task": "List all available commands:", "command": "vcgencmd commands"}, {"task": "Print the current CPU temperature:", "command": "vcgencmd measure_temp"}, {"task": "Print the current voltage:", "command": "vcgencmd measure_volts"}, {"task": "Print the throttled state of the system as a bit pattern:", "command": "vcgencmd get_throttled"}, {"task": "Print the bootloader config (only available on Raspberry Pi 4 models):", "command": "vcgencmd bootloader_config"}, {"task": "Display Help:", "command": "vcgencmd --help"}]}
{"command": "veracrypt", "tasks": [{"task": "Create a new volume through a text user interface and use `/dev/urandom` as a source of random data:", "command": "veracrypt --text --create --random-source={{/dev/urandom}}"}, {"task": "Decrypt a volume interactively through a text user interface and mount it to a directory:", "command": "veracrypt --text {{path/to/volume}} {{path/to/mount_point}}"}, {"task": "Decrypt a partition using a keyfile and mount it to a directory:", "command": "veracrypt --keyfiles={{path/to/keyfile}} {{/dev/sdXN}} {{path/to/mount_point}}"}, {"task": "Dismount a volume on the directory it is mounted to:", "command": "veracrypt --dismount {{path/to/mounted_point}}"}]}
{"command": "vgchange", "tasks": [{"task": "Change the activation status of logical volumes in all volume groups:", "command": "sudo vgchange --activate {{y|n}}"}, {"task": "Change the activation status of logical volumes in the specified volume group (determine with `vgscan`):", "command": "sudo vgchange --activate {{y|n}} {{volume_group}}}"}]}
{"command": "vgcreate", "tasks": [{"task": "Create a new volume group called vg1 using the `/dev/sda1` device:", "command": "vgcreate {{vg1}} {{/dev/sda1}}"}, {"task": "Create a new volume group called vg1 using multiple devices:", "command": "vgcreate {{vg1}} {{/dev/sda1}} {{/dev/sdb1}} {{/dev/sdc1}}"}]}
{"command": "vgdisplay", "tasks": [{"task": "Display information about all volume groups:", "command": "sudo vgdisplay"}, {"task": "Display information about volume group vg1:", "command": "sudo vgdisplay {{vg1}}"}]}
{"command": "vgs", "tasks": [{"task": "Display information about volume groups:", "command": "vgs"}, {"task": "Display all volume groups:", "command": "vgs -a"}, {"task": "Change default display to show more details:", "command": "vgs -v"}, {"task": "Display only specific fields:", "command": "vgs -o {{field_name_1}},{{field_name_2}}"}, {"task": "Append field to default display:", "command": "vgs -o +{{field_name}}"}, {"task": "Suppress heading line:", "command": "vgs --noheadings"}, {"task": "Use separator to separate fields:", "command": "vgs --separator ="}]}
{"command": "vgscan", "tasks": [{"task": "Scan for volume groups and print information about each group found:", "command": "sudo vgscan"}, {"task": "Scan for volume groups and add the special files in `/dev`, if they don't already exist, needed to access the logical volumes in the found groups:", "command": "sudo vgscan --mknodes"}]}
{"command": "viewnior", "tasks": [{"task": "View an image:", "command": "viewnior {{path/to/image.ext}}"}, {"task": "View in fullscreen mode:", "command": "viewnior --fullscreen {{path/to/image.ext}}"}, {"task": "View fullscreen in slideshow mode:", "command": "viewnior --slideshow {{path/to/image.ext}}"}]}
{"command": "vigr", "tasks": [{"task": "Edit the group file:", "command": "vigr"}, {"task": "Display version:", "command": "vigr --version"}]}
{"command": "vipw", "tasks": [{"task": "Edit the password file:", "command": "vipw"}, {"task": "Display the current version of `vipw`:", "command": "vipw --version"}]}
{"command": "virt-manager", "tasks": [{"task": "Launch virt-manager:", "command": "virt-manager"}, {"task": "Connect to a hypervisor:", "command": "virt-manager --connect {{hypervisor_uri}}"}, {"task": "Don't fork virt-manager process into background on startup:", "command": "virt-manager --no-fork"}, {"task": "Print debug output:", "command": "virt-manager --debug"}, {"task": "Open the \"New VM\" wizard:", "command": "virt-manager --show-domain-creator"}, {"task": "Show domain details window:", "command": "virt-manager --show-domain-editor {{name|id|uuid}}"}, {"task": "Show domain performance window:", "command": "virt-manager --show-domain-performance {{name|id|uuid}}"}, {"task": "Show connection details window:", "command": "virt-manager --show-host-summary"}]}
{"command": "virt-viewer", "tasks": [{"task": "Launch `virt-viewer` with a prompt to select running virtual machines:", "command": "virt-viewer"}, {"task": "Launch `virt-viewer` for a specific virtual machine by ID, UUID or name:", "command": "virt-viewer \"{{domain}}\""}, {"task": "Wait for a virtual machine to start and automatically reconnect if it shutdown and restarts:", "command": "virt-viewer --reconnect --wait \"{{domain}}\""}, {"task": "Connect to a specific remote virtual machine over TLS:", "command": "virt-viewer --connect \"xen//{{url}}\" \"{{domain}}\""}, {"task": "Connect to a specific remote virtual machine over SSH:", "command": "virt-viewer --connect \"qemu+ssh//{{username}}@{{url}}/system\" \"{{domain}}\""}]}
{"command": "virt-xml-validate", "tasks": [{"task": "Validate an XML file against a specific schema:", "command": "virt-xml-validate {{path/to/file.xml}} {{schema}}"}, {"task": "Validate the domain XML against the domain schema:", "command": "virt-xml-validate {{path/to/domain.xml}} domain"}]}
{"command": "virt-xml", "tasks": [{"task": "List all the suboptions for a specific option:", "command": "virt-xml --{{option}}=?"}, {"task": "List all the suboptions for disk, network, and boot:", "command": "virt-xml --disk=? --network=? --boot=?"}, {"task": "Edit a value for a specific domain:", "command": "virt-xml {{domain}} --edit --{{option}} {{suboption}}={{new_value}}"}, {"task": "Change the description for a specific domain:", "command": "virt-xml {{domain}} --edit --metadata description=\"{{new_description}}\""}, {"task": "Enable/Disable the boot device menu for a specific domain:", "command": "virt-xml {{domain}} --edit --boot bootmenu={{on|off}}"}, {"task": "Attach host USB hub to a running VM (See: tldr lsusb):", "command": "virt-xml {{domain}} --update --add-device --hostdev {{bus}}.{{device}}"}]}
{"command": "vkpurge", "tasks": [{"task": "List all removable kernel versions (or those matching `version` if the argument is specified):", "command": "vkpurge list {{version}}"}, {"task": "Remove all unused kernels:", "command": "vkpurge rm all"}, {"task": "Remove kernel versions matching `version`:", "command": "vkpurge rm {{version}}"}]}
{"command": "vmstat", "tasks": [{"task": "Display virtual memory statistics:", "command": "vmstat"}, {"task": "Display reports every 2 seconds for 5 times:", "command": "vmstat {{2}} {{5}}"}]}
{"command": "vmware-checkvm", "tasks": [{"task": "Return the current VMware software version (exit status determines whether the system is a VM or not):", "command": "vmware-checkvm"}, {"task": "Return the VMware hardware version:", "command": "vmware-checkvm -h"}]}
{"command": "vncserver", "tasks": [{"task": "Launch a VNC Server on next available display:", "command": "vncserver"}, {"task": "Launch a VNC Server with specific screen geometry:", "command": "vncserver --geometry {{width}}x{{height}}"}, {"task": "Kill an instance of VNC Server running on a specific display:", "command": "vncserver --kill :{{display_number}}"}]}
{"command": "vncviewer", "tasks": [{"task": "Launch a VNC client which connects to a host on a given display:", "command": "vncviewer {{host}}:{{display_number}}"}, {"task": "Launch in full-screen mode:", "command": "vncviewer -FullScreen {{host}}:{{display_number}}"}, {"task": "Launch a VNC client with a specific screen geometry:", "command": "vncviewer --geometry {{width}}x{{height}} {{host}}:{{display_number}}"}, {"task": "Launch a VNC client which connects to a host on a given port:", "command": "vncviewer {{host}}::{{port}}"}]}
{"command": "vnstat", "tasks": [{"task": "Display traffic summary for all interfaces:", "command": "vnstat"}, {"task": "Display traffic summary for a specific network interface:", "command": "vnstat -i {{eth0}}"}, {"task": "Display live stats for a specific network interface:", "command": "vnstat -l -i {{eth0}}"}, {"task": "Show traffic statistics on an hourly basis for the last 24 hours using a bar graph:", "command": "vnstat -hg"}, {"task": "Measure and show average traffic for 30 seconds:", "command": "vnstat -tr {{30}}"}]}
{"command": "vnstati", "tasks": [{"task": "Output a summary of the last 2: months, days, and all-time:", "command": "vnstati --summary --iface {{network_interface}} --output {{path/to/output.png}}"}, {"task": "Output the 10 most traffic-intensive days of all time:", "command": "vnstati --top10 --iface {{network_interface}} --output {{path/to/output.png}}"}, {"task": "Output monthly traffic statistics from the last 12 months:", "command": "vnstati --months --iface {{network_interface}} --output {{path/to/output.png}}"}, {"task": "Output hourly traffic statistics from the last 24 hours:", "command": "vnstati --hours --iface {{network_interface}} --output {{path/to/output.png}}"}]}
{"command": "vpnc", "tasks": [{"task": "Connect with a defined configuration file:", "command": "sudo vpnc {{config_file}}"}, {"task": "Terminate the previously created connection:", "command": "sudo vpnc-disconnect"}]}
{"command": "vrms", "tasks": [{"task": "List non-free and contrib packages (and their description):", "command": "vrms"}, {"task": "Only output the package names:", "command": "vrms --sparse"}]}
{"command": "vso", "tasks": [{"task": "Trigger a system update immediately:", "command": "sudo vso trigger-update --now"}, {"task": "Check for package updates and list them:", "command": "sudo vso update-check"}, {"task": "Create an automated task upon an application's launch:", "command": "vso create-task --name \"{{string}}\" --description \"{{string}}\" --{{command|on-condition-command}} \"{{command}}\" --on-process {{integer}}"}, {"task": "Create an automated task to execute during boot:", "command": "vso create-task --name \"{{string}}\" --description \"{{string}}\" --command \"{{command}}\" --on-boot"}, {"task": "Create an automated task to execute during specific battery states:", "command": "vso create-task --name \"{{string}}\" --description \"{{string}}\" --command \"{{command}}\" --{{on-low-battery|on-charge|on-battery|on-full-battery}}"}, {"task": "Create an automated task which asks for a confirmation before execution:", "command": "vso create-task --name \"{{string}}\" --description \"{{string}}\" --command \"{{command}}\" --need-confirm"}, {"task": "Create an automated task to execute during network connection or disconnection:", "command": "vso create-task --name \"{{string}}\" --description \"{{string}}\" --command \"{{command}}\" --{{on-network|on-disconnect}}"}, {"task": "Delete an automated task:", "command": "vso delete-task \"{{task}}\""}]}
{"command": "w", "tasks": [{"task": "Display information about all users who are currently logged in:", "command": "w"}, {"task": "Display information about a specific user:", "command": "w {{username}}"}, {"task": "Display information without including the header:", "command": "w --no-header"}, {"task": "Display information without including the login, JCPU and PCPU columns:", "command": "w --short"}]}
{"command": "wajig", "tasks": [{"task": "Update the list of available packages and versions:", "command": "wajig update"}, {"task": "Install a package, or update it to the latest available version:", "command": "wajig install {{package}}"}, {"task": "Remove a package and its configuration files:", "command": "wajig purge {{package}}"}, {"task": "Perform an update and then a dist-upgrade:", "command": "wajig daily-upgrade"}, {"task": "Display the sizes of installed packages:", "command": "wajig sizes"}, {"task": "List the version and distribution for all installed packages:", "command": "wajig versions"}, {"task": "List versions of upgradable packages:", "command": "wajig toupgrade"}, {"task": "Display packages which have some form of dependency on the given package:", "command": "wajig dependents {{package}}"}]}
{"command": "wal-telegram", "tasks": [{"task": "Generate with wal's palette and the current wallpaper (feh only):", "command": "wal-telegram"}, {"task": "Generate with wal's palette and a specified background image:", "command": "wal-telegram --background={{path/to/image}}"}, {"task": "Generate with wal's palette and a colored background based on the palette:", "command": "wal-telegram --tiled"}, {"task": "Apply a gaussian blur on the background image:", "command": "wal-telegram -g"}, {"task": "Specify a location for the generated theme (default is `$XDG_CACHE_HOME/wal-telegram` or `~/.cache/wal-telegram`):", "command": "wal-telegram --destination={{path/to/destination}}"}, {"task": "Restart the telegram app after generation:", "command": "wal-telegram --restart"}]}
{"command": "wall", "tasks": [{"task": "Send a message:", "command": "wall {{message}}"}, {"task": "Send a message to users that belong to a specific group:", "command": "wall --group {{group_name}} {{message}}"}, {"task": "Send a message from a file:", "command": "wall {{file}}"}, {"task": "Send a message with timeout (default 300):", "command": "wall --timeout {{seconds}} {{file}}"}]}
{"command": "warpd", "tasks": [{"task": "Run warpd in normal mode:", "command": "warpd --normal"}, {"task": "Run warpd in hint mode:", "command": "warpd --hint"}, {"task": "Move cursor left:", "command": "h"}, {"task": "Move cursor down:", "command": "j"}, {"task": "Move cursor up:", "command": "k"}, {"task": "Move cursor right:", "command": "l"}, {"task": "Emulate left click:", "command": "m"}]}
{"command": "watch", "tasks": [{"task": "Monitor files in the current directory:", "command": "watch {{ls}}"}, {"task": "Monitor disk space and highlight the changes:", "command": "watch -d {{df}}"}, {"task": "Monitor \"node\" processes, refreshing every 3 seconds:", "command": "watch -n {{3}} \"{{ps aux | grep node}}\""}, {"task": "Monitor disk space and if it changes, stop monitoring:", "command": "watch -g {{df}}"}]}
{"command": "wdctl", "tasks": [{"task": "Display the watchdog status:", "command": "wdctl"}, {"task": "Display the watchdog status in a single line in key-value pairs:", "command": "wdctl --oneline"}, {"task": "Display only specific watchdog flags (list is driver specific):", "command": "wdctl --flags {{flag_list}}"}]}
{"command": "wg-quick", "tasks": [{"task": "Set up a VPN tunnel:", "command": "wg-quick up {{interface_name}}"}, {"task": "Delete a VPN tunnel:", "command": "wg-quick down {{interface_name}}"}]}
{"command": "wg", "tasks": [{"task": "Check status of currently active interfaces:", "command": "sudo wg"}, {"task": "Generate a new private key:", "command": "wg genkey"}, {"task": "Generate a public key from a private key:", "command": "wg pubkey < {{path/to/private_key}} > {{path/to/public_key}}"}, {"task": "Generate a public and private key:", "command": "wg genkey | tee {{path/to/private_key}} | wg pubkey > {{path/to/public_key}}"}, {"task": "Show the current configuration of a wireguard interface:", "command": "sudo wg showconf {{wg0}}"}]}
{"command": "whatis", "tasks": [{"task": "Display a description from a man page:", "command": "whatis {{command}}"}, {"task": "Don't cut the description off at the end of the line:", "command": "whatis --long {{command}}"}, {"task": "Display descriptions for all commands matching a glob:", "command": "whatis --wildcard {{net*}}"}, {"task": "Search man page descriptions with a regular expression:", "command": "whatis --regex '{{wish[0-9]\\.[0-9]}}'"}, {"task": "Display descriptions of a specific language (requires `manpage-{{locale}}` package):", "command": "whatis --locale={{en}} {{command}}"}]}
{"command": "whiptail", "tasks": [{"task": "Display a simple message:", "command": "whiptail --title \"{{title}}\" --msgbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}}"}, {"task": "Display a boolean choice, returning the result through the exit code:", "command": "whiptail --title \"{{title}}\" --yesno \"{{message}}\" {{height_in_chars}} {{width_in_chars}}"}, {"task": "Customise the text on the yes/no buttons:", "command": "whiptail --title \"{{title}}\" --yes-button \"{{text}}\" --no-button \"{{text}}\" --yesno \"{{message}}\" {{height_in_chars}} {{width_in_chars}}"}, {"task": "Display a text input box:", "command": "{{result_variable_name}}=\"$(whiptail --title \"{{title}}\" --inputbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}} {{default_text}} 3>&1 1>&2 2>&3)\""}, {"task": "Display a password input box:", "command": "{{result_variable_name}}=\"$(whiptail --title \"{{title}}\" --passwordbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}} 3>&1 1>&2 2>&3)\""}, {"task": "Display a multiple-choice menu:", "command": "{{result_variable_name}}=$(whiptail --title \"{{title}}\" --menu \"{{message}}\" {{height_in_chars}} {{width_in_chars}} {{menu_display_height}} \"{{value_1}}\" \"{{display_text_1}}\" \"{{value_n}}\" \"{{display_text_n}}\" ..... 3>&1 1>&2 2>&3)"}]}
{"command": "wifi-menu", "tasks": [{"task": "Set up a wireless connection interactively:", "command": "wifi-menu"}, {"task": "Interactively set up a connection to a network and obscure the password:", "command": "wifi-menu --obscure"}, {"task": "Display help:", "command": "wifi-menu --help"}]}
{"command": "wine", "tasks": [{"task": "Run a specific program inside the `wine` environment:", "command": "wine {{command}}"}, {"task": "Run a specific program in background:", "command": "wine start {{command}}"}, {"task": "Install/uninstall an MSI package:", "command": "wine msiexec /{{i|x}} {{path/to/package.msi}}"}, {"task": "Run `File Explorer`, `Notepad`, or `WordPad`:", "command": "wine {{explorer|notepad|write}}"}, {"task": "Run `Registry Editor`, `Control Panel`, or `Task Manager`:", "command": "wine {{regedit|control|taskmgr}}"}, {"task": "Run the configuration tool:", "command": "wine winecfg"}]}
{"command": "winetricks", "tasks": [{"task": "Start a graphical setup at the default Wine location:", "command": "winetricks"}, {"task": "Specify a custom Wine directory to run Winetricks in:", "command": "WINEPREFIX={{path/to/wine_directory}} winetricks"}, {"task": "Install a Windows DLL or component to the default Wine directory:", "command": "winetricks {{package}}"}]}
{"command": "wipefs", "tasks": [{"task": "Display signatures for specified device:", "command": "sudo wipefs {{/dev/sdX}}"}, {"task": "Wipe all available signature types for a specific device with no recursion into partitions:", "command": "sudo wipefs --all {{/dev/sdX}}"}, {"task": "Wipe all available signature types for the device and partitions using a glob pattern:", "command": "sudo wipefs --all {{/dev/sdX}}*"}, {"task": "Perform dry run:", "command": "sudo wipefs --all --no-act {{/dev/sdX}}"}, {"task": "Force wipe, even if the filesystem is mounted:", "command": "sudo wipefs --all --force {{/dev/sdX}}"}]}
{"command": "wl-copy", "tasks": [{"task": "Copy the text to the clipboard:", "command": "wl-copy \"{{text}}\""}, {"task": "Pipe the command (`ls`) output to the clipboard:", "command": "{{ls}} | wl-copy"}, {"task": "Copy for only one paste and then clear it:", "command": "wl-copy --paste-once \"{{text}}\""}, {"task": "Clear the clipboard:", "command": "wl-copy --clear"}]}
{"command": "wl-paste", "tasks": [{"task": "Paste the contents of the clipboard:", "command": "wl-paste"}, {"task": "Write the contents of the clipboard to a file:", "command": "wl-paste > {{path/to/file}}"}, {"task": "Pipe the contents of the clipboard to a command:", "command": "wl-paste | {{command}}"}]}
{"command": "wmctrl", "tasks": [{"task": "List all windows, managed by the window manager:", "command": "wmctrl -l"}, {"task": "Switch to the first window whose (partial) title matches:", "command": "wmctrl -a {{window_title}}"}, {"task": "Move a window to the current workspace, raise it and give it focus:", "command": "wmctrl -R {{window_title}}"}, {"task": "Switch to a workspace:", "command": "wmctrl -s {{workspace_number}}"}, {"task": "Select a window and toggle fullscreen:", "command": "wmctrl -r {{window_title}} -b toggle,fullscreen"}, {"task": "Select a window a move it to a workspace:", "command": "wmctrl -r {{window_title}} -t {{workspace_number}}"}]}
{"command": "wodim", "tasks": [{"task": "Display optical drives available to `wodim`:", "command": "wodim --devices"}, {"task": "Record (\"burn\") an audio-only disc:", "command": "wodim dev=/dev/{{optical_drive}} -audio {{track*.cdaudio}}"}, {"task": "Burn a file to a disc, ejecting the disc once done (some recorders require this):", "command": "wodim -eject dev=/dev/{{optical_drive}} -data {{file.iso}}"}, {"task": "Burn a file to the disc in an optical drive, potentially writing to multiple discs in succession:", "command": "wodim -tao dev=/dev/{{optical_drive}} -data {{file.iso}}"}]}
{"command": "woeusb", "tasks": [{"task": "Format a USB then create a bootable Windows installation drive:", "command": "woeusb --device {{path/to/windows.iso}} {{/dev/sdX}}"}, {"task": "Copy Windows files to an existing partition of a USB storage device and make it bootable, without erasing the current data:", "command": "woeusb --partition {{path/to/windows.iso}} {{/dev/sdXN}}"}]}
{"command": "wol", "tasks": [{"task": "Send a WoL packet to a device:", "command": "wol {{mac_address}}"}, {"task": "Send a WoL packet to a device in another subnet based on its IP:", "command": "wol --ipaddr={{ip_address}} {{mac_address}}"}, {"task": "Send a WoL packet to a device in another subnet based on its hostname:", "command": "wol --host={{hostname}} {{mac_address}}"}, {"task": "Send a WoL packet to a specific port on a host:", "command": "wol --port={{port_number}} {{mac_address}}"}, {"task": "Read hardware addresses, IP addresses/hostnames, optional ports and SecureON passwords from a file:", "command": "wol --file={{path/to/file}}"}, {"task": "Turn on verbose output:", "command": "wol --verbose {{mac_address}}"}]}
{"command": "wpa_cli", "tasks": [{"task": "Scan for available networks:", "command": "wpa_cli scan"}, {"task": "Show scan results:", "command": "wpa_cli scan_results"}, {"task": "Add a network:", "command": "wpa_cli add_network {{number}}"}, {"task": "Set a network's SSID:", "command": "wpa_cli set_network {{number}} ssid \"{{SSID}}\""}, {"task": "Enable network:", "command": "wpa_cli enable_network {{number}}"}, {"task": "Save config:", "command": "wpa_cli save_config"}]}
{"command": "wpa_passphrase", "tasks": [{"task": "Compute and display the WPA-PSK key for a given SSID reading the passphrase from `stdin`:", "command": "wpa_passphrase {{SSID}}"}, {"task": "Compute and display WPA-PSK key for a given SSID specifying the passphrase as an argument:", "command": "wpa_passphrase {{SSID}} {{passphrase}}"}]}
{"command": "wpctl", "tasks": [{"task": "List all objects managed by WirePlumber:", "command": "wpctl status"}, {"task": "Print all properties of an object:", "command": "wpctl inspect {{id}}"}, {"task": "Set an object to be the default in its group:", "command": "wpctl set-default {{id}}"}, {"task": "Get the volume of a sink:", "command": "wpctl get-volume {{id}}"}, {"task": "Set the volume of a sink to `n` percent:", "command": "wpctl set-volume {{id}} {{n}}%"}, {"task": "Increase/Decrease the volume of a sink by `n` percent:", "command": "wpctl set-volume {{id}} {{n}}%{{+|-}}"}, {"task": "Mute/Unmute a sink (1 is mute, 0 is unmute):", "command": "wpctl set-mute {{id}} {{1|0|toggle}}"}]}
{"command": "wtf", "tasks": [{"task": "Expand a given acronym:", "command": "wtf {{IMO}}"}, {"task": "Specify a computer related search type:", "command": "wtf -t {{comp}} {{WWW}}"}]}
{"command": "x0vncserver", "tasks": [{"task": "Start a VNC server using a passwordfile:", "command": "x0vncserver -display {{:0}} -passwordfile {{path/to/file}}"}, {"task": "Start a VNC server using a specific port:", "command": "x0vncserver -display {{:0}} -rfbport {{port}}"}]}
{"command": "x11vnc", "tasks": [{"task": "Launch a VNC server that allows multiple clients to connect:", "command": "x11vnc -shared"}, {"task": "Launch a VNC server in view-only mode, and which won't terminate once the last client disconnects:", "command": "x11vnc -forever -viewonly"}, {"task": "Launch a VNC server on a specific display and screen (both starting at index zero):", "command": "x11vnc -display :{{display}}.{{screen}}"}, {"task": "Launch a VNC server on the third display's default screen:", "command": "x11vnc -display :{{2}}"}, {"task": "Launch a VNC server on the first display's second screen:", "command": "x11vnc -display :{{0}}.{{1}}"}]}
{"command": "xauth", "tasks": [{"task": "Start interactive mode with a specific authority file (defaults to `~/.Xauthority`):", "command": "xauth -f {{path/to/file}}"}, {"task": "Display information about the authority file:", "command": "xauth info"}, {"task": "Display authorization entries for all the displays:", "command": "xauth list"}, {"task": "Add an authorization for a specific display:", "command": "xauth add {{display_name}} {{protocol_name}} {{key}}"}, {"task": "Remove the authorization for a specific display:", "command": "xauth remove {{display_name}}"}, {"task": "Print the authorization entry for the current display to `stdout`:", "command": "xauth extract - $DISPLAY"}, {"task": "Merge the authorization entries from a specific file into the authorization database:", "command": "cat {{path/to/file}} | xauth merge -"}, {"task": "Display help:", "command": "xauth --help"}]}
{"command": "xbacklight", "tasks": [{"task": "Get the current screen brightness as a percentage:", "command": "xbacklight"}, {"task": "Set the screen brightness to 40%:", "command": "xbacklight -set {{40}}"}, {"task": "Increase current brightness by 25%:", "command": "xbacklight -inc {{25}}"}, {"task": "Decrease current brightness by 75%:", "command": "xbacklight -dec {{75}}"}, {"task": "Increase backlight to 100%, over 60 seconds (value given in ms), using 60 steps:", "command": "xbacklight -set {{100}} -time {{60000}} -steps {{60}}"}]}
{"command": "xbps-install", "tasks": [{"task": "Install a new package:", "command": "xbps-install {{package}}"}, {"task": "Synchronize and update all packages:", "command": "xbps-install --sync --update"}]}
{"command": "xbps-query", "tasks": [{"task": "Search for a package in remote repositories using a regular expression or a keyword (if `--regex` is omitted):", "command": "xbps-query --search {{regular_expression|keyword}} --repository --regex"}, {"task": "Show information about an installed package:", "command": "xbps-query --show {{package}}"}, {"task": "Show information about a package in remote repositories:", "command": "xbps-query --show {{package}} --repository"}, {"task": "List packages registered in the package database:", "command": "xbps-query --list-pkgs"}, {"task": "List explicitly installed packages (i.e. not automatically installed as dependencies):", "command": "xbps-query --list-manual-pkgs"}]}
{"command": "xbps-remove", "tasks": [{"task": "Remove a package:", "command": "xbps-remove {{package}}"}, {"task": "Remove a package and its dependencies:", "command": "xbps-remove --recursive {{package}}"}, {"task": "Remove orphan packages (installed as dependencies but no longer required by any package):", "command": "xbps-remove --remove-orphans"}, {"task": "Remove obsolete packages from the cache:", "command": "xbps-remove --clean-cache"}]}
{"command": "xbps", "tasks": [{"task": "View documentation for installing and updating packages:", "command": "tldr xbps-install"}, {"task": "View documentation for removing packages:", "command": "tldr xbps-remove"}, {"task": "View documentation for querying for package and repository information:", "command": "tldr xbps-query"}]}
{"command": "xclip", "tasks": [{"task": "Copy the output from a command to the X11 primary selection area (clipboard):", "command": "echo 123 | xclip"}, {"task": "Copy the output from a command to a given X11 selection area:", "command": "echo 123 | xclip -selection {{primary|secondary|clipboard}}"}, {"task": "Copy the output from a command to the system clipboard, using short notation:", "command": "echo 123 | xclip -sel clip"}, {"task": "Copy the contents of a file into the system clipboard:", "command": "xclip -sel clip {{input_file.txt}}"}, {"task": "Copy the contents of a PNG into the system clipboard (can be pasted in other programs correctly):", "command": "xclip -sel clip -t image/png {{input_file.png}}"}, {"task": "Copy the user input in the console into the system clipboard:", "command": "xclip -i"}, {"task": "Paste the contents of the X11 primary selection area to the console:", "command": "xclip -o"}, {"task": "Paste the contents of the system clipboard to the console:", "command": "xclip -o -sel clip"}]}
{"command": "xclock", "tasks": [{"task": "Display an analog clock:", "command": "xclock"}, {"task": "Display a 24-hour digital clock with the hour and minute fields only:", "command": "xclock -digital -brief"}, {"task": "Display a digital clock using an strftime format string (see strftime(3)):", "command": "xclock -digital -strftime {{format}}"}, {"task": "Display a 24-hour digital clock with the hour, minute and second fields that updates every second:", "command": "xclock -digital -strftime '%H:%M:%S' -update 1"}, {"task": "Display a 12-hour digital clock with the hour and minute fields only:", "command": "xclock -digital -twelve -brief"}]}
{"command": "xcowsay", "tasks": [{"task": "Display a cow saying \"hello, world\":", "command": "xcowsay \"{{hello, world}}\""}, {"task": "Display a cow with output from another command:", "command": "ls | xcowsay"}, {"task": "Display a cow at the specified X and Y coordinates:", "command": "xcowsay --at={{X}},{{Y}}"}, {"task": "Display a different sized cow:", "command": "xcowsay --cow-size={{small|med|large}}"}, {"task": "Display a thought bubble instead of a speech bubble:", "command": "xcowsay --think"}, {"task": "Display a different image instead of the default cow:", "command": "xcowsay --image={{path/to/file}}"}]}
{"command": "xcursorgen", "tasks": [{"task": "Create an X cursor file using a config file:", "command": "xcursorgen {{path/to/config.cursor}} {{path/to/output_file}}"}, {"task": "Create an X cursor file using a config file and specify the path to the image files:", "command": "xcursorgen --prefix {{path/to/image_directory/}} {{path/to/config.cursor}} {{path/to/output_file}}"}, {"task": "Create an X cursor file using a config file and write the output to `stdout`:", "command": "xcursorgen {{path/to/config.cursor}}"}]}
{"command": "xdg-desktop-menu", "tasks": [{"task": "Install an application to the desktop menu system:", "command": "xdg-desktop-menu install {{path/to/file.desktop}}"}, {"task": "Install an application to the desktop menu system with the vendor prefix check disabled:", "command": "xdg-desktop-menu install --novendor {{path/to/file.desktop}}"}, {"task": "Uninstall an application from the desktop menu system:", "command": "xdg-desktop-menu uninstall {{path/to/file.desktop}}"}, {"task": "Force an update of the desktop menu system:", "command": "xdg-desktop-menu forceupdate --mode {{user|system}}"}]}
{"command": "xdg-mime", "tasks": [{"task": "Display the MIME type of a file:", "command": "xdg-mime query filetype {{path/to/file}}"}, {"task": "Display the default application for opening PNGs:", "command": "xdg-mime query default {{image/png}}"}, {"task": "Display the default application for opening a specific file:", "command": "xdg-mime query default $(xdg-mime query filetype {{path/to/file}})"}, {"task": "Set imv as the default application for opening PNG and JPEG images:", "command": "xdg-mime default {{imv.desktop}} {{image/png}} {{image/jpeg}}"}]}
{"command": "xdg-open", "tasks": [{"task": "Open the current directory in the default file explorer:", "command": "xdg-open ."}, {"task": "Open a URL in the default browser:", "command": "xdg-open {{https://example.com}}"}, {"task": "Open an image in the default image viewer:", "command": "xdg-open {{path/to/image}}"}, {"task": "Open a PDF in the default PDF viewer:", "command": "xdg-open {{path/to/pdf}}"}, {"task": "Display help:", "command": "xdg-open --help"}]}
{"command": "xdg-settings", "tasks": [{"task": "Print the default web browser:", "command": "xdg-settings get {{default-web-browser}}"}, {"task": "Set the default web browser to Firefox:", "command": "xdg-settings set {{default-web-browser}} {{firefox.desktop}}"}, {"task": "Set the default mail URL scheme handler to Evolution:", "command": "xdg-settings set {{default-url-scheme-handler}} {{mailto}} {{evolution.desktop}}"}, {"task": "Set the default PDF document viewer:", "command": "xdg-settings set {{pdf-viewer.desktop}}"}, {"task": "Display help:", "command": "xdg-settings --help"}]}
{"command": "xdg-user-dirs-update", "tasks": [{"task": "Change XDG's DESKTOP directory to the specified directory (must be absolute):", "command": "xdg-user-dirs-update --set DESKTOP \"{{path/to/directory}}\""}, {"task": "Write the result to the specified dry-run-file instead of the `user-dirs.dirs` file:", "command": "xdg-user-dirs-update --dummy-output \"{{path/to/dry_run_file}}\" --set {{xdg_user_directory}} \"{{path/to/directory}}\""}]}
{"command": "xdotool", "tasks": [{"task": "Retrieve the X-Windows window ID of the running Firefox window(s):", "command": "xdotool search --onlyvisible --name {{firefox}}"}, {"task": "Click the right mouse button:", "command": "xdotool click {{3}}"}, {"task": "Get the ID of the currently active window:", "command": "xdotool getactivewindow"}, {"task": "Focus on the window with ID of 12345:", "command": "xdotool windowfocus --sync {{12345}}"}, {"task": "Type a message, with a 500ms delay for each letter:", "command": "xdotool type --delay {{500}} \"Hello world\""}, {"task": "Press the enter key:", "command": "xdotool key {{KP_Enter}}"}]}
{"command": "xed", "tasks": [{"task": "Start the editor:", "command": "xed"}, {"task": "Open specific files:", "command": "xed {{path/to/file1 path/to/file2 ...}}"}, {"task": "Open files using a specific encoding:", "command": "xed --encoding {{WINDOWS-1252}} {{path/to/file1 path/to/file2 ...}}"}, {"task": "Print all supported encodings:", "command": "xed --list-encodings"}, {"task": "Open a file and go to a specific line:", "command": "xed +{{10}} {{path/to/file}}"}]}
{"command": "xeyes", "tasks": [{"task": "Launch xeyes on the local machine's default display:", "command": "xeyes"}, {"task": "Launch xeyes on a remote machine's display 0, screen 0:", "command": "xeyes -display {{remote_host}}:{{0}}.{{0}}"}]}
{"command": "xfce4-screenshooter", "tasks": [{"task": "Launch the screenshooter GUI:", "command": "xfce4-screenshooter"}, {"task": "Take a screenshot of the entire screen and launch the GUI to ask how to proceed:", "command": "xfce4-screenshooter --fullscreen"}, {"task": "Take a screenshot of the entire screen and save it in the specified directory:", "command": "xfce4-screenshooter --fullscreen --save {{path/to/directory}}"}, {"task": "Wait some time before taking the screenshot:", "command": "xfce4-screenshooter --delay {{seconds}}"}, {"task": "Take a screenshot of a region of the screen (select using the mouse):", "command": "xfce4-screenshooter --region"}, {"task": "Take a screenshot of the active window, and copy it to the clipboard:", "command": "xfce4-screenshooter --window --clipboard"}, {"task": "Take a screenshot of the active window, and open it with a chosen program:", "command": "xfce4-screenshooter --window --open {{gimp}}"}]}
{"command": "xfce4-terminal", "tasks": [{"task": "Open a new terminal window:", "command": "xfce4-terminal"}, {"task": "Set the initial title:", "command": "xfce4-terminal --initial-title \"{{initial_title}}\""}, {"task": "Open a new tab in the current terminal window:", "command": "xfce4-terminal --tab"}, {"task": "Execute a command in a new terminal window:", "command": "xfce4-terminal --command \"{{command_with_args}}\""}, {"task": "Keep the terminal around after the executed command finishes executing:", "command": "xfce4-terminal --command \"{{command_with_args}}\" --hold"}, {"task": "Open multiple new tabs, executing a command in each:", "command": "xfce4-terminal --tab --command \"{{command_a}}\" --tab --command \"{{command_b}}\""}]}
{"command": "xfreerdp", "tasks": [{"task": "Connect to a FreeRDP server:", "command": "xfreerdp /u:{{username}} /p:{{password}} /v:{{ip_address}}"}, {"task": "Connect to a FreeRDP server and activate audio output redirection using `sys:alsa` device:", "command": "xfreerdp /u:{{username}} /p:{{password}} /v:{{ip_address}} /sound:{{sys:alsa}}"}, {"task": "Connect to a FreeRDP server with dynamic resolution:", "command": "xfreerdp /v:{{ip_address}} /u:{{username}} /p:{{password}} /dynamic-resolution"}, {"task": "Connect to a FreeRDP server with clipboard redirection:", "command": "xfreerdp /v:{{ip_address}} /u:{{username}} /p:{{password}} +clipboard"}, {"task": "Connect to a FreeRDP server ignoring any certificate checks:", "command": "xfreerdp /v:{{ip_address}} /u:{{username}} /p:{{password}} /cert:ignore"}, {"task": "Connect to a FreeRDP server with a shared directory:", "command": "xfreerdp /v:{{ip_address}} /u:{{username}} /p:{{password}} /drive:{{path/to/directory}},{{share_name}}"}]}
{"command": "xinput", "tasks": [{"task": "List all input devices:", "command": "xinput list"}, {"task": "Disable an input:", "command": "xinput disable {{id}}"}, {"task": "Enable an input:", "command": "xinput enable {{id}}"}, {"task": "Disconnect an input from its master:", "command": "xinput float {{id}}"}, {"task": "Reattach an input as slave to a master:", "command": "xinput reattach {{id}} {{master_id}}"}, {"task": "List settings of an input device:", "command": "xinput list-props {{id}}"}, {"task": "Change a setting of an input device:", "command": "xinput set-prop {{id}} {{setting_id}} {{value}}"}]}
{"command": "xman", "tasks": [{"task": "Start `xman` in three-button window:", "command": "xman"}, {"task": "Open the manual page output stored in a given file:", "command": "xman -helpfile {{filename}}"}, {"task": "Show both manual page and directory:", "command": "xman -bothshown"}]}
{"command": "xmodmap", "tasks": [{"task": "Swap left-click and right-click on the pointer:", "command": "xmodmap -e 'pointer = 3 2 1'"}, {"task": "Reassign a key on the keyboard to another key:", "command": "xmodmap -e 'keycode {{keycode}} = {{keyname}}'"}, {"task": "Disable a key on the keyboard:", "command": "xmodmap -e 'keycode {{keycode}} ='"}, {"task": "Execute all xmodmap expressions in the specified file:", "command": "xmodmap {{path/to/file}}"}]}
{"command": "xmount", "tasks": [{"task": "Mount a `.raw` image file into a DMG container file:", "command": "xmount --in {{raw}} {{path/to/image.dd}} --out {{dmg}} {{mountpoint}}"}, {"task": "Mount an EWF image file with write-cache support into a VHD file to boot from:", "command": "xmount --cache {{path/to/cache.ovl}} --in {{ewf}} {{path/to/image.E??}} --out {{vhd}} {{mountpoint}}"}, {"task": "Mount the first partition at sector 2048 into a new `.raw` image file:", "command": "xmount --offset {{2048}} --in {{raw}} {{path/to/image.dd}} --out {{raw}} {{mountpoint}}"}]}
{"command": "xrandr", "tasks": [{"task": "Display the current state of the system (known screens, resolutions, ...):", "command": "xrandr --query"}, {"task": "Disable disconnected outputs and enable connected ones with default settings:", "command": "xrandr --auto"}, {"task": "Change the resolution and update frequency of DisplayPort 1 to 1920x1080, 60Hz:", "command": "xrandr --output {{DP1}} --mode {{1920x1080}} --rate {{60}}"}, {"task": "Set the resolution of HDMI2 to 1280x1024 and put it on the right of DP1:", "command": "xrandr --output {{HDMI2}} --mode {{1280x1024}} --right-of {{DP1}}"}, {"task": "Disable the VGA1 output:", "command": "xrandr --output {{VGA1}} --off"}, {"task": "Set the brightness for LVDS1 to 50%:", "command": "xrandr --output {{LVDS1}} --brightness {{0.5}}"}]}
{"command": "xrdb", "tasks": [{"task": "Start `xrdb` in interactive mode:", "command": "xrdb"}, {"task": "Load values (e.g. style rules) from a resource file:", "command": "xrdb -load {{~/.Xresources}}"}, {"task": "Query the resource database and print currently set values:", "command": "xrdb -query"}]}
{"command": "xsel", "tasks": [{"task": "Use a command's output as input of the clip[b]oard (equivalent to `Ctrl + C`):", "command": "echo 123 | xsel -ib"}, {"task": "Use the contents of a file as input of the clipboard:", "command": "cat {{path/to/file}} | xsel -ib"}, {"task": "Output the clipboard's contents into the terminal (equivalent to `Ctrl + V`):", "command": "xsel -ob"}, {"task": "Output the clipboard's contents into a file:", "command": "xsel -ob > {{path/to/file}}"}, {"task": "Clear the clipboard:", "command": "xsel -cb"}, {"task": "Output the X11 primary selection's contents into the terminal (equivalent to a mouse middle-click):", "command": "xsel -op"}]}
{"command": "xset", "tasks": [{"task": "Disable the screensaver:", "command": "xset s off"}, {"task": "Disable the bell sound:", "command": "xset b off"}, {"task": "Set the screensaver to start after 60 minutes of inactivity:", "command": "xset s 3600 3600"}, {"task": "Disable DPMS (Energy Star) features:", "command": "xset -dpms"}, {"task": "Enable DPMS (Energy Star) features:", "command": "xset +dpms"}]}
{"command": "xsetwacom", "tasks": [{"task": "List all the available Wacom devices. The device name is in the first column:", "command": "xsetwacom list"}, {"task": "Set Wacom area to specific screen. Get name of the screen with `xrandr`:", "command": "xsetwacom set \"{{device_name}}\" MapToOutput {{screen}}"}, {"task": "Set mode to relative (like a mouse) or absolute (like a pen) mode:", "command": "xsetwacom set \"{{device_name}}\" Mode \"{{Relative|Absolute}}\""}, {"task": "Rotate the input (useful for tablet-PC when rotating screen) by 0|90|180|270 degrees from \"natural\" rotation:", "command": "xsetwacom set \"{{device_name}}\" Rotate {{none|half|cw|ccw}}"}, {"task": "Set button to only work when the tip of the pen is touching the tablet:", "command": "xsetwacom set \"{{device_name}}\" TabletPCButton \"on\""}]}
{"command": "xterm", "tasks": [{"task": "Open the terminal with a title of `Example`:", "command": "xterm -T {{Example}}"}, {"task": "Open the terminal in fullscreen mode:", "command": "xterm -fullscreen"}, {"task": "Open the terminal with a dark blue background and yellow foreground (font color):", "command": "xterm -bg {{darkblue}} -fg {{yellow}}"}, {"task": "Open the terminal with 100 characters per line and 35 lines, in screen position x=200px, y=20px:", "command": "xterm -geometry {{100}}x{{35}}+{{200}}+{{20}}"}, {"task": "Open the terminal using a Serif font and a font size equal to 20:", "command": "xterm -fa {{'Serif'}} -fs {{20}}"}]}
{"command": "xtrlock", "tasks": [{"task": "Lock the display and show a padlock instead of the cursor:", "command": "xtrlock"}, {"task": "Display a blank screen as well as the padlock cursor:", "command": "xtrlock -b"}, {"task": "Fork the xtrlock process and return immediately:", "command": "xtrlock -f"}]}
{"command": "xvfb-run", "tasks": [{"task": "Run the specified command in a virtual X server:", "command": "xvfb-run {{command}}"}, {"task": "Try to get a free server number, if the default (99) is not available:", "command": "xvfb-run --auto-servernum {{command}}"}, {"task": "Pass arguments to the Xvfb server:", "command": "xvfb-run --server-args \"{{-screen 0 1024x768x24}}\" {{command}}"}]}
{"command": "xwinwrap", "tasks": [{"task": "Run a video using mpv:", "command": "xwinwrap -b -nf -ov -- {{mpv}} -wid {{wid}} --loop --no-audio --no-resume-playback --panscan={{1.0}} {{path/to/video.mp4}}"}, {"task": "Run a video in fullscreen using mpv:", "command": "xwinwrap -b -nf -fs -ov -- {{mpv}} -wid {{wid}} --loop --no-audio --no-resume-playback --panscan={{1.0}} {{path/to/video.mp4}}"}, {"task": "Run a video using mpv with 80% opacity:", "command": "xwinwrap -b -nf -ov -o 0.8 --- {{mpv}} -wid {{wid}} --loop --no-audio --no-resume-playback --panscan={{1.0}} {{path/to/video.mp4}}"}, {"task": "Run a video using mpv in a second monitor 1600x900 with 1920 offset on X-axis:", "command": "xwinwrap -g 1600x900+1920 -b -nf -ov -- {{mpv}} -wid {{wid}} --loop --no-audio --no-resume-playback --panscan={{1.0}} {{path/to/video.mkv}}"}]}
{"command": "xxhsum", "tasks": [{"task": "Calculate the checksum for a file using a specific algorithm:", "command": "xxhsum -H{{0|32|64|128}} {{path/to/file}}"}, {"task": "Run benchmark:", "command": "xxhsum -b"}]}
{"command": "yaourt", "tasks": [{"task": "Synchronize and update all packages (including AUR):", "command": "yaourt -Syua"}, {"task": "Install a new package (includes AUR):", "command": "yaourt -S {{package_name}}"}, {"task": "Remove a package and its dependencies (includes AUR packages):", "command": "yaourt -Rs {{package_name}}"}, {"task": "Search the package database for a keyword (including AUR):", "command": "yaourt -Ss {{package_name}}"}, {"task": "List installed packages, versions, and repositories (AUR packages will be listed under the repository name 'local'):", "command": "yaourt -Q"}]}
{"command": "yay", "tasks": [{"task": "Interactively search and install packages from the repos and AUR:", "command": "yay {{package_name|search_term}}"}, {"task": "Synchronize and update all packages from the repos and AUR:", "command": "yay"}, {"task": "Synchronize and update only AUR packages:", "command": "yay -Sua"}, {"task": "Install a new package from the repos and AUR:", "command": "yay -S {{package_name}}"}, {"task": "Remove an installed package and both its dependencies and configuration files:", "command": "yay -Rns {{package_name}}"}, {"task": "Search the package database for a keyword from the repos and AUR:", "command": "yay -Ss {{keyword}}"}, {"task": "Remove orphaned packages (installed as dependencies but not required by any package):", "command": "yay -Yc"}, {"task": "Show statistics for installed packages and system health:", "command": "yay -Ps"}]}
{"command": "yetris", "tasks": [{"task": "Start a Tetris game:", "command": "yetris"}, {"task": "Navigate the piece horizontally:", "command": "{{Left|Right}} arrow key"}, {"task": "Rotate the piece clockwise or counterclockwise:", "command": "{{x|z}}"}, {"task": "Hold a piece (only one allowed at a time):", "command": "c"}, {"task": "Soft drop the piece:", "command": "Down arrow key"}, {"task": "Hard drop the piece:", "command": "Spacebar"}, {"task": "Pause/unpause the game:", "command": "p"}, {"task": "Quit the game:", "command": "q"}]}
{"command": "ytfzf", "tasks": [{"task": "Search for videos on YouTube with thumbnail previews:", "command": "ytfzf --show-thumbnails {{search_pattern}}"}, {"task": "Play only the audio of the first item in a loop:", "command": "ytfzf --audio-only --auto-select --loop {{search_pattern}}"}, {"task": "Download a video from the history:", "command": "ytfzf --download --choose-from-history"}, {"task": "Play all the music found in a search:", "command": "ytfzf --audio-only --select-all {{search_pattern}}"}, {"task": "See the trending videos in an external menu:", "command": "ytfzf --trending --ext-menu {{search_pattern}}"}, {"task": "Search on PeerTube instead of YouTube:", "command": "ytfzf --peertube {{search_pattern}}"}]}
{"command": "yum", "tasks": [{"task": "Install a new package:", "command": "yum install {{package}}"}, {"task": "Install a new package and assume yes to all questions (also works with update, great for automated updates):", "command": "yum -y install {{package}}"}, {"task": "Find the package that provides a particular command:", "command": "yum provides {{command}}"}, {"task": "Remove a package:", "command": "yum remove {{package}}"}, {"task": "Display available updates for installed packages:", "command": "yum check-update"}, {"task": "Upgrade installed packages to the newest available versions:", "command": "yum upgrade"}]}
{"command": "zathura", "tasks": [{"task": "Open a file:", "command": "zathura {{path/to/file}}"}, {"task": "Navigate left/up/down/right:", "command": "<H|J|K|L> or arrow keys"}, {"task": "Rotate:", "command": "r"}, {"task": "Invert Colors:", "command": "Ctrl + R"}, {"task": "Search for text by a given string:", "command": "/{{string}}"}, {"task": "Create/delete bookmarks:", "command": ":{{bmark|bdelete}} {{bookmark_name}}"}, {"task": "List bookmarks:", "command": ":blist"}]}
{"command": "zbarcam", "tasks": [{"task": "Continuously read barcodes and print them to standard output:", "command": "zbarcam"}, {"task": "Disable output video window while scanning:", "command": "zbarcam --nodisplay"}, {"task": "Print barcodes without type information:", "command": "zbarcam --raw"}, {"task": "Define capture device:", "command": "zbarcam /dev/{{video_device}}"}]}
{"command": "zenity", "tasks": [{"task": "Display the default question dialog:", "command": "zenity --question"}, {"task": "Display an info dialog displaying the text \"Hello!\":", "command": "zenity --info --text=\"{{Hello!}}\""}, {"task": "Display a name/password form and output the data separated by \";\":", "command": "zenity --forms --add-entry=\"{{Name}}\" --add-password=\"{{Password}}\" --separator=\"{{;}}\""}, {"task": "Display a file selection form in which the user can only select directories:", "command": "zenity --file-selection --directory"}, {"task": "Display a progress bar which updates its message every second and show a progress percent:", "command": "{{(echo \"#1\"; sleep 1; echo \"50\"; echo \"#2\"; sleep 1; echo \"100\")}} | zenity --progress"}]}
{"command": "zile", "tasks": [{"task": "Start a buffer for temporary notes, which won't be saved:", "command": "zile"}, {"task": "Open a file:", "command": "zile {{path/to/file}}"}, {"task": "Save a file:", "command": "Ctrl + X, Ctrl + S"}, {"task": "Quit:", "command": "Ctrl + X, Ctrl + C"}, {"task": "Open a file at a specified line number:", "command": "zile +{{line_number}} {{path/to/file}}"}, {"task": "Undo changes:", "command": "Ctrl + X, U"}]}
{"command": "zip", "tasks": [{"task": "Add files/directories to a specific archive:", "command": "zip -r {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Remove files/directories from a specific archive:", "command": "zip --delete {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Archive files/directories e[x]cluding specified ones:", "command": "zip {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}} --exclude {{path/to/excluded_files_or_directories}}"}, {"task": "Archive files/directories with a specific compression level (`0` - the lowest, `9` - the highest):", "command": "zip -r -{{0-9}} {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Create an encrypted archive with a specific password:", "command": "zip -r --encrypt {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Archive files/directories to a multi-part [s]plit zip file (e.g. 3 GB parts):", "command": "zip -r -s {{3g}} {{path/to/compressed.zip}} {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}"}, {"task": "Print a specific archive contents:", "command": "zip -sf {{path/to/compressed.zip}}"}]}
{"command": "zipcloak", "tasks": [{"task": "Encrypt the contents of a zipfile:", "command": "zipcloak {{path/to/archive.zip}}"}, {"task": "[d]ecrypt the contents of a zipfile:", "command": "zipcloak -d {{path/to/archive.zip}}"}, {"task": "[O]utput the encrypted contents into a new zipfile:", "command": "zipcloak {{path/to/archive.zip}} -O {{path/to/encrypted.zip}}"}]}
{"command": "zipsplit", "tasks": [{"task": "Split zipfile into pieces that are no larger than a particular size [n]:", "command": "zipsplit -n {{size}} {{path/to/archive.zip}}"}, {"task": "[p]ause between the creation of each split zipfile:", "command": "zipsplit -p -n {{size}} {{path/to/archive.zip}}"}, {"task": "Output the split zipfiles into the `archive` directory:", "command": "zipsplit -b {{archive}} -n {{size}} {{path/to/archive.zip}}"}]}
{"command": "zramctl", "tasks": [{"task": "Check if zram is enabled:", "command": "lsmod | grep -i zram"}, {"task": "Enable zram with a dynamic number of devices (use `zramctl` to configure devices further):", "command": "sudo modprobe zram"}, {"task": "Enable zram with exactly 2 devices:", "command": "sudo modprobe zram num_devices={{2}}"}, {"task": "Find and initialize the next free zram device to a 2 GB virtual drive using LZ4 compression:", "command": "sudo zramctl --find --size {{2GB}} --algorithm {{lz4}}"}, {"task": "List currently initialized devices:", "command": "zramctl"}]}
{"command": "zypper", "tasks": [{"task": "Synchronize list of packages and versions available:", "command": "zypper refresh"}, {"task": "Install a new package:", "command": "zypper install {{package}}"}, {"task": "Remove a package:", "command": "zypper remove {{package}}"}, {"task": "Upgrade installed packages to the newest available versions:", "command": "zypper update"}, {"task": "Search package via keyword:", "command": "zypper search {{keyword}}"}, {"task": "Show information related to configured repositories:", "command": "zypper repos --sort-by-priority"}]}