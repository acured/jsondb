{"command": "nvcc --generate-code specification", "description": "This option provides a generalization of the --gpu-architecture=arch --gpu-code=code,... option combination for specifying nvcc behavior with respect to code generation.\nWhere use of the previous options generates code for different real architectures with the PTX for the same virtual architecture, option --generate-code allows multiple PTX generations for different virtual architectures. In fact, --gpu-architecture=arch --gpu-code=code,... is equivalent to --generate-code=arch=arch,code=code,....\n--generate-code options may be repeated for different virtual architectures.\nSee Virtual Architecture Feature List for the list of supported virtual architectures and GPU Feature List for the list of supported real architectures.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --relocatable-device-code", "description": "Enable or disable the generation of relocatable device code.\nIf disabled, executable device code is generated. Relocatable device code must be linked before it can be executed.\nAllowed Values\nDefault\nThe generation of relocatable device code is disabled.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --entries entry,...", "description": "Specify the global entry functions for which code must be generated.\nPTX generated for all entry functions, but only the selected entry functions are assembled. Entry function names for this option must be specified in the mangled name.\nDefault\nnvcc generates code for all entry functions.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --maxrregcount amount", "description": "Specify the maximum amount of registers that GPU functions can use.\nUntil a function-specific limit, a higher value will generally increase the performance of individual GPU threads that execute this function. However, because thread registers are allocated from a global register pool on each GPU, a higher value of this option will also reduce the maximum thread block size, thereby reducing the amount of thread parallelism. Hence, a good maxrregcount value is the result of a trade-off.\nA value less than the minimum registers required by ABI will be bumped up by the compiler to ABI minimum limit.\nUser program may not be able to make use of all registers as some registers are reserved by compiler.\nDefault\nNo maximum is assumed.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --use_fast_math", "description": "Make use of fast math library.\n--use_fast_math implies --ftz=true --prec-div=false --prec-sqrt=false --fmad=true.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --ftz", "description": "Control single-precision denormals support.\n--ftz=true flushes denormal values to zero and --ftz=false preserves denormal values.\n--use_fast_math implies --ftz=true.\nAllowed Values\nDefault\nThis option is set to false and nvcc preserves denormal values.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --prec-div", "description": "This option controls single-precision floating-point division and reciprocals.\n--prec-div=true enables the IEEE round-to-nearest mode and --prec-div=false enables the fast approximation mode.\n--use_fast_math implies --prec-div=false.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the IEEE round-to-nearest mode.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --prec-sqrt", "description": "This option controls single-precision floating-point square root.\n--prec-sqrt=true enables the IEEE round-to-nearest mode and --prec-sqrt=false enables the fast approximation mode.\n--use_fast_math implies --prec-sqrt=false.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the IEEE round-to-nearest mode.", "other": "Options for Steering GPU Code Generation"}
{"command": "nvcc --fmad", "description": "This option enables (disables) the contraction of floating-point multiplies and adds/subtracts into floating-point multiply-add operations (FMAD, FFMA, or DFMA).\n--use_fast_math implies --fmad=true.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the contraction of floating-point multiplies and adds/subtracts into floating-point multiply-add operations (FMAD, FFMA, or DFMA).", "other": "Options for Steering GPU Code Generation"}