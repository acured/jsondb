{"group":"File and Path Specifications","option_name":"--output-file file","option_short_name":"-o","description":"Specify name and location of the output file."}
{"group":"File and Path Specifications","option_name":"--objdir-as-tempdir","option_short_name":"-objtemp","description":"Create all intermediate files in the same directory as the object file. These intermediate files are deleted when the compilation is finished. This option will take effect only if -c, -dc or -dw is also used. Using this option will ensure that the intermediate file name that is embedded in the object file will not change in multiple compiles of the same file. However, this is not guaranteed if the input is stdin. If the same file is compiled with two different options, ex., ‘nvcc -c t.cu’ and ‘nvcc -c -ptx t.cu’, then the files should be compiled in different directories. Compiling them in the same directory can either cause the compilation to fail or produce incorrect results."}
{"group":"File and Path Specifications","option_name":"--pre-include file,...","option_short_name":"-include","description":"Specify header files that must be pre-included during preprocessing."}
{"group":"File and Path Specifications","option_name":"--library library,...","option_short_name":"-l","description":"Specify libraries to be used in the linking stage without the library file extension.\nThe libraries are searched for on the library search paths that have been specified using option --library-path (see Libraries)."}
{"group":"File and Path Specifications","option_name":"--define-macro def,...","option_short_name":"-D","description":"Define macros to be used during preprocessing.\ndef can be either name or name=definition."}
{"group":"File and Path Specifications","option_name":"--undefine-macro def,...","option_short_name":"-U","description":"Undefine an existing macro during preprocessing or compilation."}
{"group":"File and Path Specifications","option_name":"--include-path path,...","option_short_name":"-I","description":"Specify include search paths."}
{"group":"File and Path Specifications","option_name":"--system-include path,...","option_short_name":"-isystem","description":"Specify system include search paths."}
{"group":"File and Path Specifications","option_name":"--library-path path,...","option_short_name":"-L","description":"Specify library search paths (see Libraries)."}
{"group":"File and Path Specifications","option_name":"--output-directory directory","option_short_name":"-odir","description":"Specify the directory of the output file.\nThis option is intended for letting the dependency generation step (see --generate-dependencies) generate a rule that defines the target object file in the proper directory."}
{"group":"File and Path Specifications","option_name":"--dependency-output file","option_short_name":"-MF","description":"Specify the dependency output file.\nThis option specifies the output file for the dependency generation step (see --generate-dependencies). The option --generate-dependencies or --generate-nonystem-dependencies must be specified if a dependency output file is set."}
{"group":"File and Path Specifications","option_name":"--generate-dependency-targets","option_short_name":"-MP","description":"Add an empty target for each dependency.\nThis option adds phony targets to the dependency generation step (see --generate-dependencies) intended to avoid makefile errors if old dependencies are deleted. The input files are not emitted as phony targets."}
{"group":"File and Path Specifications","option_name":"--compiler-bindir directory","option_short_name":"-ccbin","description":"Specify the directory in which the default host compiler executable resides.\nThe host compiler executable name can be also specified to ensure that the correct host compiler is selected. In addition, driver prefix options (--input-drive-prefix, --dependency-drive-prefix, or --drive-prefix) may need to be specified, if nvcc is executed in a Cygwin shell or a MinGW shell on Windows."}
{"group":"File and Path Specifications","option_name":"--allow-unsupported-compiler","option_short_name":"-allow-unsupported-compiler","description":"Disable nvcc check for supported host compiler versions.\nUsing an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk. This option has no effect on MacOS."}
{"group":"File and Path Specifications","option_name":"--archiver-binary executable","option_short_name":"-arbin","description":"Specify the path of the archiver tool used create static library with --lib."}
{"group":"File and Path Specifications","option_name":"--cudart","option_short_name":"-cudart","description":"Specify the type of CUDA runtime library to be used: no CUDA runtime library, shared\/dynamic CUDA runtime library, or static CUDA runtime library.\nAllowed Values\nDefault\nThe static CUDA runtime library is used by default."}
{"group":"File and Path Specifications","option_name":"--cudadevrt","option_short_name":"-cudadevrt","description":"Specify the type of CUDA device runtime library to be used: no CUDA device runtime library, or static CUDA device runtime library.\nAllowed Values\nDefault\nThe static CUDA device runtime library is used by default."}
{"group":"File and Path Specifications","option_name":"--libdevice-directory directory","option_short_name":"-ldir","description":"Specify the directory that contains the libdevice library files.\nLibdevice library files are located in the nvvm\/libdevice directory in the CUDA Toolkit."}
{"group":"File and Path Specifications","option_name":"--target-directory string","option_short_name":"-target-dir","description":"Specify the subfolder name in the targets directory where the default include and library paths are located."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--link","option_short_name":"-link","description":"Specify the default behavior: compile and link all input files.\nDefault Output File Name\na.exe on Windows or a.out on other platforms is used as the default output file name."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--lib","option_short_name":"-lib","description":"Compile all input files into object files, if necessary, and add the results to the specified library output file.\nDefault Output File Name\na.lib on Windows or a.a on other platforms is used as the default output file name."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--device-link","option_short_name":"-dlink","description":"Link object files with relocatable device code and .ptx, .cubin, and .fatbin files into an object file with executable device code, which can be passed to the host linker.\nDefault Output File Name\na_dlink.obj on Windows or a_dlink.o on other platforms is used as the default output file name. When this option is used in conjunction with --fatbin, a_dlink.fatbin is used as the default output file name. When this option is used in conjunction with --cubin, a_dlink.cubin is used as the default output file name."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--device-c","option_short_name":"-dc","description":"Compile each .c, .cc, .cpp, .cxx, and .cu input file into an object file that contains relocatable device code.\nIt is equivalent to --relocatable-device-code=true --compile.\nDefault Output File Name\nThe source file name extension is replaced by .obj on Windows and .o on other platforms to create the default output file name. For example, the default output file name for x.cu is x.obj on Windows and x.o on other platforms."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--device-w","option_short_name":"-dw","description":"Compile each .c, .cc, .cpp, .cxx, and .cu input file into an object file that contains executable device code.\nIt is equivalent to --relocatable-device-code=false --compile.\nDefault Output File Name\nThe source file name extension is replaced by .obj on Windows and .o on other platforms to create the default output file name. For example, the default output file name for x.cu is x.obj on Windows and x.o on other platforms."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--cuda","option_short_name":"-cuda","description":"Compile each .cu input file to a .cu.cpp.ii file.\nDefault Output File Name\n.cu.cpp.ii is appended to the basename of the source file name to create the default output file name. For example, the default output file name for x.cu is x.cu.cpp.ii."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--compile","option_short_name":"-c","description":"Compile each .c, .cc, .cpp, .cxx, and .cu input file into an object file.\nDefault Output File Name\nThe source file name extension is replaced by .obj on Windows and .o on other platforms to create the default output file name. For example, the default output file name for x.cu is x.obj on Windows and x.o on other platforms."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--fatbin","option_short_name":"-fatbin","description":"Compile all .cu, .ptx, and .cubin input files to device-only .fatbin files.\nnvcc discards the host code for each .cu input file with this option.\nDefault Output File Name\nThe source file name extension is replaced by .fatbin to create the default output file name. For example, the default output file name for x.cu is x.fatbin."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--cubin","option_short_name":"-cubin","description":"Compile all .cu and .ptx input files to device-only .cubin files.\nnvcc discards the host code for each .cu input file with this option.\nDefault Output File Name\nThe source file name extension is replaced by .cubin to create the default output file name. For example, the default output file name for x.cu is x.cubin."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--ptx","option_short_name":"-ptx","description":"Compile all .cu input files to device-only .ptx files.\nnvcc discards the host code for each .cu input file with this option.\nDefault Output File Name\nThe source file name extension is replaced by .ptx to create the default output file name. For example, the default output file name for x.cu is x.ptx."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--preprocess","option_short_name":"-E","description":"Preprocess all .c, .cc, .cpp, .cxx, and .cu input files.\nDefault Output File Name\nThe output is generated in stdout by default."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--generate-dependencies","option_short_name":"-M","description":"Generate a dependency file that can be included in a Makefile for the .c, .cc, .cpp, .cxx, and .cu input file.\nnvcc uses a fixed prefix to identify dependencies in the preprocessed file ( ‘#line 1’ on Linux and ‘# 1’ on Windows). The files mentioned in source location directives starting with this prefix will be included in the dependency list.\nDefault Output File Name\nThe output is generated in stdout by default."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--generate-nonsystem-dependencies","option_short_name":"-MM","description":"Same as --generate-dependencies but skip header files found in system directories (Linux only).\nDefault Output File Name\nThe output is generated in stdout by default."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--generate-dependencies-with-compile","option_short_name":"-MD","description":"Generate a dependency file and compile the input file. The dependency file can be included in a Makefile for the .c, .cc, .cpp, .cxx, and .cu input file.\nThis option cannot be specified together with -E. The dependency file name is computed as follows:\nIf the dependency file name is computed based on either -MF or -o, then multiple input files are not supported."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--generate-nonsystem-dependencies-with-compile","option_short_name":"-MMD","description":"Same as --generate-dependencies-with-compile but skip header files found in system directories (Linux only)."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--optix-ir","option_short_name":"-optix-ir","description":"Compile CUDA source to OptiX IR (.optixir) output. The OptiX IR is only intended for consumption by OptiX through appropriate APIs. This feature is not supported with link-time-optimization (-dlto), the lto_NN -arch target, or with -gencode.\nDefault Output File Name\nThe source file name extension is replaced by .optixir to create the default output file name. For example, the default output file name for x.cu is x.optixir."}
{"group":"Options for Specifying the Compilation Phase","option_name":"--run","option_short_name":"-run","description":"Compile and link all input files into an executable, and executes it.\nWhen the input is a single executable, it is executed without any compilation or linking. This step is intended for developers who do not want to be bothered with setting the necessary environment variables; these are set temporarily by nvcc."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--profile","option_short_name":"-pg","description":"Instrument generated code\/executable for use by gprof."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--debug","option_short_name":"-g","description":"Generate debug information for host code."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--device-debug","option_short_name":"-G","description":"Generate debug information for device code.\nIf --dopt is not specified, then this option turns off all optimizations on device code. It is not intended for profiling; use --generate-line-info instead for profiling."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--extensible-whole-program","option_short_name":"-ewp","description":"Generate extensible whole program device code, which allows some calls to not be resolved until linking with libcudadevrt."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--no-compress","option_short_name":"-no-compress","description":"Do not compress device code in fatbinary."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--generate-line-info","option_short_name":"-lineinfo","description":"Generate line-number information for device code."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--optimization-info kind,...","option_short_name":"-opt-info","description":"Provide optimization reports for the specified kind of optimization.\nThe following tags are supported:\ninline"}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--optimize level","option_short_name":"-O","description":"Specify optimization level for host code."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--dopt kind","option_short_name":"-dopt","description":"Enable device code optimization. When specified along with -G, enables limited debug information generation for optimized device code (currently, only line number information). When -G is not specified, -dopt=on is implicit.\nAllowed Values"}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--dlink-time-opt","option_short_name":"-dlto","description":"Perform link-time optimization of device code. The option ‘-lto’ is also an alias to ‘-dlto’. Link-time optimization must be specified at both compile and link time; at compile time it stores high-level intermediate code, then at link time it links together and optimizes the intermediate code. If that intermediate is not found at link time then nothing happens. Intermediate code is also stored at compile time with the --gpu-code='lto_NN' target. The options -dlto -arch=sm_NN will add a lto_NN target; if you want to only add a lto_NN target and not the compute_NN that -arch=sm_NN usually generates, use -arch=lto_NN."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--gen-opt-lto","option_short_name":"-gen-opt-lto","description":"Run the optimizer passes before generating the LTO IR."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--split-compile number","option_short_name":"-split-compile","description":"[Experimental] Perform compiler optimizations in parallel.\nSplit compilation attempts to reduce compile time by enabling the compiler to run certain optimization passes concurrently. It does this by splitting the device code into smaller translation units, each containing one or more device functions, and running optimization passes on each unit concurrently across multiple threads. It will then link back the split units prior to code generation.\nThe option accepts a numerical value that specifies the maximum number of threads the compiler can use. One can also allow the compiler to use the maximum threads available on the system by setting --split-compile=0. Setting --split-compile=1 will cause this option to be ignored.\nThis option can work in conjunction with device Link Time Optimization (-dlto) as well as --threads."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--ftemplate-backtrace-limit limit","option_short_name":"-ftemplate-backtrace-limit","description":"Set the maximum number of template instantiation notes for a single warning or error to limit.\nA value of 0 is allowed, and indicates that no limit should be enforced. This value is also passed to the host compiler if it provides an equivalent flag."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--ftemplate-depth limit","option_short_name":"-ftemplate-depth","description":"Set the maximum instantiation depth for template classes to limit.\nThis value is also passed to the host compiler if it provides an equivalent flag."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--no-exceptions","option_short_name":"-noeh","description":"Disable exception handling for host code.\nDisable exception handling for host code, by passing “-EHs-c-” (for cl.exe) and “–fno-exceptions” (for other host compilers) during host compiler invocation. These flags are added to the host compiler invocation before any flags passed directly to the host compiler with “-Xcompiler”\nDefault (on Windows)\nExample (on Windows)"}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--shared","option_short_name":"-shared","description":"Generate a shared library during linking.\nUse option --linker-options when other linker options are required for more control."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--x","option_short_name":"-x","description":"Explicitly specify the language for the input files, rather than letting the compiler choose a default based on the file name suffix.\nAllowed Values\nDefault\nThe language of the source code is determined based on the file name suffix."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--std","option_short_name":"-std","description":"Select a particular C++ dialect.\nAllowed Values\nDefault\nThe default C++ dialect depends on the host compiler. nvcc matches the default C++ dialect that the host compiler uses."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--no-host-device-initializer-list","option_short_name":"-nohdinitlist","description":"Do not consider member functions of std::initializer_list as __host__ __device__ functions implicitly."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--expt-relaxed-constexpr","option_short_name":"-expt-relaxed-constexpr","description":"Experimental flag: Allow host code to invoke ``__device__ constexpr`` functions, and device code to invoke ``__host__ constexpr`` functions.\nNote that the behavior of this flag may change in future compiler releases."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--extended-lambda","option_short_name":"-extended-lambda","description":"Allow __host__, __device__ annotations in lambda declarations."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--expt-extended-lambda","option_short_name":"-expt-extended-lambda","description":"Alias for --extended-lambda."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--machine","option_short_name":"-m","description":"Specify 64-bit architecture.\nAllowed Values\nDefault\nThis option is set based on the host platform on which nvcc is executed."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--m64","option_short_name":"-m64","description":"Alias for --machine=64"}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--host-linker-script","option_short_name":"-hls","description":"Use the host linker script (GNU\/Linux only) to enable support for certain CUDA specific requirements, while building executable files or shared libraries.\nAllowed Values\nuse-lcs\ngen-lcs\nA linker script may already be in used and passed to the host linker using the host linker option --script (or -T), then the generated host linker script must augment the existing linker script. In such cases, the option -aug-hls must be used to generate linker script that contains only the augmentation parts. Otherwise, the host linker behaviour is undefined.\nA host linker option, such as -z with a non-default argument, that can modify the default linker script internally, is incompatible with this option and the behavior of any such usage is undefined.\nDefault Value\nuse-lcs is used as the default type."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--augment-host-linker-script","option_short_name":"-aug-hls","description":"Enables generation of host linker script that augments an existing host linker script (GNU\/Linux only). See option --host-linker-script for more details."}
{"group":"Options for Specifying Behavior of Compiler\/Linker","option_name":"--host-relocatable-link","option_short_name":"-r","description":"When used in combination with -hls=gen-lcs, controls the behaviour of -hls=gen-lcs and sets it to generate host linker script that can be used in host relocatable link (ld -r linkage). See option -hls=gen-lcs for more information.\nThis option currently is effective only when used with -hls=gen-lcs; in all other cases, this option is ignored currently."}
{"group":"Options for Passing Specific Phase Options","option_name":"--compiler-options options,...","option_short_name":"-Xcompiler","description":"Specify options directly to the compiler\/preprocessor."}
{"group":"Options for Passing Specific Phase Options","option_name":"--linker-options options,...","option_short_name":"-Xlinker","description":"Specify options directly to the host linker."}
{"group":"Options for Passing Specific Phase Options","option_name":"--archive-options options,...","option_short_name":"-Xarchive","description":"Specify options directly to the library manager."}
{"group":"Options for Passing Specific Phase Options","option_name":"--ptxas-options options,...","option_short_name":"-Xptxas","description":"Specify options directly to ptxas, the PTX optimizing assembler."}
{"group":"Options for Passing Specific Phase Options","option_name":"--nvlink-options options,...","option_short_name":"-Xnvlink","description":"Specify options directly to nvlink, the device linker."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--forward-unknown-to-host-compiler","option_short_name":"-forward-unknown-to-host-compiler","description":"Forward unknown options to the host compiler. An ‘unknown option’ is a command line argument that starts with - followed by another character, and is not a recognized nvcc flag or an argument for a recognized nvcc flag.\nIf the unknown option is followed by a separate command line argument, the argument will not be forwarded, unless it begins with the - character.\nFor example:"}
{"group":"Options for Guiding the Compiler Driver","option_name":"--forward-unknown-to-host-linker","option_short_name":"-forward-unknown-to-host-linker","description":"Forward unknown options to the host linker. An ‘unknown option’ is a command line argument that starts with - followed by another character, and is not a recognized nvcc flag or an argument for a recognized nvcc flag.\nIf the unknown option is followed by a separate command line argument, the argument will not be forwarded, unless it begins with the - character.\nFor example:"}
{"group":"Options for Guiding the Compiler Driver","option_name":"--dont-use-profile","option_short_name":"-noprof","description":"Do not use configurations from the nvcc.profile file for compilation."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--threads number","option_short_name":"-t","description":"Specify the maximum number of threads to be used to execute the compilation steps in parallel.\nThis option can be used to improve the compilation speed when compiling for multiple architectures. The compiler creates number threads to execute the compilation steps in parallel. If number is 1, this option is ignored. If number is 0, the number of threads used is the number of CPUs on the machine."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--dryrun","option_short_name":"-dryrun","description":"List the compilation sub-commands without executing them."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--verbose","option_short_name":"-v","description":"List the compilation sub-commands while executing them."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--keep","option_short_name":"-keep","description":"Keep all intermediate files that are generated during internal compilation steps."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--keep-dir directory","option_short_name":"-keep-dir","description":"Keep all intermediate files that are generated during internal compilation steps in this directory."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--save-temps","option_short_name":"-save-temps","description":"This option is an alias of --keep."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--clean-targets","option_short_name":"-clean","description":"Delete all the non-temporary files that the same nvcc command would generate without this option.\nThis option reverses the behavior of nvcc. When specified, none of the compilation phases will be executed. Instead, all of the non-temporary files that nvcc would otherwise create will be deleted."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--run-args arguments,...","option_short_name":"-run-args","description":"Specify command line arguments for the executable when used in conjunction with --run."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--use-local-env","option_short_name":"-use-local-env","description":"Skip MSVC environment initialization.\nBy default nvcc assumes that the MSVC environment needs to be initialized. This is done by executing the appropriate command file available for the MSVC installation detected or specified. Initializing the environment for each nvcc invocation can add noticeable overheads. If the environment used to invoke nvcc has already been configured, this option can be used to skip this step."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--input-drive-prefix prefix","option_short_name":"-idp","description":"Specify the input drive prefix.\nOn Windows, all command line arguments that refer to file names must be converted to the Windows native format before they are passed to pure Windows executables. This option specifies how the current development environment represents absolute paths. Use \/cygwin\/ as prefix for Cygwin build environments and \/ as prefix for MinGW."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--dependency-drive-prefix prefix","option_short_name":"-ddp","description":"Specify the dependency drive prefix.\nOn Windows, when generating dependency files (see --generate-dependencies), all file names must be converted appropriately for the instance of make that is used. Some instances of make have trouble with the colon in absolute paths in the native Windows format, which depends on the environment in which the make instance has been compiled. Use \/cygwin\/ as prefix for a Cygwin make, and \/ as prefix for MinGW. Or leave these file names in the native Windows format by specifying nothing."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--drive-prefix prefix","option_short_name":"-dp","description":"Specify the drive prefix.\nThis option specifies prefix as both --input-drive-prefix and --dependency-drive-prefix."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--dependency-target-name target","option_short_name":"-MT","description":"Specify the target name of the generated rule when generating a dependency file (see --generate-dependencies)."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--no-align-double","option_short_name":"-MT","description":"Specify that -malign-double should not be passed as a compiler argument on 32-bit platforms.\nWARNING: this makes the ABI incompatible with the CUDA’s kernel ABI for certain 64-bit types."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--no-device-link","option_short_name":"-nodlink","description":"Skip the device link step when linking object files."}
{"group":"Options for Guiding the Compiler Driver","option_name":"--allow-unsupported-compiler","option_short_name":"-allow-unsupported-compiler","description":"Disable nvcc check for supported host compiler versions.\nUsing an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk. This option has no effect on MacOS."}
{"group":"Options for Steering CUDA Compilation","option_name":"--default-stream","option_short_name":"-default-stream","description":"Specify the stream that CUDA commands from the compiled program will be sent to by default.\nAllowed Values\nlegacy\nper-thread\nnull\nDefault\nlegacy is used as the default stream."}
{"group":"Options for Steering GPU Code Generation","option_name":"--gpu-architecture","option_short_name":"-arch","description":"Specify the name of the class of NVIDIA virtual GPU architecture for which the CUDA input files must be compiled.\nWith the exception as described for the shorthand below, the architecture specified with this option must be a virtual architecture (such as compute_50). Normally, this option alone does not trigger assembly of the generated PTX for a real architecture (that is the role of nvcc option --gpu-code, see below); rather, its purpose is to control preprocessing and compilation of the input to PTX.\nFor convenience, in case of simple nvcc compilations, the following shorthand is supported. If no value for option --gpu-code is specified, then the value of this option defaults to the value of --gpu-architecture. In this situation, as the only exception to the description above, the value specified for --gpu-architecture may be a real architecture (such as a sm_50), in which case nvcc uses the specified real architecture and its closest virtual architecture as the effective architecture values. For example, nvcc --gpu-architecture=sm_50 is equivalent to nvcc --gpu-architecture=compute_50                                        --gpu-code=sm_50,compute_50.\nWhen -arch=native is specified, nvcc detects the visible GPUs on the system and generates codes for them, no PTX program will be generated for this option. It is a warning if there are no visible supported GPU on the system, and the default architecture will be used.\nIf -arch=all is specified, nvcc embeds a compiled code image for all supported architectures (sm_*), and a PTX program for the highest major virtual architecture. For -arch=all-major, nvcc embeds a compiled code image for all supported major versions (sm_*0), plus the earliest supported, and adds a PTX program for the highest major virtual architecture.\nSee Virtual Architecture Feature List for the list of supported virtual architectures and GPU Feature List for the list of supported real architectures.\nDefault\nsm_52 is used as the default value; PTX is generated for compute_52 then assembled and optimized for sm_52."}
{"group":"Options for Steering GPU Code Generation","option_name":"--gpu-code code,...","option_short_name":"-code","description":"Specify the name of the NVIDIA GPU to assemble and optimize PTX for.\nnvcc embeds a compiled code image in the resulting executable for each specified code architecture, which is a true binary load image for each real architecture (such as sm_50), and PTX code for the virtual architecture (such as compute_50).\nDuring runtime, such embedded PTX code is dynamically compiled by the CUDA runtime system if no binary load image is found for the current GPU.\nArchitectures specified for options --gpu-architecture and --gpu-code may be virtual as well as real, but the code architectures must be compatible with the arch architecture. When the --gpu-code option is used, the value for the --gpu-architecture option must be a virtual PTX architecture.\nFor instance, --gpu-architecture=compute_60 is not compatible with --gpu-code=sm_52, because the earlier compilation stages will assume the availability of compute_60 features that are not present on sm_52.\nSee Virtual Architecture Feature List for the list of supported virtual architectures and GPU Feature List for the list of supported real architectures."}
{"group":"Options for Steering GPU Code Generation","option_name":"--generate-code specification","option_short_name":"-gencode","description":"This option provides a generalization of the --gpu-architecture=arch --gpu-code=code,... option combination for specifying nvcc behavior with respect to code generation.\nWhere use of the previous options generates code for different real architectures with the PTX for the same virtual architecture, option --generate-code allows multiple PTX generations for different virtual architectures. In fact, --gpu-architecture=arch --gpu-code=code,... is equivalent to --generate-code=arch=arch,code=code,....\n--generate-code options may be repeated for different virtual architectures.\nSee Virtual Architecture Feature List for the list of supported virtual architectures and GPU Feature List for the list of supported real architectures."}
{"group":"Options for Steering GPU Code Generation","option_name":"--relocatable-device-code","option_short_name":"-rdc","description":"Enable or disable the generation of relocatable device code.\nIf disabled, executable device code is generated. Relocatable device code must be linked before it can be executed.\nAllowed Values\nDefault\nThe generation of relocatable device code is disabled."}
{"group":"Options for Steering GPU Code Generation","option_name":"--entries entry,...","option_short_name":"-e","description":"Specify the global entry functions for which code must be generated.\nPTX generated for all entry functions, but only the selected entry functions are assembled. Entry function names for this option must be specified in the mangled name.\nDefault\nnvcc generates code for all entry functions."}
{"group":"Options for Steering GPU Code Generation","option_name":"--maxrregcount amount","option_short_name":"-maxrregcount","description":"Specify the maximum amount of registers that GPU functions can use.\nUntil a function-specific limit, a higher value will generally increase the performance of individual GPU threads that execute this function. However, because thread registers are allocated from a global register pool on each GPU, a higher value of this option will also reduce the maximum thread block size, thereby reducing the amount of thread parallelism. Hence, a good maxrregcount value is the result of a trade-off.\nA value less than the minimum registers required by ABI will be bumped up by the compiler to ABI minimum limit.\nUser program may not be able to make use of all registers as some registers are reserved by compiler.\nDefault\nNo maximum is assumed."}
{"group":"Options for Steering GPU Code Generation","option_name":"--use_fast_math","option_short_name":"-use_fast_math","description":"Make use of fast math library.\n--use_fast_math implies --ftz=true --prec-div=false --prec-sqrt=false --fmad=true."}
{"group":"Options for Steering GPU Code Generation","option_name":"--ftz","option_short_name":"-ftz","description":"Control single-precision denormals support.\n--ftz=true flushes denormal values to zero and --ftz=false preserves denormal values.\n--use_fast_math implies --ftz=true.\nAllowed Values\nDefault\nThis option is set to false and nvcc preserves denormal values."}
{"group":"Options for Steering GPU Code Generation","option_name":"--prec-div","option_short_name":"-prec-div","description":"This option controls single-precision floating-point division and reciprocals.\n--prec-div=true enables the IEEE round-to-nearest mode and --prec-div=false enables the fast approximation mode.\n--use_fast_math implies --prec-div=false.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the IEEE round-to-nearest mode."}
{"group":"Options for Steering GPU Code Generation","option_name":"--prec-sqrt","option_short_name":"-prec-sqrt","description":"This option controls single-precision floating-point square root.\n--prec-sqrt=true enables the IEEE round-to-nearest mode and --prec-sqrt=false enables the fast approximation mode.\n--use_fast_math implies --prec-sqrt=false.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the IEEE round-to-nearest mode."}
{"group":"Options for Steering GPU Code Generation","option_name":"--fmad","option_short_name":"-fmad","description":"This option enables (disables) the contraction of floating-point multiplies and adds\/subtracts into floating-point multiply-add operations (FMAD, FFMA, or DFMA).\n--use_fast_math implies --fmad=true.\nAllowed Values\nDefault\nThis option is set to true and nvcc enables the contraction of floating-point multiplies and adds\/subtracts into floating-point multiply-add operations (FMAD, FFMA, or DFMA)."}
{"group":"Options for Steering GPU Code Generation","option_name":"--extra-device-vectorization","option_short_name":"-extra-device-vectorization","description":"This option enables more aggressive device code vectorization."}
{"group":"Options for Steering GPU Code Generation","option_name":"--compile-as-tools-patch","option_short_name":"-astoolspatch","description":"Compile patch code for CUDA tools. Implies –keep-device-functions.\nMay only be used in conjunction with --ptx or --cubin or --fatbin.\nShall not be used in conjunction with -rdc=true or -ewp.\nSome PTX ISA features may not be usable in this compilation mode."}
{"group":"Options for Steering GPU Code Generation","option_name":"--keep-device-functions","option_short_name":"-keep-device-functions","description":"In whole program compilation mode, preserve user defined external linkage __device__ function definitions in generated PTX."}
{"group":"Options for Steering GPU Code Generation","option_name":"--jump-table-density percentage","option_short_name":"-jtd","description":"Specify the case density percentage in switch statements, and use it as a minimal threshold to determine whether jump table(brx.idx instruction) will be used to implement a switch statement.\nThe percentage ranges from 0 to 101 inclusively.\nDefault\nThis option is set to 101 and nvcc disables jump table generation for switch statements."}
{"group":"Generic Tool Options","option_name":"--disable-warnings","option_short_name":"-w","description":"Inhibit all warning messages."}
{"group":"Generic Tool Options","option_name":"--source-in-ptx","option_short_name":"-src-in-ptx","description":"Interleave source in PTX.\nMay only be used in conjunction with --device-debug or --generate-line-info."}
{"group":"Generic Tool Options","option_name":"--restrict","option_short_name":"-restrict","description":"Assert that all kernel pointer parameters are restrict pointers."}
{"group":"Generic Tool Options","option_name":"--Wno-deprecated-gpu-targets","option_short_name":"-Wno-deprecated-gpu-targets","description":"Suppress warnings about deprecated GPU target architectures."}
{"group":"Generic Tool Options","option_name":"--Wno-deprecated-declarations","option_short_name":"-Wno-deprecated-declarations","description":"Suppress warning on use of a deprecated entity."}
{"group":"Generic Tool Options","option_name":"--Wreorder","option_short_name":"-Wreorder","description":"Generate warnings when member initializers are reordered."}
{"group":"Generic Tool Options","option_name":"--Wdefault-stream-launch","option_short_name":"-Wdefault-stream-launch","description":"Generate warning when an explicit stream argument is not provided in the <<<...>>> kernel launch syntax."}
{"group":"Generic Tool Options","option_name":"--Wmissing-launch-bounds","option_short_name":"-Wmissing-launch-bounds","description":"Generate warning when a __global__ function does not have an explicit __launch_bounds__ annotation."}
{"group":"Generic Tool Options","option_name":"--Wext-lambda-captures-this","option_short_name":"-Wext-lambda-captures-this","description":"Generate warning when an extended lambda implicitly captures this."}
{"group":"Generic Tool Options","option_name":"--Werror kind,...","option_short_name":"-Werror","description":"Make warnings of the specified kinds into errors.\nThe following is the list of warning kinds accepted by this option:\nall-warnings\ncross-execution-space-call\nreorder\ndefault-stream-launch\nmissing-launch-bounds\next-lambda-captures-this\ndeprecated-declarations"}
{"group":"Generic Tool Options","option_name":"--display-error-number","option_short_name":"-err-no","description":"This option displays a diagnostic number for any message generated by the CUDA frontend compiler (note: not the host compiler)."}
{"group":"Generic Tool Options","option_name":"--no-display-error-number","option_short_name":"-no-err-no","description":"This option disables the display of a diagnostic number for any message generated by the CUDA frontend compiler (note: not the host compiler)."}
{"group":"Generic Tool Options","option_name":"--diag-error errNum,...","option_short_name":"-diag-error","description":"Emit error for specified diagnostic message(s) generated by the CUDA frontend compiler (note: does not affect diagnostics generated by the host compiler\/preprocessor)."}
{"group":"Generic Tool Options","option_name":"--diag-suppress errNum,...","option_short_name":"-diag-suppress","description":"Suppress specified diagnostic message(s) generated by the CUDA frontend compiler (note: does not affect diagnostics generated by the host compiler\/preprocessor)."}
{"group":"Generic Tool Options","option_name":"--diag-warn errNum,...","option_short_name":"-diag-warn","description":"Emit warning for specified diagnostic message(s) generated by the CUDA frontend compiler (note: does not affect diagnostics generated by the host compiler\/preprocessor)."}
{"group":"Generic Tool Options","option_name":"--resource-usage","option_short_name":"-res-usage","description":"Show resource usage such as registers and memory of the GPU code.\nThis option implies --nvlink-options=--verbose when --relocatable-device-code=true is set. Otherwise, it implies --ptxas-options=--verbose."}
{"group":"Generic Tool Options","option_name":"--help","option_short_name":"-h","description":"Print help information on this tool."}
{"group":"Generic Tool Options","option_name":"--version","option_short_name":"-V","description":"Print version information on this tool."}
{"group":"Generic Tool Options","option_name":"--options-file file,...","option_short_name":"-optf","description":"Include command line options from specified file."}
{"group":"Generic Tool Options","option_name":"--time filename","option_short_name":"-time","description":"Generate a comma separated value table with the time taken by each compilation phase, and append it at the end of the file given as the option argument. If the file is empty, the column headings are generated in the first row of the table.\nIf the file name is -, the timing data is generated in stdout."}
{"group":"Generic Tool Options","option_name":"--qpp-config config","option_short_name":"-qpp-config","description":"Specify the configuration ([[compiler\/]version,][target]) when using q++ host compiler. The argument will be forwarded to the q++ compiler with its -V flag."}
{"group":"Generic Tool Options","option_name":"--list-gpu-code","option_short_name":"-code-ls","description":"List the gpu architectures (sm_XX) supported by the tool and exit.\nIf both –list-gpu-code and –list-gpu-arch are set, the list is displayed using the same format as the –generate-code value."}
{"group":"Generic Tool Options","option_name":"--list-gpu-arch","option_short_name":"-arch-ls","description":"List the virtual device architectures (compute_XX) supported by the tool and exit.\nIf both –list-gpu-arch and –list-gpu-code are set, the list is displayed using the same format as the –generate-code value."}
{"group":"Ptxas Options","option_name":"--allow-expensive-optimizations","option_short_name":"-allow-expensive-optimizations","description":"Enable (disable) to allow compiler to perform expensive optimizations using maximum available resources (memory and compile-time).\nIf unspecified, default behavior is to enable this feature for optimization level >= O2."}
{"group":"Ptxas Options","option_name":"--compile-only","option_short_name":"-c","description":"Generate relocatable object."}
{"group":"Ptxas Options","option_name":"--def-load-cache","option_short_name":"-dlcm","description":"Default cache modifier on global\/generic load.\nDefault value: ca."}
{"group":"Ptxas Options","option_name":"--def-store-cache","option_short_name":"-dscm","description":"Default cache modifier on global\/generic store."}
{"group":"Ptxas Options","option_name":"--device-debug","option_short_name":"-g","description":"Semantics same as nvcc option --device-debug."}
{"group":"Ptxas Options","option_name":"--disable-optimizer-constants","option_short_name":"-disable-optimizer-consts","description":"Disable use of optimizer constant bank."}
{"group":"Ptxas Options","option_name":"--entry entry,...","option_short_name":"-e","description":"Semantics same as nvcc option --entries."}
{"group":"Ptxas Options","option_name":"--fmad","option_short_name":"-fmad","description":"Semantics same as nvcc option --fmad."}
{"group":"Ptxas Options","option_name":"--force-load-cache","option_short_name":"-flcm","description":"Force specified cache modifier on global\/generic load."}
{"group":"Ptxas Options","option_name":"--force-store-cache","option_short_name":"-fscm","description":"Force specified cache modifier on global\/generic store."}
{"group":"Ptxas Options","option_name":"--generate-line-info","option_short_name":"-lineinfo","description":"Semantics same as nvcc option --generate-line-info."}
{"group":"Ptxas Options","option_name":"--gpu-name gpuname","option_short_name":"-arch","description":"Specify name of NVIDIA GPU to generate code for.\nThis option also takes virtual compute architectures, in which case code generation is suppressed. This can be used for parsing only.\nAllowed values for this option: compute_50, compute_52, compute_53, compute_60, compute_61, compute_62, compute_70, compute_72, compute_75, compute_80, compute_86, compute_87, compute_89,compute_90,lto_50, lto_52, lto_53, lto_60, lto_61, lto_62, lto_70, lto_72, lto_75, lto_80, lto_86, lto_87, lto_89,lto_90, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86, sm_87, sm_89, sm_90\nDefault value: sm_52."}
{"group":"Ptxas Options","option_name":"--help","option_short_name":"-h","description":"Semantics same as nvcc option --help."}
{"group":"Ptxas Options","option_name":"--machine","option_short_name":"-m","description":"Semantics same as nvcc option --machine."}
{"group":"Ptxas Options","option_name":"--maxrregcount amount","option_short_name":"-maxrregcount","description":"Semantics same as nvcc option --maxrregcount."}
{"group":"Ptxas Options","option_name":"--opt-level N","option_short_name":"-O","description":"Specify optimization level.\nDefault value: 3."}
{"group":"Ptxas Options","option_name":"--options-file file,...","option_short_name":"-optf","description":"Semantics same as nvcc option --options-file."}
{"group":"Ptxas Options","option_name":"--position-independent-code","option_short_name":"-pic","description":"Generate position-independent code.\nDefault value: false"}
{"group":"Ptxas Options","option_name":"--preserve-relocs","option_short_name":"-preserve-relocs","description":"This option will make ptxas to generate relocatable references for variables and preserve relocations generated for them in linked executable."}
{"group":"Ptxas Options","option_name":"--sp-bound-check","option_short_name":"-sp-bound-check","description":"Generate stack-pointer bounds-checking code sequence.\nThis option is turned on automatically when --device-debug or --opt-level=0 is specified."}
{"group":"Ptxas Options","option_name":"--suppress-async-bulk-multicast-advisory-warning","option_short_name":"-suppress-async-bulk-multicast-advisory-warning","description":"Suppress the warning on use of .multicast::cluster modifier on cp.async.bulk{.tensor} instruction with sm_90."}
{"group":"Ptxas Options","option_name":"--verbose","option_short_name":"-v","description":"Enable verbose mode which prints code generation statistics."}
{"group":"Ptxas Options","option_name":"--version","option_short_name":"-V","description":"Semantics same as nvcc option --version."}
{"group":"Ptxas Options","option_name":"--warning-as-error","option_short_name":"-Werror","description":"Make all warnings into errors."}
{"group":"Ptxas Options","option_name":"--warn-on-double-precision-use","option_short_name":"-warn-double-usage","description":"Warning if double(s) are used in an instruction."}
{"group":"Ptxas Options","option_name":"--warn-on-local-memory-usage","option_short_name":"-warn-lmem-usage","description":"Warning if local memory is used."}
{"group":"Ptxas Options","option_name":"--warn-on-spills","option_short_name":"-warn-spills","description":"Warning if registers are spilled to local memory."}
{"group":"Ptxas Options","option_name":"--compile-as-tools-patch","option_short_name":"-astoolspatch","description":"Compile patch code for CUDA tools.\nShall not be used in conjunction with -Xptxas -c or -ewp.\nSome PTX ISA features may not be usable in this compilation mode."}
{"group":"Ptxas Options","option_name":"--maxntid","option_short_name":"-maxntid","description":"Specify the maximum number of threads that a thread block can have.\nThis option will be ignored if used along with -maxrregcount option. This option is also ignored\nfor entry functions that have .maxntid directive specified."}
{"group":"Ptxas Options","option_name":"--minnctapersm","option_short_name":"-minnctapersm","description":"Specify the minimum number of CTAs to be mapped to an SM.\nThis option will be ignored if used along with -maxrregcount option. This option is also ignored\nfor entry functions that have .minnctapersm directive specified."}
{"group":"NVLINK Options","option_name":"--disable-warnings","option_short_name":"-w","description":"Inhibit all warning messages."}
{"group":"NVLINK Options","option_name":"--preserve-relocs","option_short_name":"-preserve-relocs","description":"Preserve resolved relocations in linked executable."}
{"group":"NVLINK Options","option_name":"--verbose","option_short_name":"-v","description":"Enable verbose mode which prints code generation statistics."}
{"group":"NVLINK Options","option_name":"--warning-as-error","option_short_name":"-Werror","description":"Make all warnings into errors."}
{"group":"NVLINK Options","option_name":"--suppress-arch-warning","option_short_name":"-suppress-arch-warning","description":"Suppress the warning that otherwise is printed when object does not contain code for target arch."}
{"group":"NVLINK Options","option_name":"--suppress-stack-size-warning","option_short_name":"-suppress-stack-size-warning","description":"Suppress the warning that otherwise is printed when stack size cannot be determined."}
{"group":"NVLINK Options","option_name":"--dump-callgraph","option_short_name":"-dump-callgraph","description":"Dump information about the callgraph and register usage."}
